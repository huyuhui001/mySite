{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Keep Learning Linux \u57fa\u7840 SUSE Linux\u7cfb\u7edf\u7ba1\u7406\u57fa\u7840 Suse Enterprise Storage \u6700\u5c0f\u5316\u5b89\u88c5\u548c\u7ec3\u4e60 Python \u4ece\u96f6\u5230\u4e00 \u57fa\u7840\u77e5\u8bc6 \u6570\u636e\u5206\u6790 Python\u4ee3\u7801\u768490\u4e2a\u6709\u6548\u65b9\u6cd5 Python \u5c0f\u7ec3\u4e60 Build a website with aiohttp and jinja2 framework Communication between server and client via Socket Build a web application via Django framework Spider with requests and BueatifulSoup Spider with Scrapy framework Python Data Analysis","title":"Home"},{"location":"#keep-learning","text":"","title":"Keep Learning"},{"location":"#linux","text":"SUSE Linux\u7cfb\u7edf\u7ba1\u7406\u57fa\u7840 Suse Enterprise Storage \u6700\u5c0f\u5316\u5b89\u88c5\u548c\u7ec3\u4e60","title":"Linux \u57fa\u7840"},{"location":"#python","text":"\u57fa\u7840\u77e5\u8bc6 \u6570\u636e\u5206\u6790 Python\u4ee3\u7801\u768490\u4e2a\u6709\u6548\u65b9\u6cd5","title":"Python \u4ece\u96f6\u5230\u4e00"},{"location":"#python_1","text":"Build a website with aiohttp and jinja2 framework Communication between server and client via Socket Build a web application via Django framework Spider with requests and BueatifulSoup Spider with Scrapy framework Python Data Analysis","title":"Python \u5c0f\u7ec3\u4e60"},{"location":"about/","text":"\u6b66\u529f\u4e0d\u80fd\u5e9f\uff0c\u5b66\u4e60\u4e0d\u80fd\u505c \u867d\u7136\u81ea\u5df1\u6bcf\u5929\u90fd\u975e\u5e38\u5fd9\u788c\uff0c\u4f46\u660e\u663e\u611f\u5230\u77e5\u8bc6\u548c\u6280\u672f\u90fd\u505c\u6ede\u4e86\uff0c\u751a\u81f3\u4e0d\u5982\u4ee5\u524d\u3002\u628a\u81ea\u5df1\u653e\u56de\u5230\u539f\u70b9\uff0c\u91cd\u65b0\u5ba1\u89c6\u81ea\u5df1\uff0c\u653e\u4e0b\u5185\u5fc3\u7684\u6d6e\u8e81\uff0c\u8ba4\u771f\u4fee\u70bc\u5185\u529f\u3002 \u6b66\u529f\u4e0d\u80fd\u5e9f\uff0c\u5b66\u4e60\u4e0d\u80fd\u505c\u3002\u901a\u8fc7\u8fd9\u4e2a\u7f51\u7ad9\uff0c\u628a\u8fd9\u4e24\u5e74\u5b66\u4e60\u7b14\u8bb0\u68b3\u7406\u4e00\u4e0b\uff0c\u4e5f\u65b9\u4fbf\u81ea\u5df1\u8bb0\u5fc6\u548c\u67e5\u627e\u3002\u7f51\u7ad9\u5185\u5bb9\u4ee5\u4e2d\u6587\u4e3a\u4e3b\uff0c\u91cd\u8981\u5730\u65b9\u4e2d\u82f1\u4e92\u8865\u3002\u5982\u679c\u5bf9\u5176\u4ed6\u670b\u53cb\u4e5f\u80fd\u6709\u5e2e\u52a9\uff0c\u6211\u4f1a\u611f\u5230\u975e\u5e38\u9ad8\u5174\u3002 \u6211\u5bf9\u5168\u6808\u7684\u7406\u89e3\u662f\u5c06\u4e00\u4e2a\u60f3\u6cd5\u8f6c\u5316\u4e3a\u4e00\u4e2a\u4ea7\u54c1\u7684\u80fd\u529b\uff0c\u800c\u4e0d\u662f\u5355\u7eaf\u7684\u638c\u63e1\u66f4\u591a\u7684\u6280\u672f\u3002\u6240\u4ee5\uff0c\u57fa\u7840\u5b66\u4e60\u5f88\u91cd\u8981\uff0c\u5b9e\u8df5\u624d\u662f\u68c0\u9a8c\u80fd\u529b\u7684\u552f\u4e00\u6807\u51c6\u3002 \u51e1\u662f\u8fc7\u53bb\uff0c\u7686\u4e3a\u5e8f\u7ae0\uff08What's past is prologue\uff09\u3002 --\u8a79\u59c6\u58eb\uff0c\u5750\u6807\u4e0a\u6d77\uff0c\u559c\u6b22\u9605\u8bfb\u548c\u5065\u8eab\u7684IT\u4eba\u58eb\u3002","title":"About"},{"location":"about/#_1","text":"\u867d\u7136\u81ea\u5df1\u6bcf\u5929\u90fd\u975e\u5e38\u5fd9\u788c\uff0c\u4f46\u660e\u663e\u611f\u5230\u77e5\u8bc6\u548c\u6280\u672f\u90fd\u505c\u6ede\u4e86\uff0c\u751a\u81f3\u4e0d\u5982\u4ee5\u524d\u3002\u628a\u81ea\u5df1\u653e\u56de\u5230\u539f\u70b9\uff0c\u91cd\u65b0\u5ba1\u89c6\u81ea\u5df1\uff0c\u653e\u4e0b\u5185\u5fc3\u7684\u6d6e\u8e81\uff0c\u8ba4\u771f\u4fee\u70bc\u5185\u529f\u3002 \u6b66\u529f\u4e0d\u80fd\u5e9f\uff0c\u5b66\u4e60\u4e0d\u80fd\u505c\u3002\u901a\u8fc7\u8fd9\u4e2a\u7f51\u7ad9\uff0c\u628a\u8fd9\u4e24\u5e74\u5b66\u4e60\u7b14\u8bb0\u68b3\u7406\u4e00\u4e0b\uff0c\u4e5f\u65b9\u4fbf\u81ea\u5df1\u8bb0\u5fc6\u548c\u67e5\u627e\u3002\u7f51\u7ad9\u5185\u5bb9\u4ee5\u4e2d\u6587\u4e3a\u4e3b\uff0c\u91cd\u8981\u5730\u65b9\u4e2d\u82f1\u4e92\u8865\u3002\u5982\u679c\u5bf9\u5176\u4ed6\u670b\u53cb\u4e5f\u80fd\u6709\u5e2e\u52a9\uff0c\u6211\u4f1a\u611f\u5230\u975e\u5e38\u9ad8\u5174\u3002 \u6211\u5bf9\u5168\u6808\u7684\u7406\u89e3\u662f\u5c06\u4e00\u4e2a\u60f3\u6cd5\u8f6c\u5316\u4e3a\u4e00\u4e2a\u4ea7\u54c1\u7684\u80fd\u529b\uff0c\u800c\u4e0d\u662f\u5355\u7eaf\u7684\u638c\u63e1\u66f4\u591a\u7684\u6280\u672f\u3002\u6240\u4ee5\uff0c\u57fa\u7840\u5b66\u4e60\u5f88\u91cd\u8981\uff0c\u5b9e\u8df5\u624d\u662f\u68c0\u9a8c\u80fd\u529b\u7684\u552f\u4e00\u6807\u51c6\u3002 \u51e1\u662f\u8fc7\u53bb\uff0c\u7686\u4e3a\u5e8f\u7ae0\uff08What's past is prologue\uff09\u3002 --\u8a79\u59c6\u58eb\uff0c\u5750\u6807\u4e0a\u6d77\uff0c\u559c\u6b22\u9605\u8bfb\u548c\u5065\u8eab\u7684IT\u4eba\u58eb\u3002","title":"\u6b66\u529f\u4e0d\u80fd\u5e9f\uff0c\u5b66\u4e60\u4e0d\u80fd\u505c"},{"location":"linux/","text":"Linux \u57fa\u7840 SUSE Linux\u7cfb\u7edf\u7ba1\u7406\u57fa\u7840 Suse Enterprise Storage \u6700\u5c0f\u5316\u5b89\u88c5\u548c\u7ec3\u4e60","title":"Linux"},{"location":"linux/#linux","text":"SUSE Linux\u7cfb\u7edf\u7ba1\u7406\u57fa\u7840 Suse Enterprise Storage \u6700\u5c0f\u5316\u5b89\u88c5\u548c\u7ec3\u4e60","title":"Linux \u57fa\u7840"},{"location":"python/","text":"Python \u4ece\u96f6\u5230\u4e00 \u57fa\u7840\u77e5\u8bc6 \u6570\u636e\u5206\u6790 Python\u4ee3\u7801\u768490\u4e2a\u6709\u6548\u65b9\u6cd5 Python \u5c0f\u7ec3\u4e60 Build a website with aiohttp and jinja2 framework Communication between server and client via Socket Build a web application via Django framework Spider with requests and BueatifulSoup Spider with Scrapy framework Python Data Analysis","title":"Python"},{"location":"python/#python","text":"\u57fa\u7840\u77e5\u8bc6 \u6570\u636e\u5206\u6790 Python\u4ee3\u7801\u768490\u4e2a\u6709\u6548\u65b9\u6cd5","title":"Python \u4ece\u96f6\u5230\u4e00"},{"location":"python/#python_1","text":"Build a website with aiohttp and jinja2 framework Communication between server and client via Socket Build a web application via Django framework Spider with requests and BueatifulSoup Spider with Scrapy framework Python Data Analysis","title":"Python \u5c0f\u7ec3\u4e60"},{"location":"linux/Administration/linux_admin/","text":"Linux File System Overview Useful Commands Shell VIM Editor Remote Administration System Initialization Process Management Identity and Security Software Management Network Administration Storage Administration Administration and Monitoring","title":"Linux admin"},{"location":"linux/SES/linux_ses/","text":"SES","title":"Linux ses"},{"location":"python/DataAnalysis/ch01/","text":"NumPy\u57fa\u7840\uff1a\u6570\u7ec4\u4e0e\u5411\u91cf\u5316\u8ba1\u7b97 \u5305\u542b\u4ee5\u4e0b\u5185\u5bb9\uff1a \u591a\u7ef4\u6570\u7ec4\u5bf9\u8c61 \u901a\u7528\u51fd\u6570 \u9762\u5411\u6570\u7ec4\u7f16\u7a0b \u4f7f\u7528\u6570\u7ec4\u8fdb\u884c\u6587\u4ef6\u8f93\u5165\u548c\u8f93\u51fa \u7ebf\u6027\u4ee3\u6570 \u4f2a\u968f\u673a\u6570\u751f\u6210 \u793a\u4f8b\uff1a\u968f\u673a\u6f2b\u6b65 \u591a\u7ef4\u6570\u7ec4\u5bf9\u8c61ndarry \u522b\u540d\u7ea6\u5b9a import numpy as np import pandas as pd import matplotlib.pyplot as plt \u5b89\u88c5matplotlib\u4e2d\u6587\u5b57\u4f53 \u67e5\u770b\u5b57\u4f53\u8def\u5f84 >>> import matplotlib >>> print(matplotlib.matplotlib_fname()) /home/james/.local/lib/python3.6/site-packages/matplotlib/mpl-data/matplotlibrc \u4e0b\u8f7d\u4e2d\u6587\u5b57\u4f53\u3002\u7f51\u5740 https://www.fontpalace.com/font-download/SimHei/,\u5e76\u62f7\u8d1d\u5230\u4e0b\u9762\u7684\u8def\u5f84\u4e0b james@lizard:~/Downloads> cp SimHei.ttf /home/james/.local/lib/python3.6/site-packages/matplotlib/mpl-data/fonts/ttf/ \u67e5\u770bmatplotlib\u7684\u5b57\u4f53\u7f13\u5b58\u76ee\u5f55\u3002 >>> import matplotlib >>> print(matplotlib.get_cachedir()) /home/james/.cache/matplotlib \u5220\u9664\u8fd9\u4e2a\u76ee\u5f55 james@lizard:~> rm -rf /home/james/.cache/matplotlib \u7f16\u8f91matplotlibrc\u6587\u4ef6 /home/james/.local/lib/python3.6/site-packages/matplotlib/mpl-data/matplotlibrc \uff0c\u505a\u5982\u4e0b\u4fee\u6539\u3002 \u5b9a\u4f4d\u8fd9\u4e00\u884c\uff0c\u53bb\u6389\u6ce8\u91ca\u7b26 # font.family: sans-serif \u5b9a\u4f4d\u8fd9\u4e00\u884c\uff0c\u53bb\u6389\u6ce8\u91ca\u7b26 # \uff0c\u5e76\u6dfb\u52a0 SimHei \uff0c\u4fee\u6539\u540e\u4e3a font.serif: SimHei, DejaVu Serif, Bitstream Vera Serif, Computer Modern Roman, New Century Schoolbook, Century Schoolbook L, Utopia, ITC Bookman, Bookman, Nimbus Roman No9 L, Times New Roman, Times, Palatino, Charter, serif \u5b9a\u4f4d\u8fd9\u4e00\u884c\uff0c\u53bb\u6389\u6ce8\u91ca\u7b26 # \uff0c\u5e76\u6dfb\u52a0 SimHei \uff0c\u4fee\u6539\u540e\u4e3a font.sans-serif: SimHei, DejaVu Sans, Bitstream Vera Sans, Computer Modern Sans Serif, Lucida Grande, Verdana, Geneva, Lucid, Arial, Helvetica, Avant Garde, sans-serif \u5b9a\u4f4d\u8fd9\u4e00\u884c\uff0c\u53bb\u6389\u6ce8\u91ca\u7b26 # \uff0c\u5e76\u628a True \u6539\u4e3a False \uff0c\u4fee\u6539\u540e\u4e3a axes.unicode_minus: False \u8bbe\u7f6ematplotlib\u540e\u7aef\u6e32\u67d3\u5668 \u5728\u4f7f\u7528matplotlib\u8f93\u51fa\u56fe\u50cf\u65f6\uff0c\u5982\u679c\u9047\u5230\u65e0\u6cd5\u663e\u793a\u56fe\u50cf\u7684\u9519\u8bef UserWarning: Matplotlib is currently using agg, which is a non-GUI backend, so cannot show the figure\u3002 \uff0c\u53ef\u4ee5\u5c1d\u8bd5\u4e0b\u9762\u7684\u6b65\u9aa4\u89e3\u51b3\u3002 \u5b89\u88c5 python3-tk \u5305 james@lizard:~> sudo zypper in python3-tk \u6216\u8005\u901a\u8fc7 pip \u5b89\u88c5 tk \u5305 james@lizard:~> pip3 install tk Defaulting to user installation because normal site-packages is not writeable Collecting tk Downloading tk-0.1.0-py3-none-any.whl (3.9 kB) Installing collected packages: tk Successfully installed tk-0.1.0 \u4e00\u822c\u5b8c\u6210\u4e0a\u9762\u5b89\u88c5\u540e\uff0c\u7a0b\u5e8f\u5c31\u80fd\u81ea\u52a8\u663e\u793a\u56fe\u4e86\uff0c\u5982\u679c\u8fd8\u662f\u4e0d\u80fd\u663e\u793a\uff0c\u518d\u5c1d\u8bd5\u91cd\u65b0\u5b89\u88c5 matplotlib \u3002 pip3 ininstall matplotlib pip3 install matplotlib ndarray: N-\u7ef4\u6570\u7ec4\u5bf9\u8c61 \u4e00\u4e2andarray\u662f\u4e00\u4e2a\u901a\u7528\u7684\u591a\u7ef4\u540c\u7c7b\u6570\u636e\u5bb9\u5668\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u5b83\u5305\u542b\u7684\u6bcf\u4e00\u4e2a\u5143\u7d20\u5747\u4e3a \u76f8\u540c\u7c7b\u578b \uff1b \u6bcf\u4e00\u4e2a\u6570\u7ec4\u90fd\u6709\u4e00\u4e2ashape\u5c5e\u6027\uff0c\u7528\u6765\u8868\u5f81\u6570\u7ec4\u6bcf\u4e00\u7ef4\u5ea6\u7684\u6570\u91cf\uff1b \u6bcf\u4e00\u4e2a\u6570\u7ec4\u90fd\u6709\u4e00\u4e2adtype\u5c5e\u6027\uff0c\u7528\u6765\u63cf\u8ff0\u6570\u7ec4\u7684\u6570\u636e\u7c7b\u578b\uff1b \u4e0b\u9762\u662f\u6807\u51c6\u6570\u7ec4\u7684\u751f\u6210\u51fd\u6570 array: \u5c06\u8f93\u5165\u6570\u636e\uff08\u5217\u8868\u3001\u5143\u7ec4\u3001\u6570\u7ec4\uff0c\u5176\u4ed6\u5e8f\u5217\uff09\u8f6c\u6362\u4e3andarray\uff0c\u5982\u679c\u4e0d\u663e\u5f0f\u6307\u660e\u6570\u636e\u7c7b\u578b\uff0c\u5c06\u81ea\u52a8\u63a8\u65ad\uff1b\u9ed8\u8ba4\u590d\u5236\u6240\u6709\u7684\u8f93\u5165\u6570\u636e\u3002 asarray\uff1a\u5c06\u8f93\u5165\u8f6c\u6362\u4e3andarray\uff0c\u4f46\u5982\u679c\u8f93\u5165\u5df2\u7ecf\u662fndarray\u5219\u4e0d\u518d\u590d\u5236\u3002 arange\uff1aPython\u5185\u7f6e\u51fd\u6570range\u7684\u6570\u7ec4\u7248\uff0c\u8fd4\u56de\u4e00\u4e2a\u6570\u7ec4\u3002 \u4e0b\u9762\u662f\u7528 Numpy.random() \u4e00\u4e2a\u751f\u6210\u4e00\u4e2a\u968f\u673a\u6570\u7ec4\u7684\u4f8b\u5b50\uff0c\u6ce8\u610f data01 \u7684\u7c7b\u578b\u662f'numpy.ndarray'\u3002\u53ef\u4ee5\u5728ndarray\u7c7b\u578b\u6570\u7ec4\u4e0a\u53e0\u52a0\u4e00\u4e0b\u6570\u5b66\u64cd\u4f5c\u3002 data01 = np.random.randn(2, 3) print(type(data01)) # <class 'numpy.ndarray'> print(data01) # [[ 0.12047302 -1.13499045 -0.39311368] # [ 1.54046881 0.01254838 -3.65090952]] print(data01 * 10) # \u7ed9data\u52a0\u4e0a\u4e00\u4e2a\u6570\u5b66\u64cd\u4f5c, \u6240\u6709\u7684\u5143\u7d20\u90fd\u540c\u65f6\u4e58\u4ee5\u4e8610 # [[ 1.20473022 -11.3499045 -3.93113676] # [ 15.40468806 0.12548383 -36.50909515]] print(data01 + data01) # \u7ed9data\u52a0\u4e0a\u4e00\u4e2a\u6570\u5b66\u64cd\u4f5c, \u6570\u7ec4\u4e2d\u7684\u5bf9\u5e94\u5143\u7d20\u8fdb\u884c\u4e86\u76f8\u52a0 # [[ 0.24094604 -2.2699809 -0.78622735] # [ 3.08093761 0.02509677 -7.30181903]] print(data01.shape) # (2, 3) print(data01.dtype) # float64 \u5f53\u8868\u8fbe\u201c\u6570\u7ec4\u201d\u3001\u201cNumPy\u6570\u7ec4\u201d\u6216\u201cndarray\u201d\u65f6\uff0c\u90fd\u8868\u793a\u540c\u4e00\u4e2a\u5bf9\u8c61\uff1andarray\u5bf9\u8c61\u3002 \u770b\u4e0b\u9762\u7684\u4f8b\u5b50\uff1a data01 \u662f\u4e00\u4e2a\u5217\u8868\uff08list\uff09\u7c7b\u578b\uff0c\u901a\u8fc7 Numpy.array \u8f6c\u6362\u6210Numpy\u7684 ndarray \u7c7b\u578b\u3002 \u5728 np.array \u4e2d\uff0c\u9664\u975e\u663e\u5f0f\u5730\u6307\u5b9a\uff0c\u5982 np.array(data01, dtype=np.int8) \uff0c\u5426\u5219np.array\u4f1a\u81ea\u52a8\u63a8\u65ad\u751f\u6210\u6570\u7ec4\u7684\u6570\u636e\u7c7b\u578b array01.dtype \u3002 \u4f7f\u7528 astype() \u65b9\u6cd5\u663e\u5f0f\u5730\u8f6c\u6362\u6570\u7ec4\u7684\u6570\u636e\u7c7b\u578b\u3002\u4f7f\u7528 astype() \u65f6\u603b\u662f\u751f\u6210\u4e00\u4e2a \u65b0\u7684\u6570\u7ec4 \uff0c\u5373\u4f7f\u4f60\u4f20\u5165\u7684dtype\u4e0e\u4e4b\u524d\u4e00\u6837\u3002 data02 \u662f\u4e00\u4e2a\u5d4c\u5957\u5217\u8868 [[1, 2, 3, 4], [5, 6, 7, 8]] \uff0c\u901a\u8fc7np.array()\u65b9\u6cd5\u8f6c\u6362\u6210\u591a\u7ef4\u6570\u7ec4\uff0c\u524d\u63d0\u662f\u6bcf\u4e2a\u5b50\u5217\u8868\u7684\u957f\u5ea6\u8981\u4e00\u81f4\u3002 data01 = [6, 7.5, 8, 0, 1] print(data01) # [6, 7.5, 8, 0, 1] print(type(data01)) # <class 'list'> array01 = np.array(data01) print(\"\u77e9\u9635\u7c7b\u578b\", type(array01)) # \u77e9\u9635\u7c7b\u578b <class 'numpy.ndarray'> print(\"\u6837\u672c\u77e9\u9635\", array01) # \u6837\u672c\u77e9\u9635 [6. 7.5 8. 0. 1. ] print(\"\u6570\u7ec4\u7ef4\u5ea6\", array01.ndim) # \u6570\u7ec4\u7ef4\u5ea6 1 print(\"\u77e9\u9635\u5f62\u72b6\", array01.shape) # \u77e9\u9635\u5f62\u72b6 (5,) \u4e00\u884c\u4e94\u5217 print(\"\u77e9\u9635\u6570\u636e\u7c7b\u578b\", array01.dtype) # float64 data02 = [[1, 2, 3, 4], [5, 6, 7, 8]] array02 = np.array(data02) print(\"\u6837\u672c\u77e9\u9635\\n\", array02) # \u6837\u672c\u77e9\u9635 # [[1 2 3 4] # [5 6 7 8]] print(\"\u6570\u7ec4\u7ef4\u5ea6\", array02.ndim) # \u6570\u7ec4\u7ef4\u5ea6 2 print(\"\u77e9\u9635\u5f62\u72b6\", array02.shape) # \u77e9\u9635\u5f62\u72b6 (2, 4) print(\"\u77e9\u9635\u6570\u636e\u7c7b\u578b\", array02.dtype) # \u77e9\u9635\u6570\u636e\u7c7b\u578b int64 print(\"\u77e9\u96350\u8f74\u5411\u6c42\u548c\", array02.sum(axis=0)) # \u77e9\u96350\u8f74\u5411\u6c42\u548c [ 6 8 10 12] print(\"\u77e9\u96351\u8f74\u5411\u6c42\u548c\", array02.sum(axis=1)) # \u77e9\u96351\u8f74\u5411\u6c42\u548c [10 26] array03 = array02.astype(np.float64) print(array03.dtype) # float64 print(array03) # [[1. 2. 3. 4.] # [5. 6. 7. 8.]] zeros() \u65b9\u6cd5\u53ef\u4ee5\u4e00\u6b21\u6027\u521b\u9020\u51680\u6570\u7ec4\u3002 print(np.zeros(10)) # [0. 0. 0. 0. 0. 0. 0. 0. 0. 0.] ones() \u65b9\u6cd5\u53ef\u4ee5\u4e00\u6b21\u6027\u521b\u9020\u51681\u6570\u7ec4\u3002\u6ce8\u610f\uff0c\u4f20\u53c2shape\u662f\u4e00\u4e2a\u5143\u7ec4 (3, 5) \u3002 print(np.ones((3, 5))) # [[1. 1. 1. 1. 1.] # [1. 1. 1. 1. 1.] # [1. 1. 1. 1. 1.]] empty() \u65b9\u6cd5\u53ef\u4ee5\u521b\u5efa\u4e00\u4e2a\u6ca1\u6709\u521d\u59cb\u5316\u6570\u503c\u7684\u6570\u7ec4\u3002\u4f46\u662f\uff0c\u4f7f\u7528np.empty\u6765\u751f\u6210\u4e00\u4e2a\u51680\u6570\u7ec4\uff0c\u5e76\u4e0d\u53ef\u9760\uff0c\u6709\u4e9b\u65f6\u5019\u5b83\u53ef\u80fd\u4f1a\u8fd4\u56de\u672a\u521d\u59cb\u5316\u7684\u5783\u573e\u6570\u503c print(np.empty((2, 3, 2))) # [[[2.30116964e-316 0.00000000e+000] # [2.10077583e-312 6.79038654e-313] # [2.22809558e-312 2.14321575e-312]] # # [[2.35541533e-312 6.79038654e-313] # [2.22809558e-312 2.14321575e-312] # [2.46151512e-312 2.41907520e-312]]] NumPy\u8f74 \u4e00\u53e5\u8bdd\u603b\u7ed3\uff1a\u5c06NumPy\u8f74\u89c6\u4e3a\u6211\u4eec\u53ef\u4ee5\u6267\u884c\u64cd\u4f5c\u7684\u65b9\u5411\u3002 \u770b\u4e0b\u9762\u7684\u4f8b\u5b50\uff1a arr_1 = np.array([[1, 1, 1], [1, 1, 1]]) arr_2 = np.array([[9, 9, 9], [9, 9, 9]]) print(arr_1) # [[1 1 1] # [1 1 1]] print(arr_2) # [[9 9 9] # [9 9 9]] \u6cbf0\u8f74\u5408\u5e76\u7684\u601d\u8def\u662f\uff0c\u4e24\u4e2a\u6570\u7ec4\u6cbf0\u8f74\u65b9\u5411\uff0c\u54110\u8f74\u201c\u584c\u7f29\u201d\uff08collapse\uff09\u3002 result = np.concatenate([arr_1, arr_2], axis=0) print(result) # [[1 1 1] # [1 1 1] # [9 9 9] # [9 9 9]] \u6cbf1\u8f74\u5408\u5e76\u7684\u601d\u8def\u662f\uff0c\u4e24\u4e2a\u6570\u7ec4\u6cbf1\u8f74\u65b9\u5411\uff0c\u54111\u8f74\u201c\u584c\u7f29\u201d result = np.concatenate([arr_1, arr_2], axis=1) print(result) # [[1 1 1 9 9 9] # [1 1 1 9 9 9]] \u6211\u4eec\u6765\u770bNumPy\u7684\u4e09\u7ef4\u6570\u7ec4\u3002 array1 = np.arange(36).reshape((3, 3, 4)) print(array1) # [[[ 0 1 2 3] # [ 4 5 6 7] # [ 8 9 10 11]] # # [[12 13 14 15] # [16 17 18 19] # [20 21 22 23]] # # [[24 25 26 27] # [28 29 30 31] # [32 33 34 35]]] \u8fd9\u6837\u770b\u4f1a\u5bb9\u6613\u7406\u89e3\u4e00\u4e9b\uff0c0\u8f74\u67093\u884c\uff0c1\u8f74\u67093\u5217\uff0c2\u8f74\u67094\u4e2a\u5143\u7d20\uff1a [[[ 0 1 2 3], [ 4 5 6 7], [ 8 9 10 11]] [[12 13 14 15], [16 17 18 19], [20 21 22 23]] [[24 25 26 27], [28 29 30 31], [32 33 34 35]]] \u8f93\u51fa\uff1a\u8f740\u7d22\u5f15\u53f7\uff1a0\uff1b\u8f741\u7d22\u5f15\u53f7\uff1a0\uff1b\u8f742\u7d22\u5f15\u53f7\uff1a\u5168\u90e8 print(array1[0, 0, :]) # [0 1 2 3] \u8f93\u51fa\uff1a\u8f740\u7d22\u5f15\u53f7\uff1a0\uff1b\u8f741\u7d22\u5f15\u53f7\uff1a0\uff1b\u8f742\u7d22\u5f15\u53f7\uff1a1 print(array1[0, 0, 1]) # 1 NumPy\u6570\u7ec4\u7b97\u672f \u4e00\u4e2a \u6807\u91cf \u5c31\u662f\u4e00\u4e2a\u5355\u72ec\u7684\u6570\u3002\u4e00\u4e2a\u5411\u91cf\u5c31\u662f\u4e00\u5217\u6570\uff0c\u8fd9\u4e9b\u6570\u662f\u6709\u5e8f\u6392\u5217\u7684\u3002 \u77e9\u9635\u662f\u4e8c\u7ef4\u6570\u7ec4\uff0c\u5176\u4e2d\u7684\u6bcf\u4e00\u4e2a\u5143\u7d20\u88ab\u4e24\u4e2a\u7d22\u5f15\u800c\u975e\u4e00\u4e2a\u6240\u786e\u5b9a\u3002 \u51e0\u4f55\u4ee3\u6570\u4e2d\u5b9a\u4e49\u7684 \u5f20\u91cf \u662f\u57fa\u4e8e\u5411\u91cf\u548c\u77e9\u9635\u7684\u63a8\u5e7f\uff0c\u6211\u4eec\u53ef\u4ee5 \u5c06\u6807\u91cf\u89c6\u4e3a\u96f6\u9636\u5f20\u91cf \uff0c \u77e2\u91cf \u89c6\u4e3a\u4e00\u9636\u5f20\u91cf\uff0c\u90a3\u4e48 \u77e9\u9635\u5c31\u662f\u4e8c\u9636\u5f20\u91cf \u3002 \u5e26\u6709\u6807\u91cf\u8ba1\u7b97\u7684\u7b97\u672f\u64cd\u4f5c\uff0c\u4f1a\u628a\u8ba1\u7b97\u53c2\u6570\u4f20\u9012\u7ed9\u6570\u7ec4\u7684\u6bcf\u4e00\u4e2a\u5143\u7d20\u3002 \u540c\u5c3a\u5bf8\u6570\u7ec4\u4e4b\u95f4\u7684\u6bd4\u8f83 array04 == array04 \uff0c\u4f1a\u4ea7\u751f\u4e00\u4e2a\u5e03\u5c14\u503c\u6570\u7ec4 \u4e0d\u540c\u5c3a\u5bf8\u7684\u6570\u7ec4\u95f4\u7684\u64cd\u4f5c\uff0c\u5c06\u4f1a\u7528\u5230 \u5e7f\u64ad\u7279\u6027\uff08broadcasting\uff09 \u3002 array04 = np.array([ [1, 2, 3, 4, 5], [3, 4, 5, 6, 7], [5, 6, 7, 8, 9] ], dtype=int) print(array04 + array04) # [[ 2 4 6 8 10] # [ 6 8 10 12 14] # [10 12 14 16 18]] print(array04 - array04) # [[0 0 0 0 0] # [0 0 0 0 0] # [0 0 0 0 0]] print(array04 * array04) # [[ 1 4 9 16 25] # [ 9 16 25 36 49] # [25 36 49 64 81]] print(array04 / array04) # [[1. 1. 1. 1. 1.] # [1. 1. 1. 1. 1.] # [1. 1. 1. 1. 1.]] print(1 / array04) # [[1. 0.5 0.33333333 0.25 0.2 ] # [0.33333333 0.25 0.2 0.16666667 0.14285714] # [0.2 0.16666667 0.14285714 0.125 0.11111111]] print(array04 == array04) # [[ True True True True True] # [ True True True True True] # [ True True True True True]] \u57fa\u7840\u7d22\u5f15\u4e0e\u5207\u7247 ndarray\u5bf9\u8c61\u7684\u5185\u5bb9\u53ef\u4ee5\u901a\u8fc7\u7d22\u5f15\uff08indexing\uff09\u6216\u5207\u7247\uff08slicing\uff09\u6765\u8bbf\u95ee\u548c\u4fee\u6539\uff0cndarray\u5bf9\u8c61\u4e2d\u7684\u5143\u7d20\u7d22\u5f15\u4ece\u96f6\u5f00\u59cb\u3002 \u6709\u4e09\u79cd\u53ef\u7528\u7684\u7d22\u5f15\u65b9\u6cd5\uff1a\u5b57\u6bb5\u8bbf\u95ee\uff0c\u57fa\u672c\u5207\u7247\u548c\u9ad8\u7ea7\u7d22\u5f15\u3002 \u7d22\u5f15\uff08indexing\uff09\uff1a\u83b7\u53d6\u6570\u7ec4\u4e2d\u7279\u5b9a\u4f4d\u7f6e\u5143\u7d20\u7684\u8fc7\u7a0b\u3002 \u5207\u7247\uff08slicing\uff09\uff1a\u83b7\u53d6\u6570\u7ec4\u5143\u7d20\u5b50\u96c6\u7684\u8fc7\u7a0b\u3002\u6570\u7ec4\u7684\u5207\u7247\u662f\u539f\u6570\u7ec4\u7684\u89c6\u56fe\u3002\u8fd9\u610f\u5473\u7740\u4efb\u4f55 \u5bf9\u4e8e\u89c6\u56fe\u7684\u4fee\u6539\u90fd\u4f1a\u53cd\u6620\u5230\u539f\u6570\u7ec4\u4e0a \u3002\u6570\u7ec4\u7684\u5207\u7247, \u8fd4\u56de\u7684\u5bf9\u8c61\u662f\u964d\u4f4e\u4e00\u4e2a\u7ef4\u5ea6\u7684\u6570\u7ec4\u3002 \u4e00\u7ef4\u6570\u7ec4\u7684\u7d22\u5f15\u548c\u5207\u7247\uff1a\u4e0ePython\u7684\u5217\u8868\u7c7b\u4f3c\uff1a a[n] \uff1a\u8fd4\u56de\u7b2c n+1 \u4e2a\u5143\u7d20\u3002\u5982\u679c n \u4e3a\u8d1f\u6570\uff0c\u5219\u8fd4\u56de\u5012\u6570\u7b2c n \u4e2a\u5143\u7d20\u3002 a[n:m:k] \uff1a\u8d77\u59cb\u7f16\u53f7 n \uff0c\u7ec8\u6b62\u7f16\u53f7 m \uff0c\u6b65\u957f k \uff0c\u7528\u5192\u53f7\u5206\u5272\u3002 \u9075\u5faa\u5de6\u95ed\u53f3\u5f00\u7684\u539f\u5219 \uff0c\u5373 [n, m) \u3002\u5982\u679c n \u4e3a\u7a7a\uff0c\u5373 n = 0 \uff1b\u5982\u679c m \u4e3a\u7a7a\uff0c\u5373 m = len(a) \u3002 \u591a\u7ef4\u6570\u7ec4\u7684\u7d22\u5f15\u548c\u5207\u7247\uff1a a[n,m,k,...] \uff1a\u6bcf\u4e2a\u7ef4\u5ea6\u4e00\u4e2a\u7d22\u5f15\u503c\uff0c\u6700\u5916\u5c42\u5217\u8868\uff08list\uff09\u4e2d\u7b2c n \u4e2a\u5143\u7d20\uff0c\u6b21\u5916\u5c42\u5217\u8868\uff08list\uff09\u4e2d\u7b2c m \u4e2a\u5143\u7d20\uff0c\u4ee5\u6b64\u7c7b\u63a8\u3002\u5982\u679c n \u4e3a\u8d1f\u6570\uff0c\u5219\u8fd4\u56de\u5012\u6570\u7b2c n \u4e2a\u5143\u7d20\u3002 a[n1:m1:k1,n2:m2:k2,n3:m3:k3,...] \uff1a\u6bcf\u4e2a\u7ef4\u5ea6\u7684\u5207\u7247\u65b9\u6cd5\u4e0e\u4e00\u7ef4\u6570\u7ec4\u76f8\u540c\u3002\u987a\u5e8f\u4e3a\u4ece\u5916\u5230\u5185\u3002 array05 = np.arange(10) print(array05) # [0 1 2 3 4 5 6 7 8 9] # \u4ece\u7d22\u5f15\u503c5\u5f00\u59cb\u5230\u7d22\u5f15\u503c7\u7684\u4e00\u4e2a\u5207\u7247\u3002 print(array05[5:8]) # [5 6 7] array06 = array05[5:8] # \u4f20\u5165\u4e00\u4e2a\u6570\u503c\u7ed9\u6570\u7ec4\u7684\u5207\u7247\uff0c\u6570\u503c\u88ab\u4f20\u9012\u7ed9\u4e86\u6574\u4e2a\u5207\u7247\u3002\u4e0d\u5199\u5207\u7247\u503c\u7684[:]\u5c06\u4f1a\u5f15\u7528\u6570\u7ec4\u7684\u6240\u6709\u503c array06[:] = 12 print(array06) # [12 12 12] # \u5207\u7247\u7684\u4fee\u6539\u4f1a\u53cd\u6620\u5230\u539f\u6570\u7ec4\u4e0a print(array05) # [ 0 1 2 3 4 12 12 12 8 9] # \u8f93\u51fa3\u7ef4\u77e9\u9635\uff0c3\u884c3\u5217\uff0c\u51719\u4e2a\u5143\u7d20\uff0c\u6bcf\u4e2a\u5143\u7d20\u662f\u4e00\u4e2a\u542b3\u4e2a\u5143\u7d20\u7684\u5217\u8868 array07 = np.array([ [[0, 1, 2], [3, 4, 5], [6, 7, 8]], [[9, 0, 1], [2, 3, 4], [5, 6, 7]], [[8, 9, 0], [1, 2, 3], [4, 5, 6]], ]) # \u8f93\u51fa3\u7ef4\u77e9\u9635\uff0c\u663e\u793a\u539f\u77e9\u9635\u7684\u7b2c1\uff0c2\u884c\u76842\uff0c3\u5217\u5143\u7d20\uff0c\u4e0d\u8981\u628a\u7d22\u5f15\u53f7\u548c\u8fd9\u91cc\u7684\u8868\u8ff0\u884c\u53f7\u6df7\u6dc6\u3002 print(array07[:2, 1:]) # [[[3 4 5] [6 7 8]] # [[2 3 4] [5 6 7]]] print(array07[:2, 1:].shape) # (2, 2, 3) # \u964d\u7ef4\uff0c\u8f93\u51fa\u539f\u77e9\u9635\u7684\u7b2c3\u884c print(array07[2]) # [[8 9 0] [1 2 3] [4 5 6]] print(array07[2].shape) # (3, 3) # \u964d\u7ef4\uff0c\u8f93\u51fa\u539f\u77e9\u9635\u7684\u7b2c3\u884c print(array07[2, :]) # [[8 9 0] [1 2 3] [4 5 6]] print(array07[2, :].shape) # (3, 3) # \u964d\u7ef4\uff0c\u8f93\u51fa\u539f\u77e9\u9635\u7684\u7b2c3\u884c\uff08\u53ea\u6709\u4e09\u884c\uff0c\u6240\u4ee5[2:, :]\u7b49\u540c\u4e8e[2, :]\uff09 print(array07[2:, :]) # [[[8 9 0] [1 2 3] [4 5 6]]] print(array07[2:, :].shape) # (1, 3, 3) # \u8f93\u51fa\u539f\u77e9\u9635\u76841\uff0c2\u5217 print(array07[:, :2]) # [[[0 1 2] [3 4 5]] # [[9 0 1] [2 3 4]] # [[8 9 0] [1 2 3]]] print(array07[:, :2].shape) # (3, 2, 3) # \u964d\u7ef4\uff0c\u8f93\u51fa\u539f\u77e9\u9635\u7684\u7b2c2\u884c\u524d2\u4e2a\u5143\u7d20 print(array07[1, :2]) # [[9 0 1] [2 3 4]] print(array07[1, :2].shape) # (2, 3) # \u8f93\u51fa\u539f\u77e9\u9635\u7684\u7b2c2\u884c\u524d2\u4e2a\u5143\u7d20 print(array07[1:2, :2]) # [[[9 0 1] [2 3 4]]] print(array07[1:2, :2].shape) # (1, 2, 3) # \u5c06\u539f\u77e9\u9635\u7684\u7b2c2\u884c\u8d4b\u503c\u7ed9\u53d8\u91cf old_value = array07[2].copy() print(old_value) # [[8 9 0] [1 2 3] [4 5 6]] # \u4fee\u6539\u539f\u77e9\u9635\u7684\u7b2c2\u884c\u7684\u503c\uff0c\u6807\u91cf\u548c\u6570\u7ec4\u90fd\u53ef\u4ee5\u4f20\u9012\u7ed9 array07[2] array07[2] = 25 print(array07) # [[[ 0 1 2] [ 3 4 5] [ 6 7 8]] # [[ 9 0 1] [ 2 3 4] [ 5 6 7]] # [[25 25 25] [25 25 25] [25 25 25]]] # \u5c06\u53d8\u91cf\u503c\u8d4b\u503c\u7ed9\u539f\u77e9\u9635\u7684\u7b2c2\u884c array07[2] = old_value print(array07) # [[[0 1 2] [3 4 5] [6 7 8]] # [[9 0 1] [2 3 4] [5 6 7]] # [[8 9 0] [1 2 3] [4 5 6]]] \u5e03\u5c14\u7d22\u5f15 \u5e03\u5c14\u503c\u7d22\u5f15\uff08Boolean indexing\uff09\u662f\u901a\u8fc7\u4e00\u4e2a\u5e03\u5c14\u6570\u7ec4\u6765\u7d22\u5f15\u76ee\u6807\u6570\u7ec4\uff0c\u4ee5\u6b64\u627e\u51fa\u4e0e\u5e03\u5c14\u6570\u7ec4\u4e2d\u503c\u4e3aTrue\u7684\u5bf9\u5e94\u7684\u76ee\u6807\u6570\u7ec4\u4e2d\u7684\u6570\u636e\u3002\u5e03\u5c14\u6570\u7ec4\u7684\u957f\u5ea6\u5fc5\u987b\u4e0e\u76ee\u6807\u6570\u7ec4\u5bf9\u5e94\u7684\u8f74\u7684\u957f\u5ea6\u4e00\u81f4\u3002 \u4f7f\u7528\u5e03\u5c14\u503c\u7d22\u5f15\uff08Boolean indexing\uff09\u9009\u62e9\u6570\u636e\u65f6\uff0c\u603b\u662f\u751f\u6210\u6570\u636e\u7684\u62f7\u8d1d\uff0c\u5373\u4f7f\u8fd4\u56de\u7684\u6570\u7ec4\u5e76\u6ca1\u6709\u4efb\u4f55\u53d8\u5316\u3002 \u5047\u8bbe\u6211\u4eec\u7684\u6570\u636e\u90fd\u5728\u6570\u7ec4\u4e2d\uff0c\u5e76\u4e14\u6570\u7ec4\u4e2d\u7684\u6570\u636e\u662f\u4e00\u4e9b\u5b58\u5728\u91cd\u590d\u7684\u4eba\u540d\u3002\u7528randn\u51fd\u6570\u751f\u6210\u4e00\u4e9b\u6807\u51c6\u6b63\u6001(standard normal)\u5206\u5e03\u7684\u6570\u636e\u3002\u5047\u8bbe\u6bcf\u4e2a\u4eba\u540d\u90fd\u548cdata\u6570\u7ec4\u4e2d\u7684\u4e00\u884c\u76f8\u5bf9\u5e94\uff0c\u5e76\u4e14\u6211\u4eec\u60f3\u8981\u9009\u4e2d\u6240\u6709\u2019Bob\u2019\u5bf9\u5e94\u7684\u884c\u3002 names = np.array(['Bob', 'Joe', 'Will', 'Bob', 'Will', 'Joe', 'Joe'], dtype='<U4') data = np.random.randn(7, 4) print(names) # ['Bob' 'Joe' 'Will' 'Bob' 'Will' 'Joe' 'Joe'] print(data) # [[ 0.19233985 -0.22530396 -0.68464485 0.03961609] # [ 0.26189893 -0.86823302 0.72726864 0.16122945] # [-0.70564457 0.59179465 0.05572085 -1.79999391] # [-0.21465342 0.09236611 0.02982635 -1.08500576] # [ 1.17260699 -0.53172414 0.16224439 0.60597493] # [ 0.49879926 -0.64871168 0.57597095 0.86329327] # [-0.64902274 -0.92406415 0.40021708 -0.18222566]] print(names == 'Bob') # [ True False False True False False False] # \u4e0a\u8ff0data\u7684\u884c\u7d22\u5f15\u4e3a0\u30013\u7684\u503c\uff08\u5bf9\u5e94\u4e8eBob\u4e3aTrue\uff09 print(data[names == 'Bob']) # [[ 0.19233985 -0.22530396 -0.68464485 0.03961609] # [-0.21465342 0.09236611 0.02982635 -1.08500576]] # \u4e0a\u8ff0data\u7684\u884c\u7d22\u5f15\u4e3a0\u30013\u4e14\u5217\u7d22\u5f15\u4e3a2\u30013\u7684\u503c\uff08\u5bf9\u5e94\u4e8eBob\u4e3aTrue\uff09 print(data[names == 'Bob', 2:]) # [[-0.68464485 0.03961609] [ 0.02982635 -1.08500576]] # \u4e0a\u8ff0data\u7684\u884c\u7d22\u5f15\u4e3a0\u30013\u4e14\u5217\u7d22\u5f15\u4e3a3\u7684\u503c\uff08\u5bf9\u5e94\u4e8eBob\u4e3aTrue\uff09 print(data[names == 'Bob', 3]) # [ 0.03961609 -1.08500576] \u4f7f\u7528 != \u6216\u5728\u6761\u4ef6\u8868\u8fbe\u5f0f\u524d\u4f7f\u7528 \uff5e \u5bf9\u6761\u4ef6\u53d6\u53cd, \u9009\u62e9\u9664\u4e86\u2019Bob\u2019\u4ee5\u5916\u7684\u5176\u4ed6\u6570\u636e\u3002 print(names != 'Bob') print(data[~(names == 'Bob')]) \u9009\u62e9\u4e09\u4e2a\u540d\u5b57\u4e2d\u7684\u4e24\u4e2a\u65f6\uff0c\u53ef\u4ee5\u5bf9\u591a\u4e2a\u5e03\u5c14\u503c\u6761\u4ef6\u8fdb\u884c\u8054\u5408\uff0c\u4f7f\u7528\u6570\u5b66\u64cd\u4f5c\u7b26\u5982 & \uff08and\uff09\u548c | \uff08or\uff09\u3002 mask = (names == 'Bob') | (names == 'Will') print(mask) # [ True False True True True False False] # \u66f4\u65b0\u76f4\u63a5\u4f5c\u7528\u5728`data`\u6570\u636e\u96c6\u4e0a\uff0c\u4e0d\u662f\u5728\u526f\u672c\u4e2d\u4fee\u6539\u3002 data[names == 'Joe'] = 7 print(data) # [[ 1.12584226 -1.09988707 0.49842702 0.76308186] # [ 7. 7. 7. 7. ] # [ 1.54212949 -0.34487439 -1.47775736 -0.25724376] # [ 0.60943059 -0.0164697 0.26681455 -1.70871624] # [ 0.28010374 -0.32339505 -0.95289544 2.76739316] # [ 7. 7. 7. 7. ] # [ 7. 7. 7. 7. ]] \u795e\u5947\u7d22\u5f15\uff08\u82b1\u5f0f\u7d22\u5f15\uff09 \u795e\u5947\u7d22\u5f15\uff08Fancy Indexing\uff09 \uff0c\u4e5f\u7ffb\u8bd1\u4e3a \u82b1\u5f0f\u7d22\u5f15 \u6216 \u590d\u6742\u7d22\u5f15 \uff0c\u7528\u4e8e\u63cf\u8ff0\u4f7f\u7528\u6574\u6570\u6570\u7ec4\u8fdb\u884c\u6570\u636e\u7d22\u5f15\uff0c\u8fd9\u91cc\u7684\u6570\u7ec4\uff0c\u53ef\u4ee5\u662fNumPy\u7684\u6570\u7ec4\uff0c\u4e5f\u53ef\u4ee5\u662fpython\u81ea\u5e26\u7684\u5217\u8868\uff08list\uff09\u3002\u795e\u5947\u7d22\u5f15\u4e0e\u5207\u7247\u4e0d\u540c\uff0c\u5b83\u603b\u662f\u5c06\u6570\u636e \u590d\u5236 \u5230\u4e00\u4e2a\u65b0\u7684\u6570\u7ec4\u4e2d\uff08\u526f\u672c\uff09\u3002 \u7279\u522b\u6ce8\u610f\u7684\u4e00\u70b9\u662f\uff0c\u4f7f\u7528fancy indexing\u8fd4\u56de\u6570\u7ec4\u7684shape\uff0c\u662f\u7d22\u5f15\u6570\u7ec4\u7684shape\uff0c\u800c\u4e0d\u662f\u88ab\u7d22\u5f15\u7684\u539f\u6570\u7ec4\u7684shape\u3002 \u4f7f\u7528fancy indexing\u65f6\u8981\u7279\u522b\u6ce8\u610f\u7684\u4e00\u70b9\u662f\u8fd4\u56de\u6570\u7ec4\u7684shape\u53cd\u6620\u7684\u662f\u7d22\u5f15\u6570\u7ec4\u7684shape\u800c\u4e0d\u662f\u88ab\u7d22\u5f15\u7684\u539f\u6570\u7ec4\u7684shape\u3002 \u5047\u8bbe\u6709\u4e00\u4e2a8\u00d74\u7684\u6570\u7ec4\uff1a array08 = np.empty((8, 4)) # \u53c2\u6570\u662f\u4e2a\u5143\u7ec4(8, 4)\u3002 for i in range(8): array08[i] = i print(array08) # [[0. 0. 0. 0.] # [1. 1. 1. 1.] # [2. 2. 2. 2.] # [3. 3. 3. 3.] # [4. 4. 4. 4.] # [5. 5. 5. 5.] # [6. 6. 6. 6.] # [7. 7. 7. 7.]] # \u8f93\u51fa\u7d22\u5f15\u4e3a2\u548c-2\u7684\u884c\u503c\u3002\u4f20\u9012\u4e00\u4e2a\u5305\u542b\u6307\u660e\u6240\u9700\u987a\u5e8f\u7684\u5217\u8868[2, -2]\uff08\u6216\u6570\u7ec4\uff09\uff0c\u9009\u51fa\u4e00\u4e2a\u7b26\u5408\u7279\u5b9a\u987a\u5e8f\u7684\u5b50\u96c6 print(array08[[2, -2]]) # [[2. 2. 2. 2.] # [6. 6. 6. 6.]] # \u75280~31\u751f\u6210\u4e00\u4e2a8x4\u6570\u7ec4 array09 = np.arange(32).reshape((8, 4)) print(array09) # [[ 0 1 2 3] # [ 4 5 6 7] # [ 8 9 10 11] # [12 13 14 15] # [16 17 18 19] # [20 21 22 23] # [24 25 26 27] # [28 29 30 31]] print(array09[[1, 5, 7, 2]]) # \u6570\u7ec4[1, 5, 7, 2]\u6307\u5b9a\u4e86\u8f93\u51fa\u987a\u5e8f # [[ 4 5 6 7] # [20 21 22 23] # [28 29 30 31] # [ 8 9 10 11]] print(array09[[0, 3, 1, 2]]) # [[ 0 1 2 3] # [12 13 14 15] # [ 4 5 6 7] # [ 8 9 10 11]] print(array09[[1, 5, 7, 2], [0, 3, 1, 2]]) # [ 4 23 29 10] array09[[1, 5, 7, 2]] \u4e2d\u901a\u8fc7\u4e00\u4e2a\u5217\u8868 [1, 5, 7, 2] \u6765\u6307\u5b9a\u8f93\u51fa\u987a\u5e8f\u3002 array09[[1, 5, 7, 2], [0, 3, 1, 2]] \u53ef\u4ee5\u7406\u89e3\u4e3a\u57fa\u4e8e array09[[1, 5, 7, 2]] \u8f93\u51fa\u7684\u77e9\u9635\uff0c\u901a\u8fc7[0, 3, 1, 2]\u6307\u5b9a\u4e86\u7ed3\u679c\u96c6\u7684\u6bcf\u4e00\u884c\u9009\u53d6\u7684\u503c\uff0c\u6bd4\u5982\uff0c3\u4ee3\u8868\u7ed3\u679c\u96c6[20 21 22 23]\u7684\u7b2c\u4e09\u4e2a\u5143\u7d20\uff0823\uff09\u3002\u6216\u8005\uff0c\u53ef\u4ee5\u7406\u89e3\u4e3a\uff0c\u5143\u7d20\uff081, 0\uff09\u3001\uff085, 3\uff09\u3001\uff087, 1\uff09\u548c\uff082, 2\uff09\u88ab\u9009\u4e2d\u3002 \u6570\u7ec4\u8f6c\u7f6e\u548c\u6362\u8f74 \u6570\u7ec4\u8f6c\u7f6e\uff0c\u6709T\u5c5e\u6027\u3001 transpose() \u65b9\u6cd5\u3001 swapaxes() \u65b9\u6cd5\u3002 swapaxes() \u65b9\u6cd5\u9ed8\u8ba4\u662f(0\u8f74, 1\u8f74)\uff0c\u5373 swapaxes(0, 1) \uff0c\u8fd4\u56de\u7684\u662f\u6570\u636e\u7684\u89c6\u56fe\uff0c\u6ca1\u6709\u5bf9\u6570\u636e\u8fdb\u884c\u590d\u5236\u3002 array10 = np.arange(15).reshape((3, 5)) print(array10) # [[ 0 1 2 3 4] # [ 5 6 7 8 9] # [10 11 12 13 14]] # \u77e9\u9635\u8f6c\u7f6e\uff08T\u5c5e\u6027\uff09 print(array10.T) # [[ 0 5 10] # [ 1 6 11] # [ 2 7 12] # [ 3 8 13] # [ 4 9 14]] # \u77e9\u9635\u8f6c\u7f6e\uff08transpose()\u65b9\u6cd5\uff09 print(array10.transpose()) # [[ 0 5 10] # [ 1 6 11] # [ 2 7 12] # [ 3 8 13] # [ 4 9 14]] # \u77e9\u9635\u8f6c\u7f6e\uff08swapaxes()\u65b9\u6cd5\uff09 print(array10.swapaxes(1, 0)) # [[ 0 5 10] # [ 1 6 11] # [ 2 7 12] # [ 3 8 13] # [ 4 9 14]] \u901a\u8fc7T\u5c5e\u6027\uff0c\u8ba1\u7b97\u77e9\u9635\u5185\u79ef\uff08Inner Product\uff09\u3002\u77e9\u9635\u5185\u79ef\u53c2\u7167\u5411\u91cf\u5185\u79ef\u7684\u5b9a\u4e49\u662f\uff1a\u4e24\u4e2a\u5411\u91cf\u5bf9\u5e94\u5206\u91cf\u4e58\u79ef\u4e4b\u548c\u3002 array10 = np.arange(6).reshape((2, 3)) print(array10) # [[0 1 2] # [3 4 5]] print(array10.T) # [[0 3] # [1 4] # [2 5]] print(np.dot(array10, array10.T)) # [[ 5 14] # [14 50]] \u5bf9\u4e8e\u66f4\u9ad8\u7ef4\u5ea6\u7684\u6570\u7ec4\uff0c transpose() \u65b9\u6cd5\u53ef\u4ee5\u63a5\u6536\u5305\u542b\u8f74\u7f16\u53f7\u7684\u5143\u7ec4\uff0c\u7528\u4e8e\u7f6e\u6362\u8f74\u3002 array11 = np.arange(36).reshape((3, 3, 4)) print(array11) # [[[ 0 1 2 3] # [ 4 5 6 7] # [ 8 9 10 11]] # # [[12 13 14 15] # [16 17 18 19] # [20 21 22 23]] # # [[24 25 26 27] # [28 29 30 31] # [32 33 34 35]]] print(array11.transpose((0, 1, 2))) # \u9ed8\u8ba4\u662f(0\u8f74, 1\u8f74, 2\u8f74)\u3002\u6240\u4ee5\u8f93\u51fa\u539f\u77e9\u9635 # [[[ 0 1 2 3] # [ 4 5 6 7] # [ 8 9 10 11]] # # [[12 13 14 15] # [16 17 18 19] # [20 21 22 23]] # # [[24 25 26 27] # [28 29 30 31] # [32 33 34 35]]] print(array11.transpose((1, 0, 2))) # \u8f93\u51fa\u987a\u5e8f\u8c03\u6574\u4e3a\u539f\u77e9\u9635\u7684(1\u8f74, 0\u8f74, 2\u8f74) # [[[ 0 1 2 3] # [12 13 14 15] # [24 25 26 27]] # # [[ 4 5 6 7] # [16 17 18 19] # [28 29 30 31]] # # [[ 8 9 10 11] # [20 21 22 23] # [32 33 34 35]]] print(array11.swapaxes(1, 0)) # \u540c\u4e0atranspose((1, 0, 2)) # [[[ 0 1 2 3] # [12 13 14 15] # [24 25 26 27]] # # [[ 4 5 6 7] # [16 17 18 19] # [28 29 30 31]] # # [[ 8 9 10 11] # [20 21 22 23] # [32 33 34 35]]] print(array11.transpose((2, 1, 0))) # [[[ 0 12 24] # [ 4 16 28] # [ 8 20 32]] # # [[ 1 13 25] # [ 5 17 29] # [ 9 21 33]] # # [[ 2 14 26] # [ 6 18 30] # [10 22 34]] # [[ 3 15 27] # [ 7 19 31] # [11 23 35]]] \u901a\u7528\u51fd\u6570 \u901a\u7528\u51fd\u6570 \u4e5f\u79f0\u4e3aufunc\uff0c\u662f\u4e00\u79cd\u5728ndarray\u6570\u636e\u4e2d\u8fdb\u884c\u9010\u5143\u7d20\u64cd\u4f5c\u7684\u51fd\u6570\uff0c\u5373\u5feb\u901f\u7684\u9010\u5143\u7d20\u6570\u7ec4\u51fd\u6570\u3002 \u67d0\u4e9b\u7b80\u5355\u51fd\u6570\u63a5\u6536\u4e00\u4e2a\u6216\u591a\u4e2a\u6807\u91cf\u6570\u503c\uff0c\u5e76\u4ea7\u751f\u4e00\u4e2a\u6216\u591a\u4e2a\u6807\u91cf\u7ed3\u679c\uff0c\u800c \u901a\u7528\u51fd\u6570\u5c31\u662f\u5bf9\u8fd9\u4e9b\u7b80\u5355\u51fd\u6570\u7684\u5411\u91cf\u5316\u5c01\u88c5 \u3002 \u4e00\u5143\u901a\u7528\u51fd\u6570 abs\u3001fabs\uff1a\u9010\u5143\u7d20\u5730\u8ba1\u7b97\u6574\u6570\u3001\u6d6e\u70b9\u6570\u6216\u590d\u6570\u7684\u7edd\u5bf9\u503c sqrt\uff1a\u8ba1\u7b97\u6bcf\u4e2a\u5143\u7d20\u7684\u5e73\u65b9\u6839\uff08\u4e0earr**0.5\u76f8\u7b49\uff09 square\uff1a\u8ba1\u7b97\u6bcf\u4e2a\u5143\u7d20\u7684\u5e73\u65b9\uff08\u4e0earr**2\u76f8\u7b49\uff09 exp\uff1a\u8ba1\u7b97\u4ee5e\u4e3a\u5e95, \u6570\u7ec4\u5143\u7d20\u4e3a\u5e42\u6b21\u7684\u6307\u6570\u51fd\u6570 \u4e8c\u5143\u901a\u7528\u51fd\u6570 add\uff1a\u5c06\u6570\u7ec4\u7684\u5bf9\u5e94\u5143\u7d20\u76f8\u52a0\u3002 subtract\uff1a\u5728\u7b2c\u4e8c\u4e2a\u6570\u7ec4\u4e2d\uff0c\u5c06\u7b2c\u4e00\u4e2a\u6570\u7ec4\u4e2d\u5305\u542b\u7684\u5143\u7d20\u53bb\u9664\u3002 multiply\uff1a\u5c06\u6570\u7ec4\u7684\u5bf9\u5e94\u5143\u7d20\u76f8\u4e58\u3002 divide\uff0cfloor_divide\uff1a\u9664\u3001\u6216\u6574\u9664\uff08\u653e\u5f03\u4f59\u6570\uff09 power\uff1a\u5c06\u7b2c\u4e8c\u4e2a\u6570\u7ec4\u7684\u5143\u7d20\u4f5c\u4e3a\u7b2c\u4e00\u4e2a\u6570\u7ec4\u5bf9\u5e94\u5143\u7d20\u7684\u5e42\u6b21\u65b9\u3002 maximun\u3001fmax\uff1a\u9010\u4e2a\u5143\u7d20\u8ba1\u7b97\u6700\u5927\u503c\uff0cfmax\u5ffd\u7565NaN\u3002 minimum\u3001fmin\uff1a\u9010\u4e2a\u5143\u7d20\u8ba1\u7b97\u6700\u5c0f\u503c\uff0cfmin\u5ffd\u7565NaN\u3002 mod\uff1a\u6309\u5143\u7d20\u7684\u6c42\u6a21\u8ba1\u7b97\uff08\u5373\u6c42\u9664\u6cd5\u7684\u4f59\u6570\uff09\u3002 copysign\uff1a\u5c06\u7b2c\u4e00\u4e2a\u6570\u7ec4\u7684\u7b26\u53f7\u503c\u6539\u4e3a\u7b2c\u4e8c\u4e2a\u6570\u7ec4\u7684\u7b26\u53f7\u503c\u3002 greater\u3001greater_euqal\u3001less\u3001less_equal\u3001equal\u3001not_euqal\uff1a\u8fdb\u884c\u9010\u4e2a\u5143\u7d20\u7684\u6bd4\u8f83\uff0c\u8fd4\u56de\u5e03\u5c14\u503c\u6570\u7ec4\u3002 logical_and\u3001logical_or\u3001logical_xor\uff1a\u8fdb\u884c\u9010\u4e2a\u5143\u7d20\u7684\u903b\u8f91\u64cd\u4f5c\u3002 \u770b\u4e0b\u4f8b\uff0c\u5bf9\u591a\u7ef4\u6570\u7ec4\u8ba1\u7b97exp\u51fd\u6570\u3002 array12 = np.arange(10).reshape((2, 5)) print(array12) # [[0 1 2 3 4] # [5 6 7 8 9]] print(np.sqrt(array12)) # [[0. 1. 1.41421356 1.73205081 2. ] # [2.23606798 2.44948974 2.64575131 2.82842712 3. ]] print(np.exp(array12)) # [[1.00000000e+00 2.71828183e+00 7.38905610e+00 2.00855369e+01 5.45981500e+01] # [1.48413159e+02 4.03428793e+02 1.09663316e+03 2.98095799e+03 8.10308393e+03]] \u4e0b\u4f8b\u4e2d\uff0c numpy.maximum \u9010\u5143\u7d20\u5730\u5c06\u6570\u7ec4 x \u548c y \u4e2d\u7684\u6700\u5927\u503c\u8ba1\u7b97\u51fa\u6765\u3002 numpy.add \u9010\u5143\u7d20\u5730\u5c06\u6570\u7ec4 x \u548c y \u7684\u548c\u8ba1\u7b97\u51fa\u6765\u3002 array13 = [1, 4, 5, 8, 9] array14 = [2, 3, 6, 7, 10] print(np.maximum(array13, array14)) # [ 2 4 6 8 10] print(np.add(array13, array14)) # [ 3 7 11 15 19] \u4e0b\u4f8b\u4e2d\uff0c modf \u8fd4\u56de\u4e00\u4e2a\u6d6e\u70b9\u503c\u6570\u7ec4\u7684\u5c0f\u6570\u90e8\u5206\u548c\u6574\u6570\u90e8\u5206 array15 = np.random.randn(7) * 5 print(array15) # [-7.54395135 -0.065131 2.71582306 2.2432261 11.02637158 6.73968036 2.96895379] remainder, whole_part = np.modf(array15) print(remainder) # [-0.54395135 -0.065131 0.71582306 0.2432261 0.02637158 0.73968036 0.96895379] print(whole_part) # [-7. -0. 2. 2. 11. 6. 2.] \u9762\u5411\u6570\u7ec4\u7f16\u7a0b \u5229\u7528 \u6570\u7ec4\u8868\u8fbe\u5f0f \u6765\u66ff\u4ee3\u663e\u5f0f\u5faa\u73af\u7684\u65b9\u6cd5\uff0c\u79f0\u4e3a \u5411\u91cf\u5316 \u3002 \u5411\u91cf\u5316\u7684\u6570\u7ec4\u64cd\u4f5c\u4f1a\u6bd4\u7eafPython\u7684\u7b49\u4ef7\u5b9e\u73b0\u5728\u901f\u5ea6\u4e0a\u5feb\u4e00\u5230\u4e24\u4e2a\u6570\u91cf\u7ea7\uff08\u751a\u81f3\u66f4\u591a\uff09\u3002 \u4e0b\u4f8b\u4e2d\uff0cnp.meshgrid\u51fd\u6570\u63a5\u6536\u4e24\u4e2a\u4e00\u7ef4\u6570\u7ec4\uff0c\u5e76\u6839\u636e\u4e24\u4e2a\u6570\u7ec4\u7684\u6240\u6709(x, y)\u5bf9\u751f\u6210\u4e00\u4e2a\u4e8c\u7ef4\u77e9\u9635\u3002 array = np.arange(-5, 5, 1, dtype=int) print(\"\u6837\u672c\u77e9\u9635 \\n\", array) xs, ys = np.meshgrid(array, array) print(\"\u751f\u6210x\u8f74\u54112\u7ef4\u77e9\u9635 \\n\", xs) print(\"\u751f\u6210y\u8f74\u54112\u7ef4\u77e9\u9635 \\n\", ys) # \u6837\u672c\u77e9\u9635 # [-5 -4 -3 -2 -1 0 1 2 3 4] # \u751f\u6210x\u8f74\u54112\u7ef4\u77e9\u9635 # [[-5 -4 -3 -2 -1 0 1 2 3 4] # [-5 -4 -3 -2 -1 0 1 2 3 4] # [-5 -4 -3 -2 -1 0 1 2 3 4] # [-5 -4 -3 -2 -1 0 1 2 3 4] # [-5 -4 -3 -2 -1 0 1 2 3 4] # [-5 -4 -3 -2 -1 0 1 2 3 4] # [-5 -4 -3 -2 -1 0 1 2 3 4] # [-5 -4 -3 -2 -1 0 1 2 3 4] # [-5 -4 -3 -2 -1 0 1 2 3 4] # [-5 -4 -3 -2 -1 0 1 2 3 4]] # \u751f\u6210y\u8f74\u54112\u7ef4\u77e9\u9635 # [[-5 -5 -5 -5 -5 -5 -5 -5 -5 -5] # [-4 -4 -4 -4 -4 -4 -4 -4 -4 -4] # [-3 -3 -3 -3 -3 -3 -3 -3 -3 -3] # [-2 -2 -2 -2 -2 -2 -2 -2 -2 -2] # [-1 -1 -1 -1 -1 -1 -1 -1 -1 -1] # [ 0 0 0 0 0 0 0 0 0 0] # [ 1 1 1 1 1 1 1 1 1 1] # [ 2 2 2 2 2 2 2 2 2 2] # [ 3 3 3 3 3 3 3 3 3 3] # [ 4 4 4 4 4 4 4 4 4 4]] \u4e0b\u9762\u7528\u56fe\u5f62\u5316\u6765\u8f93\u51fa\u4e0a\u4f8b\u4e2d\u751f\u6210\u7684NumPy\u7684\u6570\u7ec4\u3002 import numpy as np import matplotlib.pyplot as plt array = np.arange(-5, 5, 1, dtype=int) xs, ys = np.meshgrid(array, array) z = np.sqrt(xs**2 + ys**2) print(\"\u6837\u672c\u77e9\u9635 \\n\", z) # \u6837\u672c\u77e9\u9635 # [[7.07106781 6.40312424 5.83095189 5.38516481 5.09901951 5. 5.09901951 5.38516481 5.83095189 6.40312424] # [6.40312424 5.65685425 5. 4.47213595 4.12310563 4. 4.12310563 4.47213595 5. 5.65685425] # [5.83095189 5. 4.24264069 3.60555128 3.16227766 3. 3.16227766 3.60555128 4.24264069 5. ] # [5.38516481 4.47213595 3.60555128 2.82842712 2.23606798 2. 2.23606798 2.82842712 3.60555128 4.47213595] # [5.09901951 4.12310563 3.16227766 2.23606798 1.41421356 1. 1.41421356 2.23606798 3.16227766 4.12310563] # [5. 4. 3. 2. 1. 0. 1. 2. 3. 4. ] # [5.09901951 4.12310563 3.16227766 2.23606798 1.41421356 1. 1.41421356 2.23606798 3.16227766 4.12310563] # [5.38516481 4.47213595 3.60555128 2.82842712 2.23606798 2. 2.23606798 2.82842712 3.60555128 4.47213595] # [5.83095189 5. 4.24264069 3.60555128 3.16227766 3. 3.16227766 3.60555128 4.24264069 5. ] # [6.40312424 5.65685425 5. 4.47213595 4.12310563 4. 4.12310563 4.47213595 5. 5.65685425]] # \u4f7f\u7528matplotlib\u6765\u751f\u6210\u8fd9\u4e2a\u4e8c\u7ef4\u6570\u7ec4\u7684\u53ef\u89c6\u5316 plt.imshow(z, cmap=plt.cm.gray) print(plt.colorbar) # <function colorbar at 0x7f9c91193f70> # \u56fe\u50cf\u6807\u9898 plt.title(\"$\\sqrt{x^2 + y^2}$ \u8ba1\u7b97\u503c\u7684\u7f51\u683c\u56fe\") # \u8f93\u51fa\u56fe\u50cf plt.show() \u8f93\u51fa\u56fe\u50cf\u4e3a\uff1a \u901a\u8fc7\u6761\u4ef6\u903b\u8f91\u64cd\u4f5c\u6570\u7ec4 numpy.where \u51fd\u6570\u662f\u4e09\u5143\u8868\u8fbe\u5f0f x if condition else y \u7684\u5411\u91cf\u5316\u7248\u672c\u3002 np.where \u7684\u7b2c\u4e8c\u4e2a\u548c\u7b2c\u4e09\u4e2a\u53c2\u6570\u5e76\u4e0d\u9700\u8981\u662f\u6570\u7ec4\uff0c\u5b83\u4eec\u53ef\u4ee5\u662f\u6807\u91cf\u3002 np.where \u5728\u6570\u636e\u5206\u6790\u4e2d\u7684\u4e00\u4e2a\u5178\u578b\u7528\u6cd5\u662f\u6839\u636e\u4e00\u4e2a\u6570\u7ec4\u6765\u751f\u6210\u4e00\u4e2a\u65b0\u7684\u6570\u7ec4\u3002 \u5047\u8bbe\u6211\u4eec\u6709\u4e00\u4e2a\u5e03\u5c14\u503c\u6570\u7ec4\u548c\u4e24\u4e2a\u6570\u503c\u6570\u7ec4\u3002\u5047\u8bbe cond \u4e2d\u7684\u5143\u7d20\u4e3a True \u65f6\uff0c\u6211\u4eec\u53d6 xarr \u4e2d\u7684\u5bf9\u5e94\u5143\u7d20\u503c\uff0c\u5426\u5219\u53d6 yarr \u4e2d\u7684\u5143\u7d20\u3002 xarray = np.array([1.1, 1.2, 1.3, 1.4, 1.5]) yarray = np.array([2.1, 2.2, 2.3, 2.4, 2.5]) cond = np.array([True, False, True, True, False]) \u901a\u8fc7\u5217\u8868\u63a8\u5bfc\u5f0f\u6765\u5b9e\u73b0\u4e0a\u8ff0\u9700\u6c42\u3002 \u7f3a\u70b9: \u9996\u5148\uff0c\u5982\u679c\u6570\u7ec4\u5f88\u5927\u7684\u8bdd\uff0c\u901f\u5ea6\u4f1a\u5f88\u6162\uff08\u56e0\u4e3a\u6240\u6709\u7684\u5de5\u4f5c\u90fd\u662f\u901a\u8fc7\u89e3\u91ca\u5668\u6765\u89e3\u91caPython\u4ee3\u7801\u5b8c\u6210\uff09\u3002 \u5176\u6b21\uff0c\u5f53\u6570\u7ec4\u662f\u591a\u7ef4\u65f6\uff0c\u5c31\u65e0\u6cd5\u51d1\u6548\u4e86\u3002 # \u901a\u8fc7\u5217\u8868\u63a8\u5bfc\u5f0f\u6765\u5b9e\u73b0 result = [(x if c else y) for x, y, c in zip(xarray, yarray, cond)] print(result) # [1.1, 2.2, 1.3, 1.4, 2.5] \u901a\u8fc7 np.where \u6765\u5b9e\u73b0\u4e0a\u8ff0\u9700\u6c42\u3002 result = np.where(cond, xarray, yarray) print(result) # [1.1 2.2 1.3 1.4 2.5] \u5047\u8bbe\u6709\u4e00\u4e2a\u968f\u673a\u751f\u6210\u7684\u77e9\u9635\u6570\u636e\uff0c\u4e0b\u9762\u4f7f\u7528np.where\u5b9e\u73b0\u66ff\u6362\u3002 array = np.random.randn(4, 4) print(\"\u6837\u672c\u77e9\u9635 \\n\", array) print(\"\u77e9\u9635\u5143\u7d20\u662f\u5426\u5927\u4e8e0 \\n\", array > 0) # \u5c06\u5176\u4e2d\u7684\u6b63\u503c\u90fd\u66ff\u6362\u4e3a2\uff0c\u5c06\u6240\u6709\u7684\u8d1f\u503c\u66ff\u6362\u4e3a-2 result03 = np.where(array > 0, 2, -2) print(\"\u5c06\u5176\u4e2d\u7684\u6b63\u503c\u90fd\u66ff\u6362\u4e3a2\uff0c\u5c06\u6240\u6709\u7684\u8d1f\u503c\u66ff\u6362\u4e3a-2 \\n\", result03) # \u4ec5\u5c06\u5176\u4e2d\u7684\u6b63\u503c\u90fd\u66ff\u6362\u4e3a2 result04 = np.where(array > 0, 2, array) print(\"\u4ec5\u5c06\u5176\u4e2d\u7684\u6b63\u503c\u90fd\u66ff\u6362\u4e3a2 \\n\", result04) # \u6837\u672c\u77e9\u9635 # [[-0.57177422 -0.34917512 2.20268075 1.99959296] # [ 0.67966599 2.67915099 -0.40528454 -0.80339907] # [-0.74406888 2.33802717 -0.74582936 0.59347128] # [ 0.68624473 0.65953112 -0.40871415 -0.68698878]] # \u77e9\u9635\u5143\u7d20\u662f\u5426\u5927\u4e8e0 # [[False False True True] # [ True True False False] # [False True False True] # [ True True False False]] # \u5c06\u5176\u4e2d\u7684\u6b63\u503c\u90fd\u66ff\u6362\u4e3a2\uff0c\u5c06\u6240\u6709\u7684\u8d1f\u503c\u66ff\u6362\u4e3a-2 # [[-2 -2 2 2] # [ 2 2 -2 -2] # [-2 2 -2 2] # [ 2 2 -2 -2]] # \u4ec5\u5c06\u5176\u4e2d\u7684\u6b63\u503c\u90fd\u66ff\u6362\u4e3a2 # [[-0.57177422 -0.34917512 2. 2. ] # [ 2. 2. -0.40528454 -0.80339907] # [-0.74406888 2. -0.74582936 2. ] # [ 2. 2. -0.40871415 -0.68698878]] \u6570\u5b66\u548c\u7edf\u8ba1\u65b9\u6cd5 NumPy\u6709\u4e00\u4e9b\u4e13\u95e8\u7684\u6570\u5b66\u51fd\u6570\uff0c\u7528\u6765\u8ba1\u7b97\u6574\u4e2a\u6570\u7ec4\u7edf\u8ba1\u503c\u6216\u8f74\u5411\u6570\u636e\u7684\u8ba1\u7b97\u3002\u4f8b\u5982\uff0c\u805a\u5408\u51fd\u6570\uff08\u901a\u5e38\u4e5f\u53eb\u7f29\u51cf\u51fd\u6570\uff09\uff0c\u5982sum\u3001mean\u548cstd\uff08\u6807\u51c6\u5dee\uff09\u3002 \u65e2\u53ef\u4ee5\u76f4\u63a5\u8c03\u7528\u6570\u7ec4\u5b9e\u4f8b\u7684\u65b9\u6cd5\uff0c\u4e5f\u53ef\u4ee5\u4f7f\u7528\u9876\u5c42\u7684NumPy\u51fd\u6570\u3002 \u4e3e\u4f8b\uff1a\u751f\u6210\u4e00\u4e9b\u6b63\u6001\u5206\u5e03\u7684\u968f\u673a\u6570\uff0c\u8ba1\u7b97\u90e8\u5206\u805a\u5408\u7edf\u8ba1\u6570\u636e\u3002 \u8fd9\u91cc\u518d\u5bf9\u8f74\u5411\u505a\u4e2a\u89e3\u91ca\uff0c np.random.randn(5, 4) \u4ea7\u751f\u7684\u4e8c\u7ef4\u6570\u7ec4\u662f\uff1a0\u8f74\u54115\u4e2a\u5143\u7d20, 1\u8f74\u54114\u4e2a\u5143\u7d20\u3002 # \u751f\u62102\u8f74\u6570\u7ec4 array = np.random.randn(5, 4) print(\"\u6837\u672c\u77e9\u9635 \\n\", array) print(\"\u77e9\u9635\u5143\u7d20\u5e73\u5747\u503c\", array.mean()) print(\"\u77e9\u9635\u5143\u7d20\u5e73\u5747\u503c\", np.mean(array)) print(\"\u77e9\u9635\u5143\u7d20\u548c\", array.sum()) print(\"\u77e9\u9635\u5143\u7d20\u548c\", np.sum(array)) print(\"0\u8f74\u5411\u7684\u7d2f\u548c\", array.sum(axis=0)) print(\"1\u8f74\u5411\u7684\u7d2f\u548c\", array.sum(axis=1)) print(\"1\u8f74\u5411\u7684\u5e73\u5747\u503c\", array.mean(axis=1)) # \u6837\u672c\u77e9\u9635 shape=(5, 4) 0\u8f74\u54115\u4e2a\u5143\u7d20, 1\u8f74\u54114\u4e2a\u5143\u7d20 # [[ 0.32532911 -0.00177984 -1.59432632 1.58375133] # [ 1.48921763 0.25202456 0.44076148 -1.02277289] # [-0.73490219 0.19197171 -0.22374362 0.52610852] # [-1.03531076 1.0595528 -0.11566501 0.34063544] # [-0.2122241 -0.81348187 1.70989712 -0.00732696]] # \u77e9\u9635\u5143\u7d20\u5e73\u5747\u503c 0.10788580775057008 # \u77e9\u9635\u5143\u7d20\u5e73\u5747\u503c 0.10788580775057008 # \u77e9\u9635\u5143\u7d20\u548c 2.1577161550114017 # \u77e9\u9635\u5143\u7d20\u548c 2.1577161550114017 # 0\u8f74\u5411\u7684\u7d2f\u548c [-0.16789031 0.68828737 0.21692365 1.42039545] # 1\u8f74\u5411\u7684\u7d2f\u548c [ 0.31297429 1.15923078 -0.24056558 0.24921247 0.67686419] # 1\u8f74\u5411\u7684\u5e73\u5747\u503c [ 0.07824357 0.28980769 -0.06014139 0.06230312 0.16921605] \u4e0b\u9762\u5217\u4e3e\u4e86\u5e38\u7528\u7684\u57fa\u7840\u6570\u7ec4\u7edf\u8ba1\u65b9\u6cd5\u3002 array = np.array([ [1, 2, 3, 4, 5], [3, 4, 5, 6, 7], [5, 6, 7, 8, 9] ], dtype=int) print(\"\u6837\u672c\u77e9\u9635 \\n\", array) print(\"\u8f74\u5411\u6c42\u548c\", array.sum()) print(\"\u8f74\u5411\u6c42\u548c\", array.sum(axis=0)) print(\"\u6570\u5b66\u5e73\u5747\", array.mean()) print(\"\u8f74\u5411\u6570\u5b66\u5e73\u5747\", array.mean(axis=0)) print(\"\u6807\u51c6\u5dee\", array.std(), \"\u65b9\u5dee\", array.var()) print(\"\u8f74\u5411\u6807\u51c6\u5dee\", array.std(axis=0), \"\u8f74\u5411\u65b9\u5dee\", array.var(axis=0)) print(\"\u6700\u5c0f\u503c\", array.min(), \"\u6700\u5927\u503c\", array.max()) print(\"\u8f74\u5411\u6700\u5c0f\u503c\", array.min(axis=0), \"\u8f74\u5411\u6700\u5927\u503c\", array.max(axis=0)) print(\"\u6700\u5c0f\u503c\u4f4d\u7f6e\", array.argmin(), \"\u6700\u5927\u503c\u4f4d\u7f6e\", array.argmax()) print(\"\u8f74\u5411\u6700\u5c0f\u503c\u4f4d\u7f6e\", array.argmin(axis=0), \"\u8f74\u5411\u6700\u5927\u503c\u4f4d\u7f6e\", array.argmax(axis=0)) print(\"\u7d2f\u79ef\u548c \\n\", array.cumsum()) print(\"\u8f74\u5411\u7d2f\u79ef\u548c \\n\", array.cumsum(axis=1)) print(\"\u7d2f\u79ef\u4e58\u79ef \\n\", array.cumprod()) print(\"\u8f74\u5411\u7d2f\u79ef\u4e58\u79ef \\n\", array.cumprod(axis=1)) # \u6837\u672c\u77e9\u9635 # [[1 2 3 4 5] # [3 4 5 6 7] # [5 6 7 8 9]] # \u8f74\u5411\u6c42\u548c 75 # \u8f74\u5411\u6c42\u548c [ 9 12 15 18 21] # \u6570\u5b66\u5e73\u5747 5.0 # \u8f74\u5411\u6570\u5b66\u5e73\u5747 [3. 4. 5. 6. 7.] # \u6807\u51c6\u5dee 2.160246899469287 \u65b9\u5dee 4.666666666666667 # \u8f74\u5411\u6807\u51c6\u5dee [1.63299316 1.63299316 1.63299316 1.63299316 1.63299316] \u8f74\u5411\u65b9\u5dee [2.66666667 2.66666667 2.66666667 2.66666667 2.66666667] # \u6700\u5c0f\u503c 1 \u6700\u5927\u503c 9 # \u8f74\u5411\u6700\u5c0f\u503c [1 2 3 4 5] \u8f74\u5411\u6700\u5927\u503c [5 6 7 8 9] # \u6700\u5c0f\u503c\u4f4d\u7f6e 0 \u6700\u5927\u503c\u4f4d\u7f6e 14 # \u8f74\u5411\u6700\u5c0f\u503c\u4f4d\u7f6e [0 0 0 0 0] \u8f74\u5411\u6700\u5927\u503c\u4f4d\u7f6e [2 2 2 2 2] # \u7d2f\u79ef\u548c # [ 1 3 6 10 15 18 22 27 33 40 45 51 58 66 75] # \u8f74\u5411\u7d2f\u79ef\u548c # [[ 1 3 6 10 15] # [ 3 7 12 18 25] # [ 5 11 18 26 35]] # \u7d2f\u79ef\u4e58\u79ef # [ 1 2 6 24 120 360 # 1440 7200 43200 302400 1512000 9072000 # 63504000 508032000 4572288000] # \u8f74\u5411\u7d2f\u79ef\u4e58\u79ef # [[ 1 2 6 24 120] # [ 3 12 60 360 2520] # [ 5 30 210 1680 15120]] \u5e03\u5c14\u503c\u6570\u7ec4(Boolean Array)\u7684\u65b9\u6cd5 \u5e03\u5c14\u503c\u6570\u7ec4\uff0c\u6709\u4e24\u4e2a\u975e\u5e38\u6709\u7528\u7684\u65b9\u6cd5any\u548call\u3002 * any\u68c0\u67e5\u6570\u7ec4\u4e2d\u662f\u5426\u81f3\u5c11\u6709\u4e00\u4e2aTrue\uff0c * all\u68c0\u67e5\u662f\u5426\u6bcf\u4e2a\u503c\u90fd\u662fTrue bools = np.array([False, False, True, False]) print(bools.any()) # True print(bools.all()) # False \u4e0b\u9762\u662f\u4e00\u4e2a\u8fd0\u7528\u5e03\u5c14\u503c\u6570\u7ec4\uff08Boolean Array\uff09\u8fdb\u884c\u6c42\u548c\u7684\u4e00\u4e2a\u4f8b\u5b50\uff0c\u5176\u4e2d (array > 0) \u672c\u8eab\u662f\u4e00\u4e2a\u5e03\u5c14\u578b\u7684\u6570\u7ec4\u3002 array = np.random.randn(100) result = (array > 0).sum() # \u8ba1\u7b97\u6b63\u503c\u7684\u4e2a\u6570 print(result) # 59 \u4e0b\u9762\u662f\u8fd0\u7528\u5e03\u5c14\u503c\u6570\u7ec4\u7684\u751f\u6210\u65b0\u6570\u7ec4\u7684\u4f8b\u5b50\u3002 arr = [[8, 9, 10, 11], [0, 1, 2, 3], [4, 5, 6, 7]] arr = np.array(arr) print(arr.shape) # (3, 4) print(arr) # [[ 8 9 10 11] # [ 0 1 2 3] # [ 4 5 6 7]] idx = [[1, 0, 0, 0], [0, 1, 0, 0], [0, 0, 1, 0]] idx = np.array(idx) print(idx.shape) # (3, 4) print(idx) # [[1 0 0 0] # [0 1 0 0] # [0 0 1 0]] result = arr[idx] # <class 'numpy.ndarray'> print(result.shape) # (3, 4, 4) print(result) # [[[ 0 1 2 3] # [ 8 9 10 11] # [ 8 9 10 11] # [ 8 9 10 11]] # [[ 8 9 10 11] # [ 0 1 2 3] # [ 8 9 10 11] # [ 8 9 10 11]] # [[ 8 9 10 11] # [ 8 9 10 11] # [ 0 1 2 3] # [ 8 9 10 11]]] result = arr[idx == 1] print(result.shape) print(result) # [8 1 6] \u6392\u5e8f \u548cPython\u7684\u5185\u5efa\u5217\u8868\u7c7b\u578b\u76f8\u4f3c\uff0cNumPy\u6570\u7ec4\u53ef\u4ee5\u4f7f\u7528sort\u65b9\u6cd5\u6309\u4f4d\u7f6e\u6392\u5e8f\u3002 \u9876\u5c42\u7684np.sort\u65b9\u6cd5\u8fd4\u56de\u7684\u662f\u5df2\u7ecf\u6392\u5e8f\u597d\u7684\u6570\u7ec4 \u62f7\u8d1d \uff0c\u800c\u4e0d\u662f\u5bf9\u539f\u6570\u7ec4\u6309\u4f4d\u7f6e\u6392\u5e8f\u3002 array = np.random.randn(6) print(\"\u6837\u672c\u77e9\u9635\", array) array.sort() print(\"\u6392\u5e8f\u540e\u77e9\u9635\", array) # \u6837\u672c\u77e9\u9635 [-0.03119521 0.01839556 0.79238537 -2.46622775 0.62522211 0.22430846] # \u6392\u5e8f\u540e\u77e9\u9635 [-2.46622775 -0.03119521 0.01839556 0.22430846 0.62522211 0.79238537] \u591a\u7ef4\u6570\u7ec4\u4e2d\u6839\u636e\u4f20\u9012\u7684axis\u503c\uff0c\u6cbf\u7740\u8f74\u5411\u5bf9\u6bcf\u4e2a\u4e00\u7ef4\u6570\u636e\u6bb5\u8fdb\u884c\u6392\u5e8f\u3002 array = np.random.randn(5, 3) print(\"\u6837\u672c\u77e9\u9635 \\n\", array) array.sort(1) print(\"\u5bf91\u8f74\u6392\u5e8f\u540e\u77e9\u9635 \\n\", array) # \u6837\u672c\u77e9\u9635 # [[-0.88057833 0.30160954 -2.08788148] # [ 0.27969618 0.62923028 -0.58157581] # [-1.87194465 -1.1102104 1.09589605] # [ 0.1467938 -1.01558304 -0.25905165] # [-0.17294279 0.62369511 0.17947059]] # \u5bf91\u8f74\u6392\u5e8f\u540e\u77e9\u9635 # [[-2.08788148 -0.88057833 0.30160954] # [-0.58157581 0.27969618 0.62923028] # [-1.87194465 -1.1102104 1.09589605] # [-1.01558304 -0.25905165 0.1467938 ] # [-0.17294279 0.17947059 0.62369511]] \u552f\u4e00\u503c\u4e0e\u5176\u4ed6\u96c6\u5408\u903b\u8f91 NumPy\u5305\u542b\u4e00\u4e9b\u9488\u5bf9\u4e00\u7ef4 ndarray \u6570\u7ec4\u7684\u57fa\u7840\u96c6\u5408\u64cd\u4f5c\u3002 np.unique(x, y) \u8ba1\u7b97x\u7684\u552f\u4e00\u503c\uff0c\u5e76\u6392\u5e8f\u3002 names = np.array(['Bob', 'Joe', 'Will', 'Bob', 'Will', 'Joe', 'Joe']) result = np.unique(names) # NumPy\u5b9e\u73b0 print(result) # ['Bob' 'Joe' 'Will'] result = sorted(set(names)) # \u7eafPython\u5b9e\u73b0 print(result) # ['Bob' 'Joe' 'Will'] inits = np.array([3, 3, 3, 2, 2, 1, 1, 5, 5]) result = np.unique(inits) print(result) # [1 2 3 5] np.in1d(x, y) \u8ba1\u7b97x\u4e2d\u7684\u5143\u7d20\u662f\u5426\u5305\u542b\u5728y\u4e2d\uff0c\u5e76\u8fd4\u56de\u4e00\u4e2a\u5e03\u5c14\u503c\u6570\u7ec4\u3002 inits = np.array([3, 3, 3, 2, 2, 1, 1, 5, 5]) print(np.in1d(inits, [3, 4, 5])) # [ True True True False False False False True True] np.intersect1d(x, y) \uff0c\u8ba1\u7b97x\u548cy\u7684\u4ea4\u96c6\uff0c\u5e76\u6392\u5e8f\u3002 inits = np.array([3, 3, 3, 2, 2, 1, 1, 5, 5]) print(np.intersect1d(inits, [3, 4, 5])) # [3 5] np.union1d(x, y) \u8ba1\u7b97x\u548cy\u7684\u5e76\u96c6\uff0c\u5e76\u6392\u5e8f\u3002 inits = np.array([3, 3, 3, 2, 2, 1, 1, 5, 5]) print(np.union1d(inits, [3, 4, 5])) # [1 2 3 4 5] np.setdiff1d(x, y) \u5dee\u96c6\uff0c\u5728x\u4e2d\u4f46\u4e0d\u5728y\u4e2d\u7684\u5143\u7d20\u3002 inits = np.array([3, 3, 3, 2, 2, 1, 1, 5, 5]) print(np.setdiff1d(inits, [3, 4, 5])) # [1 2] np.setxor1d(x, y) \u5f02\u6216\u96c6\uff0c\u5728x\u6216\u8005y\u4e2d\uff0c\u4f46\u4e0d\u5c5e\u4e8ex\uff0cy\u4ea4\u96c6\u7684\u5143\u7d20\u3002 inits = np.array([3, 3, 3, 2, 2, 1, 1, 5, 5]) print(np.setxor1d(inits, [3, 4, 5])) # [1 2 4] \u4f7f\u7528\u6570\u7ec4\u8fdb\u884c\u6587\u4ef6\u8f93\u5165\u548c\u8f93\u51fa NumPy\u53ef\u4ee5\u5728\u786c\u76d8\u4e2d\u5c06\u6570\u636e\u4ee5\u6587\u672c\u6216\u4e8c\u8fdb\u5236\u6587\u4ef6\u7684\u5f62\u5f0f\u8fdb\u884c\u5b58\u5165\u786c\u76d8\u6216\u7531\u786c\u76d8\u8f7d\u5165\u3002 \u5f53\u524d\u53ea\u5173\u6ce8NumPy\u7684\u5185\u5efa\u4e8c\u8fdb\u5236\u683c\u5f0f\uff0c\u56e0\u4e3a\u5927\u90e8\u5206\u7528\u6237\u66f4\u503e\u5411\u4e8e\u4f7f\u7528pandas\u6216\u5176\u4ed6\u5de5\u5177\u6765\u8f7d\u5165\u6587\u672c\u6216\u8868\u683c\u578b\u6570\u636e\u3002 np.save \u548c np.load \u662f\u9ad8\u6548\u5b58\u53d6\u786c\u76d8\u6570\u636e\u7684\u4e24\u5927\u5de5\u5177\u51fd\u6570\u3002\u6570\u7ec4\u5728\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u662f\u4ee5 \u672a\u538b\u7f29 \u7684\u683c\u5f0f\u8fdb\u884c\u5b58\u50a8\u7684\uff0c\u540e\u7f00\u540d\u662f.npy\u3002 import numpy as np array1 = np.arange(10) array2 = np.arange(15).reshape(3, 5) array3 = np.arange(30).reshape(3, 2, 5) print(array1) # [0 1 2 3 4 5 6 7 8 9] print(array2) # [[ 0 1 2 3 4] # [ 5 6 7 8 9] # [10 11 12 13 14]] print(array3) # [[[ 0 1 2 3 4] # [ 5 6 7 8 9]] # [[10 11 12 13 14] # [15 16 17 18 19]] # [[20 21 22 23 24] # [25 26 27 28 29]]] # \u67e5\u770b\u5f53\u524d\u8def\u5f84 os.getcwd() # '/opt/myProject/mySite' # \u66f4\u6539\u9ed8\u8ba4\u8def\u5f84 os.chdir('/opt/myProject/mySite/docs/python/datasets/examples') # \u4fdd\u5b58\u5230\u9ed8\u8ba4\u8def\u5f84\u3002npy\u540e\u7f00\u540d\u4f1a\u88ab\u81ea\u52a8\u52a0\u4e0a np.save('some_array', array1) # \u8bfb\u53d6\u6240\u4fdd\u5b58\u7684\u6587\u4ef6 result = np.load('some_array.npy') # \u5bf9\u6bd4\u7ed3\u679c\u4e00\u81f4\u3002 print(result) # [0 1 2 3 4 5 6 7 8 9] # \u5c06\u591a\u4e2a\u6570\u7ec4\u4fdd\u5b58\u5230\u672a\u538b\u7f29\u7684\u5355\u4e2a\u6587\u4ef6\u4e2d\uff0c.npz\u683c\u5f0f np.savez('some_array_archive.npz', a=array2, b=array3) result = np.load('some_array_archive.npz') # reslt\u662f\u4e00\u4e2a\u5b57\u5178\u578b\u7684\u5bf9\u8c61 print(result['b']) # \u8f7d\u5165\u5355\u4e2a\u6570\u7ec4b # [[[ 0 1 2 3 4] # [ 5 6 7 8 9]] # [[10 11 12 13 14] # [15 16 17 18 19]] # [[20 21 22 23 24] # [25 26 27 28 29]]] \u7ebf\u6027\u4ee3\u6570 \u53c2\u8003\u94fe\u63a5\uff1a https://www.numpy.org.cn/reference/routines/linalg.html https://github.com/teadocs/numpy-cn \u5e0c\u814a\u5b57\u6bcd: \u0391 \u03b1 /'\u00e6lf\u0259/ alpha \u0392 \u03b2 /'bi:t\u0259/ beta \u0393 \u03b3 /'g\u00e6m\u0259/ gamma \u0394 \u03b4 /'delt\u0259/ delta \u0395 \u03b5 /'eps\u026al\u0252n/ epsilon \u0396 \u03b6 /'zi:t\u0259/ zeta \u0397 \u03b7 /'i:t\u0259/ eta \u0398 \u03b8 /'\u03b8i:t\u0259/ theta \u0399 \u03b9 /'a\u026a\u0259\u028at\u0259/ iota \u039a \u03ba /'k\u00e6p\u0259/ kappa \u2227 \u03bb /'l\u00e6md\u0259/ lambda \u039c \u03bc /mju:/ mu \u039d \u03bd /nju:/ nu \u039e \u03be /ksi/ xi \u039f \u03bf /\u0259u\u02c8maikr\u0259n/ omicron \u220f \u03c0 /pa\u026a/ pi \u03a1 \u03c1 /r\u0259\u028a/ rho \u2211 \u03c3 /'s\u026a\u0261m\u0259/ sigma \u03a4 \u03c4 /t\u0254:/ tau \u03a5 \u03c5 /\u02c8ips\u026alon/ upsilon \u03a6 \u03c6 /fa\u026a/ phi \u03a7 \u03c7 /ka\u026a/ chi \u03a8 \u03c8 /psa\u026a/ psi \u03a9 \u03c9 /'\u0259\u028am\u026a\u0261\u0259/ omega numpy.linalg \u6a21\u5757\u5305\u542b\u7ebf\u6027\u4ee3\u6570\u7684\u51fd\u6570\u3002\u4f7f\u7528\u8fd9\u4e2a\u6a21\u5757\uff0c\u53ef\u4ee5\u8ba1\u7b97\u9006\u77e9\u9635\u3001\u6c42\u7279\u5f81\u503c\u3001\u89e3\u7ebf\u6027\u65b9\u7a0b\u7ec4\u4ee5\u53ca\u6c42\u89e3\u884c\u5217\u5f0f\u7b49\u3002 import numpy as np from numpy import linalg as LA from numpy import * from numpy.linalg import inv import matplotlib.pyplot as plt diag np.diag \u5c06\u4e00\u4e2a\u65b9\u9635\u7684\u5bf9\u89d2\uff08\u6216\u975e\u5bf9\u89d2\uff09\u5143\u7d20\u4f5c\u4e3a\u4e00\u7ef4\u6570\u7ec4\u8fd4\u56de\uff0c\u6216\u8005\u5c06\u4e00\u7ef4\u6570\u7ec4\u8f6c\u6362\u6210\u4e00\u4e2a\u65b9\u9635\uff0c\u5e76\u4e14\u5728\u975e\u5bf9\u89d2\u7ebf\u4e0a\u6709\u96f6\u70b9\u3002 a1 = np.arange(9, dtype=float).reshape((3, 3)) r1 = np.diag(a1) r2 = np.diag(a1, k=1) r3 = np.diag(a1, k=-1) r4 = np.diag(np.diag(a1)) # \u5bf9\u89d2\u77e9\u9635 print(\"\u6837\u672c\u77e9\u9635 \\n\", a1) print(\"\u77e9\u9635\u5bf9\u89d2\u7ebf\", r1) print(\"\u77e9\u9635\u5bf9\u89d2\u7ebf\u5411\u4e0a\u504f\u79fb\", r2) print(\"\u77e9\u9635\u5bf9\u89d2\u7ebf\u5411\u4e0b\u504f\u79fb\", r3) print(\"\u5bf9\u89d2\u77e9\u9635 \\n\", r4) # \u6837\u672c\u77e9\u9635 # [[0. 1. 2.] # [3. 4. 5.] # [6. 7. 8.]] # \u77e9\u9635\u5bf9\u89d2\u7ebf [0. 4. 8.] # \u77e9\u9635\u5bf9\u89d2\u7ebf\u5411\u4e0a\u504f\u79fb [1. 5.] # \u77e9\u9635\u5bf9\u89d2\u7ebf\u5411\u4e0b\u504f\u79fb [3. 7.] # \u5bf9\u89d2\u77e9\u9635 # [[0. 0. 0.] # [0. 4. 0.] # [0. 0. 8.]] dot np.dot \u5c06\u5411\u91cf\u4e2d\u5bf9\u5e94\u5143\u7d20\u76f8\u4e58\uff0c\u518d\u76f8\u52a0\u6240\u5f97\u3002\u5373\u666e\u901a\u7684\u5411\u91cf\u4e58\u6cd5\u8fd0\u7b97\uff0c\u6216 \u77e9\u9635\u70b9\u4e58 \u3002 a1 = np.dot(3, 4) print(a1) # 12 a2 = np.arange(9, dtype=float).reshape((3, 3)) r2 = np.dot(a2, a2) print(a2) # [[0. 1. 2.] # [3. 4. 5.] # [6. 7. 8.]] print(r2) # [[ 15. 18. 21.] # [ 42. 54. 66.] # [ 69. 90. 111.]] r3 = np.dot([2j, 3j], [2j, 3j]) print(r3) # (-13+0j) trace np.trace \u8ba1\u7b97\u5bf9\u89d2\u5143\u7d20\u548c\u3002 a1 = np.arange(9, dtype=float).reshape((3, 3)) print(\"\u6837\u672c\u77e9\u9635 \\n\", a1) r1 = np.trace(a1) print(\"\u5bf9\u89d2\u7ebf\u5143\u7d20\u6c42\u548c\", r1) a2 = np.arange(24, dtype=float).reshape((2, 3, 4)) r2 = np.trace(a2) print(\"\u6837\u672c\u77e9\u9635 \\n\", a2) print(\"\u5bf9\u89d2\u7ebf\u5143\u7d20\u6c42\u548c\", r2) # \u6837\u672c\u77e9\u9635 # [[0. 1. 2.] # [3. 4. 5.] # [6. 7. 8.]] # \u5bf9\u89d2\u7ebf\u5143\u7d20\u6c42\u548c 12.0 # \u6837\u672c\u77e9\u9635 # [[[ 0. 1. 2. 3.] # [ 4. 5. 6. 7.] # [ 8. 9. 10. 11.]] # # [[12. 13. 14. 15.] # [16. 17. 18. 19.] # [20. 21. 22. 23.]]] # \u5bf9\u89d2\u7ebf\u5143\u7d20\u6c42\u548c [16. 18. 20. 22.] det np.det \u8ba1\u7b97\u77e9\u9635\u7684\u884c\u5217\u5f0f\uff08\u65b9\u9635\uff09\u3002 \u4e8c\u9636\u884c\u5217\u5f0f[[a, b], [c, d]]\u7684\u503c\u662fad - bc \u4e09\u9636\u884c\u5217\u5f0f [[a, b, c], [d, e, f], [g, h, i]]\u7684\u503c\u662f aei + bfd + cdh - ceg - bdi - afh \u4e09\u9636\u884c\u5217\u5f0f\u7684\u6027\u8d28 \u6027\u8d281\uff1a\u884c\u5217\u5f0f\u4e0e\u5b83\u7684\u8f6c\u7f6e\u884c\u5217\u5f0f\u76f8\u7b49\u3002 \u6027\u8d282\uff1a\u4e92\u6362\u884c\u5217\u5f0f\u7684\u4e24\u884c(\u5217)\uff0c\u884c\u5217\u5f0f\u53d8\u53f7\u3002 \u63a8\u8bba\uff1a\u5982\u679c\u884c\u5217\u5f0f\u6709\u4e24\u884c(\u5217)\u5b8c\u5168\u76f8\u540c\uff0c\u5219\u6b64\u884c\u5217\u5f0f\u4e3a\u96f6\u3002 \u6027\u8d283\uff1a\u884c\u5217\u5f0f\u7684\u67d0\u4e00\u884c(\u5217)\u4e2d\u6240\u6709\u7684\u5143\u7d20\u90fd\u4e58\u4ee5\u540c\u4e00\u6570k\uff0c\u7b49\u4e8e\u7528\u6570k\u4e58\u6b64\u884c\u5217\u5f0f\u3002 \u63a8\u8bba\uff1a\u884c\u5217\u5f0f\u4e2d\u67d0\u4e00\u884c(\u5217)\u7684\u6240\u6709\u5143\u7d20\u7684\u516c\u56e0\u5b50\u53ef\u4ee5\u63d0\u5230\u884c\u5217\u5f0f\u7b26\u53f7\u7684\u5916\u9762\u3002 \u6027\u8d284\uff1a\u884c\u5217\u5f0f\u4e2d\u5982\u679c\u6709\u4e24\u884c(\u5217)\u5143\u7d20\u6210\u6bd4\u4f8b\uff0c\u5219\u6b64\u884c\u5217\u5f0f\u7b49\u4e8e\u96f6\u3002 \u6027\u8d285\uff1a\u628a\u884c\u5217\u5f0f\u7684\u67d0\u4e00\u5217(\u884c)\u7684\u5404\u5143\u7d20\u4e58\u4ee5\u540c\u4e00\u6570\u7136\u540e\u52a0\u5230\u53e6\u4e00\u5217(\u884c)\u5bf9\u5e94\u7684\u5143\u7d20\u4e0a\u53bb\uff0c\u884c\u5217\u5f0f\u4e0d\u53d8\u3002 a1 = np.array([[1, 2], [3, 4]]) r1 = np.linalg.det(a1) print(\"\u4e8c\u9636\u65b9\u9635 \\n\", a1) print(\"\u4e8c\u9636\u884c\u5217\u5f0f\u7684\u503c\", r1) # \u4e8c\u9636\u65b9\u9635 # [[1 2] # [3 4]] # \u4e8c\u9636\u884c\u5217\u5f0f\u7684\u503c -2.0000000000000004 # \u5e0c\u814a\u5b57\u6bcd # \u03b1, \u03b2, \u03b3,\u03b4, \u03b5, \u03b6, \u03b7, \u03b8, \u03b9, \u03ba, \u03bb, \u03bc, \u03bd, # \u03be, \u03bf, \u03c0, \u03c1, \u03c2, \u03c3, \u03c4, \u03c5, \u03c6, \u03c7, \u03c8, \u03c9, a2 = np.arange(9).reshape(3, 3) r2 = np.linalg.det(a2) print(\"\u4e09\u9636\u65b9\u9635 \\n\", a2) print(\"\u4e09\u9636\u884c\u5217\u5f0f\u7684\u503c\", r2) # \u4e09\u9636\u65b9\u9635 # [[0 1 2] # [3 4 5] # [6 7 8]] # \u4e09\u9636\u884c\u5217\u5f0f\u7684\u503c 0.0 a3 = np.arange(16).reshape(4, 4) r3 = np.linalg.det(a3) print(\"\u56db\u9636\u65b9\u9635 \\n\", a3) print(\"\u56db\u9636\u884c\u5217\u5f0f\u7684\u503c\", r3) # \u56db\u9636\u65b9\u9635 # [[ 0 1 2 3] # [ 4 5 6 7] # [ 8 9 10 11]# \u5e0c\u814a\u5b57\u6bcd # \u03b1, \u03b2, \u03b3,\u03b4, \u03b5, \u03b6, \u03b7, \u03b8, \u03b9, \u03ba, \u03bb, \u03bc, \u03bd, # \u03be, \u03bf, \u03c0, \u03c1, \u03c2, \u03c3, \u03c4, \u03c5, \u03c6, \u03c7, \u03c8, \u03c9, # [12 13 14 15]] # \u56db\u9636\u884c\u5217\u5f0f\u7684\u503c 0.0 eig np.eig \u8ba1\u7b97\u65b9\u9635\u7684\u7279\u5f81\u503c\u548c\u7279\u5f81\u5411\u91cf\u3002 \u7279\u5f81\u503c\u4e0e\u7279\u5f81\u5411\u91cf\u7684\u5b9a\u4e49\uff1a\u8bbeA\u662fn\u9636\u65b9\u9635\uff0c\u82e5\u6570\u03bb\u548cn\u7ef4\u975e\u96f6\u5217\u5411\u91cfx\uff0c\u4f7f\u5f97Ax = \u03bbx\u6210\u7acb\uff0c\u5219\u79f0\u03bb\u662f\u65b9\u9635A\u7684\u4e00\u4e2a\u7279\u5f81\u503c\uff0cx\u4e3a\u65b9\u9635A\u7684\u5bf9\u5e94\u4e8e\u7279\u5f81\u503c\u03bb\u7684\u4e00\u4e2a\u7279\u5f81\u5411\u91cf\u3002 A\u662f\u65b9\u9635\u3002\uff08\u5bf9\u4e8e\u975e\u65b9\u9635\uff0c\u662f\u6ca1\u6709\u7279\u5f81\u503c\u7684\uff0c\u4f46\u4f1a\u6709\u6761\u4ef6\u6570\u3002\uff09\u7279\u5f81\u5411\u91cfx\u4e3a\u975e\u96f6\u5217\u5411\u91cf\u3002 v_eigenvectors, v_eigenvalues = LA.eig(np.diag((1, 2, 3))) print(\"\u7279\u5f81\u5411\u91cf\", v_eigenvectors) print(\"\u7279\u5f81\u503c \\n\", v_eigenvalues) # \u7279\u5f81\u5411\u91cf [1. 2. 3.] # \u7279\u5f81\u503c # [[1. 0. 0.] # [0. 1. 0.] # [0. 0. 1.]] v_eigenvectors, v_eigenvalues = LA.eig(np.array([[1, -1], [1, 1]])) print(\"\u7279\u5f81\u5411\u91cf\", v_eigenvectors) print(\"\u7279\u5f81\u503c \\n\", v_eigenvalues) # \u7279\u5f81\u5411\u91cf [1.+1.j 1.-1.j] # \u7279\u5f81\u503c # [[0.70710678+0.j 0.70710678-0.j ] # [0. -0.70710678j 0. +0.70710678j]] inv np.inv \u8ba1\u7b97\u65b9\u9635\u7684\u9006\u77e9\u9635\u3002 a1 = np.array([[1, 2], [3, 4]]) r1 = inv(a1) r2 = inv(np.matrix(a1)) print(\"\u539f\u77e9\u9635 \\n\", a1) print(\"\u9006\u77e9\u9635 \\n\", r1) print(\"\u9006\u77e9\u9635 \\n\", r2) # \u539f\u77e9\u9635 # [[1 2] # [3 4]] # \u9006\u77e9\u9635 # [[-2. 1. ] # [ 1.5 -0.5]] # \u9006\u77e9\u9635 # [[-2. 1. ] # [ 1.5 -0.5]] pinv np.pinv \u8ba1\u7b97\u77e9\u9635\u7684Moore-Penrose\u4f2a\u9006(\u6469\u5c14\uff0d\u5f6d\u82e5\u65af\u5e7f\u4e49\u9006)\u3002 \u4e0b\u9762\u7684\u4f8b\u5b50\u68c0\u9a8c a * a+ * a == a \u548c a+ * a * a+ == a+ a = np.random.randn(9, 6) B = np.linalg.pinv(a) r1 = np.allclose(a, np.dot(a, np.dot(B, a))) r2 = np.allclose(B, np.dot(B, np.dot(a, B))) print(a) print(B) print(r1) # True print(r2) # True # a: # [[-2.30316101 -0.63217332 1.24134743 -0.72492307 0.12456801 -0.14192548] # [ 1.37573495 0.07626697 -0.71870843 1.26824984 -0.79485727 -0.24630455] # [ 0.29003175 -1.23931665 -0.50864107 -0.31140718 0.45467649 -2.44973999] # [-0.70748664 -1.2995059 0.85126149 -1.10918804 -2.10042342 0.75942293] # [ 1.91765238 1.23892103 1.58516486 -1.65520154 0.11894439 0.84536298] # [ 1.03220791 0.1715148 0.85595408 0.58569706 1.34066384 -1.5782386 ] # [-0.54432889 -0.0114189 1.55403934 0.89852512 1.15586365 -0.30733805] # [-0.80874673 0.14602121 1.04680044 1.98722514 0.39766383 0.75178788] # [ 0.01664663 0.06243353 -0.50725334 -0.37707204 -1.76701091 -0.33866559]] # B: # [[-0.25055838 0.13963115 0.08990923 0.16280282 0.12997291 0.05088469 -0.01541299 -0.01656133 -0.21731387] # [ 0.22862622 -0.05108109 -0.2639602 -0.47835978 0.11776862 0.09324694 0.00436756 -0.00609393 0.61995597] # [ 0.10422554 0.03985857 0.00198025 0.15139023 0.17165026 0.15697725 0.17360246 0.13150089 0.08378135] # [-0.07021378 0.17665487 -0.04109252 0.0015022 -0.11998477 0.0543575 0.08649033 0.21190785 0.04065729] # [-0.08110336 -0.15274536 0.05601496 -0.07967802 -0.02454705 -0.04152356 0.00071268 -0.05981012 -0.43996066] # [-0.17998537 -0.03160871 -0.12587707 0.16856246 0.00565094 -0.21038026 -0.06060039 0.04322126 -0.42038066]] qr np.qr \u8ba1\u7b97QR\u5206\u89e3\u3002QR\uff08\u6b63\u4ea4\u4e09\u89d2\uff09\u5206\u89e3\u6cd5\u662f\u6c42\u4e00\u822c\u77e9\u9635\u5168\u90e8\u7279\u5f81\u503c\u7684\u6700\u6709\u6548\u5e76\u5e7f\u6cdb\u5e94\u7528\u7684\u65b9\u6cd5\u3002 \u4e00\u822c\u77e9\u9635\u5148\u7ecf\u8fc7\u6b63\u4ea4\u76f8\u4f3c\u53d8\u5316\u6210\u4e3aHessenberg\u77e9\u9635\uff0c\u7136\u540e\u518d\u5e94\u7528QR\u65b9\u6cd5\u6c42\u7279\u5f81\u503c\u548c\u7279\u5f81\u5411\u91cf\u3002QR\u5206\u89e3\u6cd5\u662f\u5c06\u77e9\u9635\u5206\u89e3\u6210\u4e00\u4e2a\u6b63\u89c4\u6b63\u4ea4\u77e9\u9635Q\u4e0e\u4e0a\u4e09\u89d2\u5f62\u77e9\u9635R\uff0c\u6240\u4ee5\u79f0\u4e3aQR\u5206\u89e3\u6cd5\u3002 a = np.arange(9).reshape(3, 3) q, r = np.linalg.qr(a) print(\"\u539f\u77e9\u9635 \\n\", a) print(\"\u6b63\u4ea4\u77e9\u9635 \\n\", q) print(\"\u4e0a\u4e09\u89d2\u77e9\u9635 \\n\", r) # \u539f\u77e9\u9635 # [[0 1 2] # [3 4 5] # [6 7 8]] # \u6b63\u4ea4\u77e9\u9635 # [[ 0. 0.91287093 0.40824829] # [-0.4472136 0.36514837 -0.81649658] # [-0.89442719 -0.18257419 0.40824829]] # \u4e0a\u4e09\u89d2\u77e9\u9635 # [[-6.70820393e+00 -8.04984472e+00 -9.39148551e+00] # [ 0.00000000e+00 1.09544512e+00 2.19089023e+00] # [ 0.00000000e+00 0.00000000e+00 -8.88178420e-16]] svd np.svd \u8ba1\u7b97\u5947\u5f02\u503c\u5206\u89e3\uff08SVD\uff09\u3002 \u51e0\u4f55\u610f\u4e49\uff1aSVD\u5206\u89e3\u7684\u51e0\u4f55\u610f\u4e49\u662f\u4efb\u4f55\u4e00\u4e2a\u77e9\u9635A\u5728\u4e00\u7cfb\u5217\u65cb\u8f6c\u548c\u5e73\u79fb\u4e0b\u90fd\u80fd\u8f6c\u5316\u6210\u4e00\u4e2a\u5bf9\u89d2\u77e9\u9635\u2211 , \u5176\u4e2d\u9149\u9635U, V\u7684\u51e0\u4f55\u610f\u4e49\u5c31\u662f\u4e00\u7cfb\u5217\u65cb\u8f6c\u548c\u5e73\u79fb\u7684\u53e0\u52a0\u3002 a = mat([[1, 2, 3],[4, 5, 6]]) U, sigma, V = np.linalg.svd(a) print(\"\u539f\u77e9\u9635 \\n\", a) print(\"\u5de6\u5947\u5f02\u503cU \\n\", U) print(\"\u5947\u5f02\u503cSigma \\n\", sigma) print(\"\u53f3\u5947\u5f02\u503cV \\n\", V) # \u539f\u77e9\u9635 # [[1 2 3] # [4 5 6]] # \u5de6\u5947\u5f02\u503cU # [[-0.3863177 -0.92236578] # [-0.92236578 0.3863177 ]] # \u5947\u5f02\u503cSigma # [9.508032 0.77286964] # \u53f3\u5947\u5f02\u503cV # [[-0.42866713 -0.56630692 -0.7039467 ] # [ 0.80596391 0.11238241 -0.58119908] # [ 0.40824829 -0.81649658 0.40824829]] solve np.solve \u6c42\u89e3x\u7684\u7ebf\u6027\u7cfb\u7edfAx = b\uff0c\u5176\u4e2dA\u662f\u65b9\u9635\u3002 \u89e3\u65b9\u7a0b\u7ec4\uff1a x + 2y = 1 3x + 5y = 2 a = np.array([[1, 2], [3, 5]]) b = np.array([1, 2]) x = np.linalg.solve(a, b) print(x) # [-1. 1.] lstsq np.lstsq \u8ba1\u7b97Ax = b\u7684\u6700\u5c0f\u4e8c\u4e58\u89e3\u3002 \u7528\u6700\u5c0f\u4e8c\u4e58\u6cd5\u62df\u5408\u6570\u636e\u5f97\u5230\u4e00\u4e2a\u5f62\u5982y = mx + c\u7684\u7ebf\u6027\u65b9\u7a0b\uff08Return the least-squares solution to a linear matrix equation\uff09\u3002 x = np.array([0, 1, 2, 3]) # \u539f\u59cb\u6570\u636e\u70b9\u7684\u6a2a\u5750\u6807 y = np.array([-1, 0.2, 0.9, 2.1]) # \u539f\u59cb\u6570\u636e\u70b9\u7684\u7eb5\u5750\u6807 print(x) # [0 1 2 3] print(y) # [-1. 0.2 0.9 2.1] A = np.vstack([x, np.ones(len(x))]).T # \u6784\u9020\u7cfb\u6570\u77e9\u9635 print(A) # [[0. 1.] # [1. 1.] # [2. 1.] # [3. 1.]] m, c = np.linalg.lstsq(A, y, rcond=None)[0] # \u89e3\u51fa\u659c\u7387a\u548c\u7eb5\u622a\u8dddc plt.plot(x, y, 'o', label='Original data', markersize=10) # \u505a\u51fa\u539f\u59cb\u6570\u636e\u6563\u70b9\u56fe plt.plot(x, m*x + c, 'r', label='Fitted line') # \u7528\u4e0a\u9762\u89e3\u51fa\u7684\u53c2\u6570\u505a\u51fa\u62df\u5408\u66f2\u7ebfy=mx+c plt.legend() plt.show() \u4f2a\u968f\u673a\u6570\u751f\u6210 numpy.random \u6a21\u5757\u586b\u8865\u4e86Python\u5185\u5efa\u7684 random \u6a21\u5757\u7684\u4e0d\u8db3\uff0c\u53ef\u4ee5\u9ad8\u6548\u5730\u751f\u6210\u591a\u79cd\u6982\u7387\u5206\u5e03\u4e0b\u7684\u5b8c\u6574\u6837\u672c\u503c\u6570\u7ec4\u3002 numpy.random \u4e2d\u7684\u6570\u636e\u751f\u6210\u51fd\u6570\u516c\u7528\u4e86\u4e00\u4e2a\u5168\u5c40\u7684\u968f\u673a\u6570\u79cd\u5b50\u3002 \u4f7f\u7528 numpy.random.RandomState \u751f\u6210\u4e00\u4e2a\u968f\u673a\u6570\u751f\u6210\u5668\uff0c\u4f7f\u6570\u636e\u72ec\u7acb\u4e8e\u5176\u4ed6\u7684\u968f\u673a\u6570\u72b6\u6001\u3002 \u901a\u8fc7 np.random.seed \u66f4\u6539NumPy\u7684\u968f\u673a\u6570\u79cd\u5b50\u3002 numpy.random \u4e2d\u7684\u90e8\u5206\u51fd\u6570\u5217\u8868 seed: \u5411\u968f\u673a\u6570\u751f\u6210\u5668\u4f20\u9012\u968f\u673a\u72b6\u6001\u79cd\u5b50 permutation: \u8fd4\u56de\u4e00\u4e2a\u5e8f\u5217\u7684\u968f\u673a\u6392\u5217\uff0c\u6216\u8005\u8fd4\u56de\u4e00\u4e2a\u4e71\u5e8f\u7684\u6574\u6570\u8303\u56f4\u5e8f\u5217 shuffle: \u968f\u673a\u6392\u5217\u4e00\u4e2a\u5e8f\u5217 rand: \u4ece\u5747\u5300\u5206\u5e03\u4e2d\u62bd\u53d6\u6837\u672c randint: \u6839\u636e\u7ed9\u5b9a\u7684\u7531\u4f4e\u5230\u9ad8\u7684\u8303\u56f4\u62bd\u53d6\u968f\u673a\u6574\u6570 randn: \u4ece\u5747\u503c0\u65b9\u5dee1\u7684\u6b63\u6001\u5206\u5e03\u4e2d\u62bd\u53d6\u6837\u672c(MATLAB\u578b\u63a5\u53e3\uff09 binomial: \u4ece\u4e8c\u9879\u5206\u5e03\u4e2d\u62bd\u53d6\u6837\u672c normal: \u4ece\u6b63\u6001\uff08\u9ad8\u65af\uff09\u5206\u5e03\u4e2d\u62bd\u53d6\u6837\u672c beta\u4ecebeta: \u5206\u5e03\u4e2d\u62bd\u53d6\u6837\u672c chisquare: \u4ece\u5361\u65b9\u5206\u5e03\u4e2d\u62bd\u53d6\u6837\u672c \u4f8b\u5982\uff0c\u4f7f\u7528normal\u6765\u83b7\u5f97\u4e00\u4e2a4\u00d74\u7684\u6b63\u6001\u5206\u5e03\u6837\u672c\u6570\u7ec4\uff0c\u79f0\u4e3a\u4f2a\u968f\u673a\u6570\u3002 import numpy as np samples = np.random.normal(size=(4, 4)) print(samples) # [[ 0.78583658 -0.27462104 -0.53027675 -0.62675004] # [ 0.39054781 1.20503691 -0.0057432 0.17243182] # [-0.41516669 -0.93335854 0.01996088 -0.12707275] # [ 0.42952379 2.56998319 0.14848737 -0.42871493]] \u793a\u4f8b\uff1a\u968f\u673a\u6f2b\u6b65 import matplotlib.pyplot as plt import numpy as np position = 0 walk = [position] nwalks = 5000 nsteps = 1000 draws = np.random.randint(0, 2, size=(nwalks, nsteps)) steps = np.where(draws > 0, 1, -1) walks = steps.cumsum() plt.plot(walks[:500000000000000000000000000]) plt.show() \u8f93\u51fa\u56fe\u50cf\uff1a","title":"NumPy\u57fa\u7840\uff1a\u6570\u7ec4\u4e0e\u5411\u91cf\u5316\u8ba1\u7b97"},{"location":"python/DataAnalysis/ch01/#numpy","text":"\u5305\u542b\u4ee5\u4e0b\u5185\u5bb9\uff1a \u591a\u7ef4\u6570\u7ec4\u5bf9\u8c61 \u901a\u7528\u51fd\u6570 \u9762\u5411\u6570\u7ec4\u7f16\u7a0b \u4f7f\u7528\u6570\u7ec4\u8fdb\u884c\u6587\u4ef6\u8f93\u5165\u548c\u8f93\u51fa \u7ebf\u6027\u4ee3\u6570 \u4f2a\u968f\u673a\u6570\u751f\u6210 \u793a\u4f8b\uff1a\u968f\u673a\u6f2b\u6b65","title":"NumPy\u57fa\u7840\uff1a\u6570\u7ec4\u4e0e\u5411\u91cf\u5316\u8ba1\u7b97"},{"location":"python/DataAnalysis/ch01/#ndarry","text":"","title":"\u591a\u7ef4\u6570\u7ec4\u5bf9\u8c61ndarry"},{"location":"python/DataAnalysis/ch01/#_1","text":"import numpy as np import pandas as pd import matplotlib.pyplot as plt","title":"\u522b\u540d\u7ea6\u5b9a"},{"location":"python/DataAnalysis/ch01/#matplotlib","text":"\u67e5\u770b\u5b57\u4f53\u8def\u5f84 >>> import matplotlib >>> print(matplotlib.matplotlib_fname()) /home/james/.local/lib/python3.6/site-packages/matplotlib/mpl-data/matplotlibrc \u4e0b\u8f7d\u4e2d\u6587\u5b57\u4f53\u3002\u7f51\u5740 https://www.fontpalace.com/font-download/SimHei/,\u5e76\u62f7\u8d1d\u5230\u4e0b\u9762\u7684\u8def\u5f84\u4e0b james@lizard:~/Downloads> cp SimHei.ttf /home/james/.local/lib/python3.6/site-packages/matplotlib/mpl-data/fonts/ttf/ \u67e5\u770bmatplotlib\u7684\u5b57\u4f53\u7f13\u5b58\u76ee\u5f55\u3002 >>> import matplotlib >>> print(matplotlib.get_cachedir()) /home/james/.cache/matplotlib \u5220\u9664\u8fd9\u4e2a\u76ee\u5f55 james@lizard:~> rm -rf /home/james/.cache/matplotlib \u7f16\u8f91matplotlibrc\u6587\u4ef6 /home/james/.local/lib/python3.6/site-packages/matplotlib/mpl-data/matplotlibrc \uff0c\u505a\u5982\u4e0b\u4fee\u6539\u3002 \u5b9a\u4f4d\u8fd9\u4e00\u884c\uff0c\u53bb\u6389\u6ce8\u91ca\u7b26 # font.family: sans-serif \u5b9a\u4f4d\u8fd9\u4e00\u884c\uff0c\u53bb\u6389\u6ce8\u91ca\u7b26 # \uff0c\u5e76\u6dfb\u52a0 SimHei \uff0c\u4fee\u6539\u540e\u4e3a font.serif: SimHei, DejaVu Serif, Bitstream Vera Serif, Computer Modern Roman, New Century Schoolbook, Century Schoolbook L, Utopia, ITC Bookman, Bookman, Nimbus Roman No9 L, Times New Roman, Times, Palatino, Charter, serif \u5b9a\u4f4d\u8fd9\u4e00\u884c\uff0c\u53bb\u6389\u6ce8\u91ca\u7b26 # \uff0c\u5e76\u6dfb\u52a0 SimHei \uff0c\u4fee\u6539\u540e\u4e3a font.sans-serif: SimHei, DejaVu Sans, Bitstream Vera Sans, Computer Modern Sans Serif, Lucida Grande, Verdana, Geneva, Lucid, Arial, Helvetica, Avant Garde, sans-serif \u5b9a\u4f4d\u8fd9\u4e00\u884c\uff0c\u53bb\u6389\u6ce8\u91ca\u7b26 # \uff0c\u5e76\u628a True \u6539\u4e3a False \uff0c\u4fee\u6539\u540e\u4e3a axes.unicode_minus: False","title":"\u5b89\u88c5matplotlib\u4e2d\u6587\u5b57\u4f53"},{"location":"python/DataAnalysis/ch01/#matplotlib_1","text":"\u5728\u4f7f\u7528matplotlib\u8f93\u51fa\u56fe\u50cf\u65f6\uff0c\u5982\u679c\u9047\u5230\u65e0\u6cd5\u663e\u793a\u56fe\u50cf\u7684\u9519\u8bef UserWarning: Matplotlib is currently using agg, which is a non-GUI backend, so cannot show the figure\u3002 \uff0c\u53ef\u4ee5\u5c1d\u8bd5\u4e0b\u9762\u7684\u6b65\u9aa4\u89e3\u51b3\u3002 \u5b89\u88c5 python3-tk \u5305 james@lizard:~> sudo zypper in python3-tk \u6216\u8005\u901a\u8fc7 pip \u5b89\u88c5 tk \u5305 james@lizard:~> pip3 install tk Defaulting to user installation because normal site-packages is not writeable Collecting tk Downloading tk-0.1.0-py3-none-any.whl (3.9 kB) Installing collected packages: tk Successfully installed tk-0.1.0 \u4e00\u822c\u5b8c\u6210\u4e0a\u9762\u5b89\u88c5\u540e\uff0c\u7a0b\u5e8f\u5c31\u80fd\u81ea\u52a8\u663e\u793a\u56fe\u4e86\uff0c\u5982\u679c\u8fd8\u662f\u4e0d\u80fd\u663e\u793a\uff0c\u518d\u5c1d\u8bd5\u91cd\u65b0\u5b89\u88c5 matplotlib \u3002 pip3 ininstall matplotlib pip3 install matplotlib","title":"\u8bbe\u7f6ematplotlib\u540e\u7aef\u6e32\u67d3\u5668"},{"location":"python/DataAnalysis/ch01/#ndarray-n-","text":"\u4e00\u4e2andarray\u662f\u4e00\u4e2a\u901a\u7528\u7684\u591a\u7ef4\u540c\u7c7b\u6570\u636e\u5bb9\u5668\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u5b83\u5305\u542b\u7684\u6bcf\u4e00\u4e2a\u5143\u7d20\u5747\u4e3a \u76f8\u540c\u7c7b\u578b \uff1b \u6bcf\u4e00\u4e2a\u6570\u7ec4\u90fd\u6709\u4e00\u4e2ashape\u5c5e\u6027\uff0c\u7528\u6765\u8868\u5f81\u6570\u7ec4\u6bcf\u4e00\u7ef4\u5ea6\u7684\u6570\u91cf\uff1b \u6bcf\u4e00\u4e2a\u6570\u7ec4\u90fd\u6709\u4e00\u4e2adtype\u5c5e\u6027\uff0c\u7528\u6765\u63cf\u8ff0\u6570\u7ec4\u7684\u6570\u636e\u7c7b\u578b\uff1b \u4e0b\u9762\u662f\u6807\u51c6\u6570\u7ec4\u7684\u751f\u6210\u51fd\u6570 array: \u5c06\u8f93\u5165\u6570\u636e\uff08\u5217\u8868\u3001\u5143\u7ec4\u3001\u6570\u7ec4\uff0c\u5176\u4ed6\u5e8f\u5217\uff09\u8f6c\u6362\u4e3andarray\uff0c\u5982\u679c\u4e0d\u663e\u5f0f\u6307\u660e\u6570\u636e\u7c7b\u578b\uff0c\u5c06\u81ea\u52a8\u63a8\u65ad\uff1b\u9ed8\u8ba4\u590d\u5236\u6240\u6709\u7684\u8f93\u5165\u6570\u636e\u3002 asarray\uff1a\u5c06\u8f93\u5165\u8f6c\u6362\u4e3andarray\uff0c\u4f46\u5982\u679c\u8f93\u5165\u5df2\u7ecf\u662fndarray\u5219\u4e0d\u518d\u590d\u5236\u3002 arange\uff1aPython\u5185\u7f6e\u51fd\u6570range\u7684\u6570\u7ec4\u7248\uff0c\u8fd4\u56de\u4e00\u4e2a\u6570\u7ec4\u3002 \u4e0b\u9762\u662f\u7528 Numpy.random() \u4e00\u4e2a\u751f\u6210\u4e00\u4e2a\u968f\u673a\u6570\u7ec4\u7684\u4f8b\u5b50\uff0c\u6ce8\u610f data01 \u7684\u7c7b\u578b\u662f'numpy.ndarray'\u3002\u53ef\u4ee5\u5728ndarray\u7c7b\u578b\u6570\u7ec4\u4e0a\u53e0\u52a0\u4e00\u4e0b\u6570\u5b66\u64cd\u4f5c\u3002 data01 = np.random.randn(2, 3) print(type(data01)) # <class 'numpy.ndarray'> print(data01) # [[ 0.12047302 -1.13499045 -0.39311368] # [ 1.54046881 0.01254838 -3.65090952]] print(data01 * 10) # \u7ed9data\u52a0\u4e0a\u4e00\u4e2a\u6570\u5b66\u64cd\u4f5c, \u6240\u6709\u7684\u5143\u7d20\u90fd\u540c\u65f6\u4e58\u4ee5\u4e8610 # [[ 1.20473022 -11.3499045 -3.93113676] # [ 15.40468806 0.12548383 -36.50909515]] print(data01 + data01) # \u7ed9data\u52a0\u4e0a\u4e00\u4e2a\u6570\u5b66\u64cd\u4f5c, \u6570\u7ec4\u4e2d\u7684\u5bf9\u5e94\u5143\u7d20\u8fdb\u884c\u4e86\u76f8\u52a0 # [[ 0.24094604 -2.2699809 -0.78622735] # [ 3.08093761 0.02509677 -7.30181903]] print(data01.shape) # (2, 3) print(data01.dtype) # float64 \u5f53\u8868\u8fbe\u201c\u6570\u7ec4\u201d\u3001\u201cNumPy\u6570\u7ec4\u201d\u6216\u201cndarray\u201d\u65f6\uff0c\u90fd\u8868\u793a\u540c\u4e00\u4e2a\u5bf9\u8c61\uff1andarray\u5bf9\u8c61\u3002 \u770b\u4e0b\u9762\u7684\u4f8b\u5b50\uff1a data01 \u662f\u4e00\u4e2a\u5217\u8868\uff08list\uff09\u7c7b\u578b\uff0c\u901a\u8fc7 Numpy.array \u8f6c\u6362\u6210Numpy\u7684 ndarray \u7c7b\u578b\u3002 \u5728 np.array \u4e2d\uff0c\u9664\u975e\u663e\u5f0f\u5730\u6307\u5b9a\uff0c\u5982 np.array(data01, dtype=np.int8) \uff0c\u5426\u5219np.array\u4f1a\u81ea\u52a8\u63a8\u65ad\u751f\u6210\u6570\u7ec4\u7684\u6570\u636e\u7c7b\u578b array01.dtype \u3002 \u4f7f\u7528 astype() \u65b9\u6cd5\u663e\u5f0f\u5730\u8f6c\u6362\u6570\u7ec4\u7684\u6570\u636e\u7c7b\u578b\u3002\u4f7f\u7528 astype() \u65f6\u603b\u662f\u751f\u6210\u4e00\u4e2a \u65b0\u7684\u6570\u7ec4 \uff0c\u5373\u4f7f\u4f60\u4f20\u5165\u7684dtype\u4e0e\u4e4b\u524d\u4e00\u6837\u3002 data02 \u662f\u4e00\u4e2a\u5d4c\u5957\u5217\u8868 [[1, 2, 3, 4], [5, 6, 7, 8]] \uff0c\u901a\u8fc7np.array()\u65b9\u6cd5\u8f6c\u6362\u6210\u591a\u7ef4\u6570\u7ec4\uff0c\u524d\u63d0\u662f\u6bcf\u4e2a\u5b50\u5217\u8868\u7684\u957f\u5ea6\u8981\u4e00\u81f4\u3002 data01 = [6, 7.5, 8, 0, 1] print(data01) # [6, 7.5, 8, 0, 1] print(type(data01)) # <class 'list'> array01 = np.array(data01) print(\"\u77e9\u9635\u7c7b\u578b\", type(array01)) # \u77e9\u9635\u7c7b\u578b <class 'numpy.ndarray'> print(\"\u6837\u672c\u77e9\u9635\", array01) # \u6837\u672c\u77e9\u9635 [6. 7.5 8. 0. 1. ] print(\"\u6570\u7ec4\u7ef4\u5ea6\", array01.ndim) # \u6570\u7ec4\u7ef4\u5ea6 1 print(\"\u77e9\u9635\u5f62\u72b6\", array01.shape) # \u77e9\u9635\u5f62\u72b6 (5,) \u4e00\u884c\u4e94\u5217 print(\"\u77e9\u9635\u6570\u636e\u7c7b\u578b\", array01.dtype) # float64 data02 = [[1, 2, 3, 4], [5, 6, 7, 8]] array02 = np.array(data02) print(\"\u6837\u672c\u77e9\u9635\\n\", array02) # \u6837\u672c\u77e9\u9635 # [[1 2 3 4] # [5 6 7 8]] print(\"\u6570\u7ec4\u7ef4\u5ea6\", array02.ndim) # \u6570\u7ec4\u7ef4\u5ea6 2 print(\"\u77e9\u9635\u5f62\u72b6\", array02.shape) # \u77e9\u9635\u5f62\u72b6 (2, 4) print(\"\u77e9\u9635\u6570\u636e\u7c7b\u578b\", array02.dtype) # \u77e9\u9635\u6570\u636e\u7c7b\u578b int64 print(\"\u77e9\u96350\u8f74\u5411\u6c42\u548c\", array02.sum(axis=0)) # \u77e9\u96350\u8f74\u5411\u6c42\u548c [ 6 8 10 12] print(\"\u77e9\u96351\u8f74\u5411\u6c42\u548c\", array02.sum(axis=1)) # \u77e9\u96351\u8f74\u5411\u6c42\u548c [10 26] array03 = array02.astype(np.float64) print(array03.dtype) # float64 print(array03) # [[1. 2. 3. 4.] # [5. 6. 7. 8.]] zeros() \u65b9\u6cd5\u53ef\u4ee5\u4e00\u6b21\u6027\u521b\u9020\u51680\u6570\u7ec4\u3002 print(np.zeros(10)) # [0. 0. 0. 0. 0. 0. 0. 0. 0. 0.] ones() \u65b9\u6cd5\u53ef\u4ee5\u4e00\u6b21\u6027\u521b\u9020\u51681\u6570\u7ec4\u3002\u6ce8\u610f\uff0c\u4f20\u53c2shape\u662f\u4e00\u4e2a\u5143\u7ec4 (3, 5) \u3002 print(np.ones((3, 5))) # [[1. 1. 1. 1. 1.] # [1. 1. 1. 1. 1.] # [1. 1. 1. 1. 1.]] empty() \u65b9\u6cd5\u53ef\u4ee5\u521b\u5efa\u4e00\u4e2a\u6ca1\u6709\u521d\u59cb\u5316\u6570\u503c\u7684\u6570\u7ec4\u3002\u4f46\u662f\uff0c\u4f7f\u7528np.empty\u6765\u751f\u6210\u4e00\u4e2a\u51680\u6570\u7ec4\uff0c\u5e76\u4e0d\u53ef\u9760\uff0c\u6709\u4e9b\u65f6\u5019\u5b83\u53ef\u80fd\u4f1a\u8fd4\u56de\u672a\u521d\u59cb\u5316\u7684\u5783\u573e\u6570\u503c print(np.empty((2, 3, 2))) # [[[2.30116964e-316 0.00000000e+000] # [2.10077583e-312 6.79038654e-313] # [2.22809558e-312 2.14321575e-312]] # # [[2.35541533e-312 6.79038654e-313] # [2.22809558e-312 2.14321575e-312] # [2.46151512e-312 2.41907520e-312]]]","title":"ndarray: N-\u7ef4\u6570\u7ec4\u5bf9\u8c61"},{"location":"python/DataAnalysis/ch01/#numpy_1","text":"\u4e00\u53e5\u8bdd\u603b\u7ed3\uff1a\u5c06NumPy\u8f74\u89c6\u4e3a\u6211\u4eec\u53ef\u4ee5\u6267\u884c\u64cd\u4f5c\u7684\u65b9\u5411\u3002 \u770b\u4e0b\u9762\u7684\u4f8b\u5b50\uff1a arr_1 = np.array([[1, 1, 1], [1, 1, 1]]) arr_2 = np.array([[9, 9, 9], [9, 9, 9]]) print(arr_1) # [[1 1 1] # [1 1 1]] print(arr_2) # [[9 9 9] # [9 9 9]] \u6cbf0\u8f74\u5408\u5e76\u7684\u601d\u8def\u662f\uff0c\u4e24\u4e2a\u6570\u7ec4\u6cbf0\u8f74\u65b9\u5411\uff0c\u54110\u8f74\u201c\u584c\u7f29\u201d\uff08collapse\uff09\u3002 result = np.concatenate([arr_1, arr_2], axis=0) print(result) # [[1 1 1] # [1 1 1] # [9 9 9] # [9 9 9]] \u6cbf1\u8f74\u5408\u5e76\u7684\u601d\u8def\u662f\uff0c\u4e24\u4e2a\u6570\u7ec4\u6cbf1\u8f74\u65b9\u5411\uff0c\u54111\u8f74\u201c\u584c\u7f29\u201d result = np.concatenate([arr_1, arr_2], axis=1) print(result) # [[1 1 1 9 9 9] # [1 1 1 9 9 9]] \u6211\u4eec\u6765\u770bNumPy\u7684\u4e09\u7ef4\u6570\u7ec4\u3002 array1 = np.arange(36).reshape((3, 3, 4)) print(array1) # [[[ 0 1 2 3] # [ 4 5 6 7] # [ 8 9 10 11]] # # [[12 13 14 15] # [16 17 18 19] # [20 21 22 23]] # # [[24 25 26 27] # [28 29 30 31] # [32 33 34 35]]] \u8fd9\u6837\u770b\u4f1a\u5bb9\u6613\u7406\u89e3\u4e00\u4e9b\uff0c0\u8f74\u67093\u884c\uff0c1\u8f74\u67093\u5217\uff0c2\u8f74\u67094\u4e2a\u5143\u7d20\uff1a [[[ 0 1 2 3], [ 4 5 6 7], [ 8 9 10 11]] [[12 13 14 15], [16 17 18 19], [20 21 22 23]] [[24 25 26 27], [28 29 30 31], [32 33 34 35]]] \u8f93\u51fa\uff1a\u8f740\u7d22\u5f15\u53f7\uff1a0\uff1b\u8f741\u7d22\u5f15\u53f7\uff1a0\uff1b\u8f742\u7d22\u5f15\u53f7\uff1a\u5168\u90e8 print(array1[0, 0, :]) # [0 1 2 3] \u8f93\u51fa\uff1a\u8f740\u7d22\u5f15\u53f7\uff1a0\uff1b\u8f741\u7d22\u5f15\u53f7\uff1a0\uff1b\u8f742\u7d22\u5f15\u53f7\uff1a1 print(array1[0, 0, 1]) # 1","title":"NumPy\u8f74"},{"location":"python/DataAnalysis/ch01/#numpy_2","text":"\u4e00\u4e2a \u6807\u91cf \u5c31\u662f\u4e00\u4e2a\u5355\u72ec\u7684\u6570\u3002\u4e00\u4e2a\u5411\u91cf\u5c31\u662f\u4e00\u5217\u6570\uff0c\u8fd9\u4e9b\u6570\u662f\u6709\u5e8f\u6392\u5217\u7684\u3002 \u77e9\u9635\u662f\u4e8c\u7ef4\u6570\u7ec4\uff0c\u5176\u4e2d\u7684\u6bcf\u4e00\u4e2a\u5143\u7d20\u88ab\u4e24\u4e2a\u7d22\u5f15\u800c\u975e\u4e00\u4e2a\u6240\u786e\u5b9a\u3002 \u51e0\u4f55\u4ee3\u6570\u4e2d\u5b9a\u4e49\u7684 \u5f20\u91cf \u662f\u57fa\u4e8e\u5411\u91cf\u548c\u77e9\u9635\u7684\u63a8\u5e7f\uff0c\u6211\u4eec\u53ef\u4ee5 \u5c06\u6807\u91cf\u89c6\u4e3a\u96f6\u9636\u5f20\u91cf \uff0c \u77e2\u91cf \u89c6\u4e3a\u4e00\u9636\u5f20\u91cf\uff0c\u90a3\u4e48 \u77e9\u9635\u5c31\u662f\u4e8c\u9636\u5f20\u91cf \u3002 \u5e26\u6709\u6807\u91cf\u8ba1\u7b97\u7684\u7b97\u672f\u64cd\u4f5c\uff0c\u4f1a\u628a\u8ba1\u7b97\u53c2\u6570\u4f20\u9012\u7ed9\u6570\u7ec4\u7684\u6bcf\u4e00\u4e2a\u5143\u7d20\u3002 \u540c\u5c3a\u5bf8\u6570\u7ec4\u4e4b\u95f4\u7684\u6bd4\u8f83 array04 == array04 \uff0c\u4f1a\u4ea7\u751f\u4e00\u4e2a\u5e03\u5c14\u503c\u6570\u7ec4 \u4e0d\u540c\u5c3a\u5bf8\u7684\u6570\u7ec4\u95f4\u7684\u64cd\u4f5c\uff0c\u5c06\u4f1a\u7528\u5230 \u5e7f\u64ad\u7279\u6027\uff08broadcasting\uff09 \u3002 array04 = np.array([ [1, 2, 3, 4, 5], [3, 4, 5, 6, 7], [5, 6, 7, 8, 9] ], dtype=int) print(array04 + array04) # [[ 2 4 6 8 10] # [ 6 8 10 12 14] # [10 12 14 16 18]] print(array04 - array04) # [[0 0 0 0 0] # [0 0 0 0 0] # [0 0 0 0 0]] print(array04 * array04) # [[ 1 4 9 16 25] # [ 9 16 25 36 49] # [25 36 49 64 81]] print(array04 / array04) # [[1. 1. 1. 1. 1.] # [1. 1. 1. 1. 1.] # [1. 1. 1. 1. 1.]] print(1 / array04) # [[1. 0.5 0.33333333 0.25 0.2 ] # [0.33333333 0.25 0.2 0.16666667 0.14285714] # [0.2 0.16666667 0.14285714 0.125 0.11111111]] print(array04 == array04) # [[ True True True True True] # [ True True True True True] # [ True True True True True]]","title":"NumPy\u6570\u7ec4\u7b97\u672f"},{"location":"python/DataAnalysis/ch01/#_2","text":"ndarray\u5bf9\u8c61\u7684\u5185\u5bb9\u53ef\u4ee5\u901a\u8fc7\u7d22\u5f15\uff08indexing\uff09\u6216\u5207\u7247\uff08slicing\uff09\u6765\u8bbf\u95ee\u548c\u4fee\u6539\uff0cndarray\u5bf9\u8c61\u4e2d\u7684\u5143\u7d20\u7d22\u5f15\u4ece\u96f6\u5f00\u59cb\u3002 \u6709\u4e09\u79cd\u53ef\u7528\u7684\u7d22\u5f15\u65b9\u6cd5\uff1a\u5b57\u6bb5\u8bbf\u95ee\uff0c\u57fa\u672c\u5207\u7247\u548c\u9ad8\u7ea7\u7d22\u5f15\u3002 \u7d22\u5f15\uff08indexing\uff09\uff1a\u83b7\u53d6\u6570\u7ec4\u4e2d\u7279\u5b9a\u4f4d\u7f6e\u5143\u7d20\u7684\u8fc7\u7a0b\u3002 \u5207\u7247\uff08slicing\uff09\uff1a\u83b7\u53d6\u6570\u7ec4\u5143\u7d20\u5b50\u96c6\u7684\u8fc7\u7a0b\u3002\u6570\u7ec4\u7684\u5207\u7247\u662f\u539f\u6570\u7ec4\u7684\u89c6\u56fe\u3002\u8fd9\u610f\u5473\u7740\u4efb\u4f55 \u5bf9\u4e8e\u89c6\u56fe\u7684\u4fee\u6539\u90fd\u4f1a\u53cd\u6620\u5230\u539f\u6570\u7ec4\u4e0a \u3002\u6570\u7ec4\u7684\u5207\u7247, \u8fd4\u56de\u7684\u5bf9\u8c61\u662f\u964d\u4f4e\u4e00\u4e2a\u7ef4\u5ea6\u7684\u6570\u7ec4\u3002 \u4e00\u7ef4\u6570\u7ec4\u7684\u7d22\u5f15\u548c\u5207\u7247\uff1a\u4e0ePython\u7684\u5217\u8868\u7c7b\u4f3c\uff1a a[n] \uff1a\u8fd4\u56de\u7b2c n+1 \u4e2a\u5143\u7d20\u3002\u5982\u679c n \u4e3a\u8d1f\u6570\uff0c\u5219\u8fd4\u56de\u5012\u6570\u7b2c n \u4e2a\u5143\u7d20\u3002 a[n:m:k] \uff1a\u8d77\u59cb\u7f16\u53f7 n \uff0c\u7ec8\u6b62\u7f16\u53f7 m \uff0c\u6b65\u957f k \uff0c\u7528\u5192\u53f7\u5206\u5272\u3002 \u9075\u5faa\u5de6\u95ed\u53f3\u5f00\u7684\u539f\u5219 \uff0c\u5373 [n, m) \u3002\u5982\u679c n \u4e3a\u7a7a\uff0c\u5373 n = 0 \uff1b\u5982\u679c m \u4e3a\u7a7a\uff0c\u5373 m = len(a) \u3002 \u591a\u7ef4\u6570\u7ec4\u7684\u7d22\u5f15\u548c\u5207\u7247\uff1a a[n,m,k,...] \uff1a\u6bcf\u4e2a\u7ef4\u5ea6\u4e00\u4e2a\u7d22\u5f15\u503c\uff0c\u6700\u5916\u5c42\u5217\u8868\uff08list\uff09\u4e2d\u7b2c n \u4e2a\u5143\u7d20\uff0c\u6b21\u5916\u5c42\u5217\u8868\uff08list\uff09\u4e2d\u7b2c m \u4e2a\u5143\u7d20\uff0c\u4ee5\u6b64\u7c7b\u63a8\u3002\u5982\u679c n \u4e3a\u8d1f\u6570\uff0c\u5219\u8fd4\u56de\u5012\u6570\u7b2c n \u4e2a\u5143\u7d20\u3002 a[n1:m1:k1,n2:m2:k2,n3:m3:k3,...] \uff1a\u6bcf\u4e2a\u7ef4\u5ea6\u7684\u5207\u7247\u65b9\u6cd5\u4e0e\u4e00\u7ef4\u6570\u7ec4\u76f8\u540c\u3002\u987a\u5e8f\u4e3a\u4ece\u5916\u5230\u5185\u3002 array05 = np.arange(10) print(array05) # [0 1 2 3 4 5 6 7 8 9] # \u4ece\u7d22\u5f15\u503c5\u5f00\u59cb\u5230\u7d22\u5f15\u503c7\u7684\u4e00\u4e2a\u5207\u7247\u3002 print(array05[5:8]) # [5 6 7] array06 = array05[5:8] # \u4f20\u5165\u4e00\u4e2a\u6570\u503c\u7ed9\u6570\u7ec4\u7684\u5207\u7247\uff0c\u6570\u503c\u88ab\u4f20\u9012\u7ed9\u4e86\u6574\u4e2a\u5207\u7247\u3002\u4e0d\u5199\u5207\u7247\u503c\u7684[:]\u5c06\u4f1a\u5f15\u7528\u6570\u7ec4\u7684\u6240\u6709\u503c array06[:] = 12 print(array06) # [12 12 12] # \u5207\u7247\u7684\u4fee\u6539\u4f1a\u53cd\u6620\u5230\u539f\u6570\u7ec4\u4e0a print(array05) # [ 0 1 2 3 4 12 12 12 8 9] # \u8f93\u51fa3\u7ef4\u77e9\u9635\uff0c3\u884c3\u5217\uff0c\u51719\u4e2a\u5143\u7d20\uff0c\u6bcf\u4e2a\u5143\u7d20\u662f\u4e00\u4e2a\u542b3\u4e2a\u5143\u7d20\u7684\u5217\u8868 array07 = np.array([ [[0, 1, 2], [3, 4, 5], [6, 7, 8]], [[9, 0, 1], [2, 3, 4], [5, 6, 7]], [[8, 9, 0], [1, 2, 3], [4, 5, 6]], ]) # \u8f93\u51fa3\u7ef4\u77e9\u9635\uff0c\u663e\u793a\u539f\u77e9\u9635\u7684\u7b2c1\uff0c2\u884c\u76842\uff0c3\u5217\u5143\u7d20\uff0c\u4e0d\u8981\u628a\u7d22\u5f15\u53f7\u548c\u8fd9\u91cc\u7684\u8868\u8ff0\u884c\u53f7\u6df7\u6dc6\u3002 print(array07[:2, 1:]) # [[[3 4 5] [6 7 8]] # [[2 3 4] [5 6 7]]] print(array07[:2, 1:].shape) # (2, 2, 3) # \u964d\u7ef4\uff0c\u8f93\u51fa\u539f\u77e9\u9635\u7684\u7b2c3\u884c print(array07[2]) # [[8 9 0] [1 2 3] [4 5 6]] print(array07[2].shape) # (3, 3) # \u964d\u7ef4\uff0c\u8f93\u51fa\u539f\u77e9\u9635\u7684\u7b2c3\u884c print(array07[2, :]) # [[8 9 0] [1 2 3] [4 5 6]] print(array07[2, :].shape) # (3, 3) # \u964d\u7ef4\uff0c\u8f93\u51fa\u539f\u77e9\u9635\u7684\u7b2c3\u884c\uff08\u53ea\u6709\u4e09\u884c\uff0c\u6240\u4ee5[2:, :]\u7b49\u540c\u4e8e[2, :]\uff09 print(array07[2:, :]) # [[[8 9 0] [1 2 3] [4 5 6]]] print(array07[2:, :].shape) # (1, 3, 3) # \u8f93\u51fa\u539f\u77e9\u9635\u76841\uff0c2\u5217 print(array07[:, :2]) # [[[0 1 2] [3 4 5]] # [[9 0 1] [2 3 4]] # [[8 9 0] [1 2 3]]] print(array07[:, :2].shape) # (3, 2, 3) # \u964d\u7ef4\uff0c\u8f93\u51fa\u539f\u77e9\u9635\u7684\u7b2c2\u884c\u524d2\u4e2a\u5143\u7d20 print(array07[1, :2]) # [[9 0 1] [2 3 4]] print(array07[1, :2].shape) # (2, 3) # \u8f93\u51fa\u539f\u77e9\u9635\u7684\u7b2c2\u884c\u524d2\u4e2a\u5143\u7d20 print(array07[1:2, :2]) # [[[9 0 1] [2 3 4]]] print(array07[1:2, :2].shape) # (1, 2, 3) # \u5c06\u539f\u77e9\u9635\u7684\u7b2c2\u884c\u8d4b\u503c\u7ed9\u53d8\u91cf old_value = array07[2].copy() print(old_value) # [[8 9 0] [1 2 3] [4 5 6]] # \u4fee\u6539\u539f\u77e9\u9635\u7684\u7b2c2\u884c\u7684\u503c\uff0c\u6807\u91cf\u548c\u6570\u7ec4\u90fd\u53ef\u4ee5\u4f20\u9012\u7ed9 array07[2] array07[2] = 25 print(array07) # [[[ 0 1 2] [ 3 4 5] [ 6 7 8]] # [[ 9 0 1] [ 2 3 4] [ 5 6 7]] # [[25 25 25] [25 25 25] [25 25 25]]] # \u5c06\u53d8\u91cf\u503c\u8d4b\u503c\u7ed9\u539f\u77e9\u9635\u7684\u7b2c2\u884c array07[2] = old_value print(array07) # [[[0 1 2] [3 4 5] [6 7 8]] # [[9 0 1] [2 3 4] [5 6 7]] # [[8 9 0] [1 2 3] [4 5 6]]]","title":"\u57fa\u7840\u7d22\u5f15\u4e0e\u5207\u7247"},{"location":"python/DataAnalysis/ch01/#_3","text":"\u5e03\u5c14\u503c\u7d22\u5f15\uff08Boolean indexing\uff09\u662f\u901a\u8fc7\u4e00\u4e2a\u5e03\u5c14\u6570\u7ec4\u6765\u7d22\u5f15\u76ee\u6807\u6570\u7ec4\uff0c\u4ee5\u6b64\u627e\u51fa\u4e0e\u5e03\u5c14\u6570\u7ec4\u4e2d\u503c\u4e3aTrue\u7684\u5bf9\u5e94\u7684\u76ee\u6807\u6570\u7ec4\u4e2d\u7684\u6570\u636e\u3002\u5e03\u5c14\u6570\u7ec4\u7684\u957f\u5ea6\u5fc5\u987b\u4e0e\u76ee\u6807\u6570\u7ec4\u5bf9\u5e94\u7684\u8f74\u7684\u957f\u5ea6\u4e00\u81f4\u3002 \u4f7f\u7528\u5e03\u5c14\u503c\u7d22\u5f15\uff08Boolean indexing\uff09\u9009\u62e9\u6570\u636e\u65f6\uff0c\u603b\u662f\u751f\u6210\u6570\u636e\u7684\u62f7\u8d1d\uff0c\u5373\u4f7f\u8fd4\u56de\u7684\u6570\u7ec4\u5e76\u6ca1\u6709\u4efb\u4f55\u53d8\u5316\u3002 \u5047\u8bbe\u6211\u4eec\u7684\u6570\u636e\u90fd\u5728\u6570\u7ec4\u4e2d\uff0c\u5e76\u4e14\u6570\u7ec4\u4e2d\u7684\u6570\u636e\u662f\u4e00\u4e9b\u5b58\u5728\u91cd\u590d\u7684\u4eba\u540d\u3002\u7528randn\u51fd\u6570\u751f\u6210\u4e00\u4e9b\u6807\u51c6\u6b63\u6001(standard normal)\u5206\u5e03\u7684\u6570\u636e\u3002\u5047\u8bbe\u6bcf\u4e2a\u4eba\u540d\u90fd\u548cdata\u6570\u7ec4\u4e2d\u7684\u4e00\u884c\u76f8\u5bf9\u5e94\uff0c\u5e76\u4e14\u6211\u4eec\u60f3\u8981\u9009\u4e2d\u6240\u6709\u2019Bob\u2019\u5bf9\u5e94\u7684\u884c\u3002 names = np.array(['Bob', 'Joe', 'Will', 'Bob', 'Will', 'Joe', 'Joe'], dtype='<U4') data = np.random.randn(7, 4) print(names) # ['Bob' 'Joe' 'Will' 'Bob' 'Will' 'Joe' 'Joe'] print(data) # [[ 0.19233985 -0.22530396 -0.68464485 0.03961609] # [ 0.26189893 -0.86823302 0.72726864 0.16122945] # [-0.70564457 0.59179465 0.05572085 -1.79999391] # [-0.21465342 0.09236611 0.02982635 -1.08500576] # [ 1.17260699 -0.53172414 0.16224439 0.60597493] # [ 0.49879926 -0.64871168 0.57597095 0.86329327] # [-0.64902274 -0.92406415 0.40021708 -0.18222566]] print(names == 'Bob') # [ True False False True False False False] # \u4e0a\u8ff0data\u7684\u884c\u7d22\u5f15\u4e3a0\u30013\u7684\u503c\uff08\u5bf9\u5e94\u4e8eBob\u4e3aTrue\uff09 print(data[names == 'Bob']) # [[ 0.19233985 -0.22530396 -0.68464485 0.03961609] # [-0.21465342 0.09236611 0.02982635 -1.08500576]] # \u4e0a\u8ff0data\u7684\u884c\u7d22\u5f15\u4e3a0\u30013\u4e14\u5217\u7d22\u5f15\u4e3a2\u30013\u7684\u503c\uff08\u5bf9\u5e94\u4e8eBob\u4e3aTrue\uff09 print(data[names == 'Bob', 2:]) # [[-0.68464485 0.03961609] [ 0.02982635 -1.08500576]] # \u4e0a\u8ff0data\u7684\u884c\u7d22\u5f15\u4e3a0\u30013\u4e14\u5217\u7d22\u5f15\u4e3a3\u7684\u503c\uff08\u5bf9\u5e94\u4e8eBob\u4e3aTrue\uff09 print(data[names == 'Bob', 3]) # [ 0.03961609 -1.08500576] \u4f7f\u7528 != \u6216\u5728\u6761\u4ef6\u8868\u8fbe\u5f0f\u524d\u4f7f\u7528 \uff5e \u5bf9\u6761\u4ef6\u53d6\u53cd, \u9009\u62e9\u9664\u4e86\u2019Bob\u2019\u4ee5\u5916\u7684\u5176\u4ed6\u6570\u636e\u3002 print(names != 'Bob') print(data[~(names == 'Bob')]) \u9009\u62e9\u4e09\u4e2a\u540d\u5b57\u4e2d\u7684\u4e24\u4e2a\u65f6\uff0c\u53ef\u4ee5\u5bf9\u591a\u4e2a\u5e03\u5c14\u503c\u6761\u4ef6\u8fdb\u884c\u8054\u5408\uff0c\u4f7f\u7528\u6570\u5b66\u64cd\u4f5c\u7b26\u5982 & \uff08and\uff09\u548c | \uff08or\uff09\u3002 mask = (names == 'Bob') | (names == 'Will') print(mask) # [ True False True True True False False] # \u66f4\u65b0\u76f4\u63a5\u4f5c\u7528\u5728`data`\u6570\u636e\u96c6\u4e0a\uff0c\u4e0d\u662f\u5728\u526f\u672c\u4e2d\u4fee\u6539\u3002 data[names == 'Joe'] = 7 print(data) # [[ 1.12584226 -1.09988707 0.49842702 0.76308186] # [ 7. 7. 7. 7. ] # [ 1.54212949 -0.34487439 -1.47775736 -0.25724376] # [ 0.60943059 -0.0164697 0.26681455 -1.70871624] # [ 0.28010374 -0.32339505 -0.95289544 2.76739316] # [ 7. 7. 7. 7. ] # [ 7. 7. 7. 7. ]]","title":"\u5e03\u5c14\u7d22\u5f15"},{"location":"python/DataAnalysis/ch01/#_4","text":"\u795e\u5947\u7d22\u5f15\uff08Fancy Indexing\uff09 \uff0c\u4e5f\u7ffb\u8bd1\u4e3a \u82b1\u5f0f\u7d22\u5f15 \u6216 \u590d\u6742\u7d22\u5f15 \uff0c\u7528\u4e8e\u63cf\u8ff0\u4f7f\u7528\u6574\u6570\u6570\u7ec4\u8fdb\u884c\u6570\u636e\u7d22\u5f15\uff0c\u8fd9\u91cc\u7684\u6570\u7ec4\uff0c\u53ef\u4ee5\u662fNumPy\u7684\u6570\u7ec4\uff0c\u4e5f\u53ef\u4ee5\u662fpython\u81ea\u5e26\u7684\u5217\u8868\uff08list\uff09\u3002\u795e\u5947\u7d22\u5f15\u4e0e\u5207\u7247\u4e0d\u540c\uff0c\u5b83\u603b\u662f\u5c06\u6570\u636e \u590d\u5236 \u5230\u4e00\u4e2a\u65b0\u7684\u6570\u7ec4\u4e2d\uff08\u526f\u672c\uff09\u3002 \u7279\u522b\u6ce8\u610f\u7684\u4e00\u70b9\u662f\uff0c\u4f7f\u7528fancy indexing\u8fd4\u56de\u6570\u7ec4\u7684shape\uff0c\u662f\u7d22\u5f15\u6570\u7ec4\u7684shape\uff0c\u800c\u4e0d\u662f\u88ab\u7d22\u5f15\u7684\u539f\u6570\u7ec4\u7684shape\u3002 \u4f7f\u7528fancy indexing\u65f6\u8981\u7279\u522b\u6ce8\u610f\u7684\u4e00\u70b9\u662f\u8fd4\u56de\u6570\u7ec4\u7684shape\u53cd\u6620\u7684\u662f\u7d22\u5f15\u6570\u7ec4\u7684shape\u800c\u4e0d\u662f\u88ab\u7d22\u5f15\u7684\u539f\u6570\u7ec4\u7684shape\u3002 \u5047\u8bbe\u6709\u4e00\u4e2a8\u00d74\u7684\u6570\u7ec4\uff1a array08 = np.empty((8, 4)) # \u53c2\u6570\u662f\u4e2a\u5143\u7ec4(8, 4)\u3002 for i in range(8): array08[i] = i print(array08) # [[0. 0. 0. 0.] # [1. 1. 1. 1.] # [2. 2. 2. 2.] # [3. 3. 3. 3.] # [4. 4. 4. 4.] # [5. 5. 5. 5.] # [6. 6. 6. 6.] # [7. 7. 7. 7.]] # \u8f93\u51fa\u7d22\u5f15\u4e3a2\u548c-2\u7684\u884c\u503c\u3002\u4f20\u9012\u4e00\u4e2a\u5305\u542b\u6307\u660e\u6240\u9700\u987a\u5e8f\u7684\u5217\u8868[2, -2]\uff08\u6216\u6570\u7ec4\uff09\uff0c\u9009\u51fa\u4e00\u4e2a\u7b26\u5408\u7279\u5b9a\u987a\u5e8f\u7684\u5b50\u96c6 print(array08[[2, -2]]) # [[2. 2. 2. 2.] # [6. 6. 6. 6.]] # \u75280~31\u751f\u6210\u4e00\u4e2a8x4\u6570\u7ec4 array09 = np.arange(32).reshape((8, 4)) print(array09) # [[ 0 1 2 3] # [ 4 5 6 7] # [ 8 9 10 11] # [12 13 14 15] # [16 17 18 19] # [20 21 22 23] # [24 25 26 27] # [28 29 30 31]] print(array09[[1, 5, 7, 2]]) # \u6570\u7ec4[1, 5, 7, 2]\u6307\u5b9a\u4e86\u8f93\u51fa\u987a\u5e8f # [[ 4 5 6 7] # [20 21 22 23] # [28 29 30 31] # [ 8 9 10 11]] print(array09[[0, 3, 1, 2]]) # [[ 0 1 2 3] # [12 13 14 15] # [ 4 5 6 7] # [ 8 9 10 11]] print(array09[[1, 5, 7, 2], [0, 3, 1, 2]]) # [ 4 23 29 10] array09[[1, 5, 7, 2]] \u4e2d\u901a\u8fc7\u4e00\u4e2a\u5217\u8868 [1, 5, 7, 2] \u6765\u6307\u5b9a\u8f93\u51fa\u987a\u5e8f\u3002 array09[[1, 5, 7, 2], [0, 3, 1, 2]] \u53ef\u4ee5\u7406\u89e3\u4e3a\u57fa\u4e8e array09[[1, 5, 7, 2]] \u8f93\u51fa\u7684\u77e9\u9635\uff0c\u901a\u8fc7[0, 3, 1, 2]\u6307\u5b9a\u4e86\u7ed3\u679c\u96c6\u7684\u6bcf\u4e00\u884c\u9009\u53d6\u7684\u503c\uff0c\u6bd4\u5982\uff0c3\u4ee3\u8868\u7ed3\u679c\u96c6[20 21 22 23]\u7684\u7b2c\u4e09\u4e2a\u5143\u7d20\uff0823\uff09\u3002\u6216\u8005\uff0c\u53ef\u4ee5\u7406\u89e3\u4e3a\uff0c\u5143\u7d20\uff081, 0\uff09\u3001\uff085, 3\uff09\u3001\uff087, 1\uff09\u548c\uff082, 2\uff09\u88ab\u9009\u4e2d\u3002","title":"\u795e\u5947\u7d22\u5f15\uff08\u82b1\u5f0f\u7d22\u5f15\uff09"},{"location":"python/DataAnalysis/ch01/#_5","text":"\u6570\u7ec4\u8f6c\u7f6e\uff0c\u6709T\u5c5e\u6027\u3001 transpose() \u65b9\u6cd5\u3001 swapaxes() \u65b9\u6cd5\u3002 swapaxes() \u65b9\u6cd5\u9ed8\u8ba4\u662f(0\u8f74, 1\u8f74)\uff0c\u5373 swapaxes(0, 1) \uff0c\u8fd4\u56de\u7684\u662f\u6570\u636e\u7684\u89c6\u56fe\uff0c\u6ca1\u6709\u5bf9\u6570\u636e\u8fdb\u884c\u590d\u5236\u3002 array10 = np.arange(15).reshape((3, 5)) print(array10) # [[ 0 1 2 3 4] # [ 5 6 7 8 9] # [10 11 12 13 14]] # \u77e9\u9635\u8f6c\u7f6e\uff08T\u5c5e\u6027\uff09 print(array10.T) # [[ 0 5 10] # [ 1 6 11] # [ 2 7 12] # [ 3 8 13] # [ 4 9 14]] # \u77e9\u9635\u8f6c\u7f6e\uff08transpose()\u65b9\u6cd5\uff09 print(array10.transpose()) # [[ 0 5 10] # [ 1 6 11] # [ 2 7 12] # [ 3 8 13] # [ 4 9 14]] # \u77e9\u9635\u8f6c\u7f6e\uff08swapaxes()\u65b9\u6cd5\uff09 print(array10.swapaxes(1, 0)) # [[ 0 5 10] # [ 1 6 11] # [ 2 7 12] # [ 3 8 13] # [ 4 9 14]] \u901a\u8fc7T\u5c5e\u6027\uff0c\u8ba1\u7b97\u77e9\u9635\u5185\u79ef\uff08Inner Product\uff09\u3002\u77e9\u9635\u5185\u79ef\u53c2\u7167\u5411\u91cf\u5185\u79ef\u7684\u5b9a\u4e49\u662f\uff1a\u4e24\u4e2a\u5411\u91cf\u5bf9\u5e94\u5206\u91cf\u4e58\u79ef\u4e4b\u548c\u3002 array10 = np.arange(6).reshape((2, 3)) print(array10) # [[0 1 2] # [3 4 5]] print(array10.T) # [[0 3] # [1 4] # [2 5]] print(np.dot(array10, array10.T)) # [[ 5 14] # [14 50]] \u5bf9\u4e8e\u66f4\u9ad8\u7ef4\u5ea6\u7684\u6570\u7ec4\uff0c transpose() \u65b9\u6cd5\u53ef\u4ee5\u63a5\u6536\u5305\u542b\u8f74\u7f16\u53f7\u7684\u5143\u7ec4\uff0c\u7528\u4e8e\u7f6e\u6362\u8f74\u3002 array11 = np.arange(36).reshape((3, 3, 4)) print(array11) # [[[ 0 1 2 3] # [ 4 5 6 7] # [ 8 9 10 11]] # # [[12 13 14 15] # [16 17 18 19] # [20 21 22 23]] # # [[24 25 26 27] # [28 29 30 31] # [32 33 34 35]]] print(array11.transpose((0, 1, 2))) # \u9ed8\u8ba4\u662f(0\u8f74, 1\u8f74, 2\u8f74)\u3002\u6240\u4ee5\u8f93\u51fa\u539f\u77e9\u9635 # [[[ 0 1 2 3] # [ 4 5 6 7] # [ 8 9 10 11]] # # [[12 13 14 15] # [16 17 18 19] # [20 21 22 23]] # # [[24 25 26 27] # [28 29 30 31] # [32 33 34 35]]] print(array11.transpose((1, 0, 2))) # \u8f93\u51fa\u987a\u5e8f\u8c03\u6574\u4e3a\u539f\u77e9\u9635\u7684(1\u8f74, 0\u8f74, 2\u8f74) # [[[ 0 1 2 3] # [12 13 14 15] # [24 25 26 27]] # # [[ 4 5 6 7] # [16 17 18 19] # [28 29 30 31]] # # [[ 8 9 10 11] # [20 21 22 23] # [32 33 34 35]]] print(array11.swapaxes(1, 0)) # \u540c\u4e0atranspose((1, 0, 2)) # [[[ 0 1 2 3] # [12 13 14 15] # [24 25 26 27]] # # [[ 4 5 6 7] # [16 17 18 19] # [28 29 30 31]] # # [[ 8 9 10 11] # [20 21 22 23] # [32 33 34 35]]] print(array11.transpose((2, 1, 0))) # [[[ 0 12 24] # [ 4 16 28] # [ 8 20 32]] # # [[ 1 13 25] # [ 5 17 29] # [ 9 21 33]] # # [[ 2 14 26] # [ 6 18 30] # [10 22 34]] # [[ 3 15 27] # [ 7 19 31] # [11 23 35]]]","title":"\u6570\u7ec4\u8f6c\u7f6e\u548c\u6362\u8f74"},{"location":"python/DataAnalysis/ch01/#_6","text":"\u901a\u7528\u51fd\u6570 \u4e5f\u79f0\u4e3aufunc\uff0c\u662f\u4e00\u79cd\u5728ndarray\u6570\u636e\u4e2d\u8fdb\u884c\u9010\u5143\u7d20\u64cd\u4f5c\u7684\u51fd\u6570\uff0c\u5373\u5feb\u901f\u7684\u9010\u5143\u7d20\u6570\u7ec4\u51fd\u6570\u3002 \u67d0\u4e9b\u7b80\u5355\u51fd\u6570\u63a5\u6536\u4e00\u4e2a\u6216\u591a\u4e2a\u6807\u91cf\u6570\u503c\uff0c\u5e76\u4ea7\u751f\u4e00\u4e2a\u6216\u591a\u4e2a\u6807\u91cf\u7ed3\u679c\uff0c\u800c \u901a\u7528\u51fd\u6570\u5c31\u662f\u5bf9\u8fd9\u4e9b\u7b80\u5355\u51fd\u6570\u7684\u5411\u91cf\u5316\u5c01\u88c5 \u3002 \u4e00\u5143\u901a\u7528\u51fd\u6570 abs\u3001fabs\uff1a\u9010\u5143\u7d20\u5730\u8ba1\u7b97\u6574\u6570\u3001\u6d6e\u70b9\u6570\u6216\u590d\u6570\u7684\u7edd\u5bf9\u503c sqrt\uff1a\u8ba1\u7b97\u6bcf\u4e2a\u5143\u7d20\u7684\u5e73\u65b9\u6839\uff08\u4e0earr**0.5\u76f8\u7b49\uff09 square\uff1a\u8ba1\u7b97\u6bcf\u4e2a\u5143\u7d20\u7684\u5e73\u65b9\uff08\u4e0earr**2\u76f8\u7b49\uff09 exp\uff1a\u8ba1\u7b97\u4ee5e\u4e3a\u5e95, \u6570\u7ec4\u5143\u7d20\u4e3a\u5e42\u6b21\u7684\u6307\u6570\u51fd\u6570 \u4e8c\u5143\u901a\u7528\u51fd\u6570 add\uff1a\u5c06\u6570\u7ec4\u7684\u5bf9\u5e94\u5143\u7d20\u76f8\u52a0\u3002 subtract\uff1a\u5728\u7b2c\u4e8c\u4e2a\u6570\u7ec4\u4e2d\uff0c\u5c06\u7b2c\u4e00\u4e2a\u6570\u7ec4\u4e2d\u5305\u542b\u7684\u5143\u7d20\u53bb\u9664\u3002 multiply\uff1a\u5c06\u6570\u7ec4\u7684\u5bf9\u5e94\u5143\u7d20\u76f8\u4e58\u3002 divide\uff0cfloor_divide\uff1a\u9664\u3001\u6216\u6574\u9664\uff08\u653e\u5f03\u4f59\u6570\uff09 power\uff1a\u5c06\u7b2c\u4e8c\u4e2a\u6570\u7ec4\u7684\u5143\u7d20\u4f5c\u4e3a\u7b2c\u4e00\u4e2a\u6570\u7ec4\u5bf9\u5e94\u5143\u7d20\u7684\u5e42\u6b21\u65b9\u3002 maximun\u3001fmax\uff1a\u9010\u4e2a\u5143\u7d20\u8ba1\u7b97\u6700\u5927\u503c\uff0cfmax\u5ffd\u7565NaN\u3002 minimum\u3001fmin\uff1a\u9010\u4e2a\u5143\u7d20\u8ba1\u7b97\u6700\u5c0f\u503c\uff0cfmin\u5ffd\u7565NaN\u3002 mod\uff1a\u6309\u5143\u7d20\u7684\u6c42\u6a21\u8ba1\u7b97\uff08\u5373\u6c42\u9664\u6cd5\u7684\u4f59\u6570\uff09\u3002 copysign\uff1a\u5c06\u7b2c\u4e00\u4e2a\u6570\u7ec4\u7684\u7b26\u53f7\u503c\u6539\u4e3a\u7b2c\u4e8c\u4e2a\u6570\u7ec4\u7684\u7b26\u53f7\u503c\u3002 greater\u3001greater_euqal\u3001less\u3001less_equal\u3001equal\u3001not_euqal\uff1a\u8fdb\u884c\u9010\u4e2a\u5143\u7d20\u7684\u6bd4\u8f83\uff0c\u8fd4\u56de\u5e03\u5c14\u503c\u6570\u7ec4\u3002 logical_and\u3001logical_or\u3001logical_xor\uff1a\u8fdb\u884c\u9010\u4e2a\u5143\u7d20\u7684\u903b\u8f91\u64cd\u4f5c\u3002 \u770b\u4e0b\u4f8b\uff0c\u5bf9\u591a\u7ef4\u6570\u7ec4\u8ba1\u7b97exp\u51fd\u6570\u3002 array12 = np.arange(10).reshape((2, 5)) print(array12) # [[0 1 2 3 4] # [5 6 7 8 9]] print(np.sqrt(array12)) # [[0. 1. 1.41421356 1.73205081 2. ] # [2.23606798 2.44948974 2.64575131 2.82842712 3. ]] print(np.exp(array12)) # [[1.00000000e+00 2.71828183e+00 7.38905610e+00 2.00855369e+01 5.45981500e+01] # [1.48413159e+02 4.03428793e+02 1.09663316e+03 2.98095799e+03 8.10308393e+03]] \u4e0b\u4f8b\u4e2d\uff0c numpy.maximum \u9010\u5143\u7d20\u5730\u5c06\u6570\u7ec4 x \u548c y \u4e2d\u7684\u6700\u5927\u503c\u8ba1\u7b97\u51fa\u6765\u3002 numpy.add \u9010\u5143\u7d20\u5730\u5c06\u6570\u7ec4 x \u548c y \u7684\u548c\u8ba1\u7b97\u51fa\u6765\u3002 array13 = [1, 4, 5, 8, 9] array14 = [2, 3, 6, 7, 10] print(np.maximum(array13, array14)) # [ 2 4 6 8 10] print(np.add(array13, array14)) # [ 3 7 11 15 19] \u4e0b\u4f8b\u4e2d\uff0c modf \u8fd4\u56de\u4e00\u4e2a\u6d6e\u70b9\u503c\u6570\u7ec4\u7684\u5c0f\u6570\u90e8\u5206\u548c\u6574\u6570\u90e8\u5206 array15 = np.random.randn(7) * 5 print(array15) # [-7.54395135 -0.065131 2.71582306 2.2432261 11.02637158 6.73968036 2.96895379] remainder, whole_part = np.modf(array15) print(remainder) # [-0.54395135 -0.065131 0.71582306 0.2432261 0.02637158 0.73968036 0.96895379] print(whole_part) # [-7. -0. 2. 2. 11. 6. 2.]","title":"\u901a\u7528\u51fd\u6570"},{"location":"python/DataAnalysis/ch01/#_7","text":"\u5229\u7528 \u6570\u7ec4\u8868\u8fbe\u5f0f \u6765\u66ff\u4ee3\u663e\u5f0f\u5faa\u73af\u7684\u65b9\u6cd5\uff0c\u79f0\u4e3a \u5411\u91cf\u5316 \u3002 \u5411\u91cf\u5316\u7684\u6570\u7ec4\u64cd\u4f5c\u4f1a\u6bd4\u7eafPython\u7684\u7b49\u4ef7\u5b9e\u73b0\u5728\u901f\u5ea6\u4e0a\u5feb\u4e00\u5230\u4e24\u4e2a\u6570\u91cf\u7ea7\uff08\u751a\u81f3\u66f4\u591a\uff09\u3002 \u4e0b\u4f8b\u4e2d\uff0cnp.meshgrid\u51fd\u6570\u63a5\u6536\u4e24\u4e2a\u4e00\u7ef4\u6570\u7ec4\uff0c\u5e76\u6839\u636e\u4e24\u4e2a\u6570\u7ec4\u7684\u6240\u6709(x, y)\u5bf9\u751f\u6210\u4e00\u4e2a\u4e8c\u7ef4\u77e9\u9635\u3002 array = np.arange(-5, 5, 1, dtype=int) print(\"\u6837\u672c\u77e9\u9635 \\n\", array) xs, ys = np.meshgrid(array, array) print(\"\u751f\u6210x\u8f74\u54112\u7ef4\u77e9\u9635 \\n\", xs) print(\"\u751f\u6210y\u8f74\u54112\u7ef4\u77e9\u9635 \\n\", ys) # \u6837\u672c\u77e9\u9635 # [-5 -4 -3 -2 -1 0 1 2 3 4] # \u751f\u6210x\u8f74\u54112\u7ef4\u77e9\u9635 # [[-5 -4 -3 -2 -1 0 1 2 3 4] # [-5 -4 -3 -2 -1 0 1 2 3 4] # [-5 -4 -3 -2 -1 0 1 2 3 4] # [-5 -4 -3 -2 -1 0 1 2 3 4] # [-5 -4 -3 -2 -1 0 1 2 3 4] # [-5 -4 -3 -2 -1 0 1 2 3 4] # [-5 -4 -3 -2 -1 0 1 2 3 4] # [-5 -4 -3 -2 -1 0 1 2 3 4] # [-5 -4 -3 -2 -1 0 1 2 3 4] # [-5 -4 -3 -2 -1 0 1 2 3 4]] # \u751f\u6210y\u8f74\u54112\u7ef4\u77e9\u9635 # [[-5 -5 -5 -5 -5 -5 -5 -5 -5 -5] # [-4 -4 -4 -4 -4 -4 -4 -4 -4 -4] # [-3 -3 -3 -3 -3 -3 -3 -3 -3 -3] # [-2 -2 -2 -2 -2 -2 -2 -2 -2 -2] # [-1 -1 -1 -1 -1 -1 -1 -1 -1 -1] # [ 0 0 0 0 0 0 0 0 0 0] # [ 1 1 1 1 1 1 1 1 1 1] # [ 2 2 2 2 2 2 2 2 2 2] # [ 3 3 3 3 3 3 3 3 3 3] # [ 4 4 4 4 4 4 4 4 4 4]] \u4e0b\u9762\u7528\u56fe\u5f62\u5316\u6765\u8f93\u51fa\u4e0a\u4f8b\u4e2d\u751f\u6210\u7684NumPy\u7684\u6570\u7ec4\u3002 import numpy as np import matplotlib.pyplot as plt array = np.arange(-5, 5, 1, dtype=int) xs, ys = np.meshgrid(array, array) z = np.sqrt(xs**2 + ys**2) print(\"\u6837\u672c\u77e9\u9635 \\n\", z) # \u6837\u672c\u77e9\u9635 # [[7.07106781 6.40312424 5.83095189 5.38516481 5.09901951 5. 5.09901951 5.38516481 5.83095189 6.40312424] # [6.40312424 5.65685425 5. 4.47213595 4.12310563 4. 4.12310563 4.47213595 5. 5.65685425] # [5.83095189 5. 4.24264069 3.60555128 3.16227766 3. 3.16227766 3.60555128 4.24264069 5. ] # [5.38516481 4.47213595 3.60555128 2.82842712 2.23606798 2. 2.23606798 2.82842712 3.60555128 4.47213595] # [5.09901951 4.12310563 3.16227766 2.23606798 1.41421356 1. 1.41421356 2.23606798 3.16227766 4.12310563] # [5. 4. 3. 2. 1. 0. 1. 2. 3. 4. ] # [5.09901951 4.12310563 3.16227766 2.23606798 1.41421356 1. 1.41421356 2.23606798 3.16227766 4.12310563] # [5.38516481 4.47213595 3.60555128 2.82842712 2.23606798 2. 2.23606798 2.82842712 3.60555128 4.47213595] # [5.83095189 5. 4.24264069 3.60555128 3.16227766 3. 3.16227766 3.60555128 4.24264069 5. ] # [6.40312424 5.65685425 5. 4.47213595 4.12310563 4. 4.12310563 4.47213595 5. 5.65685425]] # \u4f7f\u7528matplotlib\u6765\u751f\u6210\u8fd9\u4e2a\u4e8c\u7ef4\u6570\u7ec4\u7684\u53ef\u89c6\u5316 plt.imshow(z, cmap=plt.cm.gray) print(plt.colorbar) # <function colorbar at 0x7f9c91193f70> # \u56fe\u50cf\u6807\u9898 plt.title(\"$\\sqrt{x^2 + y^2}$ \u8ba1\u7b97\u503c\u7684\u7f51\u683c\u56fe\") # \u8f93\u51fa\u56fe\u50cf plt.show() \u8f93\u51fa\u56fe\u50cf\u4e3a\uff1a","title":"\u9762\u5411\u6570\u7ec4\u7f16\u7a0b"},{"location":"python/DataAnalysis/ch01/#_8","text":"numpy.where \u51fd\u6570\u662f\u4e09\u5143\u8868\u8fbe\u5f0f x if condition else y \u7684\u5411\u91cf\u5316\u7248\u672c\u3002 np.where \u7684\u7b2c\u4e8c\u4e2a\u548c\u7b2c\u4e09\u4e2a\u53c2\u6570\u5e76\u4e0d\u9700\u8981\u662f\u6570\u7ec4\uff0c\u5b83\u4eec\u53ef\u4ee5\u662f\u6807\u91cf\u3002 np.where \u5728\u6570\u636e\u5206\u6790\u4e2d\u7684\u4e00\u4e2a\u5178\u578b\u7528\u6cd5\u662f\u6839\u636e\u4e00\u4e2a\u6570\u7ec4\u6765\u751f\u6210\u4e00\u4e2a\u65b0\u7684\u6570\u7ec4\u3002 \u5047\u8bbe\u6211\u4eec\u6709\u4e00\u4e2a\u5e03\u5c14\u503c\u6570\u7ec4\u548c\u4e24\u4e2a\u6570\u503c\u6570\u7ec4\u3002\u5047\u8bbe cond \u4e2d\u7684\u5143\u7d20\u4e3a True \u65f6\uff0c\u6211\u4eec\u53d6 xarr \u4e2d\u7684\u5bf9\u5e94\u5143\u7d20\u503c\uff0c\u5426\u5219\u53d6 yarr \u4e2d\u7684\u5143\u7d20\u3002 xarray = np.array([1.1, 1.2, 1.3, 1.4, 1.5]) yarray = np.array([2.1, 2.2, 2.3, 2.4, 2.5]) cond = np.array([True, False, True, True, False]) \u901a\u8fc7\u5217\u8868\u63a8\u5bfc\u5f0f\u6765\u5b9e\u73b0\u4e0a\u8ff0\u9700\u6c42\u3002 \u7f3a\u70b9: \u9996\u5148\uff0c\u5982\u679c\u6570\u7ec4\u5f88\u5927\u7684\u8bdd\uff0c\u901f\u5ea6\u4f1a\u5f88\u6162\uff08\u56e0\u4e3a\u6240\u6709\u7684\u5de5\u4f5c\u90fd\u662f\u901a\u8fc7\u89e3\u91ca\u5668\u6765\u89e3\u91caPython\u4ee3\u7801\u5b8c\u6210\uff09\u3002 \u5176\u6b21\uff0c\u5f53\u6570\u7ec4\u662f\u591a\u7ef4\u65f6\uff0c\u5c31\u65e0\u6cd5\u51d1\u6548\u4e86\u3002 # \u901a\u8fc7\u5217\u8868\u63a8\u5bfc\u5f0f\u6765\u5b9e\u73b0 result = [(x if c else y) for x, y, c in zip(xarray, yarray, cond)] print(result) # [1.1, 2.2, 1.3, 1.4, 2.5] \u901a\u8fc7 np.where \u6765\u5b9e\u73b0\u4e0a\u8ff0\u9700\u6c42\u3002 result = np.where(cond, xarray, yarray) print(result) # [1.1 2.2 1.3 1.4 2.5] \u5047\u8bbe\u6709\u4e00\u4e2a\u968f\u673a\u751f\u6210\u7684\u77e9\u9635\u6570\u636e\uff0c\u4e0b\u9762\u4f7f\u7528np.where\u5b9e\u73b0\u66ff\u6362\u3002 array = np.random.randn(4, 4) print(\"\u6837\u672c\u77e9\u9635 \\n\", array) print(\"\u77e9\u9635\u5143\u7d20\u662f\u5426\u5927\u4e8e0 \\n\", array > 0) # \u5c06\u5176\u4e2d\u7684\u6b63\u503c\u90fd\u66ff\u6362\u4e3a2\uff0c\u5c06\u6240\u6709\u7684\u8d1f\u503c\u66ff\u6362\u4e3a-2 result03 = np.where(array > 0, 2, -2) print(\"\u5c06\u5176\u4e2d\u7684\u6b63\u503c\u90fd\u66ff\u6362\u4e3a2\uff0c\u5c06\u6240\u6709\u7684\u8d1f\u503c\u66ff\u6362\u4e3a-2 \\n\", result03) # \u4ec5\u5c06\u5176\u4e2d\u7684\u6b63\u503c\u90fd\u66ff\u6362\u4e3a2 result04 = np.where(array > 0, 2, array) print(\"\u4ec5\u5c06\u5176\u4e2d\u7684\u6b63\u503c\u90fd\u66ff\u6362\u4e3a2 \\n\", result04) # \u6837\u672c\u77e9\u9635 # [[-0.57177422 -0.34917512 2.20268075 1.99959296] # [ 0.67966599 2.67915099 -0.40528454 -0.80339907] # [-0.74406888 2.33802717 -0.74582936 0.59347128] # [ 0.68624473 0.65953112 -0.40871415 -0.68698878]] # \u77e9\u9635\u5143\u7d20\u662f\u5426\u5927\u4e8e0 # [[False False True True] # [ True True False False] # [False True False True] # [ True True False False]] # \u5c06\u5176\u4e2d\u7684\u6b63\u503c\u90fd\u66ff\u6362\u4e3a2\uff0c\u5c06\u6240\u6709\u7684\u8d1f\u503c\u66ff\u6362\u4e3a-2 # [[-2 -2 2 2] # [ 2 2 -2 -2] # [-2 2 -2 2] # [ 2 2 -2 -2]] # \u4ec5\u5c06\u5176\u4e2d\u7684\u6b63\u503c\u90fd\u66ff\u6362\u4e3a2 # [[-0.57177422 -0.34917512 2. 2. ] # [ 2. 2. -0.40528454 -0.80339907] # [-0.74406888 2. -0.74582936 2. ] # [ 2. 2. -0.40871415 -0.68698878]]","title":"\u901a\u8fc7\u6761\u4ef6\u903b\u8f91\u64cd\u4f5c\u6570\u7ec4"},{"location":"python/DataAnalysis/ch01/#_9","text":"NumPy\u6709\u4e00\u4e9b\u4e13\u95e8\u7684\u6570\u5b66\u51fd\u6570\uff0c\u7528\u6765\u8ba1\u7b97\u6574\u4e2a\u6570\u7ec4\u7edf\u8ba1\u503c\u6216\u8f74\u5411\u6570\u636e\u7684\u8ba1\u7b97\u3002\u4f8b\u5982\uff0c\u805a\u5408\u51fd\u6570\uff08\u901a\u5e38\u4e5f\u53eb\u7f29\u51cf\u51fd\u6570\uff09\uff0c\u5982sum\u3001mean\u548cstd\uff08\u6807\u51c6\u5dee\uff09\u3002 \u65e2\u53ef\u4ee5\u76f4\u63a5\u8c03\u7528\u6570\u7ec4\u5b9e\u4f8b\u7684\u65b9\u6cd5\uff0c\u4e5f\u53ef\u4ee5\u4f7f\u7528\u9876\u5c42\u7684NumPy\u51fd\u6570\u3002 \u4e3e\u4f8b\uff1a\u751f\u6210\u4e00\u4e9b\u6b63\u6001\u5206\u5e03\u7684\u968f\u673a\u6570\uff0c\u8ba1\u7b97\u90e8\u5206\u805a\u5408\u7edf\u8ba1\u6570\u636e\u3002 \u8fd9\u91cc\u518d\u5bf9\u8f74\u5411\u505a\u4e2a\u89e3\u91ca\uff0c np.random.randn(5, 4) \u4ea7\u751f\u7684\u4e8c\u7ef4\u6570\u7ec4\u662f\uff1a0\u8f74\u54115\u4e2a\u5143\u7d20, 1\u8f74\u54114\u4e2a\u5143\u7d20\u3002 # \u751f\u62102\u8f74\u6570\u7ec4 array = np.random.randn(5, 4) print(\"\u6837\u672c\u77e9\u9635 \\n\", array) print(\"\u77e9\u9635\u5143\u7d20\u5e73\u5747\u503c\", array.mean()) print(\"\u77e9\u9635\u5143\u7d20\u5e73\u5747\u503c\", np.mean(array)) print(\"\u77e9\u9635\u5143\u7d20\u548c\", array.sum()) print(\"\u77e9\u9635\u5143\u7d20\u548c\", np.sum(array)) print(\"0\u8f74\u5411\u7684\u7d2f\u548c\", array.sum(axis=0)) print(\"1\u8f74\u5411\u7684\u7d2f\u548c\", array.sum(axis=1)) print(\"1\u8f74\u5411\u7684\u5e73\u5747\u503c\", array.mean(axis=1)) # \u6837\u672c\u77e9\u9635 shape=(5, 4) 0\u8f74\u54115\u4e2a\u5143\u7d20, 1\u8f74\u54114\u4e2a\u5143\u7d20 # [[ 0.32532911 -0.00177984 -1.59432632 1.58375133] # [ 1.48921763 0.25202456 0.44076148 -1.02277289] # [-0.73490219 0.19197171 -0.22374362 0.52610852] # [-1.03531076 1.0595528 -0.11566501 0.34063544] # [-0.2122241 -0.81348187 1.70989712 -0.00732696]] # \u77e9\u9635\u5143\u7d20\u5e73\u5747\u503c 0.10788580775057008 # \u77e9\u9635\u5143\u7d20\u5e73\u5747\u503c 0.10788580775057008 # \u77e9\u9635\u5143\u7d20\u548c 2.1577161550114017 # \u77e9\u9635\u5143\u7d20\u548c 2.1577161550114017 # 0\u8f74\u5411\u7684\u7d2f\u548c [-0.16789031 0.68828737 0.21692365 1.42039545] # 1\u8f74\u5411\u7684\u7d2f\u548c [ 0.31297429 1.15923078 -0.24056558 0.24921247 0.67686419] # 1\u8f74\u5411\u7684\u5e73\u5747\u503c [ 0.07824357 0.28980769 -0.06014139 0.06230312 0.16921605] \u4e0b\u9762\u5217\u4e3e\u4e86\u5e38\u7528\u7684\u57fa\u7840\u6570\u7ec4\u7edf\u8ba1\u65b9\u6cd5\u3002 array = np.array([ [1, 2, 3, 4, 5], [3, 4, 5, 6, 7], [5, 6, 7, 8, 9] ], dtype=int) print(\"\u6837\u672c\u77e9\u9635 \\n\", array) print(\"\u8f74\u5411\u6c42\u548c\", array.sum()) print(\"\u8f74\u5411\u6c42\u548c\", array.sum(axis=0)) print(\"\u6570\u5b66\u5e73\u5747\", array.mean()) print(\"\u8f74\u5411\u6570\u5b66\u5e73\u5747\", array.mean(axis=0)) print(\"\u6807\u51c6\u5dee\", array.std(), \"\u65b9\u5dee\", array.var()) print(\"\u8f74\u5411\u6807\u51c6\u5dee\", array.std(axis=0), \"\u8f74\u5411\u65b9\u5dee\", array.var(axis=0)) print(\"\u6700\u5c0f\u503c\", array.min(), \"\u6700\u5927\u503c\", array.max()) print(\"\u8f74\u5411\u6700\u5c0f\u503c\", array.min(axis=0), \"\u8f74\u5411\u6700\u5927\u503c\", array.max(axis=0)) print(\"\u6700\u5c0f\u503c\u4f4d\u7f6e\", array.argmin(), \"\u6700\u5927\u503c\u4f4d\u7f6e\", array.argmax()) print(\"\u8f74\u5411\u6700\u5c0f\u503c\u4f4d\u7f6e\", array.argmin(axis=0), \"\u8f74\u5411\u6700\u5927\u503c\u4f4d\u7f6e\", array.argmax(axis=0)) print(\"\u7d2f\u79ef\u548c \\n\", array.cumsum()) print(\"\u8f74\u5411\u7d2f\u79ef\u548c \\n\", array.cumsum(axis=1)) print(\"\u7d2f\u79ef\u4e58\u79ef \\n\", array.cumprod()) print(\"\u8f74\u5411\u7d2f\u79ef\u4e58\u79ef \\n\", array.cumprod(axis=1)) # \u6837\u672c\u77e9\u9635 # [[1 2 3 4 5] # [3 4 5 6 7] # [5 6 7 8 9]] # \u8f74\u5411\u6c42\u548c 75 # \u8f74\u5411\u6c42\u548c [ 9 12 15 18 21] # \u6570\u5b66\u5e73\u5747 5.0 # \u8f74\u5411\u6570\u5b66\u5e73\u5747 [3. 4. 5. 6. 7.] # \u6807\u51c6\u5dee 2.160246899469287 \u65b9\u5dee 4.666666666666667 # \u8f74\u5411\u6807\u51c6\u5dee [1.63299316 1.63299316 1.63299316 1.63299316 1.63299316] \u8f74\u5411\u65b9\u5dee [2.66666667 2.66666667 2.66666667 2.66666667 2.66666667] # \u6700\u5c0f\u503c 1 \u6700\u5927\u503c 9 # \u8f74\u5411\u6700\u5c0f\u503c [1 2 3 4 5] \u8f74\u5411\u6700\u5927\u503c [5 6 7 8 9] # \u6700\u5c0f\u503c\u4f4d\u7f6e 0 \u6700\u5927\u503c\u4f4d\u7f6e 14 # \u8f74\u5411\u6700\u5c0f\u503c\u4f4d\u7f6e [0 0 0 0 0] \u8f74\u5411\u6700\u5927\u503c\u4f4d\u7f6e [2 2 2 2 2] # \u7d2f\u79ef\u548c # [ 1 3 6 10 15 18 22 27 33 40 45 51 58 66 75] # \u8f74\u5411\u7d2f\u79ef\u548c # [[ 1 3 6 10 15] # [ 3 7 12 18 25] # [ 5 11 18 26 35]] # \u7d2f\u79ef\u4e58\u79ef # [ 1 2 6 24 120 360 # 1440 7200 43200 302400 1512000 9072000 # 63504000 508032000 4572288000] # \u8f74\u5411\u7d2f\u79ef\u4e58\u79ef # [[ 1 2 6 24 120] # [ 3 12 60 360 2520] # [ 5 30 210 1680 15120]]","title":"\u6570\u5b66\u548c\u7edf\u8ba1\u65b9\u6cd5"},{"location":"python/DataAnalysis/ch01/#boolean-array","text":"\u5e03\u5c14\u503c\u6570\u7ec4\uff0c\u6709\u4e24\u4e2a\u975e\u5e38\u6709\u7528\u7684\u65b9\u6cd5any\u548call\u3002 * any\u68c0\u67e5\u6570\u7ec4\u4e2d\u662f\u5426\u81f3\u5c11\u6709\u4e00\u4e2aTrue\uff0c * all\u68c0\u67e5\u662f\u5426\u6bcf\u4e2a\u503c\u90fd\u662fTrue bools = np.array([False, False, True, False]) print(bools.any()) # True print(bools.all()) # False \u4e0b\u9762\u662f\u4e00\u4e2a\u8fd0\u7528\u5e03\u5c14\u503c\u6570\u7ec4\uff08Boolean Array\uff09\u8fdb\u884c\u6c42\u548c\u7684\u4e00\u4e2a\u4f8b\u5b50\uff0c\u5176\u4e2d (array > 0) \u672c\u8eab\u662f\u4e00\u4e2a\u5e03\u5c14\u578b\u7684\u6570\u7ec4\u3002 array = np.random.randn(100) result = (array > 0).sum() # \u8ba1\u7b97\u6b63\u503c\u7684\u4e2a\u6570 print(result) # 59 \u4e0b\u9762\u662f\u8fd0\u7528\u5e03\u5c14\u503c\u6570\u7ec4\u7684\u751f\u6210\u65b0\u6570\u7ec4\u7684\u4f8b\u5b50\u3002 arr = [[8, 9, 10, 11], [0, 1, 2, 3], [4, 5, 6, 7]] arr = np.array(arr) print(arr.shape) # (3, 4) print(arr) # [[ 8 9 10 11] # [ 0 1 2 3] # [ 4 5 6 7]] idx = [[1, 0, 0, 0], [0, 1, 0, 0], [0, 0, 1, 0]] idx = np.array(idx) print(idx.shape) # (3, 4) print(idx) # [[1 0 0 0] # [0 1 0 0] # [0 0 1 0]] result = arr[idx] # <class 'numpy.ndarray'> print(result.shape) # (3, 4, 4) print(result) # [[[ 0 1 2 3] # [ 8 9 10 11] # [ 8 9 10 11] # [ 8 9 10 11]] # [[ 8 9 10 11] # [ 0 1 2 3] # [ 8 9 10 11] # [ 8 9 10 11]] # [[ 8 9 10 11] # [ 8 9 10 11] # [ 0 1 2 3] # [ 8 9 10 11]]] result = arr[idx == 1] print(result.shape) print(result) # [8 1 6]","title":"\u5e03\u5c14\u503c\u6570\u7ec4(Boolean Array)\u7684\u65b9\u6cd5"},{"location":"python/DataAnalysis/ch01/#_10","text":"\u548cPython\u7684\u5185\u5efa\u5217\u8868\u7c7b\u578b\u76f8\u4f3c\uff0cNumPy\u6570\u7ec4\u53ef\u4ee5\u4f7f\u7528sort\u65b9\u6cd5\u6309\u4f4d\u7f6e\u6392\u5e8f\u3002 \u9876\u5c42\u7684np.sort\u65b9\u6cd5\u8fd4\u56de\u7684\u662f\u5df2\u7ecf\u6392\u5e8f\u597d\u7684\u6570\u7ec4 \u62f7\u8d1d \uff0c\u800c\u4e0d\u662f\u5bf9\u539f\u6570\u7ec4\u6309\u4f4d\u7f6e\u6392\u5e8f\u3002 array = np.random.randn(6) print(\"\u6837\u672c\u77e9\u9635\", array) array.sort() print(\"\u6392\u5e8f\u540e\u77e9\u9635\", array) # \u6837\u672c\u77e9\u9635 [-0.03119521 0.01839556 0.79238537 -2.46622775 0.62522211 0.22430846] # \u6392\u5e8f\u540e\u77e9\u9635 [-2.46622775 -0.03119521 0.01839556 0.22430846 0.62522211 0.79238537] \u591a\u7ef4\u6570\u7ec4\u4e2d\u6839\u636e\u4f20\u9012\u7684axis\u503c\uff0c\u6cbf\u7740\u8f74\u5411\u5bf9\u6bcf\u4e2a\u4e00\u7ef4\u6570\u636e\u6bb5\u8fdb\u884c\u6392\u5e8f\u3002 array = np.random.randn(5, 3) print(\"\u6837\u672c\u77e9\u9635 \\n\", array) array.sort(1) print(\"\u5bf91\u8f74\u6392\u5e8f\u540e\u77e9\u9635 \\n\", array) # \u6837\u672c\u77e9\u9635 # [[-0.88057833 0.30160954 -2.08788148] # [ 0.27969618 0.62923028 -0.58157581] # [-1.87194465 -1.1102104 1.09589605] # [ 0.1467938 -1.01558304 -0.25905165] # [-0.17294279 0.62369511 0.17947059]] # \u5bf91\u8f74\u6392\u5e8f\u540e\u77e9\u9635 # [[-2.08788148 -0.88057833 0.30160954] # [-0.58157581 0.27969618 0.62923028] # [-1.87194465 -1.1102104 1.09589605] # [-1.01558304 -0.25905165 0.1467938 ] # [-0.17294279 0.17947059 0.62369511]]","title":"\u6392\u5e8f"},{"location":"python/DataAnalysis/ch01/#_11","text":"NumPy\u5305\u542b\u4e00\u4e9b\u9488\u5bf9\u4e00\u7ef4 ndarray \u6570\u7ec4\u7684\u57fa\u7840\u96c6\u5408\u64cd\u4f5c\u3002 np.unique(x, y) \u8ba1\u7b97x\u7684\u552f\u4e00\u503c\uff0c\u5e76\u6392\u5e8f\u3002 names = np.array(['Bob', 'Joe', 'Will', 'Bob', 'Will', 'Joe', 'Joe']) result = np.unique(names) # NumPy\u5b9e\u73b0 print(result) # ['Bob' 'Joe' 'Will'] result = sorted(set(names)) # \u7eafPython\u5b9e\u73b0 print(result) # ['Bob' 'Joe' 'Will'] inits = np.array([3, 3, 3, 2, 2, 1, 1, 5, 5]) result = np.unique(inits) print(result) # [1 2 3 5] np.in1d(x, y) \u8ba1\u7b97x\u4e2d\u7684\u5143\u7d20\u662f\u5426\u5305\u542b\u5728y\u4e2d\uff0c\u5e76\u8fd4\u56de\u4e00\u4e2a\u5e03\u5c14\u503c\u6570\u7ec4\u3002 inits = np.array([3, 3, 3, 2, 2, 1, 1, 5, 5]) print(np.in1d(inits, [3, 4, 5])) # [ True True True False False False False True True] np.intersect1d(x, y) \uff0c\u8ba1\u7b97x\u548cy\u7684\u4ea4\u96c6\uff0c\u5e76\u6392\u5e8f\u3002 inits = np.array([3, 3, 3, 2, 2, 1, 1, 5, 5]) print(np.intersect1d(inits, [3, 4, 5])) # [3 5] np.union1d(x, y) \u8ba1\u7b97x\u548cy\u7684\u5e76\u96c6\uff0c\u5e76\u6392\u5e8f\u3002 inits = np.array([3, 3, 3, 2, 2, 1, 1, 5, 5]) print(np.union1d(inits, [3, 4, 5])) # [1 2 3 4 5] np.setdiff1d(x, y) \u5dee\u96c6\uff0c\u5728x\u4e2d\u4f46\u4e0d\u5728y\u4e2d\u7684\u5143\u7d20\u3002 inits = np.array([3, 3, 3, 2, 2, 1, 1, 5, 5]) print(np.setdiff1d(inits, [3, 4, 5])) # [1 2] np.setxor1d(x, y) \u5f02\u6216\u96c6\uff0c\u5728x\u6216\u8005y\u4e2d\uff0c\u4f46\u4e0d\u5c5e\u4e8ex\uff0cy\u4ea4\u96c6\u7684\u5143\u7d20\u3002 inits = np.array([3, 3, 3, 2, 2, 1, 1, 5, 5]) print(np.setxor1d(inits, [3, 4, 5])) # [1 2 4]","title":"\u552f\u4e00\u503c\u4e0e\u5176\u4ed6\u96c6\u5408\u903b\u8f91"},{"location":"python/DataAnalysis/ch01/#_12","text":"NumPy\u53ef\u4ee5\u5728\u786c\u76d8\u4e2d\u5c06\u6570\u636e\u4ee5\u6587\u672c\u6216\u4e8c\u8fdb\u5236\u6587\u4ef6\u7684\u5f62\u5f0f\u8fdb\u884c\u5b58\u5165\u786c\u76d8\u6216\u7531\u786c\u76d8\u8f7d\u5165\u3002 \u5f53\u524d\u53ea\u5173\u6ce8NumPy\u7684\u5185\u5efa\u4e8c\u8fdb\u5236\u683c\u5f0f\uff0c\u56e0\u4e3a\u5927\u90e8\u5206\u7528\u6237\u66f4\u503e\u5411\u4e8e\u4f7f\u7528pandas\u6216\u5176\u4ed6\u5de5\u5177\u6765\u8f7d\u5165\u6587\u672c\u6216\u8868\u683c\u578b\u6570\u636e\u3002 np.save \u548c np.load \u662f\u9ad8\u6548\u5b58\u53d6\u786c\u76d8\u6570\u636e\u7684\u4e24\u5927\u5de5\u5177\u51fd\u6570\u3002\u6570\u7ec4\u5728\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u662f\u4ee5 \u672a\u538b\u7f29 \u7684\u683c\u5f0f\u8fdb\u884c\u5b58\u50a8\u7684\uff0c\u540e\u7f00\u540d\u662f.npy\u3002 import numpy as np array1 = np.arange(10) array2 = np.arange(15).reshape(3, 5) array3 = np.arange(30).reshape(3, 2, 5) print(array1) # [0 1 2 3 4 5 6 7 8 9] print(array2) # [[ 0 1 2 3 4] # [ 5 6 7 8 9] # [10 11 12 13 14]] print(array3) # [[[ 0 1 2 3 4] # [ 5 6 7 8 9]] # [[10 11 12 13 14] # [15 16 17 18 19]] # [[20 21 22 23 24] # [25 26 27 28 29]]] # \u67e5\u770b\u5f53\u524d\u8def\u5f84 os.getcwd() # '/opt/myProject/mySite' # \u66f4\u6539\u9ed8\u8ba4\u8def\u5f84 os.chdir('/opt/myProject/mySite/docs/python/datasets/examples') # \u4fdd\u5b58\u5230\u9ed8\u8ba4\u8def\u5f84\u3002npy\u540e\u7f00\u540d\u4f1a\u88ab\u81ea\u52a8\u52a0\u4e0a np.save('some_array', array1) # \u8bfb\u53d6\u6240\u4fdd\u5b58\u7684\u6587\u4ef6 result = np.load('some_array.npy') # \u5bf9\u6bd4\u7ed3\u679c\u4e00\u81f4\u3002 print(result) # [0 1 2 3 4 5 6 7 8 9] # \u5c06\u591a\u4e2a\u6570\u7ec4\u4fdd\u5b58\u5230\u672a\u538b\u7f29\u7684\u5355\u4e2a\u6587\u4ef6\u4e2d\uff0c.npz\u683c\u5f0f np.savez('some_array_archive.npz', a=array2, b=array3) result = np.load('some_array_archive.npz') # reslt\u662f\u4e00\u4e2a\u5b57\u5178\u578b\u7684\u5bf9\u8c61 print(result['b']) # \u8f7d\u5165\u5355\u4e2a\u6570\u7ec4b # [[[ 0 1 2 3 4] # [ 5 6 7 8 9]] # [[10 11 12 13 14] # [15 16 17 18 19]] # [[20 21 22 23 24] # [25 26 27 28 29]]]","title":"\u4f7f\u7528\u6570\u7ec4\u8fdb\u884c\u6587\u4ef6\u8f93\u5165\u548c\u8f93\u51fa"},{"location":"python/DataAnalysis/ch01/#_13","text":"\u53c2\u8003\u94fe\u63a5\uff1a https://www.numpy.org.cn/reference/routines/linalg.html https://github.com/teadocs/numpy-cn \u5e0c\u814a\u5b57\u6bcd: \u0391 \u03b1 /'\u00e6lf\u0259/ alpha \u0392 \u03b2 /'bi:t\u0259/ beta \u0393 \u03b3 /'g\u00e6m\u0259/ gamma \u0394 \u03b4 /'delt\u0259/ delta \u0395 \u03b5 /'eps\u026al\u0252n/ epsilon \u0396 \u03b6 /'zi:t\u0259/ zeta \u0397 \u03b7 /'i:t\u0259/ eta \u0398 \u03b8 /'\u03b8i:t\u0259/ theta \u0399 \u03b9 /'a\u026a\u0259\u028at\u0259/ iota \u039a \u03ba /'k\u00e6p\u0259/ kappa \u2227 \u03bb /'l\u00e6md\u0259/ lambda \u039c \u03bc /mju:/ mu \u039d \u03bd /nju:/ nu \u039e \u03be /ksi/ xi \u039f \u03bf /\u0259u\u02c8maikr\u0259n/ omicron \u220f \u03c0 /pa\u026a/ pi \u03a1 \u03c1 /r\u0259\u028a/ rho \u2211 \u03c3 /'s\u026a\u0261m\u0259/ sigma \u03a4 \u03c4 /t\u0254:/ tau \u03a5 \u03c5 /\u02c8ips\u026alon/ upsilon \u03a6 \u03c6 /fa\u026a/ phi \u03a7 \u03c7 /ka\u026a/ chi \u03a8 \u03c8 /psa\u026a/ psi \u03a9 \u03c9 /'\u0259\u028am\u026a\u0261\u0259/ omega numpy.linalg \u6a21\u5757\u5305\u542b\u7ebf\u6027\u4ee3\u6570\u7684\u51fd\u6570\u3002\u4f7f\u7528\u8fd9\u4e2a\u6a21\u5757\uff0c\u53ef\u4ee5\u8ba1\u7b97\u9006\u77e9\u9635\u3001\u6c42\u7279\u5f81\u503c\u3001\u89e3\u7ebf\u6027\u65b9\u7a0b\u7ec4\u4ee5\u53ca\u6c42\u89e3\u884c\u5217\u5f0f\u7b49\u3002 import numpy as np from numpy import linalg as LA from numpy import * from numpy.linalg import inv import matplotlib.pyplot as plt","title":"\u7ebf\u6027\u4ee3\u6570"},{"location":"python/DataAnalysis/ch01/#diag","text":"np.diag \u5c06\u4e00\u4e2a\u65b9\u9635\u7684\u5bf9\u89d2\uff08\u6216\u975e\u5bf9\u89d2\uff09\u5143\u7d20\u4f5c\u4e3a\u4e00\u7ef4\u6570\u7ec4\u8fd4\u56de\uff0c\u6216\u8005\u5c06\u4e00\u7ef4\u6570\u7ec4\u8f6c\u6362\u6210\u4e00\u4e2a\u65b9\u9635\uff0c\u5e76\u4e14\u5728\u975e\u5bf9\u89d2\u7ebf\u4e0a\u6709\u96f6\u70b9\u3002 a1 = np.arange(9, dtype=float).reshape((3, 3)) r1 = np.diag(a1) r2 = np.diag(a1, k=1) r3 = np.diag(a1, k=-1) r4 = np.diag(np.diag(a1)) # \u5bf9\u89d2\u77e9\u9635 print(\"\u6837\u672c\u77e9\u9635 \\n\", a1) print(\"\u77e9\u9635\u5bf9\u89d2\u7ebf\", r1) print(\"\u77e9\u9635\u5bf9\u89d2\u7ebf\u5411\u4e0a\u504f\u79fb\", r2) print(\"\u77e9\u9635\u5bf9\u89d2\u7ebf\u5411\u4e0b\u504f\u79fb\", r3) print(\"\u5bf9\u89d2\u77e9\u9635 \\n\", r4) # \u6837\u672c\u77e9\u9635 # [[0. 1. 2.] # [3. 4. 5.] # [6. 7. 8.]] # \u77e9\u9635\u5bf9\u89d2\u7ebf [0. 4. 8.] # \u77e9\u9635\u5bf9\u89d2\u7ebf\u5411\u4e0a\u504f\u79fb [1. 5.] # \u77e9\u9635\u5bf9\u89d2\u7ebf\u5411\u4e0b\u504f\u79fb [3. 7.] # \u5bf9\u89d2\u77e9\u9635 # [[0. 0. 0.] # [0. 4. 0.] # [0. 0. 8.]]","title":"diag"},{"location":"python/DataAnalysis/ch01/#dot","text":"np.dot \u5c06\u5411\u91cf\u4e2d\u5bf9\u5e94\u5143\u7d20\u76f8\u4e58\uff0c\u518d\u76f8\u52a0\u6240\u5f97\u3002\u5373\u666e\u901a\u7684\u5411\u91cf\u4e58\u6cd5\u8fd0\u7b97\uff0c\u6216 \u77e9\u9635\u70b9\u4e58 \u3002 a1 = np.dot(3, 4) print(a1) # 12 a2 = np.arange(9, dtype=float).reshape((3, 3)) r2 = np.dot(a2, a2) print(a2) # [[0. 1. 2.] # [3. 4. 5.] # [6. 7. 8.]] print(r2) # [[ 15. 18. 21.] # [ 42. 54. 66.] # [ 69. 90. 111.]] r3 = np.dot([2j, 3j], [2j, 3j]) print(r3) # (-13+0j)","title":"dot"},{"location":"python/DataAnalysis/ch01/#trace","text":"np.trace \u8ba1\u7b97\u5bf9\u89d2\u5143\u7d20\u548c\u3002 a1 = np.arange(9, dtype=float).reshape((3, 3)) print(\"\u6837\u672c\u77e9\u9635 \\n\", a1) r1 = np.trace(a1) print(\"\u5bf9\u89d2\u7ebf\u5143\u7d20\u6c42\u548c\", r1) a2 = np.arange(24, dtype=float).reshape((2, 3, 4)) r2 = np.trace(a2) print(\"\u6837\u672c\u77e9\u9635 \\n\", a2) print(\"\u5bf9\u89d2\u7ebf\u5143\u7d20\u6c42\u548c\", r2) # \u6837\u672c\u77e9\u9635 # [[0. 1. 2.] # [3. 4. 5.] # [6. 7. 8.]] # \u5bf9\u89d2\u7ebf\u5143\u7d20\u6c42\u548c 12.0 # \u6837\u672c\u77e9\u9635 # [[[ 0. 1. 2. 3.] # [ 4. 5. 6. 7.] # [ 8. 9. 10. 11.]] # # [[12. 13. 14. 15.] # [16. 17. 18. 19.] # [20. 21. 22. 23.]]] # \u5bf9\u89d2\u7ebf\u5143\u7d20\u6c42\u548c [16. 18. 20. 22.]","title":"trace"},{"location":"python/DataAnalysis/ch01/#det","text":"np.det \u8ba1\u7b97\u77e9\u9635\u7684\u884c\u5217\u5f0f\uff08\u65b9\u9635\uff09\u3002 \u4e8c\u9636\u884c\u5217\u5f0f[[a, b], [c, d]]\u7684\u503c\u662fad - bc \u4e09\u9636\u884c\u5217\u5f0f [[a, b, c], [d, e, f], [g, h, i]]\u7684\u503c\u662f aei + bfd + cdh - ceg - bdi - afh \u4e09\u9636\u884c\u5217\u5f0f\u7684\u6027\u8d28 \u6027\u8d281\uff1a\u884c\u5217\u5f0f\u4e0e\u5b83\u7684\u8f6c\u7f6e\u884c\u5217\u5f0f\u76f8\u7b49\u3002 \u6027\u8d282\uff1a\u4e92\u6362\u884c\u5217\u5f0f\u7684\u4e24\u884c(\u5217)\uff0c\u884c\u5217\u5f0f\u53d8\u53f7\u3002 \u63a8\u8bba\uff1a\u5982\u679c\u884c\u5217\u5f0f\u6709\u4e24\u884c(\u5217)\u5b8c\u5168\u76f8\u540c\uff0c\u5219\u6b64\u884c\u5217\u5f0f\u4e3a\u96f6\u3002 \u6027\u8d283\uff1a\u884c\u5217\u5f0f\u7684\u67d0\u4e00\u884c(\u5217)\u4e2d\u6240\u6709\u7684\u5143\u7d20\u90fd\u4e58\u4ee5\u540c\u4e00\u6570k\uff0c\u7b49\u4e8e\u7528\u6570k\u4e58\u6b64\u884c\u5217\u5f0f\u3002 \u63a8\u8bba\uff1a\u884c\u5217\u5f0f\u4e2d\u67d0\u4e00\u884c(\u5217)\u7684\u6240\u6709\u5143\u7d20\u7684\u516c\u56e0\u5b50\u53ef\u4ee5\u63d0\u5230\u884c\u5217\u5f0f\u7b26\u53f7\u7684\u5916\u9762\u3002 \u6027\u8d284\uff1a\u884c\u5217\u5f0f\u4e2d\u5982\u679c\u6709\u4e24\u884c(\u5217)\u5143\u7d20\u6210\u6bd4\u4f8b\uff0c\u5219\u6b64\u884c\u5217\u5f0f\u7b49\u4e8e\u96f6\u3002 \u6027\u8d285\uff1a\u628a\u884c\u5217\u5f0f\u7684\u67d0\u4e00\u5217(\u884c)\u7684\u5404\u5143\u7d20\u4e58\u4ee5\u540c\u4e00\u6570\u7136\u540e\u52a0\u5230\u53e6\u4e00\u5217(\u884c)\u5bf9\u5e94\u7684\u5143\u7d20\u4e0a\u53bb\uff0c\u884c\u5217\u5f0f\u4e0d\u53d8\u3002 a1 = np.array([[1, 2], [3, 4]]) r1 = np.linalg.det(a1) print(\"\u4e8c\u9636\u65b9\u9635 \\n\", a1) print(\"\u4e8c\u9636\u884c\u5217\u5f0f\u7684\u503c\", r1) # \u4e8c\u9636\u65b9\u9635 # [[1 2] # [3 4]] # \u4e8c\u9636\u884c\u5217\u5f0f\u7684\u503c -2.0000000000000004 # \u5e0c\u814a\u5b57\u6bcd # \u03b1, \u03b2, \u03b3,\u03b4, \u03b5, \u03b6, \u03b7, \u03b8, \u03b9, \u03ba, \u03bb, \u03bc, \u03bd, # \u03be, \u03bf, \u03c0, \u03c1, \u03c2, \u03c3, \u03c4, \u03c5, \u03c6, \u03c7, \u03c8, \u03c9, a2 = np.arange(9).reshape(3, 3) r2 = np.linalg.det(a2) print(\"\u4e09\u9636\u65b9\u9635 \\n\", a2) print(\"\u4e09\u9636\u884c\u5217\u5f0f\u7684\u503c\", r2) # \u4e09\u9636\u65b9\u9635 # [[0 1 2] # [3 4 5] # [6 7 8]] # \u4e09\u9636\u884c\u5217\u5f0f\u7684\u503c 0.0 a3 = np.arange(16).reshape(4, 4) r3 = np.linalg.det(a3) print(\"\u56db\u9636\u65b9\u9635 \\n\", a3) print(\"\u56db\u9636\u884c\u5217\u5f0f\u7684\u503c\", r3) # \u56db\u9636\u65b9\u9635 # [[ 0 1 2 3] # [ 4 5 6 7] # [ 8 9 10 11]# \u5e0c\u814a\u5b57\u6bcd # \u03b1, \u03b2, \u03b3,\u03b4, \u03b5, \u03b6, \u03b7, \u03b8, \u03b9, \u03ba, \u03bb, \u03bc, \u03bd, # \u03be, \u03bf, \u03c0, \u03c1, \u03c2, \u03c3, \u03c4, \u03c5, \u03c6, \u03c7, \u03c8, \u03c9, # [12 13 14 15]] # \u56db\u9636\u884c\u5217\u5f0f\u7684\u503c 0.0","title":"det"},{"location":"python/DataAnalysis/ch01/#eig","text":"np.eig \u8ba1\u7b97\u65b9\u9635\u7684\u7279\u5f81\u503c\u548c\u7279\u5f81\u5411\u91cf\u3002 \u7279\u5f81\u503c\u4e0e\u7279\u5f81\u5411\u91cf\u7684\u5b9a\u4e49\uff1a\u8bbeA\u662fn\u9636\u65b9\u9635\uff0c\u82e5\u6570\u03bb\u548cn\u7ef4\u975e\u96f6\u5217\u5411\u91cfx\uff0c\u4f7f\u5f97Ax = \u03bbx\u6210\u7acb\uff0c\u5219\u79f0\u03bb\u662f\u65b9\u9635A\u7684\u4e00\u4e2a\u7279\u5f81\u503c\uff0cx\u4e3a\u65b9\u9635A\u7684\u5bf9\u5e94\u4e8e\u7279\u5f81\u503c\u03bb\u7684\u4e00\u4e2a\u7279\u5f81\u5411\u91cf\u3002 A\u662f\u65b9\u9635\u3002\uff08\u5bf9\u4e8e\u975e\u65b9\u9635\uff0c\u662f\u6ca1\u6709\u7279\u5f81\u503c\u7684\uff0c\u4f46\u4f1a\u6709\u6761\u4ef6\u6570\u3002\uff09\u7279\u5f81\u5411\u91cfx\u4e3a\u975e\u96f6\u5217\u5411\u91cf\u3002 v_eigenvectors, v_eigenvalues = LA.eig(np.diag((1, 2, 3))) print(\"\u7279\u5f81\u5411\u91cf\", v_eigenvectors) print(\"\u7279\u5f81\u503c \\n\", v_eigenvalues) # \u7279\u5f81\u5411\u91cf [1. 2. 3.] # \u7279\u5f81\u503c # [[1. 0. 0.] # [0. 1. 0.] # [0. 0. 1.]] v_eigenvectors, v_eigenvalues = LA.eig(np.array([[1, -1], [1, 1]])) print(\"\u7279\u5f81\u5411\u91cf\", v_eigenvectors) print(\"\u7279\u5f81\u503c \\n\", v_eigenvalues) # \u7279\u5f81\u5411\u91cf [1.+1.j 1.-1.j] # \u7279\u5f81\u503c # [[0.70710678+0.j 0.70710678-0.j ] # [0. -0.70710678j 0. +0.70710678j]]","title":"eig"},{"location":"python/DataAnalysis/ch01/#inv","text":"np.inv \u8ba1\u7b97\u65b9\u9635\u7684\u9006\u77e9\u9635\u3002 a1 = np.array([[1, 2], [3, 4]]) r1 = inv(a1) r2 = inv(np.matrix(a1)) print(\"\u539f\u77e9\u9635 \\n\", a1) print(\"\u9006\u77e9\u9635 \\n\", r1) print(\"\u9006\u77e9\u9635 \\n\", r2) # \u539f\u77e9\u9635 # [[1 2] # [3 4]] # \u9006\u77e9\u9635 # [[-2. 1. ] # [ 1.5 -0.5]] # \u9006\u77e9\u9635 # [[-2. 1. ] # [ 1.5 -0.5]]","title":"inv"},{"location":"python/DataAnalysis/ch01/#pinv","text":"np.pinv \u8ba1\u7b97\u77e9\u9635\u7684Moore-Penrose\u4f2a\u9006(\u6469\u5c14\uff0d\u5f6d\u82e5\u65af\u5e7f\u4e49\u9006)\u3002 \u4e0b\u9762\u7684\u4f8b\u5b50\u68c0\u9a8c a * a+ * a == a \u548c a+ * a * a+ == a+ a = np.random.randn(9, 6) B = np.linalg.pinv(a) r1 = np.allclose(a, np.dot(a, np.dot(B, a))) r2 = np.allclose(B, np.dot(B, np.dot(a, B))) print(a) print(B) print(r1) # True print(r2) # True # a: # [[-2.30316101 -0.63217332 1.24134743 -0.72492307 0.12456801 -0.14192548] # [ 1.37573495 0.07626697 -0.71870843 1.26824984 -0.79485727 -0.24630455] # [ 0.29003175 -1.23931665 -0.50864107 -0.31140718 0.45467649 -2.44973999] # [-0.70748664 -1.2995059 0.85126149 -1.10918804 -2.10042342 0.75942293] # [ 1.91765238 1.23892103 1.58516486 -1.65520154 0.11894439 0.84536298] # [ 1.03220791 0.1715148 0.85595408 0.58569706 1.34066384 -1.5782386 ] # [-0.54432889 -0.0114189 1.55403934 0.89852512 1.15586365 -0.30733805] # [-0.80874673 0.14602121 1.04680044 1.98722514 0.39766383 0.75178788] # [ 0.01664663 0.06243353 -0.50725334 -0.37707204 -1.76701091 -0.33866559]] # B: # [[-0.25055838 0.13963115 0.08990923 0.16280282 0.12997291 0.05088469 -0.01541299 -0.01656133 -0.21731387] # [ 0.22862622 -0.05108109 -0.2639602 -0.47835978 0.11776862 0.09324694 0.00436756 -0.00609393 0.61995597] # [ 0.10422554 0.03985857 0.00198025 0.15139023 0.17165026 0.15697725 0.17360246 0.13150089 0.08378135] # [-0.07021378 0.17665487 -0.04109252 0.0015022 -0.11998477 0.0543575 0.08649033 0.21190785 0.04065729] # [-0.08110336 -0.15274536 0.05601496 -0.07967802 -0.02454705 -0.04152356 0.00071268 -0.05981012 -0.43996066] # [-0.17998537 -0.03160871 -0.12587707 0.16856246 0.00565094 -0.21038026 -0.06060039 0.04322126 -0.42038066]]","title":"pinv"},{"location":"python/DataAnalysis/ch01/#qr","text":"np.qr \u8ba1\u7b97QR\u5206\u89e3\u3002QR\uff08\u6b63\u4ea4\u4e09\u89d2\uff09\u5206\u89e3\u6cd5\u662f\u6c42\u4e00\u822c\u77e9\u9635\u5168\u90e8\u7279\u5f81\u503c\u7684\u6700\u6709\u6548\u5e76\u5e7f\u6cdb\u5e94\u7528\u7684\u65b9\u6cd5\u3002 \u4e00\u822c\u77e9\u9635\u5148\u7ecf\u8fc7\u6b63\u4ea4\u76f8\u4f3c\u53d8\u5316\u6210\u4e3aHessenberg\u77e9\u9635\uff0c\u7136\u540e\u518d\u5e94\u7528QR\u65b9\u6cd5\u6c42\u7279\u5f81\u503c\u548c\u7279\u5f81\u5411\u91cf\u3002QR\u5206\u89e3\u6cd5\u662f\u5c06\u77e9\u9635\u5206\u89e3\u6210\u4e00\u4e2a\u6b63\u89c4\u6b63\u4ea4\u77e9\u9635Q\u4e0e\u4e0a\u4e09\u89d2\u5f62\u77e9\u9635R\uff0c\u6240\u4ee5\u79f0\u4e3aQR\u5206\u89e3\u6cd5\u3002 a = np.arange(9).reshape(3, 3) q, r = np.linalg.qr(a) print(\"\u539f\u77e9\u9635 \\n\", a) print(\"\u6b63\u4ea4\u77e9\u9635 \\n\", q) print(\"\u4e0a\u4e09\u89d2\u77e9\u9635 \\n\", r) # \u539f\u77e9\u9635 # [[0 1 2] # [3 4 5] # [6 7 8]] # \u6b63\u4ea4\u77e9\u9635 # [[ 0. 0.91287093 0.40824829] # [-0.4472136 0.36514837 -0.81649658] # [-0.89442719 -0.18257419 0.40824829]] # \u4e0a\u4e09\u89d2\u77e9\u9635 # [[-6.70820393e+00 -8.04984472e+00 -9.39148551e+00] # [ 0.00000000e+00 1.09544512e+00 2.19089023e+00] # [ 0.00000000e+00 0.00000000e+00 -8.88178420e-16]]","title":"qr"},{"location":"python/DataAnalysis/ch01/#svd","text":"np.svd \u8ba1\u7b97\u5947\u5f02\u503c\u5206\u89e3\uff08SVD\uff09\u3002 \u51e0\u4f55\u610f\u4e49\uff1aSVD\u5206\u89e3\u7684\u51e0\u4f55\u610f\u4e49\u662f\u4efb\u4f55\u4e00\u4e2a\u77e9\u9635A\u5728\u4e00\u7cfb\u5217\u65cb\u8f6c\u548c\u5e73\u79fb\u4e0b\u90fd\u80fd\u8f6c\u5316\u6210\u4e00\u4e2a\u5bf9\u89d2\u77e9\u9635\u2211 , \u5176\u4e2d\u9149\u9635U, V\u7684\u51e0\u4f55\u610f\u4e49\u5c31\u662f\u4e00\u7cfb\u5217\u65cb\u8f6c\u548c\u5e73\u79fb\u7684\u53e0\u52a0\u3002 a = mat([[1, 2, 3],[4, 5, 6]]) U, sigma, V = np.linalg.svd(a) print(\"\u539f\u77e9\u9635 \\n\", a) print(\"\u5de6\u5947\u5f02\u503cU \\n\", U) print(\"\u5947\u5f02\u503cSigma \\n\", sigma) print(\"\u53f3\u5947\u5f02\u503cV \\n\", V) # \u539f\u77e9\u9635 # [[1 2 3] # [4 5 6]] # \u5de6\u5947\u5f02\u503cU # [[-0.3863177 -0.92236578] # [-0.92236578 0.3863177 ]] # \u5947\u5f02\u503cSigma # [9.508032 0.77286964] # \u53f3\u5947\u5f02\u503cV # [[-0.42866713 -0.56630692 -0.7039467 ] # [ 0.80596391 0.11238241 -0.58119908] # [ 0.40824829 -0.81649658 0.40824829]]","title":"svd"},{"location":"python/DataAnalysis/ch01/#solve","text":"np.solve \u6c42\u89e3x\u7684\u7ebf\u6027\u7cfb\u7edfAx = b\uff0c\u5176\u4e2dA\u662f\u65b9\u9635\u3002 \u89e3\u65b9\u7a0b\u7ec4\uff1a x + 2y = 1 3x + 5y = 2 a = np.array([[1, 2], [3, 5]]) b = np.array([1, 2]) x = np.linalg.solve(a, b) print(x) # [-1. 1.]","title":"solve"},{"location":"python/DataAnalysis/ch01/#lstsq","text":"np.lstsq \u8ba1\u7b97Ax = b\u7684\u6700\u5c0f\u4e8c\u4e58\u89e3\u3002 \u7528\u6700\u5c0f\u4e8c\u4e58\u6cd5\u62df\u5408\u6570\u636e\u5f97\u5230\u4e00\u4e2a\u5f62\u5982y = mx + c\u7684\u7ebf\u6027\u65b9\u7a0b\uff08Return the least-squares solution to a linear matrix equation\uff09\u3002 x = np.array([0, 1, 2, 3]) # \u539f\u59cb\u6570\u636e\u70b9\u7684\u6a2a\u5750\u6807 y = np.array([-1, 0.2, 0.9, 2.1]) # \u539f\u59cb\u6570\u636e\u70b9\u7684\u7eb5\u5750\u6807 print(x) # [0 1 2 3] print(y) # [-1. 0.2 0.9 2.1] A = np.vstack([x, np.ones(len(x))]).T # \u6784\u9020\u7cfb\u6570\u77e9\u9635 print(A) # [[0. 1.] # [1. 1.] # [2. 1.] # [3. 1.]] m, c = np.linalg.lstsq(A, y, rcond=None)[0] # \u89e3\u51fa\u659c\u7387a\u548c\u7eb5\u622a\u8dddc plt.plot(x, y, 'o', label='Original data', markersize=10) # \u505a\u51fa\u539f\u59cb\u6570\u636e\u6563\u70b9\u56fe plt.plot(x, m*x + c, 'r', label='Fitted line') # \u7528\u4e0a\u9762\u89e3\u51fa\u7684\u53c2\u6570\u505a\u51fa\u62df\u5408\u66f2\u7ebfy=mx+c plt.legend() plt.show()","title":"lstsq"},{"location":"python/DataAnalysis/ch01/#_14","text":"numpy.random \u6a21\u5757\u586b\u8865\u4e86Python\u5185\u5efa\u7684 random \u6a21\u5757\u7684\u4e0d\u8db3\uff0c\u53ef\u4ee5\u9ad8\u6548\u5730\u751f\u6210\u591a\u79cd\u6982\u7387\u5206\u5e03\u4e0b\u7684\u5b8c\u6574\u6837\u672c\u503c\u6570\u7ec4\u3002 numpy.random \u4e2d\u7684\u6570\u636e\u751f\u6210\u51fd\u6570\u516c\u7528\u4e86\u4e00\u4e2a\u5168\u5c40\u7684\u968f\u673a\u6570\u79cd\u5b50\u3002 \u4f7f\u7528 numpy.random.RandomState \u751f\u6210\u4e00\u4e2a\u968f\u673a\u6570\u751f\u6210\u5668\uff0c\u4f7f\u6570\u636e\u72ec\u7acb\u4e8e\u5176\u4ed6\u7684\u968f\u673a\u6570\u72b6\u6001\u3002 \u901a\u8fc7 np.random.seed \u66f4\u6539NumPy\u7684\u968f\u673a\u6570\u79cd\u5b50\u3002 numpy.random \u4e2d\u7684\u90e8\u5206\u51fd\u6570\u5217\u8868 seed: \u5411\u968f\u673a\u6570\u751f\u6210\u5668\u4f20\u9012\u968f\u673a\u72b6\u6001\u79cd\u5b50 permutation: \u8fd4\u56de\u4e00\u4e2a\u5e8f\u5217\u7684\u968f\u673a\u6392\u5217\uff0c\u6216\u8005\u8fd4\u56de\u4e00\u4e2a\u4e71\u5e8f\u7684\u6574\u6570\u8303\u56f4\u5e8f\u5217 shuffle: \u968f\u673a\u6392\u5217\u4e00\u4e2a\u5e8f\u5217 rand: \u4ece\u5747\u5300\u5206\u5e03\u4e2d\u62bd\u53d6\u6837\u672c randint: \u6839\u636e\u7ed9\u5b9a\u7684\u7531\u4f4e\u5230\u9ad8\u7684\u8303\u56f4\u62bd\u53d6\u968f\u673a\u6574\u6570 randn: \u4ece\u5747\u503c0\u65b9\u5dee1\u7684\u6b63\u6001\u5206\u5e03\u4e2d\u62bd\u53d6\u6837\u672c(MATLAB\u578b\u63a5\u53e3\uff09 binomial: \u4ece\u4e8c\u9879\u5206\u5e03\u4e2d\u62bd\u53d6\u6837\u672c normal: \u4ece\u6b63\u6001\uff08\u9ad8\u65af\uff09\u5206\u5e03\u4e2d\u62bd\u53d6\u6837\u672c beta\u4ecebeta: \u5206\u5e03\u4e2d\u62bd\u53d6\u6837\u672c chisquare: \u4ece\u5361\u65b9\u5206\u5e03\u4e2d\u62bd\u53d6\u6837\u672c \u4f8b\u5982\uff0c\u4f7f\u7528normal\u6765\u83b7\u5f97\u4e00\u4e2a4\u00d74\u7684\u6b63\u6001\u5206\u5e03\u6837\u672c\u6570\u7ec4\uff0c\u79f0\u4e3a\u4f2a\u968f\u673a\u6570\u3002 import numpy as np samples = np.random.normal(size=(4, 4)) print(samples) # [[ 0.78583658 -0.27462104 -0.53027675 -0.62675004] # [ 0.39054781 1.20503691 -0.0057432 0.17243182] # [-0.41516669 -0.93335854 0.01996088 -0.12707275] # [ 0.42952379 2.56998319 0.14848737 -0.42871493]]","title":"\u4f2a\u968f\u673a\u6570\u751f\u6210"},{"location":"python/DataAnalysis/ch01/#_15","text":"import matplotlib.pyplot as plt import numpy as np position = 0 walk = [position] nwalks = 5000 nsteps = 1000 draws = np.random.randint(0, 2, size=(nwalks, nsteps)) steps = np.where(draws > 0, 1, -1) walks = steps.cumsum() plt.plot(walks[:500000000000000000000000000]) plt.show() \u8f93\u51fa\u56fe\u50cf\uff1a","title":"\u793a\u4f8b\uff1a\u968f\u673a\u6f2b\u6b65"},{"location":"python/DataAnalysis/ch02/","text":"pandas\u6570\u636e\u7ed3\u6784\u4ecb\u7ecd \u53c2\u8003\uff1a Python\u79d1\u5b66\u8ba1\u7b97\u5e93Pandas\u57fa\u7840\u6570\u636e\u7ed3\u6784Series\u548cDataFrame import numpy as np import pandas as pd from pandas import Series, DataFrame import pandas_datareader as web Series Series\u662f\u4e00\u79cd\u4e00\u7ef4\u7684\u6570\u7ec4\u578b\u5bf9\u8c61\uff0c\u5b83\u5305\u542b\u4e86\u4e00\u4e2a\u503c\u5e8f\u5217\uff08\u4e0eNumPy\u4e2d\u7684\u7c7b\u578b\u76f8\u4f3c\uff09\uff0c\u5e76\u4e14\u5305\u542b\u4e86\u6570\u636e\u6807\u7b7e\uff0c\u79f0\u4e3a\u7d22\u5f15\uff08index\uff09\u3002\\ \u4ece\u53e6\u4e00\u4e2a\u89d2\u5ea6\u8003\u8651Series\uff0c\u53ef\u4ee5\u8ba4\u4e3a\u5b83\u662f\u4e00\u4e2a\u957f\u5ea6\u56fa\u5b9a\u4e14\u6709\u5e8f\u7684\u5b57\u5178\uff0c\u56e0\u4e3a\u5b83\u5c06\u7d22\u5f15\u503c\u548c\u6570\u636e\u503c\u6309\u4f4d\u7f6e\u914d\u5bf9\u3002\\ \u7d22\u5f15\u5728\u5de6\u8fb9\uff0c\u503c\u5728\u53f3\u8fb9\u3002 obj = pd.Series([4, 7, -5, 3]) print(obj) # 0 4 # 1 7 # 2 -5 # 3 3 # dtype: int64 print(obj.values) # [ 4 7 -5 3] print(obj.index) # RangeIndex(start=0, stop=4, step=1)unique \u81ea\u5b9a\u4e49index obj = pd.Series([4, 7, -5, 3], index=['d', 'b', 'a', 'c']) print(obj) # d 4 # b 7 # a -5 # c 3 # dtype: int64 print(obj.index) # Index(['d', 'b', 'a', 'c'], dtype='object') print(obj['a']) # -5 print(obj[obj > 3]) # d 4 # b 7 # dtype: int64 print(obj * 2) # d 8 # b 14 # a -10 # c 6 # dtype: int64 print(np.exp(obj)) # d 54.598150 # b 1096.633158 # a 0.006738 # c 20.085537 # dtype: float64 obj['a'] = 9 # \u66f4\u65b0 print(obj[['a', 'b', 'c']]) # a 9 # b 7 # c 3 # dtype: int64 print(obj) print(9 in obj) # False \u6ce8\u610f\uff0c\u662f\u7d22\u5f15\uff0c\u975e\u503c print('a' in obj) # True \u901a\u8fc7\u5b57\u5178\u751f\u6210\u4e00\u4e2aSeries\\ \u5f53\u628a\u5b57\u5178\u4f20\u9012\u7ed9Series\u6784\u9020\u51fd\u6570\u65f6\uff0c\u4ea7\u751f\u7684Series\u7684\u7d22\u5f15\u5c06\u662f\u6392\u5e8f\u597d\u7684\u5b57\u5178\u952e\u3002\\ \u53ef\u4ee5\u5c06\u5b57\u5178\u952e\u6309\u7167\u4f60\u6240\u60f3\u8981\u7684\u987a\u5e8f\u4f20\u9012\u7ed9\u6784\u9020\u51fd\u6570\uff0c\u4ece\u800c\u4f7f\u751f\u6210\u7684Series\u7684\u7d22\u5f15\u987a\u5e8f\u7b26\u5408\u9884\u671f\u3002\\ NaN\uff08not a number\uff09\uff0c\u8fd9\u662fpandas\u4e2d\u6807\u8bb0\u7f3a\u5931\u503c\u6216NA\u503c\u7684\u65b9\u5f0f\u3002 sdata = {'Ohio': 35000, 'Texas': 71000, 'Oregon': 16000, 'Utah': 5000} obj3 = pd.Series(sdata) print(sdata) # {'Ohio': 35000, 'Texas': 71000, 'Oregon': 16000, 'Utah': 5000} print(obj3) # Ohio 35000 # Texas 71000 # Oregon 16000 # Utah 5000 # dtype: int64 states = ['California', 'Ohio', 'Oregon', 'Texas'] obj4 = pd.Series(sdata, index=states) print(obj4) # California NaN # Ohio 35000.0 # Oregon 16000.0 # Texas 71000.0 # dtype: float64 print(pd.isnull(obj4)) # California True # Ohio False # Oregon False # Texas False # dtype: bool print(obj4.isnull) # <bound method Series.isnull of California NaN # Ohio 35000.0 # Oregon 16000.0 # Texas 71000.0 # dtype: float64> print(pd.notnull(obj4)) # California False # Ohio True # Oregon True # Texas True # dtype: bool print(obj4.notnull) # <bound method Series.notnull of California NaN # Ohio 35000.0 # Oregon 16000.0 # Texas 71000.0 # dtype: float64> Series\u7684\u81ea\u52a8\u5bf9\u9f50\u7d22\u5f15\uff0c\u4e0e\u6570\u636e\u5e93\u7684join\u64cd\u4f5c\u662f\u975e\u5e38\u76f8\u4f3c print(\"obj3 \\n\", obj3) print(\"obj4 \\n\", obj4) print(\"obj3+obj4 \\n\", obj3 + obj4) # obj3 obj4 # Ohio 35000 California NaN # Texas 71000 Ohio 35000.0 # Oregon 16000 Oregon 16000.0 # Utah 5000 Texas 71000.0 # dtype: int64 dtype: float64 # obj3+obj4 # California NaN # Ohio 70000.0 # Oregon 32000.0 # Texas 142000.0 # Utah NaN # dtype: float64 Series\u5bf9\u8c61\u81ea\u8eab\u548c\u5176\u7d22\u5f15\u90fd\u6709name\u5c5e\u6027 obj4.name = 'population' obj4.index.name = 'state' print(obj4) # state # California NaN # Ohio 35000.0 # Oregon 16000.0 # Texas 71000.0 # Name: population, dtype: float64 obj = pd.Series([4, 7, -5, 3], index=['d', 'b', 'a', 'c']) print(obj) obj.index = ['Bob', 'Steve', 'Jeff', 'Ryan'] print(obj) # Bob 4 # Steve 7 # Jeff -5 # Ryan 3 # dtype: int64 DataFrame DataFrame\u8868\u793a\u7684\u662f\u77e9\u9635\u7684\u6570\u636e\u8868\uff0c\u5b83\u5305\u542b\u5df2\u6392\u5e8f\u7684\u5217\u96c6\u5408\uff0c\u6bcf\u4e00\u5217\u53ef\u4ee5\u662f\u4e0d\u540c\u7684\u503c\u7c7b\u578b\uff08\u6570\u503c\u3001\u5b57\u7b26\u4e32\u3001\u5e03\u5c14\u503c\u7b49\uff09\u3002\\ DataFrame\u65e2\u6709\u884c\u7d22\u5f15\u4e5f\u6709\u5217\u7d22\u5f15\uff0c\u5b83\u53ef\u4ee5\u88ab\u89c6\u4e3a\u4e00\u4e2a\u5171\u4eab\u76f8\u540c\u7d22\u5f15\u7684Series\u7684\u5b57\u5178\u3002\\ \u5728DataFrame\u4e2d\uff0c\u6570\u636e\u88ab\u5b58\u50a8\u4e3a\u4e00\u4e2a\u4ee5\u4e0a\u7684\u4e8c\u7ef4\u5757\uff0c\u800c\u4e0d\u662f\u5217\u8868\u3001\u5b57\u5178\u6216\u5176\u4ed6\u4e00\u7ef4\u6570\u7ec4\u7684\u96c6\u5408\u3002\\ DataFrame\u662f\u4e8c\u7ef4\u7684\uff0c\u4f46\u53ef\u4ee5\u5229\u7528\u5206\u5c42\u7d22\u5f15\u5728DataFrame\u4e2d\u5c55\u73b0\u66f4\u9ad8\u7ef4\u5ea6\u7684\u6570\u636e\u3002\\ \u4eceDataFrame\u4e2d\u9009\u53d6\u7684\u5217\u662f\u6570\u636e\u7684\u89c6\u56fe\uff0c\u800c\u4e0d\u662f\u62f7\u8d1d\u3002\u56e0\u6b64\uff0c\u5bf9Series\u7684\u4fee\u6539\u4f1a\u6620\u5c04\u5230DataFrame\u4e2d\u3002\u5982\u679c\u9700\u8981\u590d\u5236\uff0c\u5219\u5e94\u5f53\u663e\u5f0f\u5730\u4f7f\u7528Series\u7684copy\u65b9\u6cd5\u3002 \u628a\u4e00\u4e2a\u5b57\u5178\u8d4b\u503c\u7ed9DataFrame data = { 'state': ['Ohio', 'Ohio', 'Ohio', 'Nevada', 'Nevada', 'Nevada'], 'year': [2000, 2001, 2002, 2001, 2002, 2003], 'pop': [1.5, 1.7, 3.6, 2.4, 2.9, 3.2] } frame = pd.DataFrame(data) # \u4ea7\u751f\u7684DataFrame\u4f1a\u81ea\u52a8\u4e3aSereies\u5206\u914d\u7d22\u5f15\uff0c\u5e76\u4e14\u5217\u4f1a\u6309\u7167\u6392\u5e8f\u7684\u987a\u5e8f\u6392\u5217 print(frame) # state year pop # 0 Ohio 2000 1.5 # 1 Ohio 2001 1.7 # 2 Ohio 2002 3.6 # 3 Nevada 2001 2.4 # 4 Nevada 2002 2.9 # 5 Nevada 2003 3.2 print(frame.head(3)) # \u5bf9\u4e8e\u5927\u578bDataFrame, head\u65b9\u6cd5\u5c06\u4f1a\u53ea\u9009\u51fa\u5934\u90e8\u7684\u82e5\u5e72\u884c, \u9ed8\u8ba4\u662f\u524d\u4e94\u884c # state year pop # 0 Ohio 2000 1.5 # 1 Ohio 2001 1.7 # 2 Ohio 2002 3.6 \u5982\u679c\u6307\u5b9a\u4e86\u5217\u7684\u987a\u5e8f\uff0cDataFrame\u7684\u5217\u5c06\u4f1a\u6309\u7167\u6307\u5b9a\u987a\u5e8f\u6392\u5217 frame = pd.DataFrame(data, columns=['year', 'state', 'pop']) print(frame) # year state pop # 0 2000 Ohio 1.5 # 1 2001 Ohio 1.7 # 2 2002 Ohio 3.6 # 3 2001 Nevada 2.4 # 4 2002 Nevada 2.9 # 5 2003 Nevada 3.2 \u5982\u679c\u4f20\u7684\u5217\u4e0d\u5305\u542b\u5728\u5b57\u5178\u4e2d\uff0c\u5c06\u4f1a\u5728\u7ed3\u679c\u4e2d\u51fa\u73b0\u7f3a\u5931\u503c frame2 = pd.DataFrame( data, columns=['year', 'state', 'pop', 'debt'], index=['one', 'two', 'three', 'four', 'five', 'six'] ) print(frame2) # year state pop debt # one 2000 Ohio 1.5 NaN # two 2001 Ohio 1.7 NaN # three 2002 Ohio 3.6 NaN # four 2001 Nevada 2.4 NaN # five 2002 Nevada 2.9 NaN # six 2003 Nevada 3.2 NaN \u9009\u53d6\u884c, \u53ef\u4ee5\u901a\u8fc7\u4f4d\u7f6e\u6216\u7279\u6b8a\u5c5e\u6027loc\u8fdb\u884c\u9009\u53d6 print(frame2.loc['three']) # year 2002 # state Ohio # pop 3.6 # debt NaN # Name: three, dtype: object DataFrame\u4e2d\u7684\u4e00\u5217\uff0c\u53ef\u4ee5\u6309\u5b57\u5178\u578b\u6807\u8bb0\u6216\u5c5e\u6027\u90a3\u6837\u68c0\u7d22\u4e3aSeries\\ frame2[colunm]\u5bf9\u4e8e\u4efb\u610f\u5217\u540d\u5747\u6709\u6548\uff0c\u4f46\u662fframe2.column\u53ea\u5728\u5217\u540d\u662f\u6709\u6548\u7684Python\u53d8\u91cf\u540d\u65f6\u6709\u6548\u3002\\ \u8fd4\u56de\u7684Series\u4e0e\u539fDataFrame\u6709\u76f8\u540c\u7684\u7d22\u5f15\uff0c\u4e14Series\u7684name\u5c5e\u6027\u4e5f\u4f1a\u88ab\u5408\u7406\u5730\u8bbe\u7f6e\u3002 print(frame2['state']) # one Ohio # two Ohio # three Ohio # four Nevada # five Nevada # six Nevada # Name: state, dtype: object print(frame2.state) # \u5c5e\u6027\u578b\u8fde\u63a5 # one Ohio # two Ohio # three Ohio # four Nevada # five Nevada # six Nevada # Name: state, dtype: object \u5217\u7684\u5f15\u7528\u662f\u53ef\u4ee5\u4fee\u6539\u7684\u3002 frame2['debt'] = 16.5 print(frame2) # Name: state, dtype: object # year state pop debt # one 2000 Ohio 1.5 16.5 # two 2001 Ohio 1.7 16.5 # three 2002 Ohio 3.6 16.5 # four 2001 Nevada 2.4 16.5 # five 2002 Nevada 2.9 16.5 # six 2003 Nevada 3.2 16.5 frame2['debt'] = np.arange(6.) # \u503c\u7684\u957f\u5ea6\u5fc5\u987b\u548cDataFrame\u7684\u957f\u5ea6\u76f8\u5339\u914d print(frame2) # year state pop debt # one 2000 Ohio 1.5 0.0 # two 2001 Ohio 1.7 1.0 # three 2002 Ohio 3.6 2.0 # four 2001 Nevada 2.4 3.0 # five 2002 Nevada 2.9 4.0 # six 2003 Nevada 3.2 5.0 \u5982\u679c\u4f60\u5c06Series\u8d4b\u503c\u7ed9\u4e00\u5217\u65f6\uff0cSeries\u7684\u7d22\u5f15\u5c06\u4f1a\u6309\u7167DataFrame\u7684\u7d22\u5f15\u91cd\u65b0\u6392\u5217\uff0c\u5e76\u5728\u7a7a\u7f3a\u7684\u5730\u65b9\u586b\u5145\u7f3a\u5931\u503c val = pd.Series([-1.2, -1.5, -1.7], index=['two', 'four', 'five']) frame2['debt'] = val print(frame2) # year state pop debt # one 2000 Ohio 1.5 NaN # two 2001 Ohio 1.7 -1.2 # three 2002 Ohio 3.6 NaN # four 2001 Nevada 2.4 -1.5 # five 2002 Nevada 2.9 -1.7 # six 2003 Nevada 3.2 NaN \u5982\u679c\u88ab\u8d4b\u503c\u7684\u5217(eastern\u5217)\u5e76\u4e0d\u5b58\u5728\uff0c\u5219\u4f1a\u751f\u6210\u4e00\u4e2a\u65b0\u7684\u5217\u3002 frame2['eastern'] = frame2.state == 'Ohio' print(frame2) # year state pop debt eastern # one 2000 Ohio 1.5 NaN True # two 2001 Ohio 1.7 -1.2 True # three 2002 Ohio 3.6 NaN True # four 2001 Nevada 2.4 -1.5 False # five 2002 Nevada 2.9 -1.7 False # six 2003 Nevada 3.2 NaN False print(frame2.eastern) # one True # two True # three True # four False # five False # six False # Name: eastern, dtype: bool del\u5173\u952e\u5b57\u53ef\u4ee5\u50cf\u5728\u5b57\u5178\u4e2d\u90a3\u6837\u5bf9DataFrame\u5220\u9664\u5217\u3002 del frame2['eastern'] print(frame2.columns) # Index(['year', 'state', 'pop', 'debt'], dtype='object') \u628a\u4e00\u4e2a\u5305\u542b\u5b57\u5178\u7684\u5d4c\u5957\u5b57\u5178\u8d4b\u503c\u7ed9DataFrame pandas\u4f1a\u5c06\u5b57\u5178\u7684\u952e\u4f5c\u4e3a\u5217('Nevada', etc.)\uff0c\u5c06\u5185\u90e8\u5b57\u5178\u7684\u952e\u4f5c\u4e3a\u884c\u7d22\u5f15(2001, etc.) pop = { 'Nevada': { 2001: 2.4, 2002: 2.9 }, 'Ohio': { 2000: 1.5, 2001: 1.7, 2002: 3.6 } } frame3 = pd.DataFrame(pop) # \u4e0d\u6307\u5b9a\u7d22\u5f15\uff0c\u9ed8\u8ba4\u4f7f\u7528\u5b57\u5178\u7d22\u5f15 print(frame3) # Nevada Ohio # 2001 2.4 1.7 # 2002 2.9 3.6 # 2000 NaN 1.5 print(pd.DataFrame(pop, index=[2001, 2002, 2003])) # \u6307\u5b9a\u7d22\u5f15 # Nevada Ohio # 2001 2.4 1.7 # 2002 2.9 3.6 # 2003 NaN NaN \u8f6c\u7f6e\u64cd\u4f5c\uff08\u8c03\u6362\u884c\u548c\u5217\uff09 print(frame3.T) # 2001 2002 2000 # Nevada 2.4 2.9 NaN # Ohio 1.7 3.6 1.5 \u4f7f\u7528\u5305\u542bSeries\u7684\u5b57\u5178\u6784\u9020DataFrame pdata = { 'Ohio': frame3['Ohio'][:-1], 'Nevada': frame3['Nevada'][:2] } print(pd.DataFrame(pdata)) # Ohio Nevada # 2001 1.7 2.4 # 2002 3.6 2.9 frame3.index.name = 'year' frame3.columns.name = 'state' print(frame3) # state Nevada Ohio # year # 2001 2.4 1.7 # 2002 2.9 3.6 # 2000 NaN 1.5 print(frame3.values) # [[2.4 1.7] # [2.9 3.6] # [nan 1.5]] print(frame2) # year state pop debt # one 2000 Ohio 1.5 NaN # two 2001 Ohio 1.7 -1.2 # three 2002 Ohio 3.6 NaN # four 2001 Nevada 2.4 -1.5 # five 2002 Nevada 2.9 -1.7 # six 2003 Nevada 3.2 NaN print(frame2.values) # [[2000 'Ohio' 1.5 nan] # [2001 'Ohio' 1.7 -1.2] # [2002 'Ohio' 3.6 nan] # [2001 'Nevada' 2.4 -1.5] # [2002 'Nevada' 2.9 -1.7] # [2003 'Nevada' 3.2 nan]] \u7d22\u5f15\u5bf9\u8c61 pandas\u4e2d\u7684\u7d22\u5f15\u5bf9\u8c61\u662f\u7528\u4e8e\u5b58\u50a8\u8f74\u6807\u7b7e\u548c\u5176\u4ed6\u5143\u6570\u636e\u7684\uff08\u4f8b\u5982\u8f74\u540d\u79f0\u6216\u6807\u7b7e\uff09\u3002\\ \u5728\u6784\u9020Series\u6216DataFrame\u65f6\uff0c\u4f60\u6240\u4f7f\u7528\u7684\u4efb\u610f\u6570\u7ec4\u6216\u6807\u7b7e\u5e8f\u5217\u90fd\u53ef\u4ee5\u5728\u5185\u90e8\u8f6c\u6362\u4e3a\u7d22\u5f15\u5bf9\u8c61\u3002\\ \u7d22\u5f15\u5bf9\u8c61\u662f\u4e0d\u53ef\u53d8\u7684\u3002\\ \u9664\u4e86\u7c7b\u4f3c\u6570\u7ec4\uff0c\u7d22\u5f15\u5bf9\u8c61\u4e5f\u50cf\u4e00\u4e2a\u56fa\u5b9a\u5927\u5c0f\u7684\u96c6\u5408\u3002\u4e0ePython\u96c6\u5408\u4e0d\u540c\uff0cpandas\u7d22\u5f15\u5bf9\u8c61\u53ef\u4ee5\u5305\u542b\u91cd\u590d\u6807\u7b7e\u3002\\ \u56e0\u4e3a\u4e00\u4e9b\u64cd\u4f5c\u4f1a\u4ea7\u751f\u5305\u542b\u7d22\u5f15\u5316\u6570\u636e\u7684\u7ed3\u679c\uff0c\u7406\u89e3\u7d22\u5f15\u5982\u4f55\u5de5\u4f5c\u8fd8\u662f\u5f88\u91cd\u8981\u7684\u3002 obj = pd.Series(range(3), index=['a', 'b', 'c']) index = obj.index print(index) # Index(['a', 'b', 'c'], dtype='object') print(index[1:]) # Index(['b', 'c'], dtype='object') labels = pd.Index(np.arange(3)) print(labels) # Int64Index([0, 1, 2], dtype='int64') obj2 = pd.Series([1.5, -2.5, 0], index=labels) print(obj2) # 0 1.5 # 1 -2.5 # 2 0.0 # dtype: float64 print(obj2.index is labels) # True print(frame3) # state Nevada Ohio # year # 2001 2.4 1.7 # 2002 2.9 3.6 # 2000 NaN 1.5 print(frame3.columns) # Index(['Nevada', 'Ohio'], dtype='object', name='state') print(frame3.index) # Int64Index([2001, 2002, 2000], dtype='int64', name='year') print('Ohio' in frame3.columns) # True \u7c7b\u4f3c\u96c6\u5408\u64cd\u4f5c print(2003 in frame3.index) # False pandas\u7d22\u5f15\u5bf9\u8c61\u5305\u542b\u91cd\u590d\u6807\u7b7e\\ \u6839\u636e\u91cd\u590d\u6807\u7b7e\u8fdb\u884c\u7b5b\u9009\uff0c\u4f1a\u9009\u53d6\u6240\u6709\u91cd\u590d\u6807\u7b7e\u5bf9\u5e94\u7684\u6570\u636e\u3002 dup_labels = pd.Index(['foo', 'foo', 'bar', 'bar']) print(dup_labels) # Index(['foo', 'foo', 'bar', 'bar'], dtype='object') \u4e00\u4e9b\u5e38\u7528\u7d22\u5f15\u5bf9\u8c61\u7684\u65b9\u6cd5\u548c\u5c5e\u6027\\ https://blog.csdn.net/u012421852/article/details/80074478 obj1 = pd.Series(range(3), index=['a', 'b', 'c']) index1 = obj1.index obj2 = pd.Series(range(3), index=['c', 'f', 'g']) index2 = obj2.index print(index1) # Index(['a', 'b', 'c'], dtype='object') print(index2) # Index(['c', 'f', 'g'], dtype='object') append: \u5c06\u989d\u5916\u7684\u7d22\u5f15\u5bf9\u8c61\u7c98\u8d34\u5230\u539f\u7d22\u5f15\u540e\uff0c\u4ea7\u751f\u4e00\u4e2a\u65b0\u7684\u7d22\u5f15 print(index1.append(index2)) # Index(['a', 'b', 'c', 'c', 'f', 'g'], dtype='object') difference: \u8ba1\u7b972\u4e2a\u7d22\u5f15\u7684\u5dee\u96c6 print(index1.difference(index2)) # Index(['a', 'b'], dtype='object') intersection: \u8ba1\u7b972\u4e2a\u7d22\u5f15\u7684\u4ea4\u96c6 print(index1.intersection(index2)) # Index(['c'], dtype='object') union: \u8ba1\u7b972\u4e2a\u7d22\u5f15\u7684\u5e76\u96c6\uff08\u53bb\u91cd\uff09 print(index1.union(index2)) # Index(['a', 'b', 'c', 'f', 'g'], dtype='object') isin: \u8ba1\u7b97\u8868\u793a\u6bcf\u4e00\u4e2a\u503c\u662f\u5426\u5728\u4f20\u503c\u5bb9\u5668\u4e2d\u7684\u5e03\u5c14\u6570\u7ec4 print(index1.isin(index2)) # [False False True] delete: \u5c06\u4f4d\u7f6ei\u7684\u5143\u7d20\u5220\u9664\uff0c\u5e76\u4ea7\u751f\u65b0\u7684\u6570\u7ec4 print(index1.delete(1)) # Index(['a', 'c'], dtype='object') print(index1) # Index(['a', 'b', 'c'], dtype='object') drop: \u6839\u636e\u4f20\u53c2\u5220\u9664\u6307\u5b9a\u7d22\u5f15\u503c\uff0c\u5e76\u4ea7\u751f\u65b0\u7684\u7d22\u5f15, \u5bf9\u6bd4\u548cdelete\u7684\u533a\u522b print(index1.drop('b')) # Index(['a', 'c'], dtype='object') print(index1) # Index(['a', 'b', 'c'], dtype='object') insert: \u5728\u4f4d\u7f6ei\u63d2\u5165\u5143\u7d20\uff0c\u5e76\u4ea7\u751f\u65b0\u7684\u7d22\u5f15 print(index1.insert(1, 'e')) # Index(['a', 'e', 'b', 'c'], dtype='object') print(index1) # Index(['a', 'b', 'c'], dtype='object') is_monotonic: \u5982\u679c\u7d22\u5f15\u5e8f\u5217\u9012\u589e\uff0c\u5219\u8fd4\u56deTrue print(index1.is_monotonic) # True print(index1.insert(1, 'e').is_monotonic) # False is_unique: \u5982\u679c\u7d22\u5f15\u5e8f\u5217\u552f\u4e00\u5219\u8fd4\u56deTrue print(index1.is_unique) # True print(index1.append(index2).is_unique) # False unique: \u8ba1\u7b97\u7d22\u5f15\u7684\u552f\u4e00\u503c\u5e8f\u5217\uff08\u5bf9\u6bd4Union\uff09 print(index1.unique()) # Index(['a', 'b', 'c'], dtype='object') print(index1.append(index2).unique()) # Index(['a', 'b', 'c', 'f', 'g'], dtype='object') pandas\u57fa\u672c\u529f\u80fd \u91cd\u5efa\u7d22\u5f15 reindex\u65b9\u6cd5\u7528\u4e8e\u521b\u5efa\u4e00\u4e2a\u7b26\u5408\u65b0\u7d22\u5f15\u7684\u65b0\u5bf9\u8c61\u3002 Series\u8c03\u7528reindex\u65b9\u6cd5\u65f6\uff0c\u4f1a\u5c06\u6570\u636e\u6309\u7167\u65b0\u7684\u7d22\u5f15\u8fdb\u884c\u6392\u5217\uff0c\u5982\u679c\u67d0\u4e2a\u7d22\u5f15\u503c\u4e4b\u524d\u5e76\u4e0d\u5b58\u5728\uff0c\u5219\u4f1a\u5f15\u5165\u7f3a\u5931\u503c \u5bf9\u4e8e\u987a\u5e8f\u6570\u636e\uff0c\u6bd4\u5982\u65f6\u95f4\u5e8f\u5217\uff0c\u5728\u91cd\u5efa\u7d22\u5f15\u65f6\u53ef\u80fd\u4f1a\u9700\u8981\u8fdb\u884c\u63d2\u503c\u6216\u586b\u503c\u3002ffill\u65b9\u6cd5\u5728\u91cd\u5efa\u7d22\u5f15\u65f6\u63d2\u503c\uff0c\u5c06\u503c\u524d\u5411\u586b\u5145 \u5982\u679c\u5bf9obj1\u505areindex\u65f6\u6307\u5b9amethod=\u2018ffill\u2019\uff0c\u4f1a\u62a5\u9519index must be monotonic increasing or decreasing \u5728DataFrame\u4e2d\uff0creindex\u53ef\u4ee5\u6539\u53d8\u884c\u7d22\u5f15\u3001\u5217\u7d22\u5f15\uff0c\u4e5f\u53ef\u4ee5\u540c\u65f6\u6539\u53d8\u4e8c\u8005\u3002\u5f53\u4ec5\u4f20\u5165\u4e00\u4e2a\u5e8f\u5217\u65f6\uff0c\u7ed3\u679c\u4e2d\u7684\u884c\u4f1a\u91cd\u5efa\u7d22\u5f15 obj1 = pd.Series([4.5, 7.2, -5.3, 3.6], index=['d', 'b', 'a', 'c']) print(obj1) # d 4.5 # b 7.2 # a -5.3 # c 3.6 # dtype: float64 obj2 = obj1.reindex(['a', 'b', 'c', 'd', 'e']) print(obj2) # a -5.3 # b 7.2 # c 3.6 # d 4.5 # e NaN # dtype: float64 obj3 = pd.Series(['blue', 'purple', 'yellow'], index=[0, 2, 4]) print(obj3.reindex(range(6), method='ffill')) # 0 blue # 1 blue # 2 purple # 3 purple # 4 yellow # 5 yellow # dtype: object indexes = index = ['a', 'b', 'c'] states = ['Ohio', 'Texas', 'California'] frame = pd.DataFrame( np.arange(9).reshape(3, 3), index=indexes, columns=states ) print(frame) # Ohio Texas California # a 0 1 2 # b 3 4 5 # c 6 7 8 frame2 = frame.reindex(['a', 'b', 'c', 'd']) # \u91cd\u5efa\u884c\u7d22\u5f15 print(frame2) # Ohio Texas California # a 0.0 1.0 2.0 # b 3.0 4.0 5.0 # c 6.0 7.0 8.0 # d NaN NaN NaN frame3 = frame2.reindex(columns=['Ohio', 'Uta', 'California']) # \u91cd\u5efa\u5217\u7d22\u5f15 print(frame3) # Ohio Uta California # a 0.0 NaN 2.0 # b 3.0 NaN 5.0 # c 6.0 NaN 8.0 # d NaN NaN NaN \u4f7f\u7528loc\u8fdb\u884c\u66f4\u4e3a\u7b80\u6d01\u7684\u6807\u7b7e\u7d22\u5f15 frame4 = frame.loc[['a', 'b'], states] print(frame4) # Ohio Texas California # a 0 1 2 # b 3 4 5 \u8f74\u5411\u7d22\u5f15\u5220\u9664\u6761\u76ee \u4f8b\u5982set_index(), dropna(), fillna(), reset_index(), drop(), replace() \u8fd9\u4e9b\u65b9\u6cd5\u7684inplace\u5c5e\u6027\u8bbe\u4e3aTrue\u65f6, \u8fd9\u4e9b\u65b9\u6cd5\u4f1a\u4fee\u6539Series\u6216DataFrame\u7684\u5c3a\u5bf8\u6216\u5f62\u72b6\uff0c\u76f4\u63a5\u64cd\u4f5c\u539f\u5bf9\u8c61\u800c\u4e0d\u8fd4\u56de\u65b0\u5bf9\u8c61 obj = pd.Series(np.arange(5), index=['a', 'b', 'c', 'd', 'e']) print(obj) # a 0 # b 1 # c 2 # d 3 # e 4 # dtype: int64 obj1 = obj.drop('c') print(obj1) # a 0 # b 1 # d 3 # e 4 # dtype: int64 print(obj1.drop(['d', 'e'])) # a 0 # b 1 # dtype: int64 \u5bf9\u6bd4inplace=True\u548cFalse\u7684\u533a\u522b print(obj.drop('c', inplace=False)) print(obj) # a 0 # b 1 # c 2 # d 3 # e 4 # dtype: int64 print(obj.drop('c', inplace=True)) # None, \u6ca1\u6709\u751f\u6210\u65b0\u5bf9\u8c61 print(obj) # a 0 # b 1 # d 3 # e 4 # dtype: int64 data = pd.DataFrame( np.arange(16).reshape(4, 4), index=['Ohio', 'Colorado', 'Utah', 'New York'], columns=['one', 'two', 'three', 'four'] ) print(data) # one two three four # Ohio 0 1 2 3 # Colorado 4 5 6 7 # Utah 8 9 10 11 # New York 12 13 14 15 print(data.drop(['Ohio', 'Colorado'])) # one two three four # Utah 8 9 10 11 # New York 12 13 14 15 print(data.drop(['one', 'two'], axis=1)) # \u5982\u679c\u4e0d\u6307\u5b9a\u8f74\u5411axis\uff0cdrop()\u4f1a\u9ed8\u8ba4\u6cbfaxis=0\u8fdb\u884c\uff0c\u5982\u4e0a\u4f8b # three four # Ohio 2 3 # Colorado 6 7 # Utah 10 11 # New York 14 15 print(data.drop(['one', 'two'], axis='columns')) # \u4e0e\u6307\u5b9aaxis=1\u540c\u6837\u6548\u679c # three four # Ohio 2 3 # Colorado 6 7 # Utah 10 11 # New York 14 15 data = pd.DataFrame( { 'Name': ['Shobhit', 'vaibhav', 'vimal', 'Sourabh'], 'class': [11, 12, 10, 9], 'Age': [18, 20, 21, 17] } ) print(data) # Name class Age # 0 Shobhit 11 18 # 1 vaibhav 12 20 # 2 vimal 10 21 # 3 Sourabh 9 17 print(data.rename(columns={'Name': 'FirstName'}, inplace=False)) # FirstName class Age # 0 Shobhit 11 18 # 1 vaibhav 12 20 # 2 vimal 10 21 # 3 Sourabh 9 17 print(data) # Name class Age # 0 Shobhit 11 18 # 1 vaibhav 12 20 # 2 vimal 10 21 # 3 Sourabh 9 17 print(data.rename(columns={'Name': 'FirstName'}, inplace=True)) # None, \u6ca1\u6709\u751f\u6210\u65b0\u5bf9\u8c61 print(data) # FirstName class Age # 0 Shobhit 11 18 # 1 vaibhav 12 20 # 2 vimal 10 21 # 3 Sourabh 9 17 \u7d22\u5f15\u3001\u9009\u62e9\u4e0e\u8fc7\u6ee4 Series\u7684\u7d22\u5f15\uff08obj[...]\uff09\u4e0eNumPy\u6570\u7ec4\u7d22\u5f15\u7684\u529f\u80fd\u7c7b\u4f3c\uff0c\u53ea\u4e0d\u8fc7Series\u7684\u7d22\u5f15\u503c\u53ef\u4ee5\u4e0d\u4ec5\u4ec5\u662f\u6574\u6570 obj = pd.Series(['Shobhit', 'vaibhav', 'vimal', 'Sourabh'], index=['a', 'b', 'c', 'd']) print(obj) # a Shobhit # b vaibhav # c vimal # d Sourabh # dtype: object print(obj[1]) # \u901a\u8fc7\u7d22\u5f15\u4f4d\u68c0\u7d22\uff0c\u8f93\u51fa\u7d22\u5f15\u503c # vaibhav print(obj['b']) # \u901a\u8fc7\u7d22\u5f15\u503c\u68c0\u7d22\uff0c\u8f93\u51fa\u7d22\u5f15\u503c # vaibhav print(obj[['b']]) # \u901a\u8fc7\u7d22\u5f15\u503c\u68c0\u7d22\uff0c\u8f93\u51faSeries # b vaibhav # dtype: object \u4e0b\u9762\u4e00\u7ec4\u7684\u8f93\u51fa\u4e2d\uff0c\u6ce8\u610f\u5bf9\u6bd4\u666e\u901aPython\u5207\u7247\u4e0eSeries\u7684\u5207\u7247\u7684\u5dee\u5f02 print(obj[1]) # vaibhav print(obj[[1]]) # b vaibhav # dtype: object print(obj[1:3]) # b vaibhav # c vimal # dtype: object print(obj['b':'d']) # b vaibhav # c vimal # d Sourabh # dtype: object Series\u7684\u5207\u7247\u7684\u503c\u66f4\u65b0 obj = pd.Series(['Shobhit', 'vaibhav', 'vimal', 'Sourabh'], index=['a', 'b', 'c', 'd']) obj['b': 'c'] = 5 print(obj) # a Shobhit # b 5 # c 5 # d Sourabh # dtype: object obj[1: 3] = 6 print(obj) # a Shobhit # b 6 # c 6 # d Sourabh # dtype: object DataFrame\u7684\u7d22\u5f15\u4e0e\u5207\u7247 data = pd.DataFrame( np.arange(16).reshape(4, 4), index=['Ohio', 'Colorado', 'Utah', 'New York'], columns=['One', 'Two', 'Three', 'Four'] ) print(data) # One Two Three Four # Ohio 0 1 2 3 # Colorado 4 5 6 7 # Utah 8 9 10 11 # New York 12 13 14 15 print(data['Two']) # Ohio 1 # Colorado 5 # Utah 9 # New York 13 # Name: Two, dtype: int64 print(data[['Three', 'Two']]) # Three Two # Ohio 2 1 # Colorado 6 5 # Utah 10 9 # New York 14 13 print(data[:2]) # One Two Three Four # Ohio 0 1 2 3 # Colorado 4 5 6 7 \u5d4c\u5957, \u6839\u636e\u4e00\u4e2a\u5e03\u5c14\u503c\u6570\u7ec4\u5207\u7247\u6216\u9009\u62e9\u6570\u636e print(data['Three'] > 5) # Ohio False # Colorado True # Utah True # New York True # Name: Three, dtype: bool print(data[data['Three'] > 5]) # One Two Three Four # Colorado 4 5 6 7 # Utah 8 9 10 11 # New York 12 13 14 15 \u4f7f\u7528\u5e03\u5c14\u503cDataFrame\u8fdb\u884c\u7d22\u5f15\\ \u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u8fd9\u79cd\u7d22\u5f15\u65b9\u5f0f\u4f7f\u5f97DataFrame\u5728\u8bed\u6cd5\u4e0a\u66f4\u50cf\u662fNumPy\u4e8c\u7ef4\u6570\u7ec4\u3002 print(data < 5) # One Two Three Four # Ohio True True True True # Colorado True False False False # Utah False False False False # New York False False False False data[data < 5] = 0 print(data) # One Two Three Four # Ohio 0 0 0 0 # Colorado 0 5 6 7 # Utah 8 9 10 11 # New York 12 13 14 15 \u4f7f\u7528loc\u548ciloc\u9009\u62e9\u6570\u636e\\ \u4f7f\u7528\u8f74\u6807\u7b7e\uff08loc\uff09\u6216\u6574\u6570\u6807\u7b7e\uff08iloc\uff09\u4ee5NumPy\u98ce\u683c\u7684\u8bed\u6cd5\u4eceDataFrame\u4e2d\u9009\u51fa\u6570\u7ec4\u7684\u884c\u548c\u5217\u7684\u5b50\u96c6\u3002 data = pd.DataFrame( np.arange(16).reshape(4, 4), index=['Ohio', 'Colorado', 'Utah', 'New York'], columns=['One', 'Two', 'Three', 'Four'] ) print(data) # One Two Three Four # Ohio 0 1 2 3 # Colorado 4 5 6 7 # Utah 8 9 10 11 # New York 12 13 14 15 \u901a\u8fc7\u6807\u7b7eloc\u9009\u51fa\u5355\u884c\u591a\u5217\u7684\u6570\u636e\\ \u8f93\u51faColorado\u6807\u7b7e\u9875\u7684Two\u548cThree\u8fd9\u4e24\u5217\u7684\u503c\uff0c\u4ee5\u884c\u8bb0\u5f55\u7684\u65b9\u5f0f\u5c55\u73b0 print(data.loc['Colorado', ['Two', 'Three']]) # \u5207\u7247: # Two 5 # Three 6 # Name: Colorado, dtype: int64 print(data.loc[:'Ohio', :'Two']) # \u5207\u7247: 0\u884c\uff0c0,1\u5217 # One Two # Ohio 0 1 \u901a\u8fc7\u6574\u6570\u6807\u7b7eiloc\u8fdb\u884c\u7c7b\u4f3c\u7684\u6570\u636e\u9009\u62e9 print(data.iloc[[0]]) # 0\u884c # One Two Three Four # Ohio 0 1 2 3 print(data.iloc[[0], [1]]) # \u5207\u7247: 0\u884c\uff0c1\u5217 # Two # Ohio 1 print(data.iloc[1:2, 1:2]) # \u5207\u7247: 1\u884c\uff0c2\u5217 # Two # Ohio 1 print(data.iloc[2, [3, 0, 1]]) # \u5207\u7247: 2\u884c\uff0c\u4f9d\u6b21\u53d63\uff0c0\uff0c1\u5217 # Four 11 # One 8 # Two 9 # Name: Utah, dtype: int64 print(data.iloc[:3, :2][data > 4]) \u6574\u6570\u7d22\u5f15 ser = pd.Series(np.arange(3.)) print(ser) # 0 0.0 # 1 1.0 # 2 2.0 # dtype: float64 print(ser[:1]) # 0 0.0 # dtype: float64 print(ser.loc[:1]) # loc\uff08\u7528\u4e8e\u6807\u7b7e\uff09 # 0 0.0 # 1 1.0 # dtype: float64 print(ser.iloc[:1]) # iloc\uff08\u7528\u4e8e\u6574\u6570\uff09 # 0 0.0 # dtype: float64 \u7b97\u672f\u548c\u6570\u636e\u5bf9\u9f50 \u4e0d\u540c\u7d22\u5f15\u7684\u5bf9\u8c61\u4e4b\u95f4\u7684\u7b97\u672f\u884c\u4e3a\u662fpandas\u63d0\u4f9b\u7ed9\u4e00\u4e9b\u5e94\u7528\u7684\u4e00\u9879\u91cd\u8981\u7279\u6027\u3002 s1 = pd.Series( [7.3, -2.5, 3.4, 1.5], index=['a', 'c', 'd', 'e'] ) s2 = pd.Series( [-2.1, 3.6, -1.5, 4, 3.1], index=['a', 'c', 'e', 'f', 'g'] ) print(s1) # a 7.3 # c -2.5 # d 3.4 # e 1.5 # dtype: float64 print(s2) # a -2.1 # c 3.6 # e -1.5 # f 4.0 # g 3.1 # dtype: float64 print(s1 + s2) # \u6ca1\u6709\u4ea4\u53e0\u7684\u6807\u7b7e\u4f4d\u7f6e\u4e0a\uff0c\u5185\u90e8\u6570\u636e\u5bf9\u9f50\u4f1a\u4ea7\u751f\u7f3a\u5931\u503c\u3002\u7f3a\u5931\u503c\u4f1a\u5728\u540e\u7eed\u7684\u7b97\u672f\u64cd\u4f5c\u4e0a\u4ea7\u751f\u5f71\u54cd\u3002 # a 5.2 # c 1.1 # d NaN # e 0.0 # f NaN # g NaN # dtype: float64 df1 = pd.DataFrame( np.arange(9).reshape((3, 3)), columns=list('bcd'), index=['Ohio', 'Texas', 'Colorado'] ) df2 = pd.DataFrame( np.arange(12).reshape((4, 3)), columns=list('bde'), index=['Utah', 'Ohio', 'Texas', 'Oregon'] ) print(df1) # b c d # Ohio 0 1 2 # Texas 3 4 5 # Colorado 6 7 8 print(df2) # b d e # Utah 0 1 2 # Ohio 3 4 5 # Texas 6 7 8 # Oregon 9 10 11 \u5c06\u8fd9\u4e9b\u5bf9\u8c61\u52a0\u5728\u4e00\u8d77\uff0c\u8fd4\u56de\u4e00\u4e2aDataFrame\uff0c\u5b83\u7684\u7d22\u5f15\u3001\u5217\u662f\u6bcf\u4e2aDataFrame\u7684\u7d22\u5f15\u3001\u5217\u7684\u5e76\u96c6\u3002\\ \u7531\u4e8e\u2019c\u2019\u5217\u548c\u2019e\u2019\u5217\u5e76\u4e0d\u662f\u4e24\u4e2aDataFrame\u5171\u6709\u7684\u5217\uff0c\u8fd9\u4e24\u5217\u4e2d\u4ea7\u751f\u4e86\u7f3a\u5931\u503c\u3002\\ \u5bf9\u4e8e\u884c\u6807\u7b7e\u4e0d\u540c\u7684DataFrame\u5bf9\u8c61\u4e5f\u662f\u5982\u6b64\u3002\u5982\u679c\u5c06\u4e24\u4e2a\u884c\u6216\u5217\u5b8c\u5168\u4e0d\u540c\u7684DataFrame\u5bf9\u8c61\u76f8\u52a0\uff0c\u7ed3\u679c\u5c06\u5168\u90e8\u4e3a\u7a7a print(df1 + df2) # b c d e # Colorado NaN NaN NaN NaN # Ohio 3.0 NaN 6.0 NaN # Oregon NaN NaN NaN NaN # Texas 9.0 NaN 12.0 NaN # Utah NaN NaN NaN NaN \u4f7f\u7528\u586b\u5145\u503c\u7684\u7b97\u672f\u65b9\u6cd5\\ \u5728\u4e24\u4e2a\u4e0d\u540c\u7684\u7d22\u5f15\u5316\u5bf9\u8c61\u4e4b\u95f4\u8fdb\u884c\u7b97\u672f\u64cd\u4f5c\u65f6\uff0c\u4f1a\u8981\u4f7f\u7528\u7279\u6b8a\u586b\u5145\u503c\uff0c\u6bd4\u5982\u5f53\u8f74\u6807\u7b7e\u5728\u4e00\u4e2a\u5bf9\u8c61\u4e2d\u5b58\u5728\uff0c\u5728\u53e6\u4e00\u4e2a\u5bf9\u8c61\u4e2d\u4e0d\u5b58\u5728\u65f6\uff0c\u5c06\u7f3a\u5931\u503c\u586b\u5145\u4e3a0\\ \u4e0b\u9762\u662fSeries\u548cDataFrame\u7684\u7b97\u672f\u65b9\u6cd5\u3002\u8fd9\u4e9b\u65b9\u6cd5\u4e2d\u7684\u6bcf\u4e00\u4e2a\u90fd\u6709\u4e00\u4e2a\u4ee5r\u5f00\u5934\u7684\u526f\u672c\uff0c\u8fd9\u4e9b\u526f\u672c\u65b9\u6cd5\u7684\u53c2\u6570\u662f\u7ffb\u8f6c\u7684\u3002 * add\uff0cradd\uff1a\u52a0\u6cd5(+) * sub\uff0crsub\uff1a\u51cf\u6cd5(-) * div\uff0crdiv\uff1a\u9664\u6cd5(/) * floordiv\uff0crfloordiv\uff1a\u6574\u9664(//) * mul\uff0crmul\uff1a\u4e58\u6cd5( ) * pow\uff0crpow\uff1a\u5e42\u6b21\u65b9( *) \u4e0b\u9762\u4e09\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u6ce8\u610fdf2\u548cdf1\u5217\u5bf9\u5e94\u5173\u7cfb\u7684\u4e0d\u540c\u6240\u51fa\u73b0\u7684NaN df1 = pd.DataFrame( np.arange(4).reshape((2, 2)), columns=list('ab') ) df2 = pd.DataFrame( np.arange(9).reshape((3, 3)), columns=list('bcd') ) print(df1 + df2) # \u5728\u4e0d\u91cd\u53e0\u7684\u4f4d\u7f6e\u51fa\u73b0NA\u503c # a b c d # 0 NaN 1.0 NaN NaN # 1 NaN 6.0 NaN NaN # 2 NaN NaN NaN NaN print(df1.add(df2, fill_value=0)) # a b c d # 0 0.0 1.0 1.0 2.0 # 1 2.0 6.0 4.0 5.0 # 2 NaN 6.0 7.0 8.0 df2 = pd.DataFrame( np.arange(9).reshape((3, 3)), columns=list('acd') ) print(df1.add(df2, fill_value=0)) # \u6ce8\u610fNaN\u4e0edf1\u548cdf2\u5217\u5bf9\u5e94\u5173\u7cfb # a b c d # 0 0.0 1.0 1.0 2.0 # 1 5.0 3.0 4.0 5.0 # 2 6.0 NaN 7.0 8.0 df2 = pd.DataFrame( np.arange(9).reshape((3, 3)), columns=list('abd') ) print(df1.add(df2, fill_value=0)) # a b d # 0 0.0 2.0 2.0 # 1 5.0 7.0 5.0 # 2 6.0 7.0 8.0 print(df1.radd(df2, fill_value=0)) print(df1.sub(df2, fill_value=0)) print(df1.div(df2, fill_value=0)) print(df1.floordiv(df2, fill_value=0)) print(df1.mul(df2, fill_value=0)) print(df1.pow(df2, fill_value=0)) df1.loc[1, :'b'] = np.nan print(df1) # # a b # # 0 0.0 1.0 # 1 NaN NaN DataFrame\u548cSeries\u95f4\u7684\u64cd\u4f5c\\ DataFrame\u548cSeries\u95f4\u7684\u7b97\u672f\u64cd\u4f5c\u4e0eNumPy\u4e2d\u4e0d\u540c\u7ef4\u5ea6\u6570\u7ec4\u95f4\u7684\u64cd\u4f5c\u7c7b\u4f3c NumPy \u4ecearr\u4e2d\u51cf\u53bbarr[0]\u65f6\uff0c\u51cf\u6cd5\u5728\u6bcf\u4e00\u884c\u90fd\u8fdb\u884c\u4e86\u64cd\u4f5c\u3002\u8fd9\u5c31\u662f\u6240\u8c13\u7684\u5e7f\u64ad\u673a\u5236 arr = np.arange(12).reshape((3, 4)) print(arr) # [[ 0 1 2 3] # [ 4 5 6 7] # [ 8 9 10 11]] print(arr[0]) # [0 1 2 3] print(arr - arr[0]) # [[0 0 0 0] # [4 4 4 4] # [8 8 8 8]] DataFrame/Series \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0cDataFrame\u548cSeries\u7684\u6570\u5b66\u64cd\u4f5c\u4e2d\u4f1a\u5c06Series\u7684\u7d22\u5f15\u548cDataFrame\u7684\u5217\u8fdb\u884c\u5339\u914d\uff0c\u5e76\u5e7f\u64ad\u5230\u5404\u884c.\\ \u5982\u679c\u4e00\u4e2a\u7d22\u5f15\u503c\u4e0d\u5728DataFrame\u7684\u5217\u4e2d\uff0c\u4e5f\u4e0d\u5728Series\u7684\u7d22\u5f15\u4e2d\uff0c\u5219\u5bf9\u8c61\u4f1a\u91cd\u5efa\u7d22\u5f15\u5e76\u5f62\u6210\u8054\u5408 frame = pd.DataFrame( np.arange(12).reshape((4, 3)), columns=list('bde'), index=['Utah', 'Ohio', 'Texas', 'Oregon'] ) series = frame.iloc[0] series2 = pd.Series( range(3), index=list('bef') ) series3 = frame['d'] print(frame - series) # Series\u7684\u7d22\u5f15\u548cDataFrame\u7684\u5217\u8fdb\u884c\u5339\u914d # frame: series Result: # b d e # b 0 # b d e # Utah 0 1 2 # d 1 # Utah 0 0 0 # Ohio 3 4 5 # e 2 # Ohio 3 3 3 # Texas 6 7 8 # Name: Utah, dtype: int64 # Texas 6 6 6 # Oregon 9 10 11 # Oregon 9 9 9 print(frame - series2) # Series\u7684\u7d22\u5f15\u548cDataFrame\u7684\u5217\u8fdb\u884c\u5339\u914d # frame: series2 Result: # b d e # b 0 # b d e f # Utah 0 1 2 # e 1 # Utah 0.0 NaN 1.0 NaN # Ohio 3 4 5 # f 2 # Ohio 3.0 NaN 4.0 NaN # Texas 6 7 8 # dtype: int64 # Texas 6.0 NaN 7.0 NaN # Oregon 9 10 11 # Oregon 9.0 NaN 10.0 NaN \u6539\u4e3a\u5728\u5217\u4e0a\u8fdb\u884c\u5e7f\u64ad\uff0c\u5728\u884c\u4e0a\u5339\u914d\uff0c\u4f60\u5fc5\u987b\u4f7f\u7528\u7b97\u672f\u65b9\u6cd5\u4e2d\u7684\u4e00\u79cd print(frame.sub(series3, axis='index')) # \u6216axis=0 # frame: series3 Result: # b d e # Utah 1 # b d e # Utah 0 1 2 # Ohio 4 # Utah -1 0 1 # Ohio 3 4 5 # Texas 7 # Ohio -1 0 1 # Texas 6 7 8 # Oregon 10 # Texas -1 0 1 # Oregon 9 10 11 # Name: d, dtype: int64 # Oregon -1 0 1 \u51fd\u6570\u5e94\u7528\u548c\u6620\u5c04 NumPy\u7684\u901a\u7528\u51fd\u6570\uff08\u9010\u5143\u7d20\u6570\u7ec4\u65b9\u6cd5\uff09\u5bf9pandas\u5bf9\u8c61\u4e5f\u6709\u6548 frame = pd.DataFrame( np.random.randn(4, 3), columns=list('bde'), index=['Utah', 'Ohio', 'Texas', 'Oregon'] ) print(frame) # b d e # Utah 2.737734 -0.379977 0.758933 # Ohio 0.847497 0.839583 -2.192021 # Texas -0.907544 -0.457436 -1.907396 # Oregon 0.389362 0.250170 1.065889 print(np.abs(frame)) # \u7edd\u5bf9\u503c # b d e # Utah 2.737734 0.379977 0.758933 # Ohio 0.847497 0.839583 2.192021 # Texas 0.907544 0.457436 1.907396 # Oregon 0.389362 0.250170 1.065889 f = lambda x: x.max() - x.min() # f\u8fd4\u56de\u4e00\u4e2a\u6807\u91cf\u503c print(frame.apply(f)) # \u5c06f\u5e94\u7528\u5728\u5217, \u9ed8\u8ba4axis=0 # b 3.645278 # d 1.297019 # e 3.257911 # dtype: float64 print(frame.apply(f, axis=1)) # \u5c06f\u5e94\u7528\u5728\u884c # Utah 3.117711 # Ohio 3.039518 # Texas 1.449961 # Oregon 0.815720 # dtype: float64 def f(x): # f\u8fd4\u56de\u5e26\u6709\u591a\u4e2a\u503c\u7684Series return pd.Series( [x.min(), x.max()], index=['min', 'max'] ) print(frame.apply(f)) # b d e # min -0.907544 -0.457436 -2.192021 # max 2.737734 0.839583 1.065889 f = lambda x: '%.2f' % x print(frame.applymap(f)) # \u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u4f7f\u7528applymap\u65b9\u6cd5, \u5c06\u4e00\u4e2a\u9010\u5143\u7d20\u7684\u51fd\u6570\u5e94\u7528\u5230Series\u4e0a # b d e # Utah 2.74 -0.38 0.76 # Ohio 0.85 0.84 -2.19 # Texas -0.91 -0.46 -1.91 # Oregon 0.39 0.25 1.07 print(frame['e'].map(f)) # Utah 0.76 # Ohio -2.19 # Texas -1.91 # Oregon 1.07 # Name: e, dtype: object \u6392\u5e8f\u548c\u6392\u540d \u4f7f\u7528sort_index\u65b9\u6cd5\uff0c\u6309\u884c\u6216\u5217\u7d22\u5f15\u8fdb\u884c\u5b57\u5178\u578b\u6392\u5e8f\uff0c\u8fd4\u56de\u4e00\u4e2a\u65b0\u7684\u3001\u6392\u5e8f\u597d\u7684\u5bf9\u8c61 Series\u6392\u5e8f obj = pd.Series( range(4), index=list('dabc') ) print(obj) # d 0 # a 1 # b 2 # c 3 # dtype: int64 print(obj.sort_index()) # a 1 # b 2 # c 3 # d 0 # dtype: int64 # print(obj.sort_values()) # d 0 # a 1 # b 2 # c 3 # dtype: int64 \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u6240\u6709\u7684\u7f3a\u5931\u503c\u90fd\u4f1a\u88ab\u6392\u5e8f\u81f3Series\u7684\u5c3e\u90e8 obj = pd.Series([4, np.nan, 7, np.nan, -3, 2]) print(obj) # 0 4.0 # 1 NaN # 2 7.0 # 3 NaN # 4 -3.0 # 5 2.0 # dtype: float64 print(obj.sort_values()) # 4 -3.0 # 5 2.0 # 0 4.0 # 2 7.0 # 1 NaN # 3 NaN # dtype: float64 DataFrame\u6392\u5e8f frame = pd.DataFrame( [[0, 1, 10, 3], [4, 5, 6, 21], [8, 9, 2, 21]], index=['three', 'one', 'five'], columns=list('dabc') ) print(frame) # d a b c # three 0 1 10 3 # one 4 5 6 21 # five 8 9 2 21 print(frame.index) # Index(['three', 'one', 'five'], dtype='object') print(frame.sort_index()) # five, one\uff0cthree\u5347\u5e8f # d a b c # five 8 9 2 21 # one 4 5 6 21 # three 0 1 10 3 print(frame.sort_index(axis=0)) # five, one\uff0cthree\u5347\u5e8f # d a b c # five 8 9 2 21 # one 4 5 6 21 # three 0 1 10 3 print(frame.sort_index(axis=0, ascending=False)) # five, one\uff0cthree\u964d\u5e8f # d a b c # three 0 1 10 3 # one 4 5 6 21 # five 8 9 2 21 print(frame.sort_index(axis=1)) # \u5bf9abcd\u5347\u5e8f # a b c d # three 1 10 3 0 # one 5 6 21 4 # five 9 2 21 8 print(frame.sort_index(axis=1, ascending=False)) # \u5bf9abcd\u964d\u5e8f # d c b a # three 0 3 10 1 # one 4 21 6 5 # five 8 21 2 9 print(frame.sort_values(by=['c'], ascending=False)) # d a b c # one 4 5 6 21 # five 8 9 2 21 # three 0 1 10 3 print(frame.sort_values(by=['c', 'd'], ascending=False)) # \u5148\u5bf9b\u964d\u5e8f\uff0c\u518d\u5bf9d\u964d\u5e8f # d a b c # five 8 9 2 21 # one 4 5 6 21 # three 0 1 10 3 \u6392\u540d \u6392\u540d\u662f\u6307\u5bf9\u6570\u7ec4\u4ece1\u5230\u6709\u6548\u6570\u636e\u70b9\u603b\u6570\u5206\u914d\u540d\u6b21\u7684\u64cd\u4f5c\u3002 * Series\u548cDataFrame\u7684rank\u65b9\u6cd5\u662f\u5b9e\u73b0\u6392\u540d\u7684\u65b9\u6cd5\u3002 * df.rank(ascending=False, method='max') * ascending\uff1a\u6392\u540d\u65b9\u5f0f\uff0c\u9ed8\u8ba4\u4ece\u4f4e\u5230\u9ad8\uff0cascending=False \u8868\u793a\u4ece\u9ad8\u5230\u4f4e\uff1b * method\uff1a\u6392\u540d\u65b9\u5f0f\uff0c\u5305\u62ec\uff1a * average:\u9ed8\u8ba4\uff0c\u5728\u76f8\u7b49\u5206\u7ec4\u4e2d\uff0c\u4e3a\u5404\u4e2a\u503c\u5206\u914d\u5e73\u5747\u6392\u540d * min:\u4f7f\u7528\u6574\u4e2a\u5206\u7ec4\u7684\u6700\u5c0f\u6392\u540d * max:\u4f7f\u7528\u6574\u4e2a\u5206\u7ec4\u7684\u6700\u5927\u6392\u540d * first:\u6309\u503c\u518d\u539f\u59cb\u6570\u636e\u4e2d\u51fa\u73b0\u987a\u5e8f\u5206\u914d\u6392\u540d * dense:\u7c7b\u4f3cmin\u65b9\u6cd5\uff0c\u4f46\u6392\u540d\u603b\u662f\u518d\u7ec4\u95f4\u589e\u52a01\uff0c\u800c\u4e0d\u662f\u7ec4\u4e2d\u76f8\u540c\u7684\u5143\u7d20\u6570 * \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0crank\u662f\u901a\u8fc7\u201c\u4e3a\u5404\u7ec4\u5206\u914d\u4e00\u4e2a\u5e73\u5747\u6392\u540d\u201d\u7684\u65b9\u5f0f\u7834\u574f\u5e73\u7ea7\u5173\u7cfb obj = pd.Series([7, -5, 7, 4, 2, 0, 4]) # \u6309\u7167\u6bcf\u4e2a\u5143\u7d20\u7684\u5927\u5c0f\u987a\u5e8f\u7ed9\u51fa\u4e00\u4e2a\u5e73\u5747\u6392\u540d print(obj.rank()) # 0 6.5 # 1 1.0 # 2 6.5 # 3 4.5 # 4 3.0 # 5 2.0 # 6 4.5 # dtype: float64 \u6839\u636e\u5143\u7d20\u7684\u89c2\u5bdf\u987a\u5e8f\u8fdb\u884c\u5206\u914d\\ \u5143\u7d200\u548c2\u6ca1\u6709\u4f7f\u7528\u5e73\u5747\u6392\u540d6.5\uff0c\u5b83\u4eec\u88ab\u8bbe\u6210\u4e866\u548c7\uff0c\u56e0\u4e3a\u6570\u636e\u4e2d\u6807\u7b7e0\u4f4d\u4e8e\u6807\u7b7e2\u7684\u524d\u9762\u3002 print(obj.rank(method='first')) # 0 6.0 # 1 1.0 # 2 7.0 # 3 4.0 # 4 3.0 # 5 2.0 # 6 5.0 # dtype: float64 print(obj.rank(ascending=False, method='max')) print(obj.rank(ascending=True, method='max')) # Original Series Max with inc Max with dec # 0 7 # 0 2.0 (\u6700\u5c0f) # 0 7.0 (\u6700\u5927) # 1 -5 # 1 7.0 (\u6700\u5927) # 1 1.0 (\u6700\u5c0f) # 2 7 # 2 2.0 (\u6700\u5c0f) # 2 7.0 (\u6700\u5927) # 3 4 # 3 4.0 # 3 5.0 # 4 2 # 4 5.0 # 4 3.0 # 5 0 # 5 6.0 # 5 2.0 # 6 4 # 6 4.0 # 6 5.0 # dtype: float64 # dtype: float64 # dtype: float64 frame = pd.DataFrame( {'b': [4.3, 7, -3, 2], 'a': [0, 1, 0, 1], 'c': [-2, 5, 8, -2]} ) print(frame) # b a c # 0 4.3 0 -2 # 1 7.0 1 5 # 2 -3.0 0 8 # 3 2.0 1 -2 print(frame.rank(axis='columns')) # axis=1 # b a c # 0 3.0 2.0 1.0 # 1 3.0 1.0 2.0 # 2 1.0 2.0 3.0 # 3 3.0 2.0 1.0 \u542b\u6709\u91cd\u590d\u6807\u7b7e\u7684\u8f74\u7d22\u5f15 \u5c3d\u7ba1\u5f88\u591apandas\u51fd\u6570\uff08\u6bd4\u5982reindex\uff09\u9700\u8981\u6807\u7b7e\u662f\u552f\u4e00\u7684\uff0c\u4f46\u8fd9\u4e2a\u5e76\u4e0d\u662f\u5f3a\u5236\u6027\u7684\u3002\\ \u7d22\u5f15\u7684is_unique\u5c5e\u6027\u53ef\u4ee5\u544a\u8bc9\u4f60\u5b83\u7684\u6807\u7b7e\u662f\u5426\u552f\u4e00\u3002\\ \u5e26\u6709\u91cd\u590d\u7d22\u5f15\u7684\u60c5\u51b5\u4e0b\uff0c\u6839\u636e\u4e00\u4e2a\u6807\u7b7e\u7d22\u5f15\u591a\u4e2a\u6761\u76ee\u4f1a\u8fd4\u56de\u4e00\u4e2a\u5e8f\u5217\uff0c\u800c\u5355\u4e2a\u6761\u76ee\u4f1a\u8fd4\u56de\u6807\u91cf\u503c\uff0c\u8fd9\u53ef\u80fd\u4f1a\u4f7f\u4ee3\u7801\u66f4\u590d\u6742\u3002 obj = pd.Series(range(5), index=['a', 'b', 'a', 'c', 'b']) print(obj) # a 0 # b 1 # a 2 # c 3 # b 4 # dtype: int64 print(obj.is_unique) # True print(obj.index.is_unique) # False print(obj['a']) # \u8fd4\u56de\u4e00\u4e2a\u5e8f\u5217 # a 0 # a 2 # dtype: int64 df = pd.DataFrame(np.random.randn(4, 3), index=['a', 'a', 'b', 'b']) print(df) # 0 1 2 # a -0.726164 0.531540 -0.521611 # a -1.539807 -0.710880 -0.992789 # b -0.975970 -0.470725 0.121958 # b -0.301495 1.072322 -1.542296 print(df.index.is_unique) # False print(df.loc['b']) # 0 1 2 # b -0.520008 0.052574 0.638529 # b -1.928705 -1.099534 -1.605296 \u63cf\u8ff0\u6027\u7edf\u8ba1\u7684\u6982\u8ff0\u4e0e\u8ba1\u7b97 pandas\u5bf9\u8c61\u88c5\u914d\u4e86\u4e00\u4e2a\u5e38\u7528\u6570\u5b66\u3001\u7edf\u8ba1\u5b66\u65b9\u6cd5\u7684\u96c6\u5408\u3002 \u5176\u4e2d\u5927\u90e8\u5206\u5c5e\u4e8e\u5f52\u7ea6\u6216\u6c47\u603b\u7edf\u8ba1\u7684\u7c7b\u522b\uff0c\u8fd9\u4e9b\u65b9\u6cd5\u4eceDataFrame\u7684\u884c\u6216\u5217\u4e2d\u62bd\u53d6\u4e00\u4e2aSeries\u6216\u4e00\u7cfb\u5217\u503c\u7684\u5355\u4e2a\u503c\uff08\u5982\u603b\u548c\u6216\u5e73\u5747\u503c\uff09\u3002 \u4e0eNumPy\u6570\u7ec4\u4e2d\u7684\u7c7b\u4f3c\u65b9\u6cd5\u76f8\u6bd4\uff0c\u5b83\u4eec\u5185\u5efa\u4e86\u5904\u7406\u7f3a\u5931\u503c\u7684\u529f\u80fd\u3002 \u5f52\u7ea6\u65b9\u6cd5: sum() \u79ef\u7d2f\u578b\u65b9\u6cd5: cumsun() \u65e2\u4e0d\u662f\u5f52\u7ea6\u578b\u65b9\u6cd5\u4e5f\u4e0d\u662f\u79ef\u7d2f\u578b\u65b9\u6cd5: describe()james@nuc:/opt/python> james@nuc:/opt/python> df = pd.DataFrame( [[1.4, np.nan], [7.1, -4.5], [np.nan, np.nan], [0.75, -1.3]], index=list('abcd'), columns=['one', 'two'] ) print(df) # one two # a 1.40 NaN # b 7.10 -4.5 # c NaN NaN # d 0.75 -1.3 print(df.sum()) # axis=0, \u8fd4\u56de\u4e00\u4e2a\u6bcf\u5217\u548c\u7684Series # one 9.25 # two -5.80 # dtype: float64 print(df.sum(axis=1)) # axis=1\u4e14skipna=True, \u8fd4\u56de\u4e00\u4e2a\u6bcf\u884c\u548c\u7684Series, \u6392\u9664NA\u503c, \u586b0 # a 1.40 # b 2.60 # c 0.00 # d -0.55 # dtype: float64 print(df.sum(axis=1, skipna=False)) # \u4e0d\u6392\u9664NA\u503c # a NaN # b 2.60 # c NaN # d -0.55 # dtype: float64 print(df.groupby(level=0).sum()) # df.sum(level=1) is deprecated. should use df.groupby(level=1).sum(). # one two # a 1.40 0.0 # b 7.10 -4.5 # c 0.00 0.0 # d 0.75 -1.3 print(df.idxmax()) # \u5217one\u7684\u6700\u5927\u503c\u662f\u5728\u7d22\u5f15b, \u5217two\u7684\u6700\u5927\u503c\u662f\u5728\u7d22\u5f15d # one b # two d # dtype: object print(df.idxmin()) # one d # two b # dtype: object print(df.cumsum()) # one two # a 1.40 NaN # b 8.50 -4.5 # c NaN NaN # d 9.25 -5.8 print(df.describe()) # \u4e00\u6b21\u6027\u4ea7\u751f\u591a\u4e2a\u6c47\u603b\u7edf\u8ba1 # one two # count 3.000000 2.000000 # mean 3.083333 -2.900000 # std 3.493685 2.262742 # min 0.750000 -4.500000 # 25% 1.075000 -3.700000 # 50% 1.400000 -2.900000 # 75% 4.250000 -2.100000 # max 7.100000 -1.300000 obj = pd.Series(['a', 'a', 'b', 'c'] * 4) print(obj) # 0 a # 1 a # 2 bjames@nuc:/opt/python> # 3 c # 4 a # 5 a # 6 b # 7 c # 8 a # 9 a # 10 b # 11 c # 12 a # 13 a # 14 b # 15 c # dtype: object print(obj.describe()) # \u9488\u5bf9\u975e\u6570\u503c\u578b\u6570\u636e\uff0cdescribe\u4ea7\u751f\u53e6\u4e00\u79cd\u6c47\u603b\u7edf\u8ba1 # count 16 # unique 3 # top a # freq 8 # dtype: object \u76f8\u5173\u6027\u548c\u534f\u65b9\u5dee \u534f\u65b9\u5dee\u4e0e\u76f8\u5173\u7cfb\u6570\u4e5f\u662f\u5728\u65f6\u57df\u5206\u6790\u65f6\u5e38\u89c1\u7684\u4e24\u4e2a\u6982\u5ff5\uff0c\u4ed6\u4eec\u90fd\u662f\u7528\u6765\u63cf\u8ff0\u6570\u636e\u201c\u50cf\u4e0d\u50cf\u201d\u7684\u3002\\ \u534f\u65b9\u5dee\u7684\u901a\u4fd7\u7406\u89e3\uff1a * \u4e24\u4e2a\u53d8\u91cf\u5728\u53d8\u5316\u8fc7\u7a0b\u4e2d\u662f\u540c\u65b9\u5411\u53d8\u5316\u8fd8\u662f\u53cd\u65b9\u5411\u53d8\u5316\uff1f\u76f8\u540c\u6216\u8005\u76f8\u53cd\u6210\u90fd\u5982\u4f55\uff1f * \u4f60\u53d8\u5927\uff0c\u540c\u65f6\u6211\u53d8\u5927\uff0c\u8bf4\u660e\u4e24\u4e2a\u53d8\u91cf\u662f\u540c\u5411\u53d8\u5316\uff0c\u8fd9\u65f6\u534f\u65b9\u5dee\u5c31\u662f\u6b63\u7684\u3002 * \u4f60\u53d8\u5927\uff0c\u540c\u65f6\u6211\u53d8\u5c0f\uff0c\u8bf4\u660e\u4e24\u4e2a\u53d8\u91cf\u662f\u53cd\u5411\u53d8\u5316\uff0c\u8fd9\u65f6\u534f\u65b9\u5dee\u5c31\u662f\u8d1f\u7684\u3002 * \u4ece\u6570\u503c\u770b\uff0c\u534f\u65b9\u5dee\u7684\u6570\u503c\u8d8a\u5927\uff0c\u4e24\u4e2a\u53d8\u91cf\u540c\u5411\u7a0b\u5ea6\u4e5f\u5c31\u8d8a\u5927\u3002\u53cd\u4e4b\u4ea6\u7136\u3002 \u76f8\u5173\u7cfb\u6570\u7684\u901a\u4fd7\u7406\u89e3\uff1a * \u7528X\uff0cY\u7684\u534f\u65b9\u5dee\u521d\u4e00X\u7684\u6807\u51c6\u5dee\u548cY\u7684\u6807\u51c6\u5dee\u3002 * \u76f8\u5173\u7cfb\u6570\u4e5f\u53ef\u4ee5\u770b\u6210\u534f\u65b9\u5dee\uff0c\u4e00\u79cd\u63d0\u51fa\u4e86\u4e24\u4e2a\u53d8\u91cf\u91cf\u7eb2\u5f71\u54cd\u3001\u6807\u51c6\u5316\u540e\u7684\u7279\u6b8a\u534f\u65b9\u5dee\u3002 * \u6240\u4ee5\uff1a * \u4e5f\u53ef\u4ee5\u53cd\u5e94\u4e24\u4e2a\u53d8\u91cf\u53d8\u5316\u65f6\u662f\u540c\u5411\u8fd8\u662f\u53cd\u5411\uff0c\u5982\u679c\u540c\u5411\u53d8\u5316\u5c31\u4e3a\u6b63\uff0c\u53cd\u5411\u53d8\u5316\u5c31\u4e3a\u8d1f\u3002 * \u7531\u4e8e\u662f\u6807\u51c6\u7248\u540e\u7684\u534f\u65b9\u5dee\uff0c\u76f8\u5173\u7cfb\u6570\u6d88\u9664\u4e86\u4e24\u4e2a\u53d8\u91cf\u53d8\u5316\u5e45\u5ea6\u7684\u5f71\u54cd\uff0c\u800c\u53ea\u662f\u5355\u7eaf\u53cd\u5e94\u4e24\u4e2a\u53d8\u91cf\u6bcf\u5355\u4f4d\u53d8\u5316\u65f6\u7684\u76f8\u4f3c\u6210\u90fd\u3002 \u603b\u7ed3 \u5bf9\u4e8e\u4e24\u4e2a\u53d8\u91cfX\u3001Y\uff0c \u5f53\u4ed6\u4eec\u7684\u76f8\u5173\u7cfb\u6570\u4e3a1\u65f6\uff0c\u8bf4\u660e\u4e24\u4e2a\u53d8\u91cf\u53d8\u5316\u65f6\u7684\u6b63\u5411\u76f8\u4f3c\u5ea6\u6700\u5927\u3002 \u5f53\u4ed6\u4eec\u7684\u76f8\u5173\u7cfb\u6570\u4e3a\uff0d1\u65f6\uff0c\u8bf4\u660e\u4e24\u4e2a\u53d8\u91cf\u53d8\u5316\u7684\u53cd\u5411\u76f8\u4f3c\u5ea6\u6700\u5927\u3002 \u968f\u7740\u4ed6\u4eec\u76f8\u5173\u7cfb\u6570\u51cf\u5c0f\uff0c\u4e24\u4e2a\u53d8\u91cf\u53d8\u5316\u65f6\u7684\u76f8\u4f3c\u5ea6\u4e5f\u53d8\u5c0f\uff0c\u5f53\u76f8\u5173\u7cfb\u6570\u4e3a0\u65f6\uff0c\u4e24\u4e2a\u53d8\u91cf\u7684\u53d8\u5316\u8fc7\u7a0b\u6ca1\u6709\u4efb\u4f55\u76f8\u4f3c\u5ea6\uff0c\u4e5f\u5373\u4e24\u4e2a\u53d8\u91cf\u65e0\u5173\u3002 *\u5f53\u76f8\u5173\u7cfb\u6570\u7ee7\u7eed\u53d8\u5c0f\uff0c\u5c0f\u4e8e0\u65f6\uff0c\u4e24\u4e2a\u53d8\u91cf\u5f00\u59cb\u51fa\u73b0\u53cd\u5411\u7684\u76f8\u4f3c\u5ea6\uff0c\u968f\u7740\u76f8\u5173\u7cfb\u6570\u7ee7\u7eed\u53d8\u5c0f\uff0c\u53cd\u5411\u76f8\u4f3c\u5ea6\u4f1a\u9010\u6e10\u53d8\u5927\u3002 \u4e0b\u9762\u7684\u4f8b\u5b50\u4f7f\u7528 pandas-datareader * https://pypi.org/project/pandas-datareader/ * https://pydata.github.io/pandas-datareader/) \u5728\u6240\u6709\u4f8b\u5b50\u4e2d\uff0c\u5728\u8ba1\u7b97\u76f8\u5173\u6027\u4e4b\u524d\uff0c\u6570\u636e\u70b9\u5df2\u7ecf\u6309\u6807\u7b7e\u8fdb\u884c\u4e86\u5bf9\u9f50\u3002 all_data = { ticker: web.get_data_yahoo(ticker) for ticker in ['AAPL', 'IBM', 'MSFT', 'GOOG'] } price = pd.DataFrame( { ticker: data['Adj Close'] for ticker, data in all_data.items() } ) volume = pd.DataFrame( { ticker: data['Volume'] for ticker, data in all_data.items() } ) returns = price.pct_change() print(returns.tail()) # AAPL IBM MSFT GOOG # Date # 2021-08-09 -0.000342 -0.008424 -0.003904 0.007049 # 2021-08-10 -0.003354 0.000920 -0.006555 0.000685 # 2021-08-11 0.001786 0.005305 0.001781 -0.002947 # 2021-08-12 0.020773 0.006614 0.009967 0.005084 # 2021-08-13 0.001410 0.000769 0.010490 0.000119 Series\u7684corr\u65b9\u6cd5\u8ba1\u7b97\u7684\u662f\u4e24\u4e2aSeries\u4e2d\u91cd\u53e0\u7684\u3001\u975eNA\u7684\u3001\u6309\u7d22\u5f15\u5bf9\u9f50\u7684\u503c\u7684\u76f8\u5173\u6027\u3002\u76f8\u5e94\u5730\uff0ccov\u8ba1\u7b97\u7684\u662f\u534f\u65b9\u5dee print(returns['MSFT']) # Date # 2016-08-15 NaN # 2016-08-16 -0.005540 # 2016-08-17 0.002089 # 2016-08-18 0.000695 # 2016-08-19 0.000347 # ... # 2021-08-09 -0.003904 # 2021-08-10 -0.006555 # 2021-08-11 0.001781 # 2021-08-12 0.009967 # 2021-08-13 0.010490 # Name: MSFT, Length: 1259, dtype: float64 print(returns['MSFT'].corr(returns['IBM'])) # Series\u7684corr\u65b9\u6cd5\u8ba1\u7b97\u7684\u662f\u4e24\u4e2aSeries\u4e2d\u91cd\u53e0\u7684\u3001\u975eNA\u7684\u3001\u6309\u7d22\u5f15\u5bf9\u9f50\u7684\u503c\u7684\u76f8\u5173\u6027\u3002 # 0.5175237180581937 print(returns.MSFT.corr(returns.IBM)) # \u7b49\u540c\u5199\u6cd5\uff0cMSFT\u662f\u4e00\u4e2a\u6709\u6548\u7684Python\u5c5e\u6027 # 0.5175237180581937 print(returns['MSFT'].cov(returns['IBM'])) # Series\u7684cov\u65b9\u6cd5\u8ba1\u7b97\u7684\u662f\u4e24\u4e2aSeries\u4e2d\u503c\u7684\u534f\u65b9\u5dee\u3002 # 0.0001452224236764915 DataFrame\u7684corr\u548ccov\u65b9\u6cd5\u4f1a\u5206\u522b\u4ee5DataFrame\u7684\u5f62\u5f0f\u8fd4\u56de\u76f8\u5173\u6027\u548c\u534f\u65b9\u5dee\u77e9\u9635 print(returns.corr()) # AAPL IBM MSFT GOOG # AAPL 1.000000 0.441111 0.735539 0.661961 # IBM 0.441111 1.000000 0.517524 0.484230 # MSFT 0.735539 0.517524 1.000000 0.775756 # GOOG 0.661961 0.484230 0.775756 1.000000 print(returns.corrwith(returns['IBM'])) # \u7ed9corrwith\u65b9\u6cd5\uff0c\u4f20\u5165\u4e00\u4e2aSeries\u65f6\uff0c\u4f1a\u8fd4\u56de\u4e00\u4e2a\u542b\u6709\u4e3a\u6bcf\u5217\u8ba1\u7b97\u76f8\u5173\u6027\u503c\u7684Series # AAPL 0.441111 # IBM 1.000000 # MSFT 0.517524 # GOOG 0.484230 # dtype: float64 print(returns.corrwith(volume)) # \u7ed9corrwith\u65b9\u6cd5\uff0c\u4f20\u5165\u4e00\u4e2aDataFrame\u65f6\uff0c\u4f1a\u8ba1\u7b97\u5339\u914d\u5230\u5217\u540d\u7684\u76f8\u5173\u6027\u6570\u503c\u3002\u4e0b\u9762\u662f\u8ba1\u7b97\u4ea4\u6613\u91cf\u767e\u5206\u6bd4\u53d8\u5316\u7684\u76f8\u5173\u6027 # AAPL -0.063111 # IBM -0.103721 # MSFT -0.056842 # GOOG -0.119026 # dtype: float64 print(returns.cov()) # AAPL IBM MSFT GOOG # AAPL 0.000361 0.000137 0.000240 0.000211 # IBM 0.000137 0.000268 0.000145 0.000133 # MSFT 0.000240 0.000145 0.000294 0.000224 # GOOG 0.000211 0.000133 0.000224 0.000282 \u552f\u4e00\u503c\u3001\u8ba1\u6570\u548c\u6210\u5458\u5c5e\u6027 obj = pd.Series(['c', 'a', 'd', 'a', 'a', 'a', 'b', 'b', 'c', 'c']) print(obj) \u51fd\u6570unique\u7ed9\u51faSeries\u4e2d\u7684\u552f\u4e00\u503c print(obj.unique()) # ['c' 'a' 'd' 'b'] print(obj.sort_values().unique()) # ['a' 'b' 'c' 'd'] print(obj.value_counts()) # value_counts\u8ba1\u7b97Series\u5305\u542b\u7684\u503c\u7684\u4e2a\u6570 # a 4 # c 3 # b 2 # d 1 # dtype: int64 print(pd.value_counts(obj.values, sort=True)) # \u8fd9\u91ccvalue_counts\u4e0d\u662fSeries\u7684\u65b9\u6cd5\uff0c\u662fpandas\u9876\u5c42\u65b9\u6cd5 # a 4 # c 3 # b 2 # d 1 # dtype: int64 print(obj.isin(['b', 'c'])) # 0 True # 1 False # 2 False # 3 False # 4 False # 5 False # 6 True # 7 True # 8 True # 9 True # dtype: bool print(obj[obj.isin(['b', 'c'])]) # \u5c06\u4e0a\u9762\u7684\u7ed3\u679c\u4f5c\u4e3a\u5217\u8868\u8f93\u5165\u7684\u6761\u4ef6\uff0c\u8f93\u51fa\u4e3aTrue\u7684\u7ed3\u679c # 0 c # 6 b # 7 b # 8 c # 9 c # dtype: object \u53c2\u8003: https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.Index.get_indexer.html obj1 = pd.Series(['c', 'a', 'd', 'a', 'a', 'a', 'b', 'b', 'c', 'c']) obj2 = pd.Series(['c', 'a', 'b']) print(pd.Index(obj1)) # Index(['c', 'a', 'd', 'a', 'a', 'a', 'b', 'b', 'c', 'c'], dtype='object') print(pd.Index(obj2)) # Index(['c', 'a', 'b'], dtype='object') print(pd.Index(obj2).get_indexer(obj1)) # \u8fd9\u91cc0\u5bf9\u5e94obj2\u91cc\u9762\u7684c\u5728job1\u7684\u4f4d\u7f6e\uff0c\u4ee5\u6b64\u7c7b\u63a8\uff0c\u751f\u6210\u65b0\u7684\u7d22\u5f15\u5217\u8868 # [ 0 1 -1 1 1 1 2 2 0 0] \u8ba1\u7b97DataFrame\u591a\u4e2a\u76f8\u5173\u5217\u7684\u76f4\u65b9\u56fe data = pd.DataFrame( { 'Que1': [1, 3, 4, 3, 4], 'Que2': [2, 3, 1, 2, 3], 'Que3': [1, 5, 2, 4, 4], } ) print(data) # Que1 Que2 Que3 # 0 1 2 1 # 1 3 3 5 # 2 4 1 2 # 3 3 2 4 # 4 4 3 4 result = data.apply(pd.value_counts).fillna(0) print(result) # \u7ed3\u679c\u4e2d\u7684\u884c\u6807\u7b7e\u662f\u6240\u6709\u5217\u4e2d\u51fa\u73b0\u7684\u4e0d\u540c\u503c\uff0c\u6570\u503c\u5219\u662f\u8fd9\u4e9b\u4e0d\u540c\u503c\u5728\u6bcf\u4e2a\u5217\u4e2d\u51fa\u73b0\u7684\u6b21\u6570\uff0c\u4f8b\u5982\uff1a\u6570\u5b575\u53ea\u5728Que3\u91cc\u9762\u51fa\u73b0\u4e86\u4e00\u6b21 # Que1 Que2 Que3 # 1 1.0 1.0 1.0 # 2 0.0 2.0 1.0 # 3 2.0 2.0 0.0 # 4 2.0 0.0 2.0 # 5 0.0 0.0 1.0","title":"Ch02"},{"location":"python/DataAnalysis/ch02/#pandas","text":"\u53c2\u8003\uff1a Python\u79d1\u5b66\u8ba1\u7b97\u5e93Pandas\u57fa\u7840\u6570\u636e\u7ed3\u6784Series\u548cDataFrame import numpy as np import pandas as pd from pandas import Series, DataFrame import pandas_datareader as web","title":"pandas\u6570\u636e\u7ed3\u6784\u4ecb\u7ecd"},{"location":"python/DataAnalysis/ch02/#series","text":"Series\u662f\u4e00\u79cd\u4e00\u7ef4\u7684\u6570\u7ec4\u578b\u5bf9\u8c61\uff0c\u5b83\u5305\u542b\u4e86\u4e00\u4e2a\u503c\u5e8f\u5217\uff08\u4e0eNumPy\u4e2d\u7684\u7c7b\u578b\u76f8\u4f3c\uff09\uff0c\u5e76\u4e14\u5305\u542b\u4e86\u6570\u636e\u6807\u7b7e\uff0c\u79f0\u4e3a\u7d22\u5f15\uff08index\uff09\u3002\\ \u4ece\u53e6\u4e00\u4e2a\u89d2\u5ea6\u8003\u8651Series\uff0c\u53ef\u4ee5\u8ba4\u4e3a\u5b83\u662f\u4e00\u4e2a\u957f\u5ea6\u56fa\u5b9a\u4e14\u6709\u5e8f\u7684\u5b57\u5178\uff0c\u56e0\u4e3a\u5b83\u5c06\u7d22\u5f15\u503c\u548c\u6570\u636e\u503c\u6309\u4f4d\u7f6e\u914d\u5bf9\u3002\\ \u7d22\u5f15\u5728\u5de6\u8fb9\uff0c\u503c\u5728\u53f3\u8fb9\u3002 obj = pd.Series([4, 7, -5, 3]) print(obj) # 0 4 # 1 7 # 2 -5 # 3 3 # dtype: int64 print(obj.values) # [ 4 7 -5 3] print(obj.index) # RangeIndex(start=0, stop=4, step=1)unique \u81ea\u5b9a\u4e49index obj = pd.Series([4, 7, -5, 3], index=['d', 'b', 'a', 'c']) print(obj) # d 4 # b 7 # a -5 # c 3 # dtype: int64 print(obj.index) # Index(['d', 'b', 'a', 'c'], dtype='object') print(obj['a']) # -5 print(obj[obj > 3]) # d 4 # b 7 # dtype: int64 print(obj * 2) # d 8 # b 14 # a -10 # c 6 # dtype: int64 print(np.exp(obj)) # d 54.598150 # b 1096.633158 # a 0.006738 # c 20.085537 # dtype: float64 obj['a'] = 9 # \u66f4\u65b0 print(obj[['a', 'b', 'c']]) # a 9 # b 7 # c 3 # dtype: int64 print(obj) print(9 in obj) # False \u6ce8\u610f\uff0c\u662f\u7d22\u5f15\uff0c\u975e\u503c print('a' in obj) # True \u901a\u8fc7\u5b57\u5178\u751f\u6210\u4e00\u4e2aSeries\\ \u5f53\u628a\u5b57\u5178\u4f20\u9012\u7ed9Series\u6784\u9020\u51fd\u6570\u65f6\uff0c\u4ea7\u751f\u7684Series\u7684\u7d22\u5f15\u5c06\u662f\u6392\u5e8f\u597d\u7684\u5b57\u5178\u952e\u3002\\ \u53ef\u4ee5\u5c06\u5b57\u5178\u952e\u6309\u7167\u4f60\u6240\u60f3\u8981\u7684\u987a\u5e8f\u4f20\u9012\u7ed9\u6784\u9020\u51fd\u6570\uff0c\u4ece\u800c\u4f7f\u751f\u6210\u7684Series\u7684\u7d22\u5f15\u987a\u5e8f\u7b26\u5408\u9884\u671f\u3002\\ NaN\uff08not a number\uff09\uff0c\u8fd9\u662fpandas\u4e2d\u6807\u8bb0\u7f3a\u5931\u503c\u6216NA\u503c\u7684\u65b9\u5f0f\u3002 sdata = {'Ohio': 35000, 'Texas': 71000, 'Oregon': 16000, 'Utah': 5000} obj3 = pd.Series(sdata) print(sdata) # {'Ohio': 35000, 'Texas': 71000, 'Oregon': 16000, 'Utah': 5000} print(obj3) # Ohio 35000 # Texas 71000 # Oregon 16000 # Utah 5000 # dtype: int64 states = ['California', 'Ohio', 'Oregon', 'Texas'] obj4 = pd.Series(sdata, index=states) print(obj4) # California NaN # Ohio 35000.0 # Oregon 16000.0 # Texas 71000.0 # dtype: float64 print(pd.isnull(obj4)) # California True # Ohio False # Oregon False # Texas False # dtype: bool print(obj4.isnull) # <bound method Series.isnull of California NaN # Ohio 35000.0 # Oregon 16000.0 # Texas 71000.0 # dtype: float64> print(pd.notnull(obj4)) # California False # Ohio True # Oregon True # Texas True # dtype: bool print(obj4.notnull) # <bound method Series.notnull of California NaN # Ohio 35000.0 # Oregon 16000.0 # Texas 71000.0 # dtype: float64> Series\u7684\u81ea\u52a8\u5bf9\u9f50\u7d22\u5f15\uff0c\u4e0e\u6570\u636e\u5e93\u7684join\u64cd\u4f5c\u662f\u975e\u5e38\u76f8\u4f3c print(\"obj3 \\n\", obj3) print(\"obj4 \\n\", obj4) print(\"obj3+obj4 \\n\", obj3 + obj4) # obj3 obj4 # Ohio 35000 California NaN # Texas 71000 Ohio 35000.0 # Oregon 16000 Oregon 16000.0 # Utah 5000 Texas 71000.0 # dtype: int64 dtype: float64 # obj3+obj4 # California NaN # Ohio 70000.0 # Oregon 32000.0 # Texas 142000.0 # Utah NaN # dtype: float64 Series\u5bf9\u8c61\u81ea\u8eab\u548c\u5176\u7d22\u5f15\u90fd\u6709name\u5c5e\u6027 obj4.name = 'population' obj4.index.name = 'state' print(obj4) # state # California NaN # Ohio 35000.0 # Oregon 16000.0 # Texas 71000.0 # Name: population, dtype: float64 obj = pd.Series([4, 7, -5, 3], index=['d', 'b', 'a', 'c']) print(obj) obj.index = ['Bob', 'Steve', 'Jeff', 'Ryan'] print(obj) # Bob 4 # Steve 7 # Jeff -5 # Ryan 3 # dtype: int64","title":"Series"},{"location":"python/DataAnalysis/ch02/#dataframe","text":"DataFrame\u8868\u793a\u7684\u662f\u77e9\u9635\u7684\u6570\u636e\u8868\uff0c\u5b83\u5305\u542b\u5df2\u6392\u5e8f\u7684\u5217\u96c6\u5408\uff0c\u6bcf\u4e00\u5217\u53ef\u4ee5\u662f\u4e0d\u540c\u7684\u503c\u7c7b\u578b\uff08\u6570\u503c\u3001\u5b57\u7b26\u4e32\u3001\u5e03\u5c14\u503c\u7b49\uff09\u3002\\ DataFrame\u65e2\u6709\u884c\u7d22\u5f15\u4e5f\u6709\u5217\u7d22\u5f15\uff0c\u5b83\u53ef\u4ee5\u88ab\u89c6\u4e3a\u4e00\u4e2a\u5171\u4eab\u76f8\u540c\u7d22\u5f15\u7684Series\u7684\u5b57\u5178\u3002\\ \u5728DataFrame\u4e2d\uff0c\u6570\u636e\u88ab\u5b58\u50a8\u4e3a\u4e00\u4e2a\u4ee5\u4e0a\u7684\u4e8c\u7ef4\u5757\uff0c\u800c\u4e0d\u662f\u5217\u8868\u3001\u5b57\u5178\u6216\u5176\u4ed6\u4e00\u7ef4\u6570\u7ec4\u7684\u96c6\u5408\u3002\\ DataFrame\u662f\u4e8c\u7ef4\u7684\uff0c\u4f46\u53ef\u4ee5\u5229\u7528\u5206\u5c42\u7d22\u5f15\u5728DataFrame\u4e2d\u5c55\u73b0\u66f4\u9ad8\u7ef4\u5ea6\u7684\u6570\u636e\u3002\\ \u4eceDataFrame\u4e2d\u9009\u53d6\u7684\u5217\u662f\u6570\u636e\u7684\u89c6\u56fe\uff0c\u800c\u4e0d\u662f\u62f7\u8d1d\u3002\u56e0\u6b64\uff0c\u5bf9Series\u7684\u4fee\u6539\u4f1a\u6620\u5c04\u5230DataFrame\u4e2d\u3002\u5982\u679c\u9700\u8981\u590d\u5236\uff0c\u5219\u5e94\u5f53\u663e\u5f0f\u5730\u4f7f\u7528Series\u7684copy\u65b9\u6cd5\u3002","title":"DataFrame"},{"location":"python/DataAnalysis/ch02/#dataframe_1","text":"data = { 'state': ['Ohio', 'Ohio', 'Ohio', 'Nevada', 'Nevada', 'Nevada'], 'year': [2000, 2001, 2002, 2001, 2002, 2003], 'pop': [1.5, 1.7, 3.6, 2.4, 2.9, 3.2] } frame = pd.DataFrame(data) # \u4ea7\u751f\u7684DataFrame\u4f1a\u81ea\u52a8\u4e3aSereies\u5206\u914d\u7d22\u5f15\uff0c\u5e76\u4e14\u5217\u4f1a\u6309\u7167\u6392\u5e8f\u7684\u987a\u5e8f\u6392\u5217 print(frame) # state year pop # 0 Ohio 2000 1.5 # 1 Ohio 2001 1.7 # 2 Ohio 2002 3.6 # 3 Nevada 2001 2.4 # 4 Nevada 2002 2.9 # 5 Nevada 2003 3.2 print(frame.head(3)) # \u5bf9\u4e8e\u5927\u578bDataFrame, head\u65b9\u6cd5\u5c06\u4f1a\u53ea\u9009\u51fa\u5934\u90e8\u7684\u82e5\u5e72\u884c, \u9ed8\u8ba4\u662f\u524d\u4e94\u884c # state year pop # 0 Ohio 2000 1.5 # 1 Ohio 2001 1.7 # 2 Ohio 2002 3.6 \u5982\u679c\u6307\u5b9a\u4e86\u5217\u7684\u987a\u5e8f\uff0cDataFrame\u7684\u5217\u5c06\u4f1a\u6309\u7167\u6307\u5b9a\u987a\u5e8f\u6392\u5217 frame = pd.DataFrame(data, columns=['year', 'state', 'pop']) print(frame) # year state pop # 0 2000 Ohio 1.5 # 1 2001 Ohio 1.7 # 2 2002 Ohio 3.6 # 3 2001 Nevada 2.4 # 4 2002 Nevada 2.9 # 5 2003 Nevada 3.2 \u5982\u679c\u4f20\u7684\u5217\u4e0d\u5305\u542b\u5728\u5b57\u5178\u4e2d\uff0c\u5c06\u4f1a\u5728\u7ed3\u679c\u4e2d\u51fa\u73b0\u7f3a\u5931\u503c frame2 = pd.DataFrame( data, columns=['year', 'state', 'pop', 'debt'], index=['one', 'two', 'three', 'four', 'five', 'six'] ) print(frame2) # year state pop debt # one 2000 Ohio 1.5 NaN # two 2001 Ohio 1.7 NaN # three 2002 Ohio 3.6 NaN # four 2001 Nevada 2.4 NaN # five 2002 Nevada 2.9 NaN # six 2003 Nevada 3.2 NaN \u9009\u53d6\u884c, \u53ef\u4ee5\u901a\u8fc7\u4f4d\u7f6e\u6216\u7279\u6b8a\u5c5e\u6027loc\u8fdb\u884c\u9009\u53d6 print(frame2.loc['three']) # year 2002 # state Ohio # pop 3.6 # debt NaN # Name: three, dtype: object DataFrame\u4e2d\u7684\u4e00\u5217\uff0c\u53ef\u4ee5\u6309\u5b57\u5178\u578b\u6807\u8bb0\u6216\u5c5e\u6027\u90a3\u6837\u68c0\u7d22\u4e3aSeries\\ frame2[colunm]\u5bf9\u4e8e\u4efb\u610f\u5217\u540d\u5747\u6709\u6548\uff0c\u4f46\u662fframe2.column\u53ea\u5728\u5217\u540d\u662f\u6709\u6548\u7684Python\u53d8\u91cf\u540d\u65f6\u6709\u6548\u3002\\ \u8fd4\u56de\u7684Series\u4e0e\u539fDataFrame\u6709\u76f8\u540c\u7684\u7d22\u5f15\uff0c\u4e14Series\u7684name\u5c5e\u6027\u4e5f\u4f1a\u88ab\u5408\u7406\u5730\u8bbe\u7f6e\u3002 print(frame2['state']) # one Ohio # two Ohio # three Ohio # four Nevada # five Nevada # six Nevada # Name: state, dtype: object print(frame2.state) # \u5c5e\u6027\u578b\u8fde\u63a5 # one Ohio # two Ohio # three Ohio # four Nevada # five Nevada # six Nevada # Name: state, dtype: object \u5217\u7684\u5f15\u7528\u662f\u53ef\u4ee5\u4fee\u6539\u7684\u3002 frame2['debt'] = 16.5 print(frame2) # Name: state, dtype: object # year state pop debt # one 2000 Ohio 1.5 16.5 # two 2001 Ohio 1.7 16.5 # three 2002 Ohio 3.6 16.5 # four 2001 Nevada 2.4 16.5 # five 2002 Nevada 2.9 16.5 # six 2003 Nevada 3.2 16.5 frame2['debt'] = np.arange(6.) # \u503c\u7684\u957f\u5ea6\u5fc5\u987b\u548cDataFrame\u7684\u957f\u5ea6\u76f8\u5339\u914d print(frame2) # year state pop debt # one 2000 Ohio 1.5 0.0 # two 2001 Ohio 1.7 1.0 # three 2002 Ohio 3.6 2.0 # four 2001 Nevada 2.4 3.0 # five 2002 Nevada 2.9 4.0 # six 2003 Nevada 3.2 5.0 \u5982\u679c\u4f60\u5c06Series\u8d4b\u503c\u7ed9\u4e00\u5217\u65f6\uff0cSeries\u7684\u7d22\u5f15\u5c06\u4f1a\u6309\u7167DataFrame\u7684\u7d22\u5f15\u91cd\u65b0\u6392\u5217\uff0c\u5e76\u5728\u7a7a\u7f3a\u7684\u5730\u65b9\u586b\u5145\u7f3a\u5931\u503c val = pd.Series([-1.2, -1.5, -1.7], index=['two', 'four', 'five']) frame2['debt'] = val print(frame2) # year state pop debt # one 2000 Ohio 1.5 NaN # two 2001 Ohio 1.7 -1.2 # three 2002 Ohio 3.6 NaN # four 2001 Nevada 2.4 -1.5 # five 2002 Nevada 2.9 -1.7 # six 2003 Nevada 3.2 NaN \u5982\u679c\u88ab\u8d4b\u503c\u7684\u5217(eastern\u5217)\u5e76\u4e0d\u5b58\u5728\uff0c\u5219\u4f1a\u751f\u6210\u4e00\u4e2a\u65b0\u7684\u5217\u3002 frame2['eastern'] = frame2.state == 'Ohio' print(frame2) # year state pop debt eastern # one 2000 Ohio 1.5 NaN True # two 2001 Ohio 1.7 -1.2 True # three 2002 Ohio 3.6 NaN True # four 2001 Nevada 2.4 -1.5 False # five 2002 Nevada 2.9 -1.7 False # six 2003 Nevada 3.2 NaN False print(frame2.eastern) # one True # two True # three True # four False # five False # six False # Name: eastern, dtype: bool del\u5173\u952e\u5b57\u53ef\u4ee5\u50cf\u5728\u5b57\u5178\u4e2d\u90a3\u6837\u5bf9DataFrame\u5220\u9664\u5217\u3002 del frame2['eastern'] print(frame2.columns) # Index(['year', 'state', 'pop', 'debt'], dtype='object')","title":"\u628a\u4e00\u4e2a\u5b57\u5178\u8d4b\u503c\u7ed9DataFrame"},{"location":"python/DataAnalysis/ch02/#dataframe_2","text":"pandas\u4f1a\u5c06\u5b57\u5178\u7684\u952e\u4f5c\u4e3a\u5217('Nevada', etc.)\uff0c\u5c06\u5185\u90e8\u5b57\u5178\u7684\u952e\u4f5c\u4e3a\u884c\u7d22\u5f15(2001, etc.) pop = { 'Nevada': { 2001: 2.4, 2002: 2.9 }, 'Ohio': { 2000: 1.5, 2001: 1.7, 2002: 3.6 } } frame3 = pd.DataFrame(pop) # \u4e0d\u6307\u5b9a\u7d22\u5f15\uff0c\u9ed8\u8ba4\u4f7f\u7528\u5b57\u5178\u7d22\u5f15 print(frame3) # Nevada Ohio # 2001 2.4 1.7 # 2002 2.9 3.6 # 2000 NaN 1.5 print(pd.DataFrame(pop, index=[2001, 2002, 2003])) # \u6307\u5b9a\u7d22\u5f15 # Nevada Ohio # 2001 2.4 1.7 # 2002 2.9 3.6 # 2003 NaN NaN \u8f6c\u7f6e\u64cd\u4f5c\uff08\u8c03\u6362\u884c\u548c\u5217\uff09 print(frame3.T) # 2001 2002 2000 # Nevada 2.4 2.9 NaN # Ohio 1.7 3.6 1.5","title":"\u628a\u4e00\u4e2a\u5305\u542b\u5b57\u5178\u7684\u5d4c\u5957\u5b57\u5178\u8d4b\u503c\u7ed9DataFrame"},{"location":"python/DataAnalysis/ch02/#seriesdataframe","text":"pdata = { 'Ohio': frame3['Ohio'][:-1], 'Nevada': frame3['Nevada'][:2] } print(pd.DataFrame(pdata)) # Ohio Nevada # 2001 1.7 2.4 # 2002 3.6 2.9 frame3.index.name = 'year' frame3.columns.name = 'state' print(frame3) # state Nevada Ohio # year # 2001 2.4 1.7 # 2002 2.9 3.6 # 2000 NaN 1.5 print(frame3.values) # [[2.4 1.7] # [2.9 3.6] # [nan 1.5]] print(frame2) # year state pop debt # one 2000 Ohio 1.5 NaN # two 2001 Ohio 1.7 -1.2 # three 2002 Ohio 3.6 NaN # four 2001 Nevada 2.4 -1.5 # five 2002 Nevada 2.9 -1.7 # six 2003 Nevada 3.2 NaN print(frame2.values) # [[2000 'Ohio' 1.5 nan] # [2001 'Ohio' 1.7 -1.2] # [2002 'Ohio' 3.6 nan] # [2001 'Nevada' 2.4 -1.5] # [2002 'Nevada' 2.9 -1.7] # [2003 'Nevada' 3.2 nan]]","title":"\u4f7f\u7528\u5305\u542bSeries\u7684\u5b57\u5178\u6784\u9020DataFrame"},{"location":"python/DataAnalysis/ch02/#_1","text":"pandas\u4e2d\u7684\u7d22\u5f15\u5bf9\u8c61\u662f\u7528\u4e8e\u5b58\u50a8\u8f74\u6807\u7b7e\u548c\u5176\u4ed6\u5143\u6570\u636e\u7684\uff08\u4f8b\u5982\u8f74\u540d\u79f0\u6216\u6807\u7b7e\uff09\u3002\\ \u5728\u6784\u9020Series\u6216DataFrame\u65f6\uff0c\u4f60\u6240\u4f7f\u7528\u7684\u4efb\u610f\u6570\u7ec4\u6216\u6807\u7b7e\u5e8f\u5217\u90fd\u53ef\u4ee5\u5728\u5185\u90e8\u8f6c\u6362\u4e3a\u7d22\u5f15\u5bf9\u8c61\u3002\\ \u7d22\u5f15\u5bf9\u8c61\u662f\u4e0d\u53ef\u53d8\u7684\u3002\\ \u9664\u4e86\u7c7b\u4f3c\u6570\u7ec4\uff0c\u7d22\u5f15\u5bf9\u8c61\u4e5f\u50cf\u4e00\u4e2a\u56fa\u5b9a\u5927\u5c0f\u7684\u96c6\u5408\u3002\u4e0ePython\u96c6\u5408\u4e0d\u540c\uff0cpandas\u7d22\u5f15\u5bf9\u8c61\u53ef\u4ee5\u5305\u542b\u91cd\u590d\u6807\u7b7e\u3002\\ \u56e0\u4e3a\u4e00\u4e9b\u64cd\u4f5c\u4f1a\u4ea7\u751f\u5305\u542b\u7d22\u5f15\u5316\u6570\u636e\u7684\u7ed3\u679c\uff0c\u7406\u89e3\u7d22\u5f15\u5982\u4f55\u5de5\u4f5c\u8fd8\u662f\u5f88\u91cd\u8981\u7684\u3002 obj = pd.Series(range(3), index=['a', 'b', 'c']) index = obj.index print(index) # Index(['a', 'b', 'c'], dtype='object') print(index[1:]) # Index(['b', 'c'], dtype='object') labels = pd.Index(np.arange(3)) print(labels) # Int64Index([0, 1, 2], dtype='int64') obj2 = pd.Series([1.5, -2.5, 0], index=labels) print(obj2) # 0 1.5 # 1 -2.5 # 2 0.0 # dtype: float64 print(obj2.index is labels) # True print(frame3) # state Nevada Ohio # year # 2001 2.4 1.7 # 2002 2.9 3.6 # 2000 NaN 1.5 print(frame3.columns) # Index(['Nevada', 'Ohio'], dtype='object', name='state') print(frame3.index) # Int64Index([2001, 2002, 2000], dtype='int64', name='year') print('Ohio' in frame3.columns) # True \u7c7b\u4f3c\u96c6\u5408\u64cd\u4f5c print(2003 in frame3.index) # False pandas\u7d22\u5f15\u5bf9\u8c61\u5305\u542b\u91cd\u590d\u6807\u7b7e\\ \u6839\u636e\u91cd\u590d\u6807\u7b7e\u8fdb\u884c\u7b5b\u9009\uff0c\u4f1a\u9009\u53d6\u6240\u6709\u91cd\u590d\u6807\u7b7e\u5bf9\u5e94\u7684\u6570\u636e\u3002 dup_labels = pd.Index(['foo', 'foo', 'bar', 'bar']) print(dup_labels) # Index(['foo', 'foo', 'bar', 'bar'], dtype='object') \u4e00\u4e9b\u5e38\u7528\u7d22\u5f15\u5bf9\u8c61\u7684\u65b9\u6cd5\u548c\u5c5e\u6027\\ https://blog.csdn.net/u012421852/article/details/80074478 obj1 = pd.Series(range(3), index=['a', 'b', 'c']) index1 = obj1.index obj2 = pd.Series(range(3), index=['c', 'f', 'g']) index2 = obj2.index print(index1) # Index(['a', 'b', 'c'], dtype='object') print(index2) # Index(['c', 'f', 'g'], dtype='object') append: \u5c06\u989d\u5916\u7684\u7d22\u5f15\u5bf9\u8c61\u7c98\u8d34\u5230\u539f\u7d22\u5f15\u540e\uff0c\u4ea7\u751f\u4e00\u4e2a\u65b0\u7684\u7d22\u5f15 print(index1.append(index2)) # Index(['a', 'b', 'c', 'c', 'f', 'g'], dtype='object') difference: \u8ba1\u7b972\u4e2a\u7d22\u5f15\u7684\u5dee\u96c6 print(index1.difference(index2)) # Index(['a', 'b'], dtype='object') intersection: \u8ba1\u7b972\u4e2a\u7d22\u5f15\u7684\u4ea4\u96c6 print(index1.intersection(index2)) # Index(['c'], dtype='object') union: \u8ba1\u7b972\u4e2a\u7d22\u5f15\u7684\u5e76\u96c6\uff08\u53bb\u91cd\uff09 print(index1.union(index2)) # Index(['a', 'b', 'c', 'f', 'g'], dtype='object') isin: \u8ba1\u7b97\u8868\u793a\u6bcf\u4e00\u4e2a\u503c\u662f\u5426\u5728\u4f20\u503c\u5bb9\u5668\u4e2d\u7684\u5e03\u5c14\u6570\u7ec4 print(index1.isin(index2)) # [False False True] delete: \u5c06\u4f4d\u7f6ei\u7684\u5143\u7d20\u5220\u9664\uff0c\u5e76\u4ea7\u751f\u65b0\u7684\u6570\u7ec4 print(index1.delete(1)) # Index(['a', 'c'], dtype='object') print(index1) # Index(['a', 'b', 'c'], dtype='object') drop: \u6839\u636e\u4f20\u53c2\u5220\u9664\u6307\u5b9a\u7d22\u5f15\u503c\uff0c\u5e76\u4ea7\u751f\u65b0\u7684\u7d22\u5f15, \u5bf9\u6bd4\u548cdelete\u7684\u533a\u522b print(index1.drop('b')) # Index(['a', 'c'], dtype='object') print(index1) # Index(['a', 'b', 'c'], dtype='object') insert: \u5728\u4f4d\u7f6ei\u63d2\u5165\u5143\u7d20\uff0c\u5e76\u4ea7\u751f\u65b0\u7684\u7d22\u5f15 print(index1.insert(1, 'e')) # Index(['a', 'e', 'b', 'c'], dtype='object') print(index1) # Index(['a', 'b', 'c'], dtype='object') is_monotonic: \u5982\u679c\u7d22\u5f15\u5e8f\u5217\u9012\u589e\uff0c\u5219\u8fd4\u56deTrue print(index1.is_monotonic) # True print(index1.insert(1, 'e').is_monotonic) # False is_unique: \u5982\u679c\u7d22\u5f15\u5e8f\u5217\u552f\u4e00\u5219\u8fd4\u56deTrue print(index1.is_unique) # True print(index1.append(index2).is_unique) # False unique: \u8ba1\u7b97\u7d22\u5f15\u7684\u552f\u4e00\u503c\u5e8f\u5217\uff08\u5bf9\u6bd4Union\uff09 print(index1.unique()) # Index(['a', 'b', 'c'], dtype='object') print(index1.append(index2).unique()) # Index(['a', 'b', 'c', 'f', 'g'], dtype='object')","title":"\u7d22\u5f15\u5bf9\u8c61"},{"location":"python/DataAnalysis/ch02/#pandas_1","text":"","title":"pandas\u57fa\u672c\u529f\u80fd"},{"location":"python/DataAnalysis/ch02/#_2","text":"reindex\u65b9\u6cd5\u7528\u4e8e\u521b\u5efa\u4e00\u4e2a\u7b26\u5408\u65b0\u7d22\u5f15\u7684\u65b0\u5bf9\u8c61\u3002 Series\u8c03\u7528reindex\u65b9\u6cd5\u65f6\uff0c\u4f1a\u5c06\u6570\u636e\u6309\u7167\u65b0\u7684\u7d22\u5f15\u8fdb\u884c\u6392\u5217\uff0c\u5982\u679c\u67d0\u4e2a\u7d22\u5f15\u503c\u4e4b\u524d\u5e76\u4e0d\u5b58\u5728\uff0c\u5219\u4f1a\u5f15\u5165\u7f3a\u5931\u503c \u5bf9\u4e8e\u987a\u5e8f\u6570\u636e\uff0c\u6bd4\u5982\u65f6\u95f4\u5e8f\u5217\uff0c\u5728\u91cd\u5efa\u7d22\u5f15\u65f6\u53ef\u80fd\u4f1a\u9700\u8981\u8fdb\u884c\u63d2\u503c\u6216\u586b\u503c\u3002ffill\u65b9\u6cd5\u5728\u91cd\u5efa\u7d22\u5f15\u65f6\u63d2\u503c\uff0c\u5c06\u503c\u524d\u5411\u586b\u5145 \u5982\u679c\u5bf9obj1\u505areindex\u65f6\u6307\u5b9amethod=\u2018ffill\u2019\uff0c\u4f1a\u62a5\u9519index must be monotonic increasing or decreasing \u5728DataFrame\u4e2d\uff0creindex\u53ef\u4ee5\u6539\u53d8\u884c\u7d22\u5f15\u3001\u5217\u7d22\u5f15\uff0c\u4e5f\u53ef\u4ee5\u540c\u65f6\u6539\u53d8\u4e8c\u8005\u3002\u5f53\u4ec5\u4f20\u5165\u4e00\u4e2a\u5e8f\u5217\u65f6\uff0c\u7ed3\u679c\u4e2d\u7684\u884c\u4f1a\u91cd\u5efa\u7d22\u5f15 obj1 = pd.Series([4.5, 7.2, -5.3, 3.6], index=['d', 'b', 'a', 'c']) print(obj1) # d 4.5 # b 7.2 # a -5.3 # c 3.6 # dtype: float64 obj2 = obj1.reindex(['a', 'b', 'c', 'd', 'e']) print(obj2) # a -5.3 # b 7.2 # c 3.6 # d 4.5 # e NaN # dtype: float64 obj3 = pd.Series(['blue', 'purple', 'yellow'], index=[0, 2, 4]) print(obj3.reindex(range(6), method='ffill')) # 0 blue # 1 blue # 2 purple # 3 purple # 4 yellow # 5 yellow # dtype: object indexes = index = ['a', 'b', 'c'] states = ['Ohio', 'Texas', 'California'] frame = pd.DataFrame( np.arange(9).reshape(3, 3), index=indexes, columns=states ) print(frame) # Ohio Texas California # a 0 1 2 # b 3 4 5 # c 6 7 8 frame2 = frame.reindex(['a', 'b', 'c', 'd']) # \u91cd\u5efa\u884c\u7d22\u5f15 print(frame2) # Ohio Texas California # a 0.0 1.0 2.0 # b 3.0 4.0 5.0 # c 6.0 7.0 8.0 # d NaN NaN NaN frame3 = frame2.reindex(columns=['Ohio', 'Uta', 'California']) # \u91cd\u5efa\u5217\u7d22\u5f15 print(frame3) # Ohio Uta California # a 0.0 NaN 2.0 # b 3.0 NaN 5.0 # c 6.0 NaN 8.0 # d NaN NaN NaN \u4f7f\u7528loc\u8fdb\u884c\u66f4\u4e3a\u7b80\u6d01\u7684\u6807\u7b7e\u7d22\u5f15 frame4 = frame.loc[['a', 'b'], states] print(frame4) # Ohio Texas California # a 0 1 2 # b 3 4 5","title":"\u91cd\u5efa\u7d22\u5f15"},{"location":"python/DataAnalysis/ch02/#_3","text":"\u4f8b\u5982set_index(), dropna(), fillna(), reset_index(), drop(), replace() \u8fd9\u4e9b\u65b9\u6cd5\u7684inplace\u5c5e\u6027\u8bbe\u4e3aTrue\u65f6, \u8fd9\u4e9b\u65b9\u6cd5\u4f1a\u4fee\u6539Series\u6216DataFrame\u7684\u5c3a\u5bf8\u6216\u5f62\u72b6\uff0c\u76f4\u63a5\u64cd\u4f5c\u539f\u5bf9\u8c61\u800c\u4e0d\u8fd4\u56de\u65b0\u5bf9\u8c61 obj = pd.Series(np.arange(5), index=['a', 'b', 'c', 'd', 'e']) print(obj) # a 0 # b 1 # c 2 # d 3 # e 4 # dtype: int64 obj1 = obj.drop('c') print(obj1) # a 0 # b 1 # d 3 # e 4 # dtype: int64 print(obj1.drop(['d', 'e'])) # a 0 # b 1 # dtype: int64 \u5bf9\u6bd4inplace=True\u548cFalse\u7684\u533a\u522b print(obj.drop('c', inplace=False)) print(obj) # a 0 # b 1 # c 2 # d 3 # e 4 # dtype: int64 print(obj.drop('c', inplace=True)) # None, \u6ca1\u6709\u751f\u6210\u65b0\u5bf9\u8c61 print(obj) # a 0 # b 1 # d 3 # e 4 # dtype: int64 data = pd.DataFrame( np.arange(16).reshape(4, 4), index=['Ohio', 'Colorado', 'Utah', 'New York'], columns=['one', 'two', 'three', 'four'] ) print(data) # one two three four # Ohio 0 1 2 3 # Colorado 4 5 6 7 # Utah 8 9 10 11 # New York 12 13 14 15 print(data.drop(['Ohio', 'Colorado'])) # one two three four # Utah 8 9 10 11 # New York 12 13 14 15 print(data.drop(['one', 'two'], axis=1)) # \u5982\u679c\u4e0d\u6307\u5b9a\u8f74\u5411axis\uff0cdrop()\u4f1a\u9ed8\u8ba4\u6cbfaxis=0\u8fdb\u884c\uff0c\u5982\u4e0a\u4f8b # three four # Ohio 2 3 # Colorado 6 7 # Utah 10 11 # New York 14 15 print(data.drop(['one', 'two'], axis='columns')) # \u4e0e\u6307\u5b9aaxis=1\u540c\u6837\u6548\u679c # three four # Ohio 2 3 # Colorado 6 7 # Utah 10 11 # New York 14 15 data = pd.DataFrame( { 'Name': ['Shobhit', 'vaibhav', 'vimal', 'Sourabh'], 'class': [11, 12, 10, 9], 'Age': [18, 20, 21, 17] } ) print(data) # Name class Age # 0 Shobhit 11 18 # 1 vaibhav 12 20 # 2 vimal 10 21 # 3 Sourabh 9 17 print(data.rename(columns={'Name': 'FirstName'}, inplace=False)) # FirstName class Age # 0 Shobhit 11 18 # 1 vaibhav 12 20 # 2 vimal 10 21 # 3 Sourabh 9 17 print(data) # Name class Age # 0 Shobhit 11 18 # 1 vaibhav 12 20 # 2 vimal 10 21 # 3 Sourabh 9 17 print(data.rename(columns={'Name': 'FirstName'}, inplace=True)) # None, \u6ca1\u6709\u751f\u6210\u65b0\u5bf9\u8c61 print(data) # FirstName class Age # 0 Shobhit 11 18 # 1 vaibhav 12 20 # 2 vimal 10 21 # 3 Sourabh 9 17","title":"\u8f74\u5411\u7d22\u5f15\u5220\u9664\u6761\u76ee"},{"location":"python/DataAnalysis/ch02/#_4","text":"Series\u7684\u7d22\u5f15\uff08obj[...]\uff09\u4e0eNumPy\u6570\u7ec4\u7d22\u5f15\u7684\u529f\u80fd\u7c7b\u4f3c\uff0c\u53ea\u4e0d\u8fc7Series\u7684\u7d22\u5f15\u503c\u53ef\u4ee5\u4e0d\u4ec5\u4ec5\u662f\u6574\u6570 obj = pd.Series(['Shobhit', 'vaibhav', 'vimal', 'Sourabh'], index=['a', 'b', 'c', 'd']) print(obj) # a Shobhit # b vaibhav # c vimal # d Sourabh # dtype: object print(obj[1]) # \u901a\u8fc7\u7d22\u5f15\u4f4d\u68c0\u7d22\uff0c\u8f93\u51fa\u7d22\u5f15\u503c # vaibhav print(obj['b']) # \u901a\u8fc7\u7d22\u5f15\u503c\u68c0\u7d22\uff0c\u8f93\u51fa\u7d22\u5f15\u503c # vaibhav print(obj[['b']]) # \u901a\u8fc7\u7d22\u5f15\u503c\u68c0\u7d22\uff0c\u8f93\u51faSeries # b vaibhav # dtype: object \u4e0b\u9762\u4e00\u7ec4\u7684\u8f93\u51fa\u4e2d\uff0c\u6ce8\u610f\u5bf9\u6bd4\u666e\u901aPython\u5207\u7247\u4e0eSeries\u7684\u5207\u7247\u7684\u5dee\u5f02 print(obj[1]) # vaibhav print(obj[[1]]) # b vaibhav # dtype: object print(obj[1:3]) # b vaibhav # c vimal # dtype: object print(obj['b':'d']) # b vaibhav # c vimal # d Sourabh # dtype: object Series\u7684\u5207\u7247\u7684\u503c\u66f4\u65b0 obj = pd.Series(['Shobhit', 'vaibhav', 'vimal', 'Sourabh'], index=['a', 'b', 'c', 'd']) obj['b': 'c'] = 5 print(obj) # a Shobhit # b 5 # c 5 # d Sourabh # dtype: object obj[1: 3] = 6 print(obj) # a Shobhit # b 6 # c 6 # d Sourabh # dtype: object DataFrame\u7684\u7d22\u5f15\u4e0e\u5207\u7247 data = pd.DataFrame( np.arange(16).reshape(4, 4), index=['Ohio', 'Colorado', 'Utah', 'New York'], columns=['One', 'Two', 'Three', 'Four'] ) print(data) # One Two Three Four # Ohio 0 1 2 3 # Colorado 4 5 6 7 # Utah 8 9 10 11 # New York 12 13 14 15 print(data['Two']) # Ohio 1 # Colorado 5 # Utah 9 # New York 13 # Name: Two, dtype: int64 print(data[['Three', 'Two']]) # Three Two # Ohio 2 1 # Colorado 6 5 # Utah 10 9 # New York 14 13 print(data[:2]) # One Two Three Four # Ohio 0 1 2 3 # Colorado 4 5 6 7 \u5d4c\u5957, \u6839\u636e\u4e00\u4e2a\u5e03\u5c14\u503c\u6570\u7ec4\u5207\u7247\u6216\u9009\u62e9\u6570\u636e print(data['Three'] > 5) # Ohio False # Colorado True # Utah True # New York True # Name: Three, dtype: bool print(data[data['Three'] > 5]) # One Two Three Four # Colorado 4 5 6 7 # Utah 8 9 10 11 # New York 12 13 14 15 \u4f7f\u7528\u5e03\u5c14\u503cDataFrame\u8fdb\u884c\u7d22\u5f15\\ \u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u8fd9\u79cd\u7d22\u5f15\u65b9\u5f0f\u4f7f\u5f97DataFrame\u5728\u8bed\u6cd5\u4e0a\u66f4\u50cf\u662fNumPy\u4e8c\u7ef4\u6570\u7ec4\u3002 print(data < 5) # One Two Three Four # Ohio True True True True # Colorado True False False False # Utah False False False False # New York False False False False data[data < 5] = 0 print(data) # One Two Three Four # Ohio 0 0 0 0 # Colorado 0 5 6 7 # Utah 8 9 10 11 # New York 12 13 14 15 \u4f7f\u7528loc\u548ciloc\u9009\u62e9\u6570\u636e\\ \u4f7f\u7528\u8f74\u6807\u7b7e\uff08loc\uff09\u6216\u6574\u6570\u6807\u7b7e\uff08iloc\uff09\u4ee5NumPy\u98ce\u683c\u7684\u8bed\u6cd5\u4eceDataFrame\u4e2d\u9009\u51fa\u6570\u7ec4\u7684\u884c\u548c\u5217\u7684\u5b50\u96c6\u3002 data = pd.DataFrame( np.arange(16).reshape(4, 4), index=['Ohio', 'Colorado', 'Utah', 'New York'], columns=['One', 'Two', 'Three', 'Four'] ) print(data) # One Two Three Four # Ohio 0 1 2 3 # Colorado 4 5 6 7 # Utah 8 9 10 11 # New York 12 13 14 15 \u901a\u8fc7\u6807\u7b7eloc\u9009\u51fa\u5355\u884c\u591a\u5217\u7684\u6570\u636e\\ \u8f93\u51faColorado\u6807\u7b7e\u9875\u7684Two\u548cThree\u8fd9\u4e24\u5217\u7684\u503c\uff0c\u4ee5\u884c\u8bb0\u5f55\u7684\u65b9\u5f0f\u5c55\u73b0 print(data.loc['Colorado', ['Two', 'Three']]) # \u5207\u7247: # Two 5 # Three 6 # Name: Colorado, dtype: int64 print(data.loc[:'Ohio', :'Two']) # \u5207\u7247: 0\u884c\uff0c0,1\u5217 # One Two # Ohio 0 1 \u901a\u8fc7\u6574\u6570\u6807\u7b7eiloc\u8fdb\u884c\u7c7b\u4f3c\u7684\u6570\u636e\u9009\u62e9 print(data.iloc[[0]]) # 0\u884c # One Two Three Four # Ohio 0 1 2 3 print(data.iloc[[0], [1]]) # \u5207\u7247: 0\u884c\uff0c1\u5217 # Two # Ohio 1 print(data.iloc[1:2, 1:2]) # \u5207\u7247: 1\u884c\uff0c2\u5217 # Two # Ohio 1 print(data.iloc[2, [3, 0, 1]]) # \u5207\u7247: 2\u884c\uff0c\u4f9d\u6b21\u53d63\uff0c0\uff0c1\u5217 # Four 11 # One 8 # Two 9 # Name: Utah, dtype: int64 print(data.iloc[:3, :2][data > 4])","title":"\u7d22\u5f15\u3001\u9009\u62e9\u4e0e\u8fc7\u6ee4"},{"location":"python/DataAnalysis/ch02/#_5","text":"ser = pd.Series(np.arange(3.)) print(ser) # 0 0.0 # 1 1.0 # 2 2.0 # dtype: float64 print(ser[:1]) # 0 0.0 # dtype: float64 print(ser.loc[:1]) # loc\uff08\u7528\u4e8e\u6807\u7b7e\uff09 # 0 0.0 # 1 1.0 # dtype: float64 print(ser.iloc[:1]) # iloc\uff08\u7528\u4e8e\u6574\u6570\uff09 # 0 0.0 # dtype: float64","title":"\u6574\u6570\u7d22\u5f15"},{"location":"python/DataAnalysis/ch02/#_6","text":"\u4e0d\u540c\u7d22\u5f15\u7684\u5bf9\u8c61\u4e4b\u95f4\u7684\u7b97\u672f\u884c\u4e3a\u662fpandas\u63d0\u4f9b\u7ed9\u4e00\u4e9b\u5e94\u7528\u7684\u4e00\u9879\u91cd\u8981\u7279\u6027\u3002 s1 = pd.Series( [7.3, -2.5, 3.4, 1.5], index=['a', 'c', 'd', 'e'] ) s2 = pd.Series( [-2.1, 3.6, -1.5, 4, 3.1], index=['a', 'c', 'e', 'f', 'g'] ) print(s1) # a 7.3 # c -2.5 # d 3.4 # e 1.5 # dtype: float64 print(s2) # a -2.1 # c 3.6 # e -1.5 # f 4.0 # g 3.1 # dtype: float64 print(s1 + s2) # \u6ca1\u6709\u4ea4\u53e0\u7684\u6807\u7b7e\u4f4d\u7f6e\u4e0a\uff0c\u5185\u90e8\u6570\u636e\u5bf9\u9f50\u4f1a\u4ea7\u751f\u7f3a\u5931\u503c\u3002\u7f3a\u5931\u503c\u4f1a\u5728\u540e\u7eed\u7684\u7b97\u672f\u64cd\u4f5c\u4e0a\u4ea7\u751f\u5f71\u54cd\u3002 # a 5.2 # c 1.1 # d NaN # e 0.0 # f NaN # g NaN # dtype: float64 df1 = pd.DataFrame( np.arange(9).reshape((3, 3)), columns=list('bcd'), index=['Ohio', 'Texas', 'Colorado'] ) df2 = pd.DataFrame( np.arange(12).reshape((4, 3)), columns=list('bde'), index=['Utah', 'Ohio', 'Texas', 'Oregon'] ) print(df1) # b c d # Ohio 0 1 2 # Texas 3 4 5 # Colorado 6 7 8 print(df2) # b d e # Utah 0 1 2 # Ohio 3 4 5 # Texas 6 7 8 # Oregon 9 10 11 \u5c06\u8fd9\u4e9b\u5bf9\u8c61\u52a0\u5728\u4e00\u8d77\uff0c\u8fd4\u56de\u4e00\u4e2aDataFrame\uff0c\u5b83\u7684\u7d22\u5f15\u3001\u5217\u662f\u6bcf\u4e2aDataFrame\u7684\u7d22\u5f15\u3001\u5217\u7684\u5e76\u96c6\u3002\\ \u7531\u4e8e\u2019c\u2019\u5217\u548c\u2019e\u2019\u5217\u5e76\u4e0d\u662f\u4e24\u4e2aDataFrame\u5171\u6709\u7684\u5217\uff0c\u8fd9\u4e24\u5217\u4e2d\u4ea7\u751f\u4e86\u7f3a\u5931\u503c\u3002\\ \u5bf9\u4e8e\u884c\u6807\u7b7e\u4e0d\u540c\u7684DataFrame\u5bf9\u8c61\u4e5f\u662f\u5982\u6b64\u3002\u5982\u679c\u5c06\u4e24\u4e2a\u884c\u6216\u5217\u5b8c\u5168\u4e0d\u540c\u7684DataFrame\u5bf9\u8c61\u76f8\u52a0\uff0c\u7ed3\u679c\u5c06\u5168\u90e8\u4e3a\u7a7a print(df1 + df2) # b c d e # Colorado NaN NaN NaN NaN # Ohio 3.0 NaN 6.0 NaN # Oregon NaN NaN NaN NaN # Texas 9.0 NaN 12.0 NaN # Utah NaN NaN NaN NaN \u4f7f\u7528\u586b\u5145\u503c\u7684\u7b97\u672f\u65b9\u6cd5\\ \u5728\u4e24\u4e2a\u4e0d\u540c\u7684\u7d22\u5f15\u5316\u5bf9\u8c61\u4e4b\u95f4\u8fdb\u884c\u7b97\u672f\u64cd\u4f5c\u65f6\uff0c\u4f1a\u8981\u4f7f\u7528\u7279\u6b8a\u586b\u5145\u503c\uff0c\u6bd4\u5982\u5f53\u8f74\u6807\u7b7e\u5728\u4e00\u4e2a\u5bf9\u8c61\u4e2d\u5b58\u5728\uff0c\u5728\u53e6\u4e00\u4e2a\u5bf9\u8c61\u4e2d\u4e0d\u5b58\u5728\u65f6\uff0c\u5c06\u7f3a\u5931\u503c\u586b\u5145\u4e3a0\\ \u4e0b\u9762\u662fSeries\u548cDataFrame\u7684\u7b97\u672f\u65b9\u6cd5\u3002\u8fd9\u4e9b\u65b9\u6cd5\u4e2d\u7684\u6bcf\u4e00\u4e2a\u90fd\u6709\u4e00\u4e2a\u4ee5r\u5f00\u5934\u7684\u526f\u672c\uff0c\u8fd9\u4e9b\u526f\u672c\u65b9\u6cd5\u7684\u53c2\u6570\u662f\u7ffb\u8f6c\u7684\u3002 * add\uff0cradd\uff1a\u52a0\u6cd5(+) * sub\uff0crsub\uff1a\u51cf\u6cd5(-) * div\uff0crdiv\uff1a\u9664\u6cd5(/) * floordiv\uff0crfloordiv\uff1a\u6574\u9664(//) * mul\uff0crmul\uff1a\u4e58\u6cd5( ) * pow\uff0crpow\uff1a\u5e42\u6b21\u65b9( *) \u4e0b\u9762\u4e09\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u6ce8\u610fdf2\u548cdf1\u5217\u5bf9\u5e94\u5173\u7cfb\u7684\u4e0d\u540c\u6240\u51fa\u73b0\u7684NaN df1 = pd.DataFrame( np.arange(4).reshape((2, 2)), columns=list('ab') ) df2 = pd.DataFrame( np.arange(9).reshape((3, 3)), columns=list('bcd') ) print(df1 + df2) # \u5728\u4e0d\u91cd\u53e0\u7684\u4f4d\u7f6e\u51fa\u73b0NA\u503c # a b c d # 0 NaN 1.0 NaN NaN # 1 NaN 6.0 NaN NaN # 2 NaN NaN NaN NaN print(df1.add(df2, fill_value=0)) # a b c d # 0 0.0 1.0 1.0 2.0 # 1 2.0 6.0 4.0 5.0 # 2 NaN 6.0 7.0 8.0 df2 = pd.DataFrame( np.arange(9).reshape((3, 3)), columns=list('acd') ) print(df1.add(df2, fill_value=0)) # \u6ce8\u610fNaN\u4e0edf1\u548cdf2\u5217\u5bf9\u5e94\u5173\u7cfb # a b c d # 0 0.0 1.0 1.0 2.0 # 1 5.0 3.0 4.0 5.0 # 2 6.0 NaN 7.0 8.0 df2 = pd.DataFrame( np.arange(9).reshape((3, 3)), columns=list('abd') ) print(df1.add(df2, fill_value=0)) # a b d # 0 0.0 2.0 2.0 # 1 5.0 7.0 5.0 # 2 6.0 7.0 8.0 print(df1.radd(df2, fill_value=0)) print(df1.sub(df2, fill_value=0)) print(df1.div(df2, fill_value=0)) print(df1.floordiv(df2, fill_value=0)) print(df1.mul(df2, fill_value=0)) print(df1.pow(df2, fill_value=0)) df1.loc[1, :'b'] = np.nan print(df1) # # a b # # 0 0.0 1.0 # 1 NaN NaN DataFrame\u548cSeries\u95f4\u7684\u64cd\u4f5c\\ DataFrame\u548cSeries\u95f4\u7684\u7b97\u672f\u64cd\u4f5c\u4e0eNumPy\u4e2d\u4e0d\u540c\u7ef4\u5ea6\u6570\u7ec4\u95f4\u7684\u64cd\u4f5c\u7c7b\u4f3c","title":"\u7b97\u672f\u548c\u6570\u636e\u5bf9\u9f50"},{"location":"python/DataAnalysis/ch02/#numpy","text":"\u4ecearr\u4e2d\u51cf\u53bbarr[0]\u65f6\uff0c\u51cf\u6cd5\u5728\u6bcf\u4e00\u884c\u90fd\u8fdb\u884c\u4e86\u64cd\u4f5c\u3002\u8fd9\u5c31\u662f\u6240\u8c13\u7684\u5e7f\u64ad\u673a\u5236 arr = np.arange(12).reshape((3, 4)) print(arr) # [[ 0 1 2 3] # [ 4 5 6 7] # [ 8 9 10 11]] print(arr[0]) # [0 1 2 3] print(arr - arr[0]) # [[0 0 0 0] # [4 4 4 4] # [8 8 8 8]]","title":"NumPy"},{"location":"python/DataAnalysis/ch02/#dataframeseries","text":"\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0cDataFrame\u548cSeries\u7684\u6570\u5b66\u64cd\u4f5c\u4e2d\u4f1a\u5c06Series\u7684\u7d22\u5f15\u548cDataFrame\u7684\u5217\u8fdb\u884c\u5339\u914d\uff0c\u5e76\u5e7f\u64ad\u5230\u5404\u884c.\\ \u5982\u679c\u4e00\u4e2a\u7d22\u5f15\u503c\u4e0d\u5728DataFrame\u7684\u5217\u4e2d\uff0c\u4e5f\u4e0d\u5728Series\u7684\u7d22\u5f15\u4e2d\uff0c\u5219\u5bf9\u8c61\u4f1a\u91cd\u5efa\u7d22\u5f15\u5e76\u5f62\u6210\u8054\u5408 frame = pd.DataFrame( np.arange(12).reshape((4, 3)), columns=list('bde'), index=['Utah', 'Ohio', 'Texas', 'Oregon'] ) series = frame.iloc[0] series2 = pd.Series( range(3), index=list('bef') ) series3 = frame['d'] print(frame - series) # Series\u7684\u7d22\u5f15\u548cDataFrame\u7684\u5217\u8fdb\u884c\u5339\u914d # frame: series Result: # b d e # b 0 # b d e # Utah 0 1 2 # d 1 # Utah 0 0 0 # Ohio 3 4 5 # e 2 # Ohio 3 3 3 # Texas 6 7 8 # Name: Utah, dtype: int64 # Texas 6 6 6 # Oregon 9 10 11 # Oregon 9 9 9 print(frame - series2) # Series\u7684\u7d22\u5f15\u548cDataFrame\u7684\u5217\u8fdb\u884c\u5339\u914d # frame: series2 Result: # b d e # b 0 # b d e f # Utah 0 1 2 # e 1 # Utah 0.0 NaN 1.0 NaN # Ohio 3 4 5 # f 2 # Ohio 3.0 NaN 4.0 NaN # Texas 6 7 8 # dtype: int64 # Texas 6.0 NaN 7.0 NaN # Oregon 9 10 11 # Oregon 9.0 NaN 10.0 NaN \u6539\u4e3a\u5728\u5217\u4e0a\u8fdb\u884c\u5e7f\u64ad\uff0c\u5728\u884c\u4e0a\u5339\u914d\uff0c\u4f60\u5fc5\u987b\u4f7f\u7528\u7b97\u672f\u65b9\u6cd5\u4e2d\u7684\u4e00\u79cd print(frame.sub(series3, axis='index')) # \u6216axis=0 # frame: series3 Result: # b d e # Utah 1 # b d e # Utah 0 1 2 # Ohio 4 # Utah -1 0 1 # Ohio 3 4 5 # Texas 7 # Ohio -1 0 1 # Texas 6 7 8 # Oregon 10 # Texas -1 0 1 # Oregon 9 10 11 # Name: d, dtype: int64 # Oregon -1 0 1","title":"DataFrame/Series"},{"location":"python/DataAnalysis/ch02/#_7","text":"NumPy\u7684\u901a\u7528\u51fd\u6570\uff08\u9010\u5143\u7d20\u6570\u7ec4\u65b9\u6cd5\uff09\u5bf9pandas\u5bf9\u8c61\u4e5f\u6709\u6548 frame = pd.DataFrame( np.random.randn(4, 3), columns=list('bde'), index=['Utah', 'Ohio', 'Texas', 'Oregon'] ) print(frame) # b d e # Utah 2.737734 -0.379977 0.758933 # Ohio 0.847497 0.839583 -2.192021 # Texas -0.907544 -0.457436 -1.907396 # Oregon 0.389362 0.250170 1.065889 print(np.abs(frame)) # \u7edd\u5bf9\u503c # b d e # Utah 2.737734 0.379977 0.758933 # Ohio 0.847497 0.839583 2.192021 # Texas 0.907544 0.457436 1.907396 # Oregon 0.389362 0.250170 1.065889 f = lambda x: x.max() - x.min() # f\u8fd4\u56de\u4e00\u4e2a\u6807\u91cf\u503c print(frame.apply(f)) # \u5c06f\u5e94\u7528\u5728\u5217, \u9ed8\u8ba4axis=0 # b 3.645278 # d 1.297019 # e 3.257911 # dtype: float64 print(frame.apply(f, axis=1)) # \u5c06f\u5e94\u7528\u5728\u884c # Utah 3.117711 # Ohio 3.039518 # Texas 1.449961 # Oregon 0.815720 # dtype: float64 def f(x): # f\u8fd4\u56de\u5e26\u6709\u591a\u4e2a\u503c\u7684Series return pd.Series( [x.min(), x.max()], index=['min', 'max'] ) print(frame.apply(f)) # b d e # min -0.907544 -0.457436 -2.192021 # max 2.737734 0.839583 1.065889 f = lambda x: '%.2f' % x print(frame.applymap(f)) # \u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u4f7f\u7528applymap\u65b9\u6cd5, \u5c06\u4e00\u4e2a\u9010\u5143\u7d20\u7684\u51fd\u6570\u5e94\u7528\u5230Series\u4e0a # b d e # Utah 2.74 -0.38 0.76 # Ohio 0.85 0.84 -2.19 # Texas -0.91 -0.46 -1.91 # Oregon 0.39 0.25 1.07 print(frame['e'].map(f)) # Utah 0.76 # Ohio -2.19 # Texas -1.91 # Oregon 1.07 # Name: e, dtype: object","title":"\u51fd\u6570\u5e94\u7528\u548c\u6620\u5c04"},{"location":"python/DataAnalysis/ch02/#_8","text":"\u4f7f\u7528sort_index\u65b9\u6cd5\uff0c\u6309\u884c\u6216\u5217\u7d22\u5f15\u8fdb\u884c\u5b57\u5178\u578b\u6392\u5e8f\uff0c\u8fd4\u56de\u4e00\u4e2a\u65b0\u7684\u3001\u6392\u5e8f\u597d\u7684\u5bf9\u8c61","title":"\u6392\u5e8f\u548c\u6392\u540d"},{"location":"python/DataAnalysis/ch02/#series_1","text":"obj = pd.Series( range(4), index=list('dabc') ) print(obj) # d 0 # a 1 # b 2 # c 3 # dtype: int64 print(obj.sort_index()) # a 1 # b 2 # c 3 # d 0 # dtype: int64 # print(obj.sort_values()) # d 0 # a 1 # b 2 # c 3 # dtype: int64 \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u6240\u6709\u7684\u7f3a\u5931\u503c\u90fd\u4f1a\u88ab\u6392\u5e8f\u81f3Series\u7684\u5c3e\u90e8 obj = pd.Series([4, np.nan, 7, np.nan, -3, 2]) print(obj) # 0 4.0 # 1 NaN # 2 7.0 # 3 NaN # 4 -3.0 # 5 2.0 # dtype: float64 print(obj.sort_values()) # 4 -3.0 # 5 2.0 # 0 4.0 # 2 7.0 # 1 NaN # 3 NaN # dtype: float64","title":"Series\u6392\u5e8f"},{"location":"python/DataAnalysis/ch02/#dataframe_3","text":"frame = pd.DataFrame( [[0, 1, 10, 3], [4, 5, 6, 21], [8, 9, 2, 21]], index=['three', 'one', 'five'], columns=list('dabc') ) print(frame) # d a b c # three 0 1 10 3 # one 4 5 6 21 # five 8 9 2 21 print(frame.index) # Index(['three', 'one', 'five'], dtype='object') print(frame.sort_index()) # five, one\uff0cthree\u5347\u5e8f # d a b c # five 8 9 2 21 # one 4 5 6 21 # three 0 1 10 3 print(frame.sort_index(axis=0)) # five, one\uff0cthree\u5347\u5e8f # d a b c # five 8 9 2 21 # one 4 5 6 21 # three 0 1 10 3 print(frame.sort_index(axis=0, ascending=False)) # five, one\uff0cthree\u964d\u5e8f # d a b c # three 0 1 10 3 # one 4 5 6 21 # five 8 9 2 21 print(frame.sort_index(axis=1)) # \u5bf9abcd\u5347\u5e8f # a b c d # three 1 10 3 0 # one 5 6 21 4 # five 9 2 21 8 print(frame.sort_index(axis=1, ascending=False)) # \u5bf9abcd\u964d\u5e8f # d c b a # three 0 3 10 1 # one 4 21 6 5 # five 8 21 2 9 print(frame.sort_values(by=['c'], ascending=False)) # d a b c # one 4 5 6 21 # five 8 9 2 21 # three 0 1 10 3 print(frame.sort_values(by=['c', 'd'], ascending=False)) # \u5148\u5bf9b\u964d\u5e8f\uff0c\u518d\u5bf9d\u964d\u5e8f # d a b c # five 8 9 2 21 # one 4 5 6 21 # three 0 1 10 3","title":"DataFrame\u6392\u5e8f"},{"location":"python/DataAnalysis/ch02/#_9","text":"\u6392\u540d\u662f\u6307\u5bf9\u6570\u7ec4\u4ece1\u5230\u6709\u6548\u6570\u636e\u70b9\u603b\u6570\u5206\u914d\u540d\u6b21\u7684\u64cd\u4f5c\u3002 * Series\u548cDataFrame\u7684rank\u65b9\u6cd5\u662f\u5b9e\u73b0\u6392\u540d\u7684\u65b9\u6cd5\u3002 * df.rank(ascending=False, method='max') * ascending\uff1a\u6392\u540d\u65b9\u5f0f\uff0c\u9ed8\u8ba4\u4ece\u4f4e\u5230\u9ad8\uff0cascending=False \u8868\u793a\u4ece\u9ad8\u5230\u4f4e\uff1b * method\uff1a\u6392\u540d\u65b9\u5f0f\uff0c\u5305\u62ec\uff1a * average:\u9ed8\u8ba4\uff0c\u5728\u76f8\u7b49\u5206\u7ec4\u4e2d\uff0c\u4e3a\u5404\u4e2a\u503c\u5206\u914d\u5e73\u5747\u6392\u540d * min:\u4f7f\u7528\u6574\u4e2a\u5206\u7ec4\u7684\u6700\u5c0f\u6392\u540d * max:\u4f7f\u7528\u6574\u4e2a\u5206\u7ec4\u7684\u6700\u5927\u6392\u540d * first:\u6309\u503c\u518d\u539f\u59cb\u6570\u636e\u4e2d\u51fa\u73b0\u987a\u5e8f\u5206\u914d\u6392\u540d * dense:\u7c7b\u4f3cmin\u65b9\u6cd5\uff0c\u4f46\u6392\u540d\u603b\u662f\u518d\u7ec4\u95f4\u589e\u52a01\uff0c\u800c\u4e0d\u662f\u7ec4\u4e2d\u76f8\u540c\u7684\u5143\u7d20\u6570 * \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0crank\u662f\u901a\u8fc7\u201c\u4e3a\u5404\u7ec4\u5206\u914d\u4e00\u4e2a\u5e73\u5747\u6392\u540d\u201d\u7684\u65b9\u5f0f\u7834\u574f\u5e73\u7ea7\u5173\u7cfb obj = pd.Series([7, -5, 7, 4, 2, 0, 4]) # \u6309\u7167\u6bcf\u4e2a\u5143\u7d20\u7684\u5927\u5c0f\u987a\u5e8f\u7ed9\u51fa\u4e00\u4e2a\u5e73\u5747\u6392\u540d print(obj.rank()) # 0 6.5 # 1 1.0 # 2 6.5 # 3 4.5 # 4 3.0 # 5 2.0 # 6 4.5 # dtype: float64 \u6839\u636e\u5143\u7d20\u7684\u89c2\u5bdf\u987a\u5e8f\u8fdb\u884c\u5206\u914d\\ \u5143\u7d200\u548c2\u6ca1\u6709\u4f7f\u7528\u5e73\u5747\u6392\u540d6.5\uff0c\u5b83\u4eec\u88ab\u8bbe\u6210\u4e866\u548c7\uff0c\u56e0\u4e3a\u6570\u636e\u4e2d\u6807\u7b7e0\u4f4d\u4e8e\u6807\u7b7e2\u7684\u524d\u9762\u3002 print(obj.rank(method='first')) # 0 6.0 # 1 1.0 # 2 7.0 # 3 4.0 # 4 3.0 # 5 2.0 # 6 5.0 # dtype: float64 print(obj.rank(ascending=False, method='max')) print(obj.rank(ascending=True, method='max')) # Original Series Max with inc Max with dec # 0 7 # 0 2.0 (\u6700\u5c0f) # 0 7.0 (\u6700\u5927) # 1 -5 # 1 7.0 (\u6700\u5927) # 1 1.0 (\u6700\u5c0f) # 2 7 # 2 2.0 (\u6700\u5c0f) # 2 7.0 (\u6700\u5927) # 3 4 # 3 4.0 # 3 5.0 # 4 2 # 4 5.0 # 4 3.0 # 5 0 # 5 6.0 # 5 2.0 # 6 4 # 6 4.0 # 6 5.0 # dtype: float64 # dtype: float64 # dtype: float64 frame = pd.DataFrame( {'b': [4.3, 7, -3, 2], 'a': [0, 1, 0, 1], 'c': [-2, 5, 8, -2]} ) print(frame) # b a c # 0 4.3 0 -2 # 1 7.0 1 5 # 2 -3.0 0 8 # 3 2.0 1 -2 print(frame.rank(axis='columns')) # axis=1 # b a c # 0 3.0 2.0 1.0 # 1 3.0 1.0 2.0 # 2 1.0 2.0 3.0 # 3 3.0 2.0 1.0","title":"\u6392\u540d"},{"location":"python/DataAnalysis/ch02/#_10","text":"\u5c3d\u7ba1\u5f88\u591apandas\u51fd\u6570\uff08\u6bd4\u5982reindex\uff09\u9700\u8981\u6807\u7b7e\u662f\u552f\u4e00\u7684\uff0c\u4f46\u8fd9\u4e2a\u5e76\u4e0d\u662f\u5f3a\u5236\u6027\u7684\u3002\\ \u7d22\u5f15\u7684is_unique\u5c5e\u6027\u53ef\u4ee5\u544a\u8bc9\u4f60\u5b83\u7684\u6807\u7b7e\u662f\u5426\u552f\u4e00\u3002\\ \u5e26\u6709\u91cd\u590d\u7d22\u5f15\u7684\u60c5\u51b5\u4e0b\uff0c\u6839\u636e\u4e00\u4e2a\u6807\u7b7e\u7d22\u5f15\u591a\u4e2a\u6761\u76ee\u4f1a\u8fd4\u56de\u4e00\u4e2a\u5e8f\u5217\uff0c\u800c\u5355\u4e2a\u6761\u76ee\u4f1a\u8fd4\u56de\u6807\u91cf\u503c\uff0c\u8fd9\u53ef\u80fd\u4f1a\u4f7f\u4ee3\u7801\u66f4\u590d\u6742\u3002 obj = pd.Series(range(5), index=['a', 'b', 'a', 'c', 'b']) print(obj) # a 0 # b 1 # a 2 # c 3 # b 4 # dtype: int64 print(obj.is_unique) # True print(obj.index.is_unique) # False print(obj['a']) # \u8fd4\u56de\u4e00\u4e2a\u5e8f\u5217 # a 0 # a 2 # dtype: int64 df = pd.DataFrame(np.random.randn(4, 3), index=['a', 'a', 'b', 'b']) print(df) # 0 1 2 # a -0.726164 0.531540 -0.521611 # a -1.539807 -0.710880 -0.992789 # b -0.975970 -0.470725 0.121958 # b -0.301495 1.072322 -1.542296 print(df.index.is_unique) # False print(df.loc['b']) # 0 1 2 # b -0.520008 0.052574 0.638529 # b -1.928705 -1.099534 -1.605296","title":"\u542b\u6709\u91cd\u590d\u6807\u7b7e\u7684\u8f74\u7d22\u5f15"},{"location":"python/DataAnalysis/ch02/#_11","text":"pandas\u5bf9\u8c61\u88c5\u914d\u4e86\u4e00\u4e2a\u5e38\u7528\u6570\u5b66\u3001\u7edf\u8ba1\u5b66\u65b9\u6cd5\u7684\u96c6\u5408\u3002 \u5176\u4e2d\u5927\u90e8\u5206\u5c5e\u4e8e\u5f52\u7ea6\u6216\u6c47\u603b\u7edf\u8ba1\u7684\u7c7b\u522b\uff0c\u8fd9\u4e9b\u65b9\u6cd5\u4eceDataFrame\u7684\u884c\u6216\u5217\u4e2d\u62bd\u53d6\u4e00\u4e2aSeries\u6216\u4e00\u7cfb\u5217\u503c\u7684\u5355\u4e2a\u503c\uff08\u5982\u603b\u548c\u6216\u5e73\u5747\u503c\uff09\u3002 \u4e0eNumPy\u6570\u7ec4\u4e2d\u7684\u7c7b\u4f3c\u65b9\u6cd5\u76f8\u6bd4\uff0c\u5b83\u4eec\u5185\u5efa\u4e86\u5904\u7406\u7f3a\u5931\u503c\u7684\u529f\u80fd\u3002 \u5f52\u7ea6\u65b9\u6cd5: sum() \u79ef\u7d2f\u578b\u65b9\u6cd5: cumsun() \u65e2\u4e0d\u662f\u5f52\u7ea6\u578b\u65b9\u6cd5\u4e5f\u4e0d\u662f\u79ef\u7d2f\u578b\u65b9\u6cd5: describe()james@nuc:/opt/python> james@nuc:/opt/python> df = pd.DataFrame( [[1.4, np.nan], [7.1, -4.5], [np.nan, np.nan], [0.75, -1.3]], index=list('abcd'), columns=['one', 'two'] ) print(df) # one two # a 1.40 NaN # b 7.10 -4.5 # c NaN NaN # d 0.75 -1.3 print(df.sum()) # axis=0, \u8fd4\u56de\u4e00\u4e2a\u6bcf\u5217\u548c\u7684Series # one 9.25 # two -5.80 # dtype: float64 print(df.sum(axis=1)) # axis=1\u4e14skipna=True, \u8fd4\u56de\u4e00\u4e2a\u6bcf\u884c\u548c\u7684Series, \u6392\u9664NA\u503c, \u586b0 # a 1.40 # b 2.60 # c 0.00 # d -0.55 # dtype: float64 print(df.sum(axis=1, skipna=False)) # \u4e0d\u6392\u9664NA\u503c # a NaN # b 2.60 # c NaN # d -0.55 # dtype: float64 print(df.groupby(level=0).sum()) # df.sum(level=1) is deprecated. should use df.groupby(level=1).sum(). # one two # a 1.40 0.0 # b 7.10 -4.5 # c 0.00 0.0 # d 0.75 -1.3 print(df.idxmax()) # \u5217one\u7684\u6700\u5927\u503c\u662f\u5728\u7d22\u5f15b, \u5217two\u7684\u6700\u5927\u503c\u662f\u5728\u7d22\u5f15d # one b # two d # dtype: object print(df.idxmin()) # one d # two b # dtype: object print(df.cumsum()) # one two # a 1.40 NaN # b 8.50 -4.5 # c NaN NaN # d 9.25 -5.8 print(df.describe()) # \u4e00\u6b21\u6027\u4ea7\u751f\u591a\u4e2a\u6c47\u603b\u7edf\u8ba1 # one two # count 3.000000 2.000000 # mean 3.083333 -2.900000 # std 3.493685 2.262742 # min 0.750000 -4.500000 # 25% 1.075000 -3.700000 # 50% 1.400000 -2.900000 # 75% 4.250000 -2.100000 # max 7.100000 -1.300000 obj = pd.Series(['a', 'a', 'b', 'c'] * 4) print(obj) # 0 a # 1 a # 2 bjames@nuc:/opt/python> # 3 c # 4 a # 5 a # 6 b # 7 c # 8 a # 9 a # 10 b # 11 c # 12 a # 13 a # 14 b # 15 c # dtype: object print(obj.describe()) # \u9488\u5bf9\u975e\u6570\u503c\u578b\u6570\u636e\uff0cdescribe\u4ea7\u751f\u53e6\u4e00\u79cd\u6c47\u603b\u7edf\u8ba1 # count 16 # unique 3 # top a # freq 8 # dtype: object","title":"\u63cf\u8ff0\u6027\u7edf\u8ba1\u7684\u6982\u8ff0\u4e0e\u8ba1\u7b97"},{"location":"python/DataAnalysis/ch02/#_12","text":"\u534f\u65b9\u5dee\u4e0e\u76f8\u5173\u7cfb\u6570\u4e5f\u662f\u5728\u65f6\u57df\u5206\u6790\u65f6\u5e38\u89c1\u7684\u4e24\u4e2a\u6982\u5ff5\uff0c\u4ed6\u4eec\u90fd\u662f\u7528\u6765\u63cf\u8ff0\u6570\u636e\u201c\u50cf\u4e0d\u50cf\u201d\u7684\u3002\\ \u534f\u65b9\u5dee\u7684\u901a\u4fd7\u7406\u89e3\uff1a * \u4e24\u4e2a\u53d8\u91cf\u5728\u53d8\u5316\u8fc7\u7a0b\u4e2d\u662f\u540c\u65b9\u5411\u53d8\u5316\u8fd8\u662f\u53cd\u65b9\u5411\u53d8\u5316\uff1f\u76f8\u540c\u6216\u8005\u76f8\u53cd\u6210\u90fd\u5982\u4f55\uff1f * \u4f60\u53d8\u5927\uff0c\u540c\u65f6\u6211\u53d8\u5927\uff0c\u8bf4\u660e\u4e24\u4e2a\u53d8\u91cf\u662f\u540c\u5411\u53d8\u5316\uff0c\u8fd9\u65f6\u534f\u65b9\u5dee\u5c31\u662f\u6b63\u7684\u3002 * \u4f60\u53d8\u5927\uff0c\u540c\u65f6\u6211\u53d8\u5c0f\uff0c\u8bf4\u660e\u4e24\u4e2a\u53d8\u91cf\u662f\u53cd\u5411\u53d8\u5316\uff0c\u8fd9\u65f6\u534f\u65b9\u5dee\u5c31\u662f\u8d1f\u7684\u3002 * \u4ece\u6570\u503c\u770b\uff0c\u534f\u65b9\u5dee\u7684\u6570\u503c\u8d8a\u5927\uff0c\u4e24\u4e2a\u53d8\u91cf\u540c\u5411\u7a0b\u5ea6\u4e5f\u5c31\u8d8a\u5927\u3002\u53cd\u4e4b\u4ea6\u7136\u3002 \u76f8\u5173\u7cfb\u6570\u7684\u901a\u4fd7\u7406\u89e3\uff1a * \u7528X\uff0cY\u7684\u534f\u65b9\u5dee\u521d\u4e00X\u7684\u6807\u51c6\u5dee\u548cY\u7684\u6807\u51c6\u5dee\u3002 * \u76f8\u5173\u7cfb\u6570\u4e5f\u53ef\u4ee5\u770b\u6210\u534f\u65b9\u5dee\uff0c\u4e00\u79cd\u63d0\u51fa\u4e86\u4e24\u4e2a\u53d8\u91cf\u91cf\u7eb2\u5f71\u54cd\u3001\u6807\u51c6\u5316\u540e\u7684\u7279\u6b8a\u534f\u65b9\u5dee\u3002 * \u6240\u4ee5\uff1a * \u4e5f\u53ef\u4ee5\u53cd\u5e94\u4e24\u4e2a\u53d8\u91cf\u53d8\u5316\u65f6\u662f\u540c\u5411\u8fd8\u662f\u53cd\u5411\uff0c\u5982\u679c\u540c\u5411\u53d8\u5316\u5c31\u4e3a\u6b63\uff0c\u53cd\u5411\u53d8\u5316\u5c31\u4e3a\u8d1f\u3002 * \u7531\u4e8e\u662f\u6807\u51c6\u7248\u540e\u7684\u534f\u65b9\u5dee\uff0c\u76f8\u5173\u7cfb\u6570\u6d88\u9664\u4e86\u4e24\u4e2a\u53d8\u91cf\u53d8\u5316\u5e45\u5ea6\u7684\u5f71\u54cd\uff0c\u800c\u53ea\u662f\u5355\u7eaf\u53cd\u5e94\u4e24\u4e2a\u53d8\u91cf\u6bcf\u5355\u4f4d\u53d8\u5316\u65f6\u7684\u76f8\u4f3c\u6210\u90fd\u3002 \u603b\u7ed3 \u5bf9\u4e8e\u4e24\u4e2a\u53d8\u91cfX\u3001Y\uff0c \u5f53\u4ed6\u4eec\u7684\u76f8\u5173\u7cfb\u6570\u4e3a1\u65f6\uff0c\u8bf4\u660e\u4e24\u4e2a\u53d8\u91cf\u53d8\u5316\u65f6\u7684\u6b63\u5411\u76f8\u4f3c\u5ea6\u6700\u5927\u3002 \u5f53\u4ed6\u4eec\u7684\u76f8\u5173\u7cfb\u6570\u4e3a\uff0d1\u65f6\uff0c\u8bf4\u660e\u4e24\u4e2a\u53d8\u91cf\u53d8\u5316\u7684\u53cd\u5411\u76f8\u4f3c\u5ea6\u6700\u5927\u3002 \u968f\u7740\u4ed6\u4eec\u76f8\u5173\u7cfb\u6570\u51cf\u5c0f\uff0c\u4e24\u4e2a\u53d8\u91cf\u53d8\u5316\u65f6\u7684\u76f8\u4f3c\u5ea6\u4e5f\u53d8\u5c0f\uff0c\u5f53\u76f8\u5173\u7cfb\u6570\u4e3a0\u65f6\uff0c\u4e24\u4e2a\u53d8\u91cf\u7684\u53d8\u5316\u8fc7\u7a0b\u6ca1\u6709\u4efb\u4f55\u76f8\u4f3c\u5ea6\uff0c\u4e5f\u5373\u4e24\u4e2a\u53d8\u91cf\u65e0\u5173\u3002 *\u5f53\u76f8\u5173\u7cfb\u6570\u7ee7\u7eed\u53d8\u5c0f\uff0c\u5c0f\u4e8e0\u65f6\uff0c\u4e24\u4e2a\u53d8\u91cf\u5f00\u59cb\u51fa\u73b0\u53cd\u5411\u7684\u76f8\u4f3c\u5ea6\uff0c\u968f\u7740\u76f8\u5173\u7cfb\u6570\u7ee7\u7eed\u53d8\u5c0f\uff0c\u53cd\u5411\u76f8\u4f3c\u5ea6\u4f1a\u9010\u6e10\u53d8\u5927\u3002 \u4e0b\u9762\u7684\u4f8b\u5b50\u4f7f\u7528 pandas-datareader * https://pypi.org/project/pandas-datareader/ * https://pydata.github.io/pandas-datareader/) \u5728\u6240\u6709\u4f8b\u5b50\u4e2d\uff0c\u5728\u8ba1\u7b97\u76f8\u5173\u6027\u4e4b\u524d\uff0c\u6570\u636e\u70b9\u5df2\u7ecf\u6309\u6807\u7b7e\u8fdb\u884c\u4e86\u5bf9\u9f50\u3002 all_data = { ticker: web.get_data_yahoo(ticker) for ticker in ['AAPL', 'IBM', 'MSFT', 'GOOG'] } price = pd.DataFrame( { ticker: data['Adj Close'] for ticker, data in all_data.items() } ) volume = pd.DataFrame( { ticker: data['Volume'] for ticker, data in all_data.items() } ) returns = price.pct_change() print(returns.tail()) # AAPL IBM MSFT GOOG # Date # 2021-08-09 -0.000342 -0.008424 -0.003904 0.007049 # 2021-08-10 -0.003354 0.000920 -0.006555 0.000685 # 2021-08-11 0.001786 0.005305 0.001781 -0.002947 # 2021-08-12 0.020773 0.006614 0.009967 0.005084 # 2021-08-13 0.001410 0.000769 0.010490 0.000119 Series\u7684corr\u65b9\u6cd5\u8ba1\u7b97\u7684\u662f\u4e24\u4e2aSeries\u4e2d\u91cd\u53e0\u7684\u3001\u975eNA\u7684\u3001\u6309\u7d22\u5f15\u5bf9\u9f50\u7684\u503c\u7684\u76f8\u5173\u6027\u3002\u76f8\u5e94\u5730\uff0ccov\u8ba1\u7b97\u7684\u662f\u534f\u65b9\u5dee print(returns['MSFT']) # Date # 2016-08-15 NaN # 2016-08-16 -0.005540 # 2016-08-17 0.002089 # 2016-08-18 0.000695 # 2016-08-19 0.000347 # ... # 2021-08-09 -0.003904 # 2021-08-10 -0.006555 # 2021-08-11 0.001781 # 2021-08-12 0.009967 # 2021-08-13 0.010490 # Name: MSFT, Length: 1259, dtype: float64 print(returns['MSFT'].corr(returns['IBM'])) # Series\u7684corr\u65b9\u6cd5\u8ba1\u7b97\u7684\u662f\u4e24\u4e2aSeries\u4e2d\u91cd\u53e0\u7684\u3001\u975eNA\u7684\u3001\u6309\u7d22\u5f15\u5bf9\u9f50\u7684\u503c\u7684\u76f8\u5173\u6027\u3002 # 0.5175237180581937 print(returns.MSFT.corr(returns.IBM)) # \u7b49\u540c\u5199\u6cd5\uff0cMSFT\u662f\u4e00\u4e2a\u6709\u6548\u7684Python\u5c5e\u6027 # 0.5175237180581937 print(returns['MSFT'].cov(returns['IBM'])) # Series\u7684cov\u65b9\u6cd5\u8ba1\u7b97\u7684\u662f\u4e24\u4e2aSeries\u4e2d\u503c\u7684\u534f\u65b9\u5dee\u3002 # 0.0001452224236764915 DataFrame\u7684corr\u548ccov\u65b9\u6cd5\u4f1a\u5206\u522b\u4ee5DataFrame\u7684\u5f62\u5f0f\u8fd4\u56de\u76f8\u5173\u6027\u548c\u534f\u65b9\u5dee\u77e9\u9635 print(returns.corr()) # AAPL IBM MSFT GOOG # AAPL 1.000000 0.441111 0.735539 0.661961 # IBM 0.441111 1.000000 0.517524 0.484230 # MSFT 0.735539 0.517524 1.000000 0.775756 # GOOG 0.661961 0.484230 0.775756 1.000000 print(returns.corrwith(returns['IBM'])) # \u7ed9corrwith\u65b9\u6cd5\uff0c\u4f20\u5165\u4e00\u4e2aSeries\u65f6\uff0c\u4f1a\u8fd4\u56de\u4e00\u4e2a\u542b\u6709\u4e3a\u6bcf\u5217\u8ba1\u7b97\u76f8\u5173\u6027\u503c\u7684Series # AAPL 0.441111 # IBM 1.000000 # MSFT 0.517524 # GOOG 0.484230 # dtype: float64 print(returns.corrwith(volume)) # \u7ed9corrwith\u65b9\u6cd5\uff0c\u4f20\u5165\u4e00\u4e2aDataFrame\u65f6\uff0c\u4f1a\u8ba1\u7b97\u5339\u914d\u5230\u5217\u540d\u7684\u76f8\u5173\u6027\u6570\u503c\u3002\u4e0b\u9762\u662f\u8ba1\u7b97\u4ea4\u6613\u91cf\u767e\u5206\u6bd4\u53d8\u5316\u7684\u76f8\u5173\u6027 # AAPL -0.063111 # IBM -0.103721 # MSFT -0.056842 # GOOG -0.119026 # dtype: float64 print(returns.cov()) # AAPL IBM MSFT GOOG # AAPL 0.000361 0.000137 0.000240 0.000211 # IBM 0.000137 0.000268 0.000145 0.000133 # MSFT 0.000240 0.000145 0.000294 0.000224 # GOOG 0.000211 0.000133 0.000224 0.000282","title":"\u76f8\u5173\u6027\u548c\u534f\u65b9\u5dee"},{"location":"python/DataAnalysis/ch02/#_13","text":"obj = pd.Series(['c', 'a', 'd', 'a', 'a', 'a', 'b', 'b', 'c', 'c']) print(obj) \u51fd\u6570unique\u7ed9\u51faSeries\u4e2d\u7684\u552f\u4e00\u503c print(obj.unique()) # ['c' 'a' 'd' 'b'] print(obj.sort_values().unique()) # ['a' 'b' 'c' 'd'] print(obj.value_counts()) # value_counts\u8ba1\u7b97Series\u5305\u542b\u7684\u503c\u7684\u4e2a\u6570 # a 4 # c 3 # b 2 # d 1 # dtype: int64 print(pd.value_counts(obj.values, sort=True)) # \u8fd9\u91ccvalue_counts\u4e0d\u662fSeries\u7684\u65b9\u6cd5\uff0c\u662fpandas\u9876\u5c42\u65b9\u6cd5 # a 4 # c 3 # b 2 # d 1 # dtype: int64 print(obj.isin(['b', 'c'])) # 0 True # 1 False # 2 False # 3 False # 4 False # 5 False # 6 True # 7 True # 8 True # 9 True # dtype: bool print(obj[obj.isin(['b', 'c'])]) # \u5c06\u4e0a\u9762\u7684\u7ed3\u679c\u4f5c\u4e3a\u5217\u8868\u8f93\u5165\u7684\u6761\u4ef6\uff0c\u8f93\u51fa\u4e3aTrue\u7684\u7ed3\u679c # 0 c # 6 b # 7 b # 8 c # 9 c # dtype: object \u53c2\u8003: https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.Index.get_indexer.html obj1 = pd.Series(['c', 'a', 'd', 'a', 'a', 'a', 'b', 'b', 'c', 'c']) obj2 = pd.Series(['c', 'a', 'b']) print(pd.Index(obj1)) # Index(['c', 'a', 'd', 'a', 'a', 'a', 'b', 'b', 'c', 'c'], dtype='object') print(pd.Index(obj2)) # Index(['c', 'a', 'b'], dtype='object') print(pd.Index(obj2).get_indexer(obj1)) # \u8fd9\u91cc0\u5bf9\u5e94obj2\u91cc\u9762\u7684c\u5728job1\u7684\u4f4d\u7f6e\uff0c\u4ee5\u6b64\u7c7b\u63a8\uff0c\u751f\u6210\u65b0\u7684\u7d22\u5f15\u5217\u8868 # [ 0 1 -1 1 1 1 2 2 0 0] \u8ba1\u7b97DataFrame\u591a\u4e2a\u76f8\u5173\u5217\u7684\u76f4\u65b9\u56fe data = pd.DataFrame( { 'Que1': [1, 3, 4, 3, 4], 'Que2': [2, 3, 1, 2, 3], 'Que3': [1, 5, 2, 4, 4], } ) print(data) # Que1 Que2 Que3 # 0 1 2 1 # 1 3 3 5 # 2 4 1 2 # 3 3 2 4 # 4 4 3 4 result = data.apply(pd.value_counts).fillna(0) print(result) # \u7ed3\u679c\u4e2d\u7684\u884c\u6807\u7b7e\u662f\u6240\u6709\u5217\u4e2d\u51fa\u73b0\u7684\u4e0d\u540c\u503c\uff0c\u6570\u503c\u5219\u662f\u8fd9\u4e9b\u4e0d\u540c\u503c\u5728\u6bcf\u4e2a\u5217\u4e2d\u51fa\u73b0\u7684\u6b21\u6570\uff0c\u4f8b\u5982\uff1a\u6570\u5b575\u53ea\u5728Que3\u91cc\u9762\u51fa\u73b0\u4e86\u4e00\u6b21 # Que1 Que2 Que3 # 1 1.0 1.0 1.0 # 2 0.0 2.0 1.0 # 3 2.0 2.0 0.0 # 4 2.0 0.0 2.0 # 5 0.0 0.0 1.0","title":"\u552f\u4e00\u503c\u3001\u8ba1\u6570\u548c\u6210\u5458\u5c5e\u6027"},{"location":"python/DataAnalysis/ch03/","text":"\u6587\u672c\u683c\u5f0f\u6570\u636e\u7684\u8bfb\u5199 import numpy as np import pandas as pd import sys import csv import json \u5c06\u8868\u683c\u578b\u6570\u636e\u8bfb\u53d6\u4e3aDataFrame\u5bf9\u8c61\u662fpandas\u7684\u91cd\u8981\u7279\u6027\u3002\\ \u4e0b\u9762\u662f\u90e8\u5206\u5b9e\u73b0\u6587\u4ef6\u8bfb\u53d6\u529f\u80fd\u7684\u51fd\u6570\uff0cread_csv\u548cread_table\u53ef\u80fd\u662f\u540e\u671f\u6211\u4eec\u4f7f\u7528\u6700\u591a\u7684\u51fd\u6570\u3002\\ \\ \u8fd9\u4e9b\u51fd\u6570\u7684\u53ef\u9009\u53c2\u6570\u4e3b\u8981\u6709\u4ee5\u4e0b\u51e0\u79cd\u7c7b\u578b\uff1a * \u7d22\u5f15\uff1a\u53ef\u4ee5\u5c06\u4e00\u5217\u6216\u591a\u4e2a\u5217\u4f5c\u4e3a\u8fd4\u56de\u7684DataFrame\uff0c\u4ece\u6587\u4ef6\u6216\u7528\u6237\u5904\u83b7\u5f97\u5217\u540d\uff0c\u6216\u8005\u6ca1\u6709\u5217\u540d\u3002 * \u7c7b\u578b\u63a8\u65ad\u548c\u6570\u636e\u8f6c\u6362\uff1a\u5305\u62ec\u7528\u6237\u81ea\u5b9a\u4e49\u7684\u503c\u8f6c\u6362\u548c\u81ea\u5b9a\u4e49\u7684\u7f3a\u5931\u503c\u7b26\u53f7\u5217\u8868\u3002 * \u65e5\u671f\u65f6\u95f4\u89e3\u6790\uff1a\u5305\u62ec\u7ec4\u5408\u529f\u80fd\uff0c\u4e5f\u5305\u62ec\u5c06\u5206\u6563\u5728\u591a\u4e2a\u5217\u4e0a\u7684\u65e5\u671f\u548c\u65f6\u95f4\u4fe1\u606f\u7ec4\u5408\u6210\u7ed3\u679c\u4e2d\u7684\u5355\u4e2a\u5217\u3002 * \u8fed\u4ee3\uff1a\u652f\u6301\u5bf9\u5927\u578b\u6587\u4ef6\u7684\u5206\u5757\u8fed\u4ee3\u3002 * \u672a\u6e05\u6d17\u6570\u636e\u95ee\u9898\uff1a\u8df3\u8fc7\u884c\u3001\u9875\u811a\u3001\u6ce8\u91ca\u4ee5\u53ca\u5176\u4ed6\u6b21\u8981\u6570\u636e\uff0c\u6bd4\u5982\u4f7f\u7528\u9017\u53f7\u5206\u9694\u5343\u4f4d\u7684\u6570\u5b57\u3002 file01 = '../examples/ex1.csv' # \u4f7f\u7528read_csv\u5c06\u6587\u4ef6\u8bfb\u5165\u4e00\u4e2aDataFrame df = pd.read_csv(file01) print(df) # 1 2 3 4 hello # 0 5 6 7 8 world # 1 9 10 11 12 foo df = pd.read_csv(file01, header=None) # \u4f7f\u7528pandas\u81ea\u52a8\u5206\u914d\u9ed8\u8ba4\u5217\u540d print(df) # 0 1 2 3 4 # 0 1 2 3 4 hello # 1 5 6 7 8 world # 2 9 10 11 12 foo df = pd.read_csv(file01, names=['aa', 'bb', 'cc', 'dd', 'message']) # \u81ea\u5df1\u6307\u5b9a\u5217\u540d print(df) # aa bb cc dd ee # 0 1 2 3 4 hello # 1 5 6 7 8 world # 2 9 10 11 12 foo # \u4f7f\u7528read_table\uff0c\u5e76\u6307\u5b9a\u5206\u9694\u7b26\uff0c\u5c06\u6587\u4ef6\u8bfb\u5165\u4e00\u4e2aDataFrame df = pd.read_table(file01, sep=',') print(df) # a b c d message # 0 1 2 3 4 hello # 1 5 6 7 8 world # 2 9 10 11 12 foo \u4ece\u591a\u4e2a\u5217\u4e2d\u5f62\u6210\u4e00\u4e2a\u5206\u5c42\u7d22\u5f15 parased = pd.read_csv('../examples/csv_mindex.csv', index_col=['key1', 'key2']) print(parased) # value1 value2 # key1 key2 # one a 1 2 # b 3 4 # c 5 6 # d 7 8 # two a 9 10 # b 11 12 # c 13 14 # d 15 16 \u4e0b\u4f8b\u4e2d\uff0c\u7531\u4e8e\u5217\u540d\u7684\u6570\u91cf\u6bd4\u6570\u636e\u7684\u5217\u6570\u5c11\u4e00\u4e2a\uff0c\u56e0\u6b64read_table\u63a8\u65ad\u7b2c\u4e00\u5217\u5e94\u5f53\u4f5c\u4e3aDataFrame\u7684\u7d22\u5f15\u3002\\ ex3.txt\u539f\u59cb\u6587\u4ef6\u5185\u5bb9 A B C aaa -0.264438 -1.026059 -0.619500 bbb 0.927272 0.302904 -0.032399 ccc -0.264273 -0.386314 -0.217601 ddd -0.871858 -0.348382 1.100491 result = pd.read_table('../examples/ex3.txt') # \u76f4\u63a5\u8bfb\u53d6 print(result) # A B C # aaa -0.264438 -1.026059 -0.619500 # bbb 0.927272 0.302904 -0.032399 NaN # ccc -0.264273 -0.386314 -0.217601 # ddd -0.871858 -0.348382 1.100491 result = pd.read_table('../examples/ex3.txt', sep='\\s+') # \u5411read_table\u6b63\u5219\u8868\u8fbe\u5f0f\u4e3a\\s+\u6765\u683c\u5f0f\u5316\u6587\u4ef6 print(result) # A B C # aaa -0.264438 -1.026059 -0.619500 # bbb 0.927272 0.302904 -0.032399 # ccc -0.264273 -0.386314 -0.217601 # ddd -0.871858 -0.348382 1.100491 \u4e0b\u4f8b\u4e2dex4.csv\u539f\u59cb\u6587\u4ef6\u5185\u5bb9 # hey! a,b,c,d,message # just wanted to make things more difficult for you # who reads CSV files with computers, anyway? 1,2,3,4,hello 5,6,7,8,world 9,10,11,12,foo result = pd.read_csv('../examples/ex4.csv', skiprows=[0, 2, 3]) # \u4f7f\u7528skiprows\u6765\u8df3\u8fc7\u7b2c\u4e00\u884c\u3001\u7b2c\u4e09\u884c\u548c\u7b2c\u56db\u884c print(result) # a b c d message # 0 1 2 3 4 hello # 1 5 6 7 8 world # 2 9 10 11 12 foo \u7f3a\u5931\u503c\u5904\u7406 \\ \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0cpandas\u4f7f\u7528\u4e00\u4e9b\u5e38\u89c1\u7684\u6807\u8bc6\uff0c\u4f8b\u5982NA\u548cNULL \\ \u4e0b\u4f8b\u4e2dex5.csv\u539f\u59cb\u6587\u4ef6\u5185\u5bb9 something,a,b,c,d,message one,1,2,3,4,NA two,5,6,,8,world three,9,10,11,12,foo result = pd.read_csv('../examples/ex5.csv') print(result) # something a b c d message # 0 one 1 2 3.0 4 NaN # 1 two 5 6 NaN 8 world # 2 three 9 10 11.0 12 foo print(pd.isnull(result)) # something a b c d message # 0 False False False False False True # 1 False False False True False False # 2 False False False False False False result = pd.read_csv('../examples/ex5.csv', na_values=['NULL']) print(result) # something a b c d message # 0 one 1 2 3.0 4 NaN # 1 two 5 6 NaN 8 world # 2 three 9 10 11.0 12 foo \u5b9a\u4e49\u66ff\u6362\u89c4\u5219 sentinels = { 'message': ['foo', 'NA'], 'something': ['two'] } result = pd.read_csv('../examples/ex5.csv', na_values=sentinels) \u628amessage\u5217\u6240\u6709\u503c\u4e3afoo\u6216NA\u7684\u66ff\u6362\u4e3aNull \\ \u628asomething\u5217\u6240\u6709\u503c\u4e3atwo\u7684\u66ff\u6362\u4e3aNull print(result) # something a b c d message # 0 one 1 2 3.0 4 NaN # 1 NaN 5 6 NaN 8 world # 2 three 9 10 11.0 12 NaN \u5206\u5757\u8bfb\u5165\u6587\u672c\u6587\u4ef6 pd.options.display.max_rows = 10 result = pd.read_csv('../examples/ex6.csv') # \u8bfb\u53d6\u5168\u90e8\u8bb0\u5f55 print(result) result = pd.read_csv('../examples/ex6.csv', nrows=5) # \u8bfb\u53d6\u524d5\u884c\u8bb0\u5f55 print(result) # [10000 rows x 5 columns] # one two three four key # 0 0.467976 -0.038649 -0.295344 -1.824726 L # 1 -0.358893 1.404453 0.704965 -0.200638 B # 2 -0.501840 0.659254 -0.421691 -0.057688 G # 3 0.204886 1.074134 1.388361 -0.982404 R # 4 0.354628 -0.133116 0.283763 -0.837063 Q result = pd.read_csv('../examples/ex6.csv', chunksize=1000) # \u5206\u5757\u8bfb\u5165\u6587\u4ef6\uff0c\u6bcf\u57571000\u884c print(result) # \u8fd4\u56de\u7684\u662f\u4e00\u4e2aTextParser\u5bf9\u8c61, \u5141\u8bb8\u4f60\u6839\u636echunksize\u904d\u5386\u6587\u4ef6\u3002 # <pandas.io.parsers.readers.TextFileReader object at 0x7f2b3cd01730> \u53ef\u4ee5\u904d\u5386ex6.csv\uff0c\u5e76\u5bf9\u2019key\u2019\u5217\u805a\u5408\u83b7\u5f97\u8ba1\u6570\u503c tot = pd.Series([], dtype=float) # \u8fd9\u91cc\u9700\u8981\u663e\u5f0f\u6307\u5b9adtype\uff0c\u540e\u7eedPython\u4f1a\u5c06\u9ed8\u8ba4\u503c\u4ecefloat64\u53d8\u6210object\uff0c\u76ee\u524d\u9ed8\u8ba4\u662ffloat64 for piece in result: tot = tot.add(piece['key'].value_counts(), fill_value=0) tot = tot.sort_values(ascending=False) print(tot[:10]) # E 368.0 # X 364.0 # L 346.0 # O 343.0 # Q 340.0 # M 338.0 # J 337.0 # F 335.0 # K 334.0 # H 330.0 # dtype: float64 \u5c06\u6570\u636e\u5199\u5165\u6587\u672c\u683c\u5f0f data = pd.read_csv('../examples/ex5.csv') print(data) # something a b c d message # 0 one 1 2 3.0 4 NaN # 1 two 5 6 NaN 8 world # 2 three 9 10 11.0 12 foo \u4f7f\u7528DataFrame\u7684to_csv\u65b9\u6cd5\uff0c\u5c06\u6570\u636e\u5bfc\u51fa\u4e3a\u9017\u53f7\u5206\u9694\u7684\u6587\u4ef6 data.to_csv('../examples/out.csv') # \u8f93\u51faout.csv\u7684\u5185\u5bb9 # ,something,a,b,c,d,message # 0,one,1,2,3.0,4, # 1,two,5,6,,8,world # 2,three,9,10,11.0,12,foo \u4f7f\u7528DataFrame\u7684to_csv\u65b9\u6cd5\uff0c\u5c06\u6570\u636e\u5bfc\u51fa\u4e3a\u5176\u4ed6\u7684\u5206\u9694\u7b26\u7684\u6587\u4ef6 data.to_csv(sys.stdout, sep='|') # |something|a|b|c|d|message # 0|one|1|2|3.0|4| # 1|two|5|6||8|world # 2|three|9|10|11.0|12|foo data.to_csv(sys.stdout, sep=',') # ,something,a,b,c,d,message # 0,one,1,2,3.0,4, # 1,two,5,6,,8,world # 2,three,9,10,11.0,12,foo data.to_csv(sys.stdout, sep=',', na_rep='NULL') # \u8bbe\u5b9a\u7f3a\u5931\u503c\u5728\u8f93\u51fa\u65f6\u4ee5\u7a7a\u5b57\u7b26\u4e32\u51fa\u73b0 # ,something,a,b,c,d,message # 0,one,1,2,3.0,4,NULL # 1,two,5,6,NULL,8,world # 2,three,9,10,11.0,12,foo data.to_csv(sys.stdout, sep=',', na_rep='NULL', index=False, header=False) # \u4e0d\u8f93\u51fa\u884c\u548c\u5217\u7684\u6807\u7b7e\uff08index\uff0cheader\uff09 # one,1,2,3.0,4,NULL # two,5,6,NULL,8,world # three,9,10,11.0,12,foo data.to_csv(sys.stdout, sep=',', na_rep='NULL', index=False, header=False, columns=['a', 'b', 'c']) # \u6309\u7167\u81ea\u5b9a\u7684\u987a\u5e8f\u8f93\u51fa\u5b50\u96c6 # 1,2,3.0 # 5,6,NULL # 9,10,11.0 Series\u4e5f\u6709to_csv\u65b9\u6cd5 dates = pd.date_range('1/1/2000', periods=7) ts = pd.Series(np.arange(7), index=dates) ts.to_csv('../examples/tseries.csv', header=False) # \u8f93\u51fatseries.csv\u6587\u4ef6\u5185\u5bb9 # 2000-01-01,0 # 2000-01-02,1 # 2000-01-03,2 # 2000-01-04,3 # 2000-01-05,4 # 2000-01-06,5 # 2000-01-07,6 \u4f7f\u7528\u5206\u9694\u683c\u5f0f \u7edd\u5927\u591a\u6570\u7684\u8868\u578b\u6570\u636e\u90fd\u53ef\u4ee5\u4f7f\u7528\u51fd\u6570pandas.read_table\u4ece\u786c\u76d8\u4e2d\u8bfb\u53d6\u3002 \\ \u7136\u800c\uff0c\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\uff0c\u63a5\u6536\u4e00\u4e2a\u5e26\u6709\u4e00\u884c\u6216\u591a\u884c\u9519\u8bef\u7684\u6587\u4ef6\u5e76\u4e0d\u5c11\u89c1\uff0cread_table\u4e5f\u65e0\u6cd5\u89e3\u51b3\u8fd9\u79cd\u60c5\u51b5\u3002 ex7.csv \u6587\u4ef6\u5185\u5bb9 \"a\",\"b\",\"c\" \"1\",\"2\",\"3\" \"1\",\"2\",\"3\" f = open('../examples/ex7.csv') # \u4f7f\u7528Python\u7684\u5185\u5efacsv\u6a21\u5757 reader = csv.reader(f) # \u5c06\u4efb\u4e00\u6253\u5f00\u7684\u6587\u4ef6\u6216\u6587\u4ef6\u578b\u5bf9\u8c61\u4f20\u7ed9csv.reader for line in reader: # # \u904d\u5386reader\uff0c\u4ea7\u751f\u5143\u7ec4\uff0c\u5143\u7ec4\u7684\u503c\u4e3a\u5220\u9664\u4e86\u5f15\u53f7\u7684\u5b57\u7b26 print(line) f.close() # ['a', 'b', 'c'] # ['1', '2', '3'] # ['1', '2', '3'] with open('../examples/ex7.csv') as f: lines = list(csv.reader(f)) # \u9996\u5148\uff0c\u5c06\u6587\u4ef6\u8bfb\u53d6\u4e3a\u884c\u7684\u5217\u8868 header, values = lines[0], lines[1:] # \u5176\u6b21\uff0c\u5c06\u6570\u636e\u62c6\u5206\u4e3a\u5217\u540d\u884c\u548c\u6570\u636e\u884c data_dict = { h: v for h, v in zip(header, zip(*values)) # \u518d\u7136\u540e\uff0c\u4f7f\u7528\u5b57\u5178\u63a8\u5bfc\u5f0f\u548c\u8868\u8fbe\u5f0fzip(*values)\u751f\u6210\u4e00\u4e2a\u5305\u542b\u6570\u636e\u5217\u7684\u5b57\u5178\uff0c\u5b57\u5178\u4e2d\u884c\u8f6c\u7f6e\u6210\u5217 } print(data_dict) # \u8f93\u51fa\u7ed3\u679c # {'a': ('1', '1'), 'b': ('2', '2'), 'c': ('3', '3')} \u5982\u679c\u9700\u6839\u636e\u4e0d\u540c\u7684\u5206\u9694\u7b26\u3001\u5b57\u7b26\u4e32\u5f15\u7528\u7ea6\u5b9a\u6216\u884c\u7ec8\u6b62\u7b26\u5b9a\u4e49\u4e00\u79cd\u65b0\u7684\u683c\u5f0f\u65f6\uff0c\u53ef\u4ee5: \\ \u65b9\u6cd51\uff1a\u4f7f\u7528csv.Dialect\u5b9a\u4e49\u4e00\u4e2a\u7b80\u5355\u7684\u5b50\u7c7b class my_dialect(csv.Dialect): lineterminator = '\\n' delimiter = ';' # \u8fd9\u91cc\u53ea\u80fd\u662f\u4e00\u4e2a\u5b57\u7b26 quotechar = '\"' quoting = csv.QUOTE_MINIMAL f = open('../examples/ex7.csv') reader = csv.reader(f, dialect=my_dialect) for line in reader: # \u904d\u5386reader\uff0c\u4ea7\u751f\u5143\u7ec4\uff0c\u5143\u7ec4\u7684\u503c\u4e3a\u5220\u9664\u4e86\u5f15\u53f7\u7684\u5b57\u7b26 print(line) f.close() # ['a,\"b\",\"c\"'] # ['1,\"2\",\"3\"'] # ['1,\"2\",\"3\"'] \u65b9\u6cd52\uff1a\u76f4\u63a5\u5c06CSV\u65b9\u8a00\u53c2\u6570(dialect)\u4f20\u5165csv.reader\u7684\u5173\u952e\u5b57\u53c2\u6570 \\ \u6bd4\u8f83\u8be6\u7ec6\u7684\u4ecb\u7ecd\u65b9\u8a00\u548c\u5206\u9694\u7b26\uff1ahttps://blog.csdn.net/tcy23456/article/details/85291994 f = open('../examples/ex7.csv') reader = csv.reader(f, delimiter='|') for line in reader: # \u904d\u5386reader\uff0c\u4ea7\u751f\u5143\u7ec4\uff0c\u5143\u7ec4\u7684\u503c\u4e3a\u5220\u9664\u4e86\u5f15\u53f7\u7684\u5b57\u7b26 print(line) f.close() # ['a,\"b\",\"c\"'] # ['1,\"2\",\"3\"'] # ['1,\"2\",\"3\"'] \u5bf9\u4e8e\u5177\u6709\u66f4\u590d\u6742\u6216\u56fa\u5b9a\u7684\u591a\u5b57\u7b26\u5206\u9694\u7b26\u7684\u6587\u4ef6\uff0c\u5c06\u65e0\u6cd5\u4f7f\u7528csv\u6a21\u5757\u3002 \\ \u5728\u6b64\u7c7b\u60c5\u51b5\u4e0b\uff0c\u5c06\u4f7f\u7528\u5b57\u7b26\u4e32\u7684split\u65b9\u6cd5\u6216\u6b63\u5219\u8868\u8fbe\u5f0f\u65b9\u6cd5re.split\u8fdb\u884c\u884c\u62c6\u5206\u548c\u5176\u4ed6\u6e05\u7406\u5de5\u4f5c\u3002 \\ \u9700\u8981\u624b\u52a8\u5199\u5165\u88ab\u5206\u9694\u7684\u6587\u4ef6\u65f6\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528csv.writer\u3002 \\ \u8fd9\u4e2a\u51fd\u6570\u63a5\u6536\u4e00\u4e2a\u5df2\u7ecf\u6253\u5f00\u7684\u53ef\u5199\u5165\u6587\u4ef6\u5bf9\u8c61\u4ee5\u53ca\u548ccsv.reader\u76f8\u540c\u7684CSV\u65b9\u8a00\u3001\u683c\u5f0f\u9009\u9879 with open('../examples/mydata.csv', 'w') as f: writer = csv.writer(f, dialect=my_dialect) writer.writerow(('1', '2', '3')) writer.writerow(('4', '5', '6')) writer.writerow(('7', '8', '9')) writer.writerow(('10', '11', '12')) # mydata.csv \u6587\u4ef6\u5185\u5bb9 # 1;2;3 # 4;5;6 # 7;8;9 # 10;11;12 JSON\u6570\u636e obj = \"\"\" { \"name\": \"Wes\", \"places_lived\": [\"United States\", \"Spain\", \"Germany\"], \"pet\": null, \"siblings\": [ { \"name\": \"Scott\", \"age\": 30, \"pets\": [\"Zeus\", \"Zuko\"] }, { \"name\": \"Katie\", \"age\": 38, \"pets\": [\"Sixes\", \"Stache\", \"Cisco\"] } ] } \"\"\" \u5c06JSON\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3aPython\u5f62\u5f0f\u65f6\uff0c\u4f7f\u7528json.loads\u65b9\u6cd5 result = json.loads(obj) print(result) # {'name': 'Wes', 'places_lived': ['United States', 'Spain', 'Germany'], 'pet': None, 'siblings': [{'name': 'Scott', 'age': 30, 'pets': ['Zeus', 'Zuko']}, {'name': 'Katie', 'age': 38, 'pets': ['Sixes', 'Stache', 'Cisco']}]} \u53e6\u4e00\u65b9\u9762\uff0cjson.dumps\u53ef\u4ee5\u5c06Python\u5bf9\u8c61\u8f6c\u6362\u56deJSON asjson = json.dumps(result) print(asjson) # {\"name\": \"Wes\", \"places_lived\": [\"United States\", \"Spain\", \"Germany\"], \"pet\": null, \"siblings\": [{\"name\": \"Scott\", \"age\": 30, \"pets\": [\"Zeus\", \"Zuko\"]}, {\"name\": \"Katie\", \"age\": 38, \"pets\": [\"Sixes\", \"Stache\", \"Cisco\"]}]} \u5c06JSON\u5bf9\u8c61\u6216\u5bf9\u8c61\u5217\u8868\u8f6c\u6362\u4e3aDataFrame\u6216\u5176\u4ed6\u6570\u636e\u7ed3\u6784 \\ \u6bd4\u8f83\u65b9\u4fbf\u7684\u65b9\u5f0f\u662f\u5c06\u5b57\u5178\u6784\u6210\u7684\u5217\u8868\uff08\u4e4b\u524d\u662fJSON\u5bf9\u8c61\uff09\u4f20\u5165DataFrame\u6784\u9020\u51fd\u6570\uff0c\u5e76\u9009\u51fa\u6570\u636e\u5b57\u6bb5\u7684\u5b50\u96c6 siblings = pd.DataFrame(result['siblings'], columns=['name', 'age']) print(siblings) # name age # 0 Scott 30 # 1 Katie 38 pandas.read_json\u53ef\u4ee5\u81ea\u52a8\u5c06JSON\u6570\u636e\u96c6\u6309\u7167\u6307\u5b9a\u6b21\u5e8f\u8f6c\u6362\u4e3aSeries\u6216DataFrame \\ pandas.read_json\u7684\u9ed8\u8ba4\u9009\u9879\u662f\u5047\u8bbeJSON\u6570\u7ec4\u4e2d\u7684\u6bcf\u4e2a\u5bf9\u8c61\u662f\u8868\u91cc\u7684\u4e00\u884c \\ \u8bfb\u53d6\u3001\u64cd\u4f5cJSON\u6570\u636e\uff08\u5305\u62ec\u5d4c\u5957\u8bb0\u5f55\uff09\u7684\u62d3\u5c55\u793a\u4f8b\uff0c\u8bf7\u53c2\u770b\u7b2c7\u7ae0\u7684USDA\u98df\u54c1\u6570\u636e\u5e93\u793a\u4f8b \\ \u4f8b\u5982\u8bfb\u53d6 data = pd.read_json('../examples/example_new.json') data = pd.read_json('../examples/example.json') print(data) # a b c # 0 1 2 3 # 1 4 5 6 # 2 7 8 9 print(data.to_json()) # {\"a\":{\"0\":1,\"1\":4,\"2\":7},\"b\":{\"0\":2,\"1\":5,\"2\":8},\"c\":{\"0\":3,\"1\":6,\"2\":9}} print(data.to_json(orient='records')) # [{\"a\":1,\"b\":2,\"c\":3},{\"a\":4,\"b\":5,\"c\":6},{\"a\":7,\"b\":8,\"c\":9}] XML\u548cHTML\uff1a\u7f51\u7edc\u6293\u53d6 pandas\u7684\u5185\u5efa\u51fd\u6570read_html\u53ef\u4ee5\u4f7f\u7528lxml\u548cBeautiful Soup\u7b49\u5e93\u5c06HTML\u4e2d\u7684\u8868\u81ea\u52a8\u89e3\u6790\u4e3aDataFrame\u5bf9\u8c61 tables = pd.read_html('../examples/fdic_failed_bank_list.html') print(len(tables)) # 1 failures = tables[0] # //*[@id=\"table\"] print(failures.head()) # \u8bfb\u53d6\u524d5\u884c\u8bb0\u5f55 # Bank Name ... Updated Date # 0 Allied Bank ... November 17, 2016 # 1 The Woodbury Banking Company ... November 17, 2016 # 2 First CornerStone Bank ... September 6, 2016 # 3 Trust Company Bank ... September 6, 2016 # 4 North Milwaukee State Bank ... June 16, 2016 # # [5 rows x 7 columns] close_timestamps = pd.to_datetime(failures['Closing Date']) # \u8ba1\u7b97\u6bcf\u5e74\u94f6\u884c\u5012\u95ed\u7684\u6570\u91cf print(close_timestamps.dt.year.value_counts()) # 2010 157 # 2009 140 # 2011 92 # 2012 51 # 2008 25 # ... # 2004 4 # 2001 4 # 2007 3 # 2003 3 # 2000 2 # Name: Closing Date, Length: 15, dtype: int64 \u4e8c\u8fdb\u5236\u683c\u5f0f \u4e0eWeb API\u4ea4\u4e92 \u4e0e\u6570\u636e\u5e93\u4ea4\u4e92","title":"Ch03"},{"location":"python/DataAnalysis/ch03/#_1","text":"import numpy as np import pandas as pd import sys import csv import json \u5c06\u8868\u683c\u578b\u6570\u636e\u8bfb\u53d6\u4e3aDataFrame\u5bf9\u8c61\u662fpandas\u7684\u91cd\u8981\u7279\u6027\u3002\\ \u4e0b\u9762\u662f\u90e8\u5206\u5b9e\u73b0\u6587\u4ef6\u8bfb\u53d6\u529f\u80fd\u7684\u51fd\u6570\uff0cread_csv\u548cread_table\u53ef\u80fd\u662f\u540e\u671f\u6211\u4eec\u4f7f\u7528\u6700\u591a\u7684\u51fd\u6570\u3002\\ \\ \u8fd9\u4e9b\u51fd\u6570\u7684\u53ef\u9009\u53c2\u6570\u4e3b\u8981\u6709\u4ee5\u4e0b\u51e0\u79cd\u7c7b\u578b\uff1a * \u7d22\u5f15\uff1a\u53ef\u4ee5\u5c06\u4e00\u5217\u6216\u591a\u4e2a\u5217\u4f5c\u4e3a\u8fd4\u56de\u7684DataFrame\uff0c\u4ece\u6587\u4ef6\u6216\u7528\u6237\u5904\u83b7\u5f97\u5217\u540d\uff0c\u6216\u8005\u6ca1\u6709\u5217\u540d\u3002 * \u7c7b\u578b\u63a8\u65ad\u548c\u6570\u636e\u8f6c\u6362\uff1a\u5305\u62ec\u7528\u6237\u81ea\u5b9a\u4e49\u7684\u503c\u8f6c\u6362\u548c\u81ea\u5b9a\u4e49\u7684\u7f3a\u5931\u503c\u7b26\u53f7\u5217\u8868\u3002 * \u65e5\u671f\u65f6\u95f4\u89e3\u6790\uff1a\u5305\u62ec\u7ec4\u5408\u529f\u80fd\uff0c\u4e5f\u5305\u62ec\u5c06\u5206\u6563\u5728\u591a\u4e2a\u5217\u4e0a\u7684\u65e5\u671f\u548c\u65f6\u95f4\u4fe1\u606f\u7ec4\u5408\u6210\u7ed3\u679c\u4e2d\u7684\u5355\u4e2a\u5217\u3002 * \u8fed\u4ee3\uff1a\u652f\u6301\u5bf9\u5927\u578b\u6587\u4ef6\u7684\u5206\u5757\u8fed\u4ee3\u3002 * \u672a\u6e05\u6d17\u6570\u636e\u95ee\u9898\uff1a\u8df3\u8fc7\u884c\u3001\u9875\u811a\u3001\u6ce8\u91ca\u4ee5\u53ca\u5176\u4ed6\u6b21\u8981\u6570\u636e\uff0c\u6bd4\u5982\u4f7f\u7528\u9017\u53f7\u5206\u9694\u5343\u4f4d\u7684\u6570\u5b57\u3002 file01 = '../examples/ex1.csv' # \u4f7f\u7528read_csv\u5c06\u6587\u4ef6\u8bfb\u5165\u4e00\u4e2aDataFrame df = pd.read_csv(file01) print(df) # 1 2 3 4 hello # 0 5 6 7 8 world # 1 9 10 11 12 foo df = pd.read_csv(file01, header=None) # \u4f7f\u7528pandas\u81ea\u52a8\u5206\u914d\u9ed8\u8ba4\u5217\u540d print(df) # 0 1 2 3 4 # 0 1 2 3 4 hello # 1 5 6 7 8 world # 2 9 10 11 12 foo df = pd.read_csv(file01, names=['aa', 'bb', 'cc', 'dd', 'message']) # \u81ea\u5df1\u6307\u5b9a\u5217\u540d print(df) # aa bb cc dd ee # 0 1 2 3 4 hello # 1 5 6 7 8 world # 2 9 10 11 12 foo # \u4f7f\u7528read_table\uff0c\u5e76\u6307\u5b9a\u5206\u9694\u7b26\uff0c\u5c06\u6587\u4ef6\u8bfb\u5165\u4e00\u4e2aDataFrame df = pd.read_table(file01, sep=',') print(df) # a b c d message # 0 1 2 3 4 hello # 1 5 6 7 8 world # 2 9 10 11 12 foo \u4ece\u591a\u4e2a\u5217\u4e2d\u5f62\u6210\u4e00\u4e2a\u5206\u5c42\u7d22\u5f15 parased = pd.read_csv('../examples/csv_mindex.csv', index_col=['key1', 'key2']) print(parased) # value1 value2 # key1 key2 # one a 1 2 # b 3 4 # c 5 6 # d 7 8 # two a 9 10 # b 11 12 # c 13 14 # d 15 16 \u4e0b\u4f8b\u4e2d\uff0c\u7531\u4e8e\u5217\u540d\u7684\u6570\u91cf\u6bd4\u6570\u636e\u7684\u5217\u6570\u5c11\u4e00\u4e2a\uff0c\u56e0\u6b64read_table\u63a8\u65ad\u7b2c\u4e00\u5217\u5e94\u5f53\u4f5c\u4e3aDataFrame\u7684\u7d22\u5f15\u3002\\ ex3.txt\u539f\u59cb\u6587\u4ef6\u5185\u5bb9 A B C aaa -0.264438 -1.026059 -0.619500 bbb 0.927272 0.302904 -0.032399 ccc -0.264273 -0.386314 -0.217601 ddd -0.871858 -0.348382 1.100491 result = pd.read_table('../examples/ex3.txt') # \u76f4\u63a5\u8bfb\u53d6 print(result) # A B C # aaa -0.264438 -1.026059 -0.619500 # bbb 0.927272 0.302904 -0.032399 NaN # ccc -0.264273 -0.386314 -0.217601 # ddd -0.871858 -0.348382 1.100491 result = pd.read_table('../examples/ex3.txt', sep='\\s+') # \u5411read_table\u6b63\u5219\u8868\u8fbe\u5f0f\u4e3a\\s+\u6765\u683c\u5f0f\u5316\u6587\u4ef6 print(result) # A B C # aaa -0.264438 -1.026059 -0.619500 # bbb 0.927272 0.302904 -0.032399 # ccc -0.264273 -0.386314 -0.217601 # ddd -0.871858 -0.348382 1.100491 \u4e0b\u4f8b\u4e2dex4.csv\u539f\u59cb\u6587\u4ef6\u5185\u5bb9 # hey! a,b,c,d,message # just wanted to make things more difficult for you # who reads CSV files with computers, anyway? 1,2,3,4,hello 5,6,7,8,world 9,10,11,12,foo result = pd.read_csv('../examples/ex4.csv', skiprows=[0, 2, 3]) # \u4f7f\u7528skiprows\u6765\u8df3\u8fc7\u7b2c\u4e00\u884c\u3001\u7b2c\u4e09\u884c\u548c\u7b2c\u56db\u884c print(result) # a b c d message # 0 1 2 3 4 hello # 1 5 6 7 8 world # 2 9 10 11 12 foo \u7f3a\u5931\u503c\u5904\u7406 \\ \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0cpandas\u4f7f\u7528\u4e00\u4e9b\u5e38\u89c1\u7684\u6807\u8bc6\uff0c\u4f8b\u5982NA\u548cNULL \\ \u4e0b\u4f8b\u4e2dex5.csv\u539f\u59cb\u6587\u4ef6\u5185\u5bb9 something,a,b,c,d,message one,1,2,3,4,NA two,5,6,,8,world three,9,10,11,12,foo result = pd.read_csv('../examples/ex5.csv') print(result) # something a b c d message # 0 one 1 2 3.0 4 NaN # 1 two 5 6 NaN 8 world # 2 three 9 10 11.0 12 foo print(pd.isnull(result)) # something a b c d message # 0 False False False False False True # 1 False False False True False False # 2 False False False False False False result = pd.read_csv('../examples/ex5.csv', na_values=['NULL']) print(result) # something a b c d message # 0 one 1 2 3.0 4 NaN # 1 two 5 6 NaN 8 world # 2 three 9 10 11.0 12 foo \u5b9a\u4e49\u66ff\u6362\u89c4\u5219 sentinels = { 'message': ['foo', 'NA'], 'something': ['two'] } result = pd.read_csv('../examples/ex5.csv', na_values=sentinels) \u628amessage\u5217\u6240\u6709\u503c\u4e3afoo\u6216NA\u7684\u66ff\u6362\u4e3aNull \\ \u628asomething\u5217\u6240\u6709\u503c\u4e3atwo\u7684\u66ff\u6362\u4e3aNull print(result) # something a b c d message # 0 one 1 2 3.0 4 NaN # 1 NaN 5 6 NaN 8 world # 2 three 9 10 11.0 12 NaN","title":"\u6587\u672c\u683c\u5f0f\u6570\u636e\u7684\u8bfb\u5199"},{"location":"python/DataAnalysis/ch03/#_2","text":"pd.options.display.max_rows = 10 result = pd.read_csv('../examples/ex6.csv') # \u8bfb\u53d6\u5168\u90e8\u8bb0\u5f55 print(result) result = pd.read_csv('../examples/ex6.csv', nrows=5) # \u8bfb\u53d6\u524d5\u884c\u8bb0\u5f55 print(result) # [10000 rows x 5 columns] # one two three four key # 0 0.467976 -0.038649 -0.295344 -1.824726 L # 1 -0.358893 1.404453 0.704965 -0.200638 B # 2 -0.501840 0.659254 -0.421691 -0.057688 G # 3 0.204886 1.074134 1.388361 -0.982404 R # 4 0.354628 -0.133116 0.283763 -0.837063 Q result = pd.read_csv('../examples/ex6.csv', chunksize=1000) # \u5206\u5757\u8bfb\u5165\u6587\u4ef6\uff0c\u6bcf\u57571000\u884c print(result) # \u8fd4\u56de\u7684\u662f\u4e00\u4e2aTextParser\u5bf9\u8c61, \u5141\u8bb8\u4f60\u6839\u636echunksize\u904d\u5386\u6587\u4ef6\u3002 # <pandas.io.parsers.readers.TextFileReader object at 0x7f2b3cd01730> \u53ef\u4ee5\u904d\u5386ex6.csv\uff0c\u5e76\u5bf9\u2019key\u2019\u5217\u805a\u5408\u83b7\u5f97\u8ba1\u6570\u503c tot = pd.Series([], dtype=float) # \u8fd9\u91cc\u9700\u8981\u663e\u5f0f\u6307\u5b9adtype\uff0c\u540e\u7eedPython\u4f1a\u5c06\u9ed8\u8ba4\u503c\u4ecefloat64\u53d8\u6210object\uff0c\u76ee\u524d\u9ed8\u8ba4\u662ffloat64 for piece in result: tot = tot.add(piece['key'].value_counts(), fill_value=0) tot = tot.sort_values(ascending=False) print(tot[:10]) # E 368.0 # X 364.0 # L 346.0 # O 343.0 # Q 340.0 # M 338.0 # J 337.0 # F 335.0 # K 334.0 # H 330.0 # dtype: float64","title":"\u5206\u5757\u8bfb\u5165\u6587\u672c\u6587\u4ef6"},{"location":"python/DataAnalysis/ch03/#_3","text":"data = pd.read_csv('../examples/ex5.csv') print(data) # something a b c d message # 0 one 1 2 3.0 4 NaN # 1 two 5 6 NaN 8 world # 2 three 9 10 11.0 12 foo \u4f7f\u7528DataFrame\u7684to_csv\u65b9\u6cd5\uff0c\u5c06\u6570\u636e\u5bfc\u51fa\u4e3a\u9017\u53f7\u5206\u9694\u7684\u6587\u4ef6 data.to_csv('../examples/out.csv') # \u8f93\u51faout.csv\u7684\u5185\u5bb9 # ,something,a,b,c,d,message # 0,one,1,2,3.0,4, # 1,two,5,6,,8,world # 2,three,9,10,11.0,12,foo \u4f7f\u7528DataFrame\u7684to_csv\u65b9\u6cd5\uff0c\u5c06\u6570\u636e\u5bfc\u51fa\u4e3a\u5176\u4ed6\u7684\u5206\u9694\u7b26\u7684\u6587\u4ef6 data.to_csv(sys.stdout, sep='|') # |something|a|b|c|d|message # 0|one|1|2|3.0|4| # 1|two|5|6||8|world # 2|three|9|10|11.0|12|foo data.to_csv(sys.stdout, sep=',') # ,something,a,b,c,d,message # 0,one,1,2,3.0,4, # 1,two,5,6,,8,world # 2,three,9,10,11.0,12,foo data.to_csv(sys.stdout, sep=',', na_rep='NULL') # \u8bbe\u5b9a\u7f3a\u5931\u503c\u5728\u8f93\u51fa\u65f6\u4ee5\u7a7a\u5b57\u7b26\u4e32\u51fa\u73b0 # ,something,a,b,c,d,message # 0,one,1,2,3.0,4,NULL # 1,two,5,6,NULL,8,world # 2,three,9,10,11.0,12,foo data.to_csv(sys.stdout, sep=',', na_rep='NULL', index=False, header=False) # \u4e0d\u8f93\u51fa\u884c\u548c\u5217\u7684\u6807\u7b7e\uff08index\uff0cheader\uff09 # one,1,2,3.0,4,NULL # two,5,6,NULL,8,world # three,9,10,11.0,12,foo data.to_csv(sys.stdout, sep=',', na_rep='NULL', index=False, header=False, columns=['a', 'b', 'c']) # \u6309\u7167\u81ea\u5b9a\u7684\u987a\u5e8f\u8f93\u51fa\u5b50\u96c6 # 1,2,3.0 # 5,6,NULL # 9,10,11.0 Series\u4e5f\u6709to_csv\u65b9\u6cd5 dates = pd.date_range('1/1/2000', periods=7) ts = pd.Series(np.arange(7), index=dates) ts.to_csv('../examples/tseries.csv', header=False) # \u8f93\u51fatseries.csv\u6587\u4ef6\u5185\u5bb9 # 2000-01-01,0 # 2000-01-02,1 # 2000-01-03,2 # 2000-01-04,3 # 2000-01-05,4 # 2000-01-06,5 # 2000-01-07,6","title":"\u5c06\u6570\u636e\u5199\u5165\u6587\u672c\u683c\u5f0f"},{"location":"python/DataAnalysis/ch03/#_4","text":"\u7edd\u5927\u591a\u6570\u7684\u8868\u578b\u6570\u636e\u90fd\u53ef\u4ee5\u4f7f\u7528\u51fd\u6570pandas.read_table\u4ece\u786c\u76d8\u4e2d\u8bfb\u53d6\u3002 \\ \u7136\u800c\uff0c\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\uff0c\u63a5\u6536\u4e00\u4e2a\u5e26\u6709\u4e00\u884c\u6216\u591a\u884c\u9519\u8bef\u7684\u6587\u4ef6\u5e76\u4e0d\u5c11\u89c1\uff0cread_table\u4e5f\u65e0\u6cd5\u89e3\u51b3\u8fd9\u79cd\u60c5\u51b5\u3002 ex7.csv \u6587\u4ef6\u5185\u5bb9 \"a\",\"b\",\"c\" \"1\",\"2\",\"3\" \"1\",\"2\",\"3\" f = open('../examples/ex7.csv') # \u4f7f\u7528Python\u7684\u5185\u5efacsv\u6a21\u5757 reader = csv.reader(f) # \u5c06\u4efb\u4e00\u6253\u5f00\u7684\u6587\u4ef6\u6216\u6587\u4ef6\u578b\u5bf9\u8c61\u4f20\u7ed9csv.reader for line in reader: # # \u904d\u5386reader\uff0c\u4ea7\u751f\u5143\u7ec4\uff0c\u5143\u7ec4\u7684\u503c\u4e3a\u5220\u9664\u4e86\u5f15\u53f7\u7684\u5b57\u7b26 print(line) f.close() # ['a', 'b', 'c'] # ['1', '2', '3'] # ['1', '2', '3'] with open('../examples/ex7.csv') as f: lines = list(csv.reader(f)) # \u9996\u5148\uff0c\u5c06\u6587\u4ef6\u8bfb\u53d6\u4e3a\u884c\u7684\u5217\u8868 header, values = lines[0], lines[1:] # \u5176\u6b21\uff0c\u5c06\u6570\u636e\u62c6\u5206\u4e3a\u5217\u540d\u884c\u548c\u6570\u636e\u884c data_dict = { h: v for h, v in zip(header, zip(*values)) # \u518d\u7136\u540e\uff0c\u4f7f\u7528\u5b57\u5178\u63a8\u5bfc\u5f0f\u548c\u8868\u8fbe\u5f0fzip(*values)\u751f\u6210\u4e00\u4e2a\u5305\u542b\u6570\u636e\u5217\u7684\u5b57\u5178\uff0c\u5b57\u5178\u4e2d\u884c\u8f6c\u7f6e\u6210\u5217 } print(data_dict) # \u8f93\u51fa\u7ed3\u679c # {'a': ('1', '1'), 'b': ('2', '2'), 'c': ('3', '3')} \u5982\u679c\u9700\u6839\u636e\u4e0d\u540c\u7684\u5206\u9694\u7b26\u3001\u5b57\u7b26\u4e32\u5f15\u7528\u7ea6\u5b9a\u6216\u884c\u7ec8\u6b62\u7b26\u5b9a\u4e49\u4e00\u79cd\u65b0\u7684\u683c\u5f0f\u65f6\uff0c\u53ef\u4ee5: \\ \u65b9\u6cd51\uff1a\u4f7f\u7528csv.Dialect\u5b9a\u4e49\u4e00\u4e2a\u7b80\u5355\u7684\u5b50\u7c7b class my_dialect(csv.Dialect): lineterminator = '\\n' delimiter = ';' # \u8fd9\u91cc\u53ea\u80fd\u662f\u4e00\u4e2a\u5b57\u7b26 quotechar = '\"' quoting = csv.QUOTE_MINIMAL f = open('../examples/ex7.csv') reader = csv.reader(f, dialect=my_dialect) for line in reader: # \u904d\u5386reader\uff0c\u4ea7\u751f\u5143\u7ec4\uff0c\u5143\u7ec4\u7684\u503c\u4e3a\u5220\u9664\u4e86\u5f15\u53f7\u7684\u5b57\u7b26 print(line) f.close() # ['a,\"b\",\"c\"'] # ['1,\"2\",\"3\"'] # ['1,\"2\",\"3\"'] \u65b9\u6cd52\uff1a\u76f4\u63a5\u5c06CSV\u65b9\u8a00\u53c2\u6570(dialect)\u4f20\u5165csv.reader\u7684\u5173\u952e\u5b57\u53c2\u6570 \\ \u6bd4\u8f83\u8be6\u7ec6\u7684\u4ecb\u7ecd\u65b9\u8a00\u548c\u5206\u9694\u7b26\uff1ahttps://blog.csdn.net/tcy23456/article/details/85291994 f = open('../examples/ex7.csv') reader = csv.reader(f, delimiter='|') for line in reader: # \u904d\u5386reader\uff0c\u4ea7\u751f\u5143\u7ec4\uff0c\u5143\u7ec4\u7684\u503c\u4e3a\u5220\u9664\u4e86\u5f15\u53f7\u7684\u5b57\u7b26 print(line) f.close() # ['a,\"b\",\"c\"'] # ['1,\"2\",\"3\"'] # ['1,\"2\",\"3\"'] \u5bf9\u4e8e\u5177\u6709\u66f4\u590d\u6742\u6216\u56fa\u5b9a\u7684\u591a\u5b57\u7b26\u5206\u9694\u7b26\u7684\u6587\u4ef6\uff0c\u5c06\u65e0\u6cd5\u4f7f\u7528csv\u6a21\u5757\u3002 \\ \u5728\u6b64\u7c7b\u60c5\u51b5\u4e0b\uff0c\u5c06\u4f7f\u7528\u5b57\u7b26\u4e32\u7684split\u65b9\u6cd5\u6216\u6b63\u5219\u8868\u8fbe\u5f0f\u65b9\u6cd5re.split\u8fdb\u884c\u884c\u62c6\u5206\u548c\u5176\u4ed6\u6e05\u7406\u5de5\u4f5c\u3002 \\ \u9700\u8981\u624b\u52a8\u5199\u5165\u88ab\u5206\u9694\u7684\u6587\u4ef6\u65f6\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528csv.writer\u3002 \\ \u8fd9\u4e2a\u51fd\u6570\u63a5\u6536\u4e00\u4e2a\u5df2\u7ecf\u6253\u5f00\u7684\u53ef\u5199\u5165\u6587\u4ef6\u5bf9\u8c61\u4ee5\u53ca\u548ccsv.reader\u76f8\u540c\u7684CSV\u65b9\u8a00\u3001\u683c\u5f0f\u9009\u9879 with open('../examples/mydata.csv', 'w') as f: writer = csv.writer(f, dialect=my_dialect) writer.writerow(('1', '2', '3')) writer.writerow(('4', '5', '6')) writer.writerow(('7', '8', '9')) writer.writerow(('10', '11', '12')) # mydata.csv \u6587\u4ef6\u5185\u5bb9 # 1;2;3 # 4;5;6 # 7;8;9 # 10;11;12","title":"\u4f7f\u7528\u5206\u9694\u683c\u5f0f"},{"location":"python/DataAnalysis/ch03/#json","text":"obj = \"\"\" { \"name\": \"Wes\", \"places_lived\": [\"United States\", \"Spain\", \"Germany\"], \"pet\": null, \"siblings\": [ { \"name\": \"Scott\", \"age\": 30, \"pets\": [\"Zeus\", \"Zuko\"] }, { \"name\": \"Katie\", \"age\": 38, \"pets\": [\"Sixes\", \"Stache\", \"Cisco\"] } ] } \"\"\" \u5c06JSON\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3aPython\u5f62\u5f0f\u65f6\uff0c\u4f7f\u7528json.loads\u65b9\u6cd5 result = json.loads(obj) print(result) # {'name': 'Wes', 'places_lived': ['United States', 'Spain', 'Germany'], 'pet': None, 'siblings': [{'name': 'Scott', 'age': 30, 'pets': ['Zeus', 'Zuko']}, {'name': 'Katie', 'age': 38, 'pets': ['Sixes', 'Stache', 'Cisco']}]} \u53e6\u4e00\u65b9\u9762\uff0cjson.dumps\u53ef\u4ee5\u5c06Python\u5bf9\u8c61\u8f6c\u6362\u56deJSON asjson = json.dumps(result) print(asjson) # {\"name\": \"Wes\", \"places_lived\": [\"United States\", \"Spain\", \"Germany\"], \"pet\": null, \"siblings\": [{\"name\": \"Scott\", \"age\": 30, \"pets\": [\"Zeus\", \"Zuko\"]}, {\"name\": \"Katie\", \"age\": 38, \"pets\": [\"Sixes\", \"Stache\", \"Cisco\"]}]} \u5c06JSON\u5bf9\u8c61\u6216\u5bf9\u8c61\u5217\u8868\u8f6c\u6362\u4e3aDataFrame\u6216\u5176\u4ed6\u6570\u636e\u7ed3\u6784 \\ \u6bd4\u8f83\u65b9\u4fbf\u7684\u65b9\u5f0f\u662f\u5c06\u5b57\u5178\u6784\u6210\u7684\u5217\u8868\uff08\u4e4b\u524d\u662fJSON\u5bf9\u8c61\uff09\u4f20\u5165DataFrame\u6784\u9020\u51fd\u6570\uff0c\u5e76\u9009\u51fa\u6570\u636e\u5b57\u6bb5\u7684\u5b50\u96c6 siblings = pd.DataFrame(result['siblings'], columns=['name', 'age']) print(siblings) # name age # 0 Scott 30 # 1 Katie 38 pandas.read_json\u53ef\u4ee5\u81ea\u52a8\u5c06JSON\u6570\u636e\u96c6\u6309\u7167\u6307\u5b9a\u6b21\u5e8f\u8f6c\u6362\u4e3aSeries\u6216DataFrame \\ pandas.read_json\u7684\u9ed8\u8ba4\u9009\u9879\u662f\u5047\u8bbeJSON\u6570\u7ec4\u4e2d\u7684\u6bcf\u4e2a\u5bf9\u8c61\u662f\u8868\u91cc\u7684\u4e00\u884c \\ \u8bfb\u53d6\u3001\u64cd\u4f5cJSON\u6570\u636e\uff08\u5305\u62ec\u5d4c\u5957\u8bb0\u5f55\uff09\u7684\u62d3\u5c55\u793a\u4f8b\uff0c\u8bf7\u53c2\u770b\u7b2c7\u7ae0\u7684USDA\u98df\u54c1\u6570\u636e\u5e93\u793a\u4f8b \\ \u4f8b\u5982\u8bfb\u53d6 data = pd.read_json('../examples/example_new.json') data = pd.read_json('../examples/example.json') print(data) # a b c # 0 1 2 3 # 1 4 5 6 # 2 7 8 9 print(data.to_json()) # {\"a\":{\"0\":1,\"1\":4,\"2\":7},\"b\":{\"0\":2,\"1\":5,\"2\":8},\"c\":{\"0\":3,\"1\":6,\"2\":9}} print(data.to_json(orient='records')) # [{\"a\":1,\"b\":2,\"c\":3},{\"a\":4,\"b\":5,\"c\":6},{\"a\":7,\"b\":8,\"c\":9}]","title":"JSON\u6570\u636e"},{"location":"python/DataAnalysis/ch03/#xmlhtml","text":"pandas\u7684\u5185\u5efa\u51fd\u6570read_html\u53ef\u4ee5\u4f7f\u7528lxml\u548cBeautiful Soup\u7b49\u5e93\u5c06HTML\u4e2d\u7684\u8868\u81ea\u52a8\u89e3\u6790\u4e3aDataFrame\u5bf9\u8c61 tables = pd.read_html('../examples/fdic_failed_bank_list.html') print(len(tables)) # 1 failures = tables[0] # //*[@id=\"table\"] print(failures.head()) # \u8bfb\u53d6\u524d5\u884c\u8bb0\u5f55 # Bank Name ... Updated Date # 0 Allied Bank ... November 17, 2016 # 1 The Woodbury Banking Company ... November 17, 2016 # 2 First CornerStone Bank ... September 6, 2016 # 3 Trust Company Bank ... September 6, 2016 # 4 North Milwaukee State Bank ... June 16, 2016 # # [5 rows x 7 columns] close_timestamps = pd.to_datetime(failures['Closing Date']) # \u8ba1\u7b97\u6bcf\u5e74\u94f6\u884c\u5012\u95ed\u7684\u6570\u91cf print(close_timestamps.dt.year.value_counts()) # 2010 157 # 2009 140 # 2011 92 # 2012 51 # 2008 25 # ... # 2004 4 # 2001 4 # 2007 3 # 2003 3 # 2000 2 # Name: Closing Date, Length: 15, dtype: int64","title":"XML\u548cHTML\uff1a\u7f51\u7edc\u6293\u53d6"},{"location":"python/DataAnalysis/ch03/#_5","text":"","title":"\u4e8c\u8fdb\u5236\u683c\u5f0f"},{"location":"python/DataAnalysis/ch03/#web-api","text":"","title":"\u4e0eWeb API\u4ea4\u4e92"},{"location":"python/DataAnalysis/ch03/#_6","text":"","title":"\u4e0e\u6570\u636e\u5e93\u4ea4\u4e92"},{"location":"python/DataAnalysis/ch04/","text":"\u5904\u7406\u7f3a\u5931\u503c import pandas as pd import numpy as np from numpy import nan as NA \u5bf9\u4e8e\u6570\u503c\u578b\u6570\u636e\uff0cpandas\u4f7f\u7528\u6d6e\u70b9\u503cNaN\uff08Not a Number\u6765\u8868\u793a\u7f3a\u5931\u503c\uff09\u3002\\ \u5728pandas\u4e2d\uff0c\u91c7\u7528\u4e86R\u8bed\u8a00\u4e2d\u7684\u7f16\u7a0b\u60ef\u4f8b\uff0c\u5c06\u7f3a\u5931\u503c\u6210\u4e3aNA\uff0c\u610f\u601d\u662fnotavailable\uff08\u4e0d\u53ef\u7528\uff09\u3002\\ Python\u5185\u5efa\u7684None\u503c\u5728\u5bf9\u8c61\u6570\u7ec4\u4e2d\u4e5f\u88ab\u5f53\u4f5cNA\u5904\u7406\u3002\\ NA\u5904\u7406\u65b9\u6cd5\uff1a * dropna:\u6839\u636e\u6bcf\u4e2a\u6807\u7b7e\u7684\u503c\u662f\u5426\u662f\u786e\u5b9e\u6570\u636e\u6765\u7b5b\u9009\u8f74\u6807\u7b7e\uff0c\u5e76\u6839\u636e\u5141\u8bb8\u4e22\u5931\u7684\u6570\u636e\u91cf\u6765\u786e\u5b9a\u9608\u503c * fillna:\u7528\u67d0\u4e9b\u503c\u586b\u5145\u786e\u5b9e\u7684\u6570\u636e\u6216\u4f7f\u7528\u63d2\u503c\u65b9\u6cd5\uff0c\u5982ffill\u6216bfill * isnull:\u8fd4\u56de\u8868\u660e\u54ea\u4e9b\u503c\u662f\u7f3a\u5931\u503c\u7684\u5e03\u5c14\u503c * notnull:\u662fisnull\u7684\u53cd\u51fd\u6570 string_data = pd.Series(['aardvark', 'artichoke', np.nan, 'avocado']) print(string_data) # 0 aardvark # 1 artichoke # 2 NaN # 3 avocado # dtype: object print(string_data.isnull()) # 0 False # 1 False # 2 True # 3 False # dtype: bool string_data[0] = None print(string_data.isnull()) # 0 True # 1 False # 2 True # 3 False # dtype: bool \u8fc7\u6ee4\u7f3a\u5931\u503c \u5904\u7406Series \u5728Series\u4e0a\u4f7f\u7528dropna\uff0c\u5b83\u4f1a\u8fd4\u56deSeries\u4e2d\u6240\u6709\u7684\u975e\u7a7a\u6570\u636e\u53ca\u5176\u7d22\u5f15\u503c data = pd.Series([1, NA, 3.5, NA, 7]) print(data.dropna()) # 0 1.0 # 2 3.5 # 4 7.0 # dtype: float64 print(data[data.notnull()]) # \u4e0e\u4e0a\u9762\u7b49\u4ef7 # 0 1.0 # 2 3.5 # 4 7.0 # dtype: float64 \u5904\u7406DataFrame data = pd.DataFrame( [[1., 6.5, 3.], [1., NA, NA], [NA, NA, NA], [NA, 6.5, 3.]] ) print(data) # 0 1 2 # 0 1.0 6.5 3.0 # 1 1.0 NaN NaN # 2 NaN NaN NaN # 3 NaN 6.5 3.0 cleaned = data.dropna() # dropna\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u4f1a\u5220\u9664\u5305\u542b\u7f3a\u5931\u503c\u7684\u884c print(cleaned) # 0 1 2 # 0 1.0 6.5 3.0 cleaned = data.dropna(how='all') # \u4f20\u5165how='all\u2019\u65f6\uff0c\u5c06\u5220\u9664\u6240\u6709\u503c\u5747\u4e3aNA\u7684\u884c print(cleaned) # 0 1 2 # 0 1.0 6.5 3.0 # 1 1.0 NaN NaN # 3 NaN 6.5 3.0 data[4] = NA print(data) # 0 1 2 4 # 0 1.0 6.5 3.0 NaN # 1 1.0 NaN NaN NaN # 2 NaN NaN NaN NaN # 3 NaN 6.5 3.0 NaN cleaned = data.dropna(axis=1, how='all') # \u5220\u9664\u5168NA\u7684\u5217 print(cleaned) # 0 1 2 # 0 1.0 6.5 3.0 # 1 1.0 NaN NaN # 2 NaN NaN NaN # 3 NaN 6.5 3.0 df = pd.DataFrame(np.random.randn(7, 3)) print(df) # 0 1 2 # 0 -1.069771 -0.777921 0.181956 # 1 -0.399504 -0.641737 -0.946327 # 2 -1.013920 -0.247588 -0.760146 # 3 1.076946 -1.263203 0.494077 # 4 0.460985 -1.241870 0.283006 # 5 1.168149 1.033752 0.900095 # 6 -1.208514 -1.049546 -0.783680 df.iloc[:4, 1] = NA # \u6807\u7b7e1\uff0c\u524d4\u4e2a\u5143\u7d20 df.iloc[:2, 2] = NA # \u6807\u7b7e2\uff0c\u524d2\u4e2a\u5143\u7d20 print(df) # 0 1 2 # 0 -1.069771 NaN NaN # 1 -0.399504 NaN NaN # 2 -1.013920 NaN -0.760146 # 3 1.076946 NaN 0.494077 # 4 0.460985 -1.241870 0.283006 # 5 1.168149 1.033752 0.900095 # 6 -1.208514 -1.049546 -0.783680 cleaned = df.dropna() print(cleaned) # 0 1 2 # 4 0.033663 0.291886 0.736448 # 5 -0.433380 0.397104 1.252005 # 6 -1.999018 0.303866 1.430109 cleaned = df.dropna(thresh=2) # \u4fdd\u75592\u884c\u542bNA\u7684\u89c2\u5bdf\u503c print(cleaned) # 0 1 2 # 2 -1.413976 NaN 0.222274 # 3 -0.644266 NaN 0.324180 # 4 -0.122160 -2.244880 -0.406562 # 5 -0.140326 0.101133 -0.764048 # 6 -1.809141 0.139091 -0.819175 \u8865\u5168\u7f3a\u5931\u503c fillna\u51fd\u6570\u53c2\u6570\uff1a * value\uff1a\u6807\u91cf\u503c\u6216\u5b57\u5178\u578b\u5bf9\u8c61\u7528\u4e8e\u586b\u5145\u7f3a\u5931\u503c * method\uff1a\u63d2\u503c\u65b9\u6cd5\uff0c\u5982\u679c\u6ca1\u6709\u5176\u4ed6\u53c2\u6570\uff0c\u9ed8\u8ba4\u662f'ffill' * axis\uff1a\u9700\u8981\u586b\u5145\u7684\u8f74\uff0c\u9ed8\u8ba4axis=0 * inplace\uff1a\u4fee\u6539\u88ab\u8c03\u7528\u5bf9\u8c61\uff0c\u800c\u4e0d\u662f\u751f\u6210\u4e00\u4e2a\u5907\u4efd * limit\uff1a\u7528\u4e8e\u524d\u5411\u6216\u540e\u5411\u586b\u5145\u65f6\u6700\u5927\u7684\u586b\u5145\u8303\u56f4 df = pd.DataFrame(np.random.randn(7, 3)) df.iloc[:4, 1] = NA # \u6807\u7b7e1\uff0c\u524d4\u4e2a\u5143\u7d20 df.iloc[:2, 2] = NA # \u6807\u7b7e2\uff0c\u524d2\u4e2a\u5143\u7d20 print(df) # 0 1 2 # 0 -0.181196 NaN NaN # 1 -1.657668 NaN NaN # 2 -0.053454 NaN 0.391461 # 3 -0.539307 NaN -0.668400 # 4 -0.433439 0.839713 -0.295273 # 5 0.749930 1.661641 -0.495165 # 6 0.591810 1.017372 0.932367 result = df.fillna(0) # \u8c03\u7528fillna\u65f6\uff0c\u53ef\u4ee5\u4f7f\u7528\u4e00\u4e2a\u5e38\u6570\u6765\u66ff\u4ee3\u7f3a\u5931\u503c print(result) # 0 1 2 # 0 -0.430926 0.000000 0.000000 # 1 0.448061 0.000000 0.000000 # 2 -0.059910 0.000000 -1.532646 # 3 -0.315793 0.000000 -0.196546 # 4 -0.546106 0.135108 -0.332309 # 5 1.083075 0.346070 -0.773104 # 6 -0.186511 1.055337 -1.168303 result = df.fillna({1: 0.5, 2: 0}) # \u8c03\u7528fillna\u65f6\u4f7f\u7528\u5b57\u5178\uff0c\u53ef\u4ee5\u4e3a\u4e0d\u540c\u5217\u8bbe\u5b9a\u4e0d\u540c\u7684\u586b\u5145\u503c print(result) # 0 1 2 # 0 -0.794344 0.500000 0.000000 # 1 -0.960917 0.500000 0.000000 # 2 1.494351 0.500000 0.100878 # 3 -0.554765 0.500000 1.118801 # 4 -0.866117 0.523615 1.217478 # 5 -0.706966 -0.681776 0.797690 # 6 -1.456366 1.205518 -0.402432 fillna\u8fd4\u56de\u7684\u662f\u4e00\u4e2a\u65b0\u7684\u5bf9\u8c61\uff0c\u4f46\u4e5f\u53ef\u4ee5\u4fee\u6539\u5df2\u7ecf\u5b58\u5728\u7684\u5bf9\u8c61 _ = df.fillna(0, inplace=True) # inplace=True\u6307\u5b9a\u5728\u5df2\u6709\u5bf9\u8c61\u4e0a\u76f4\u63a5\u4fee\u6539 print(df) # 0 1 2 # 0 -1.176124 0.000000 0.000000 # 1 0.120458 0.000000 0.000000 # 2 -1.206408 0.000000 0.551693 # 3 0.224563 0.000000 1.145156 # 4 -0.557836 0.081135 -0.075282 # 5 2.378837 -0.876145 1.430386 # 6 -0.152662 1.278364 0.479686 df = pd.DataFrame(np.random.randn(6, 3)) df.iloc[2:, 1] = NA # \u6807\u7b7e1\uff0c\u524d4\u4e2a\u5143\u7d20 df.iloc[4:, 2] = NA # \u6807\u7b7e2\uff0c\u524d2\u4e2a\u5143\u7d20 print(df) # 0 1 2 # 0 1.154788 0.033949 -0.122807 # 1 0.258684 -0.580244 1.636514 # 2 1.503756 NaN -1.224203 # 3 0.824049 NaN -0.364345 # 4 -1.247609 NaN NaN # 5 -1.019980 NaN NaN result = df.fillna(method='ffill') # \u5411\u540e\u586b\u5145 print(result) # 0 1 2 # 0 2.082449 0.398874 0.359772 # 1 0.233129 0.385347 1.953533 # 2 0.396555 0.385347 0.592784 # 3 -0.957249 0.385347 0.169815 # 4 0.854452 0.385347 0.169815 # 5 -0.105982 0.385347 0.169815 result = df.fillna(method='ffill', limit=3) # \u6bcf\u5217\u6700\u591a\u586b3\u4e2a print(result) result = df.fillna(df[0].max()) # \u75280\u5217\u7684\u6700\u5927\u503c\u586b\u5145\u6240\u6709\u7684NA print(result) # 0 1 2 # 0 -0.377697 -0.852891 -0.705489 # 1 -0.611759 -0.013237 -0.295764 # 2 -0.389974 1.057881 1.041957 # 3 -0.016845 1.057881 -1.149954 # 4 1.057881 1.057881 1.057881 # 5 -0.463471 1.057881 1.057881 \u6570\u636e\u8f6c\u6362 import pandas as pd import numpy as np from numpy import nan as NA \u5220\u9664\u91cd\u590d\u503c data = pd.DataFrame( { 'k1': ['one', 'two'] * 3 + ['two'], 'k2': [1, 1, 2, 3, 4, 4, 4] } ) print(data) # \u91cd\u590d\u51fa\u73b02\u6b21\u7684\u8bb0\u5f55\uff1atwo 4 # k1 k2 # 0 one 1 # 1 two 1 # 2 one 2 # 3 two 3 # 4 one 4 # 5 two 4 # 6 two 4 DataFrame\u7684duplicated\u65b9\u6cd5\u8fd4\u56de\u7684\u662f\u4e00\u4e2a\u5e03\u5c14\u503cSeries\uff0c\u8fd9\u4e2aSeries\u53cd\u6620\u7684\u662f\u6bcf\u4e00\u884c\u662f\u5426\u5b58\u5728\u91cd\u590d\uff08\u4e0e\u4e4b\u524d\u51fa\u73b0\u8fc7\u7684\u884c\u76f8\u540c\uff09\u60c5\u51b5 \\ \u9ed8\u8ba4\u662f\u5bf9\u5217\u8fdb\u884c\u64cd\u4f5c print(data.duplicated()) # 0 False # 1 False # 2 False # 3 False # 4 False # 5 False # 6 True # dtype: bool drop_duplicates\u8fd4\u56de\u7684\u662fDataFrame\uff0c\u5185\u5bb9\u662fduplicated\u8fd4\u56de\u6570\u7ec4\u4e2d\u4e3aFalse\u7684\u90e8\u5206 \\ \u9ed8\u8ba4\u662f\u5bf9\u5217\u8fdb\u884c\u64cd\u4f5c print(data.drop_duplicates()) # k1 k2 # 0 one 1 # 1 two 1 # 2 one 2 # 3 two 3 # 4 one 4 # 5 two 4 \u53ef\u4ee5\u6307\u5b9a\u6570\u636e\u7684\u4efb\u4f55\u5b50\u96c6\u6765\u68c0\u6d4b\u662f\u5426\u6709\u91cd\u590d\u3002\\ \u5047\u8bbe\u6211\u4eec\u6709\u4e00\u4e2a\u989d\u5916\u7684\u5217\uff0c\u5e76\u60f3\u57fa\u4e8e\u2019k1\u2019\u5217\u53bb\u9664\u91cd\u590d\u503c data['v1'] = range(7) print(data) # k1 k2 v1 # 0 one 1 0 # 1 two 1 1 # 2 one 2 2 # 3 two 3 3 # 4 one 4 4 # 5 two 4 5 # 6 two 4 6 print(data.drop_duplicates(['k1'])) # \u4fdd\u7559\u7b2c\u4e00\u4e2a\u89c2\u6d4b\u5230\u7684one\u548ctwo\uff0c\u5176\u4f59\u4e22\u5f03 # k1 k2 v1 # 0 one 1 0 # 1 two 1 1 duplicated\u548cdrop_duplicates\u9ed8\u8ba4\u90fd\u662f\u4fdd\u7559\u7b2c\u4e00\u4e2a\u89c2\u6d4b\u5230\u7684\u503c\u3002\\ \u4f20\u5165\u53c2\u6570keep='last\u2019\u5c06\u4f1a\u8fd4\u56de\u6700\u540e\u4e00\u4e2a\u3002 print(data.drop_duplicates(['k1'], keep='last')) # \u4fdd\u7559\u6700\u540e\u4e00\u4e2a\u89c2\u6d4b\u5230\u7684one\u548ctwo # k1 k2 v1 # 4 one 4 4 # 6 two 4 6 \u4f7f\u7528\u51fd\u6570\u6216\u6620\u5c04\u8fdb\u884c\u6570\u636e\u8f6c\u6362 \u4f7f\u7528map\u662f\u4e00\u79cd\u53ef\u4ee5\u4fbf\u6377\u6267\u884c\u6309\u5143\u7d20\u8f6c\u6362\u53ca\u5176\u4ed6\u6e05\u6d17\u76f8\u5173\u64cd\u4f5c\u7684\u65b9\u6cd5\u3002 data = pd.DataFrame( { 'food': ['bacon', 'pulled pork', 'bacon', 'Pastrami', 'corned beef', 'Bacon', 'pastrami', 'honey ham', 'nova lox'], 'ounces': [4, 3, 12, 6, 7.5, 8, 3, 5, 6] } ) print(data) # food ounces # 0 bacon 4.0 # 1 pulled pork 3.0 # 2 bacon 12.0 # 3 Pastrami 6.0 # 4 corned beef 7.5 # 5 Bacon 8.0 # 6 pastrami 3.0 # 7 honey ham 5.0 # 8 nova lox 6.0 \u6dfb\u52a0\u4e00\u5217\u7528\u4e8e\u8868\u660e\u6bcf\u79cd\u98df\u7269\u7684\u52a8\u7269\u8089\u7c7b\u578b\u3002\u5148\u521b\u5efa\u4e00\u4e2a\u98df\u7269\u548c\u8089\u7c7b\u7684\u6620\u5c04 meat_to_animal = { 'bacon': 'pig', 'pulled pork': 'pig', 'pastrami': 'cow', 'corned beef': 'cow', 'honey ham': 'pig', 'nova lox': 'salmon' } lowercased = data['food'].str.lower() # \u4f7f\u7528Series\u7684str.lower\u65b9\u6cd5\u5c06food\u7684\u6bcf\u4e2a\u503c\u90fd\u8f6c\u6362\u4e3a\u5c0f\u5199 print(lowercased) # 0 bacon # 1 pulled pork # 2 bacon # 3 pastrami # 4 corned beef # 5 bacon # 6 pastrami # 7 honey ham # 8 nova lox # Name: food, dtype: object data['animal'] = lowercased.map(meat_to_animal) print(data) # food ounces animal # 0 bacon 4.0 pig # 1 pulled pork 3.0 pig # 2 bacon 12.0 pig # 3 Pastrami 6.0 cow # 4 corned beef 7.5 cow # 5 Bacon 8.0 pig # 6 pastrami 3.0 cow # 7 honey ham 5.0 pig # 8 nova lox 6.0 salmon \u4e5f\u53ef\u4ee5\u4f20\u5165\u4e00\u4e2a\u51fd\u6570\uff0c\u5b8c\u6210\u4e0a\u9762\u6240\u6709\u529f\u80fd data = pd.DataFrame( { 'food': ['bacon', 'pulled pork', 'bacon', 'Pastrami', 'corned beef', 'Bacon', 'pastrami', 'honey ham', 'nova lox'], 'ounces': [4, 3, 12, 6, 7.5, 8, 3, 5, 6] } ) result = data['food'].map(lambda x: meat_to_animal[x.lower()]) print(result) # 0 pig # 1 pig # 2 pig # 3 cow # 4 cow # 5 pig # 6 cow # 7 pig # 8 salmon # Name: food, dtype: object \u66ff\u4ee3\u503c \u4f7f\u7528fillna\u586b\u5145\u7f3a\u5931\u503c\u662f\u901a\u7528\u503c\u66ff\u6362\u7684\u7279\u6b8a\u6848\u4f8b\u3002\\ map\u53ef\u4ee5\u7528\u6765\u4fee\u6539\u4e00\u4e2a\u5bf9\u8c61\u4e2d\u7684\u5b50\u96c6\u7684\u503c\uff0c\u4f46\u662freplace\u63d0\u4f9b\u4e86\u66f4\u4e3a\u7b80\u5355\u7075\u6d3b\u7684\u5b9e\u73b0\\ data.replace\u65b9\u6cd5\u4e0edata.str.replace\u65b9\u6cd5\u662f\u4e0d\u540c\u7684\uff0cdata.str.replace\u662f\u5bf9\u5b57\u7b26\u4e32\u8fdb\u884c\u6309\u5143\u7d20\u66ff\u4ee3\u7684\u3002\\ \\ \u4e0b\u9762\u7684Series\uff0c-999\u53ef\u80fd\u662f\u7f3a\u5931\u503c\u7684\u6807\u8bc6\u3002\\ \u5982\u679c\u8981\u4f7f\u7528NA\u6765\u66ff\u4ee3\u8fd9\u4e9b\u503c\uff0c\u53ef\u4ee5\u4f7f\u7528replace\u65b9\u6cd5\u751f\u6210\u65b0\u7684Series\uff08\u9664\u975e\u4f20\u5165\u4e86inplace=True\uff09 data = pd.Series([1., -999., 2., -999., -1000., 3.]) print(data) # 0 1.0 # 1 -999.0 # 2 2.0 # 3 -999.0 # 4 -1000.0 # 5 3.0 # dtype: float64 result = data.replace(-999, np.nan) print(result) # 0 1.0 # 1 NaN # 2 2.0 # 3 NaN # 4 -1000.0 # 5 3.0 # dtype: float64 \u8981\u5c06\u4e0d\u540c\u7684\u503c\u66ff\u6362\u4e3a\u4e0d\u540c\u7684\u503c\uff0c\u53ef\u4ee5\u4f20\u5165\u66ff\u4ee3\u503c\u7684\u5217\u8868 result = data.replace([-999, -1000], [np.nan, 0]) print(result) # 0 1.0 # 1 NaN # 2 2.0 # 3 NaN # 4 0.0 # 5 3.0 # dtype: float64 \u4e5f\u53ef\u4ee5\u4f20\u5165\u66ff\u4ee3\u503c\u7684\u5b57\u5178 result = data.replace({-999: np.nan, -1000: 0}) print(result) # 0 1.0 # 1 NaN # 2 2.0 # 3 NaN # 4 0.0 # 5 3.0 # dtype: float64 \u91cd\u547d\u540d\u8f74\u7d22\u5f15 \u548cSeries\u4e2d\u503c\u66ff\u6362\u7c7b\u4f3c\uff0c\u53ef\u4ee5\u901a\u8fc7\u51fd\u6570\u6216\u6620\u5c04\u5bf9\u8f74\u6807\u7b7e\u8fdb\u884c\u7c7b\u4f3c\u7684\u8f6c\u6362\uff0c\u751f\u6210\u65b0\u7684\u4e14\u5e26\u6709\u4e0d\u540c\u6807\u7b7e\u7684\u5bf9\u8c61 data = pd.DataFrame( np.arange(12).reshape((3, 4)), index=['Ohio', 'Colorado', 'New York'], columns=['one', 'two', 'three', 'four'] ) print(data) # one two three four # Ohio 0 1 2 3 # Colorado 4 5 6 7 # New York 8 9 10 11 \u4e0eSeries\u7c7b\u4f3c\uff0c\u8f74\u7d22\u5f15\u4e5f\u6709\u4e00\u4e2amap\u65b9\u6cd5 transform = lambda x: x[:4].upper() # \u622a\u53d6index\u7684\u524d\u56db\u4f4d\u5e76\u8f6c\u5316\u4e3a\u5927\u5199\u683c\u5f0f result = data.index.map(transform) print(result) # Index(['OHIO', 'COLO', 'NEW '], dtype='object') \u8d4b\u503c\u7ed9index\uff0c\u4fee\u6539DataFrame data.index = data.index.map(transform) print(data) # one two three four # OHIO 0 1 2 3 # COLO 4 5 6 7 # NEW 8 9 10 11 \u521b\u5efa\u6570\u636e\u96c6\u8f6c\u6362\u540e\u7684\u7248\u672c\uff0c\u5e76\u4e14\u4e0d\u4fee\u6539\u539f\u6709\u7684\u6570\u636e\u96c6\uff0c\u4e00\u4e2a\u6709\u7528\u7684\u65b9\u6cd5\u662frename result = data.rename(index=str.title, columns=str.upper) print(result) # ONE TWO THREE FOUR # Ohio 0 1 2 3 # Colo 4 5 6 7 # New 8 9 10 11 print(data) # \u539f\u6709\u7684\u6570\u636e\u96c6\u672a\u88ab\u4fee\u6539 # one two three four # OHIO 0 1 2 3 # COLO 4 5 6 7 # NEW 8 9 10 11 rename\u53ef\u4ee5\u7ed3\u5408\u5b57\u5178\u578b\u5bf9\u8c61\u4f7f\u7528\uff0c\u4e3a\u8f74\u6807\u7b7e\u7684\u5b50\u96c6\u63d0\u4f9b\u65b0\u7684\u503c result = data.rename(index={'OHIO': 'INDIANA'}, columns={'three': 'peekaboo'}) print(result) # one two peekaboo four # INDIANA 0 1 2 3 # COLO 4 5 6 7 # NEW 8 9 10 11 \u5982\u679c\u8981\u4fee\u6539\u539f\u6709\u7684\u6570\u636e\u96c6\uff0c\u4f20\u5165inplace=True data.rename(index={'OHIO': 'INDIANA'}, columns={'three': 'peekaboo'}, inplace=True) print(data) # one two peekaboo four # INDIANA 0 1 2 3 # COLO 4 5 6 7 # NEW 8 9 10 11 \u79bb\u6563\u5316\u548c\u5206\u7bb1 \u8fde\u7eed\u503c\u7ecf\u5e38\u9700\u8981\u79bb\u6563\u5316\uff0c\u6216\u8005\u5206\u79bb\u6210\u201d\u7bb1\u5b50\u201c\u8fdb\u884c\u5206\u6790\u3002\\ \\ \u5047\u8bbe\u6709\u4e00\u7ec4\u4eba\u7fa4\u7684\u6570\u636e\uff0c\u60f3\u5c06\u4ed6\u4eec\u8fdb\u884c\u5206\u7ec4\uff0c\u653e\u5165\u79bb\u6563\u7684\u5e74\u9f84\u6846\u4e2d\u3002 ages = [20, 22, 25, 27, 21, 23, 37, 31, 61, 45, 41, 32] \u5c06\u8fd9\u4e9b\u5e74\u9f84\u5206\u4e3a18\uff5e25\u300126\uff5e35\u300136\uff5e60\u4ee5\u53ca61\u53ca\u4ee5\u4e0a\u7b49\u82e5\u5e72\u7ec4\uff0c\u4f7f\u7528pandas\u4e2d\u7684cut\u3002 bins = [18, 25, 35, 60, 100] cats = pd.cut(ages, bins) print(cats) # [(18, 25], (18, 25], (18, 25], (25, 35], (18, 25], ..., (25, 35], (60, 100], (35, 60], (35, 60], (25, 35]] # Length: 12 # Categories (4, interval[int64, right]): [(18, 25] < (25, 35] < (35, 60] < (60, 100]] pandas\u8fd4\u56de\u7684\u5bf9\u8c61\u662f\u4e00\u4e2a\u7279\u6b8a\u7684Categorical\u5bf9\u8c61\u3002\\ \u4f60\u770b\u5230\u7684\u8f93\u51fa\u63cf\u8ff0\u4e86\u7531pandas.cut\u8ba1\u7b97\u51fa\u7684\u7bb1\u3002\\ \u4f60\u53ef\u4ee5\u5c06\u5b83\u5f53\u4f5c\u4e00\u4e2a\u8868\u793a\u7bb1\u540d\u7684\u5b57\u7b26\u4e32\u6570\u7ec4\uff1b\u5b83\u5728\u5185\u90e8\u5305\u542b\u4e00\u4e2acategories\uff08\u7c7b\u522b\uff09\u6570\u7ec4\uff0c\u5b83\u6307\u5b9a\u4e86\u4e0d\u540c\u7684\u7c7b\u522b\u540d\u79f0\u4ee5\u53cacodes\u5c5e\u6027\u4e2d\u7684ages\uff08\u5e74\u9f84\uff09\u6570\u636e\u6807\u7b7e print(cats.categories) # \u56db\u4e2a\u533a\u95f4\u7ec4 # IntervalIndex([(18, 25], (25, 35], (35, 60], (60, 100]], dtype='interval[int64, right]') print(cats.codes) # 61\u5c81\u843d\u5728\u7b2c3\u7ec4\uff08\u7ec4\u7f16\u53f7\u4ece0\u5f00\u59cb\uff09 # [0 0 0 1 0 0 2 1 3 2 2 1] \u6ce8\u610f\uff0cpd.value_counts(cats)\u662f\u5bf9pandas.cut\u7684\u7ed3\u679c\u4e2d\u7684\u7bb1\u6570\u91cf\u7684\u8ba1\u6570 result = pd.value_counts(cats) print(result) # (18, 25] 5 # (25, 35] 3 # (35, 60] 3 # (60, 100] 1 # dtype: int64 \u4e0e\u533a\u95f4\u7684\u6570\u5b66\u7b26\u53f7\u4e00\u81f4\uff0c\u5c0f\u62ec\u53f7\u8868\u793a\u8fb9\u662f\u5f00\u653e\u7684\uff0c\u4e2d\u62ec\u53f7\u8868\u793a\u5b83\u662f\u5c01\u95ed\u7684\uff08\u5305\u62ec\u8fb9\uff09\u3002\\ \u53ef\u4ee5\u901a\u8fc7\u4f20\u9012right=False\u6765\u6539\u53d8\u54ea\u4e00\u8fb9\u662f\u5c01\u95ed\u7684\u3002\u9ed8\u8ba4right=True\u3002 result = pd.cut(ages, [18, 26, 36, 61, 100], right=False) print(result) # [[18, 26), [18, 26), [18, 26), [26, 36), [18, 26), ..., [26, 36), [61, 100), [36, 61), [36, 61), [26, 36)] # Length: 12 # Categories (4, interval[int64, left]): [[18, 26) < [26, 36) < [36, 61) < [61, 100)] \u901a\u8fc7\u5411labels\u9009\u9879\u4f20\u9012\u4e00\u4e2a\u5217\u8868\u6216\u6570\u7ec4\u6765\u4f20\u5165\u81ea\u5b9a\u4e49\u7684\u7bb1\u540d group_name = ['Youth', 'YoungAdult', 'MiddleAged', 'Senior'] result = pd.cut(ages, bins, labels=group_name) print(result) # ['Youth', 'Youth', 'Youth', 'YoungAdult', 'Youth', ..., 'YoungAdult', 'Senior', 'MiddleAged', 'MiddleAged', 'YoungAdult'] # Length: 12 # Categories (4, object): ['Youth' < 'YoungAdult' < 'MiddleAged' < 'Senior'] result = pd.value_counts(pd.cut(ages, bins, labels=group_name)) # \u6807\u7b7e\u8f93\u51fa print(result) # Youth 5 # YoungAdult 3 # MiddleAged 3 # Senior 1 # dtype: int64 result = pd.value_counts(pd.cut(ages, bins)) # \u533a\u95f4\u8f93\u51fa print(result) # (18, 25] 5 # (25, 35] 3 # (35, 60] 3 # (60, 100] 1 # dtype: int64 \u5982\u679c\u4f20\u7ed9cut\u6574\u6570\u4e2a\u7684\u7bb1\u6765\u4ee3\u66ff\u663e\u5f0f\u7684\u7bb1\u8fb9\uff0cpandas\u5c06\u6839\u636e\u6570\u636e\u4e2d\u7684\u6700\u5c0f\u503c\u548c\u6700\u5927\u503c\u8ba1\u7b97\u51fa\u7b49\u957f\u7684\u7bb1\u3002\\ \u4e0b\u9762\u7684\u4f8b\u5b50\u662f\u8003\u8651\u4e00\u4e9b\u5747\u5300\u5206\u5e03\u7684\u6570\u636e\u88ab\u5207\u6210\u56db\u4efd\u7684\u60c5\u51b5\u3002 data = np.random.rand(20) result = pd.cut(data, 4, precision=2) # precision=2\u7684\u9009\u9879\u5c06\u5341\u8fdb\u5236\u7cbe\u5ea6\u9650\u5236\u5728\u4e24\u4f4d\u3002 print(result) # [(0.44, 0.66], (0.0063, 0.23], (0.23, 0.44], (0.0063, 0.23], (0.23, 0.44], ..., (0.23, 0.44], (0.0063, 0.23], (0.23, 0.44], (0.66, 0.88], (0.23, 0.44]] # Length: 20 # Categories (4, interval[float64, right]): [(0.0063, 0.23] < (0.23, 0.44] < (0.44, 0.66] < (0.66, 0.88]] qcut\u662f\u4e00\u4e2a\u4e0e\u5206\u7bb1\u5bc6\u5207\u76f8\u5173\u7684\u51fd\u6570\uff0c\u5b83\u57fa\u4e8e\u6837\u672c\u5206\u4f4d\u6570\u8fdb\u884c\u5206\u7bb1\u3002\\ \u53d6\u51b3\u4e8e\u6570\u636e\u7684\u5206\u5e03\uff0c\u4f7f\u7528cut\u901a\u5e38\u4e0d\u4f1a\u4f7f\u6bcf\u4e2a\u7bb1\u5177\u6709\u76f8\u540c\u6570\u636e\u91cf\u7684\u6570\u636e\u70b9\u3002\\ \u7531\u4e8eqcut\u4f7f\u7528\u6837\u672c\u7684\u5206\u4f4d\u6570\uff0c\u4f60\u53ef\u4ee5\u901a\u8fc7qcut\u83b7\u5f97\u7b49\u957f\u7684\u7bb1 data = np.random.randn(1000) # \u6b63\u6001\u5206\u5e03 cats = pd.qcut(data, 4) # \u5207\u62104\u4efd print(cats) # [(-0.00329, 0.644], (-0.00329, 0.644], (-0.659, -0.00329], (-0.659, -0.00329], (0.644, 3.468], ..., (0.644, 3.468], (-3.9619999999999997, -0.659], (-3.9619999999999997, -0.659], (-0.00329, 0.644], (-0.00329, 0.644]] # Length: 1000 # Categories (4, interval[float64, right]): [(-3.9619999999999997, -0.659] < (-0.659, -0.00329] < (-0.00329, 0.644] < (0.644, 3.468]] result = pd.value_counts(cats) print(result) # (-3.9619999999999997, -0.659] 250 # (-0.659, -0.00329] 250 # (-0.00329, 0.644] 250 # (0.644, 3.468] 250 # dtype: int64 \u4e0ecut\u7c7b\u4f3c\uff0c\u53ef\u4ee5\u4f20\u5165\u81ea\u5b9a\u4e49\u7684\u5206\u4f4d\u6570\uff080\u548c1\u4e4b\u95f4\u7684\u6570\u636e\uff0c\u5305\u62ec\u8fb9\uff09 result = pd.qcut(data, [0, 0.1, 0.5, 0.9, 1.]) print(result) # [(-0.00329, 1.234], (-0.00329, 1.234], (-1.321, -0.00329], (-1.321, -0.00329], (-0.00329, 1.234], ..., (-0.00329, 1.234], (-1.321, -0.00329], (-1.321, -0.00329], (-0.00329, 1.234], (-0.00329, 1.234]] # Length: 1000 # Categories (4, interval[float64, right]): [(-3.9619999999999997, -1.321] < (-1.321, -0.00329] < (-0.00329, 1.234] < (1.234, 3.468]] \u68c0\u6d4b\u548c\u8fc7\u6ee4\u5f02\u5e38\u503c \u8fc7\u6ee4\u6216\u8f6c\u6362\u5f02\u5e38\u503c\u5728\u5f88\u5927\u7a0b\u5ea6\u4e0a\u662f\u5e94\u7528\u6570\u7ec4\u64cd\u4f5c\u7684\u4e8b\u60c5\u3002\\ \\ \u8003\u8651\u4e00\u4e2a\u5177\u6709\u6b63\u6001\u5206\u5e03\u6570\u636e\u7684DataFrame data = pd.DataFrame(np.random.randn(1000, 4)) print(data.describe()) # 0 1 2 3 # count 1000.000000 1000.000000 1000.000000 1000.000000 # mean 0.008124 -0.008050 -0.013403 -0.008261 # std 0.979236 0.992982 0.998819 1.038760 # min -3.231914 -3.441270 -3.345210 -4.320565 # 25% -0.634801 -0.599852 -0.656481 -0.677611 # 50% -0.033252 0.000060 -0.040634 -0.015463 # 75% 0.649340 0.644312 0.678101 0.683849 # max 3.292099 2.758754 2.911447 3.371729 \u627e\u51fa\u4e00\u5217\u4e2d\u7edd\u5bf9\u503c\u5927\u4e8e\u4e09\u7684\u503c col = data[2] result = col[np.abs(col) > 3] print(result) # 519 -3.035355 # 536 -3.345210 # Name: 2, dtype: float64 \u9009\u51fa\u6240\u6709\u503c\u5927\u4e8e3\u6216\u5c0f\u4e8e-3\u7684\u884c\uff0c\u53ef\u4ee5\u5bf9\u5e03\u5c14\u503cDataFrame\u4f7f\u7528any\u65b9\u6cd5 result = data[(np.abs(data) > 3).any(1)] print(result) # 0 1 2 3 # 116 -0.080907 -3.441270 -0.163263 0.392800 # 139 -1.294440 1.828397 1.178897 -3.469466 # 241 -0.486292 0.150443 0.264172 -3.013440 # 295 3.292099 -0.339284 0.732829 -0.475202 # 355 0.307577 -3.053322 0.967497 0.896363 # 359 3.264981 -1.172096 0.207622 -0.281803 # 519 -0.448987 1.623843 -3.035355 -0.436833 # 533 -1.022616 -0.212597 1.030969 3.371729 # 536 1.067598 -1.306839 -3.345210 0.620834 # 541 -0.952760 -2.157970 -0.403199 -4.320565 # 690 0.006821 -3.104117 0.484881 -0.132613 # 750 -3.231914 1.017712 0.070430 0.631447 # 771 -3.007622 0.257960 -0.118179 -1.283365 # 976 1.684760 -0.003295 -0.249843 3.169371 \u6839\u636e\u8fd9\u4e9b\u6807\u51c6\u6765\u8bbe\u7f6e\u6765\u9650\u5b9a\u503c\uff0c\u4e0b\u9762\u4ee3\u7801\u9650\u5236\u4e86-3\u52303\u4e4b\u95f4\u7684\u6570\u503c \\ \u8bed\u53e5np.sign(data)\u6839\u636e\u6570\u636e\u4e2d\u7684\u503c\u7684\u6b63\u8d1f\u5206\u522b\u751f\u62101\u548c-1\u7684\u6570\u503c result = data[(np.abs(data) > 3)] = np.sign(data) * 3 print(result.describe()) # 0 1 2 3 # count 1000.000000 1000.000000 1000.000000 1000.000000 # mean -0.036000 0.000000 -0.084000 -0.048000 # std 3.001285 3.001501 3.000324 3.001117 # min -3.000000 -3.000000 -3.000000 -3.000000 # 25% -3.000000 -3.000000 -3.000000 -3.000000 # 50% -3.000000 0.000000 -3.000000 -3.000000 # 75% 3.000000 3.000000 3.000000 3.000000 # max 3.000000 3.000000 3.000000 3.000000 print(result.head()) # 0 1 2 3 # 0 -3.0 3.0 -3.0 -3.0 # 1 -3.0 -3.0 -3.0 -3.0 # 2 3.0 3.0 -3.0 3.0 # 3 3.0 -3.0 3.0 -3.0 # 4 3.0 -3.0 -3.0 -3.0 \u7f6e\u6362\u548c\u968f\u673a\u62bd\u6837 \u4f7f\u7528numpy.random.permutation\u5bf9DataFrame\u4e2d\u7684Series\u6216\u884c\u8fdb\u884c\u7f6e\u6362\uff08\u968f\u673a\u91cd\u6392\u5e8f\uff09\u3002\\ \u5728\u8c03\u7528permutation\u65f6\u6839\u636e\u4f60\u60f3\u8981\u7684\u8f74\u957f\u5ea6\u53ef\u4ee5\u4ea7\u751f\u4e00\u4e2a\u8868\u793a\u65b0\u987a\u5e8f\u7684\u6574\u6570\u6570\u7ec4 df = pd.DataFrame(np.arange(5 * 4).reshape((5, 4))) sampler = np.random.permutation(5) print(sampler) # \u8fd4\u56dearray # [1 4 3 0 2] print(df) # 0 1 2 3 # 0 0 1 2 3 # 1 4 5 6 7 # 2 8 9 10 11 # 3 12 13 14 15 # 4 16 17 18 19 \u4e0a\u9762\u8fd4\u56de\u7684sampler\u6574\u6570\u6570\u7ec4[1 4 3 0 2]\u7528\u5728\u57fa\u4e8eiloc\u7684\u7d22\u5f15\u6216\u7b49\u4ef7\u7684take\u51fd\u6570\u4e2d\uff0c\u91cd\u65b0\u6392\u5217\u884c\u987a\u5e8f print(df.take(sampler)) # 0 1 2 3 # 1 4 5 6 7 # 4 16 17 18 19 # 3 12 13 14 15 # 0 0 1 2 3 # 2 8 9 10 11 \u9009\u51fa\u4e00\u4e2a\u4e0d\u542b\u6709\u66ff\u4ee3\u503c\u7684\u968f\u673a\u5b50\u96c6\uff0c\u53ef\u4ee5\u4f7f\u7528Series\u548cDataFrame\u7684sample\u65b9\u6cd5 result = df.sample(n=3) print(result) # 0 1 2 3 # 0 0 1 2 3 # 2 8 9 10 11 # 1 4 5 6 7 \u8981\u751f\u6210\u4e00\u4e2a\u5e26\u6709\u66ff\u4ee3\u503c\u7684\u6837\u672c\uff08\u5141\u8bb8\u6709\u91cd\u590d\u9009\u62e9\uff09\uff0c\u5c06replace=True\u4f20\u5165sample\u65b9\u6cd5 choice = pd.Series([5, 7, -1, 6, 4]) draws = choice.sample(n=10, replace=True) print(choice) # 0 5 # 1 7 # 2 -1 # 3 6 # 4 4 # dtype: int64 print(draws) # 4 4 # 0 5 # 0 5 # 3 6 # 4 4 # 0 5 # 1 7 # 3 6 # 2 -1 # 0 5 # dtype: int64 \u8ba1\u7b97\u6307\u6807/\u865a\u62df\u53d8\u91cf \u5c06\u5206\u7c7b\u53d8\u91cf\u8f6c\u6362\u4e3a\u201c\u865a\u62df\u201d\u6216\u201c\u6307\u6807\u201d\u77e9\u9635\u662f\u53e6\u4e00\u79cd\u7528\u4e8e\u7edf\u8ba1\u5efa\u6a21\u6216\u673a\u5668\u5b66\u4e60\u7684\u8f6c\u6362\u64cd\u4f5c\u3002\\ \u5982\u679cDataFrame\u4e2d\u7684\u4e00\u5217\u6709k\u4e2a\u4e0d\u540c\u7684\u503c\uff0c\u5219\u53ef\u4ee5\u884d\u751f\u4e00\u4e2ak\u5217\u7684\u503c\u4e3a1\u548c0\u7684\u77e9\u9635\u6216DataFrame\u3002\\ pandas\u6709\u4e00\u4e2aget_dummies\u51fd\u6570\u7528\u4e8e\u5b9e\u73b0\u8be5\u529f\u80fd df = pd.DataFrame( { 'key': ['b', 'b', 'a', 'c', 'a', 'b'], 'data1': range(6) } ) print(df) # key data1 # 0 b 0 # 1 b 1 # 2 a 2 # 3 c 3 # 4 a 4 # 5 b 5 \u5728\u6307\u6807DataFrame\u7684\u5217\u4e0a\u52a0\u5165\u524d\u7f00\uff0c\u7136\u540e\u4e0e\u5176\u4ed6\u6570\u636e\u5408\u5e76\u3002\u5728get_dummies\u65b9\u6cd5\u4e2d\u6709\u4e00\u4e2a\u524d\u7f00\u53c2\u6570\u7528\u4e8e\u5b9e\u73b0\u8be5\u529f\u80fd \\ \u901a\u8fc7get_dummies\u65b9\u6cd5\uff0c\u628a\u4e0a\u9762df\u6570\u636e\u6309\u7167key\u8fdb\u884c\u4e86\u5206\u7ec4\uff0c\u5e76\u901a\u8fc7\u4e0d\u540c\u5217\u6765\u5c55\u73b0\u5206\u7ec4\u540e\u7684\u5bf9\u5e94\u5173\u7cfb\u3002\u4f8b\u5982\uff0ckey\u5217\u7684a\uff0c\u5bf9\u5e94\u503c2\u548c4 dummies = pd.get_dummies(df['key'], prefix='key') print(dummies) # key_a key_b key_c # 0 0 1 0 # 1 0 1 0 # 2 1 0 0 # 3 0 0 1 # 4 1 0 0 # 5 0 1 0 df_with_dummy = df[['data1']].join(dummies) print(df_with_dummy) # data1 key_a key_b key_c # 0 0 0 1 0 # 1 1 0 1 0 # 2 2 1 0 0 # 3 3 0 0 1 # 4 4 1 0 0 # 5 5 0 1 0 \u66f4\u4e3a\u590d\u6742\u7684\u60c5\u51b5\uff0cDataFrame\u4e2d\u7684\u4e00\u884c\u5c5e\u4e8e\u591a\u4e2a\u7c7b\u522b\u3002 \u4ee5MovieLens\u76841M\u6570\u636e\u96c6\u4e3a\u4f8b\u3002 \u589e\u52a0\u53c2\u6570 encoding='unicode_escape'\u907f\u514d\u51fa\u73b0\u4e0b\u9762\u7684\u9519\u8bef\uff1a * UnicodeDecodeError: 'utf-8' codec can't decode byte 0xe9 in position 3114: invalid continuation byte \u589e\u52a0\u53c2\u6570 engine='python'\u907f\u514d\u51fa\u73b0\u4e0b\u9762\u7684\u9519\u8bef\uff1a * ParserWarning: Falling back to the 'python' engine because the 'c' engine does not support regex separators * (separators > 1 char and different from '\\s+' are interpreted as regex); * you can avoid this warning by specifying engine='python'. mnames = ['movie_id', 'title', 'genres'] movies = pd.read_table( '../datasets/movielens/movies.dat', sep='::', header=None, names=mnames, encoding='unicode_escape', engine='python' ) print(movies[:10]) # movie_id title genres # 0 1 Toy Story (1995) Animation|Children's|Comedy # 1 2 Jumanji (1995) Adventure|Children's|Fantasy # 2 3 Grumpier Old Men (1995) Comedy|Romance # 3 4 Waiting to Exhale (1995) Comedy|Drama # 4 5 Father of the Bride Part II (1995) Comedy # 5 6 Heat (1995) Action|Crime|Thriller # 6 7 Sabrina (1995) Comedy|Romance # 7 8 Tom and Huck (1995) Adventure|Children's # 8 9 Sudden Death (1995) Action # 9 10 GoldenEye (1995) Action|Adventure|Thriller \u4e3a\u6bcf\u4e2a\u7535\u5f71\u6d41\u6d3e\u6dfb\u52a0\u6307\u6807\u53d8\u91cf\u9700\u8981\u8fdb\u884c\u4e00\u4e9b\u6570\u636e\u5904\u7406\u3002 \\ \u9996\u5148\uff0c\u6211\u4eec\u4ece\u6570\u636e\u96c6\u4e2d\u63d0\u53d6\u51fa\u6240\u6709\u4e0d\u540c\u7684\u6d41\u6d3e\u7684\u5217\u8868\u3002 all_genres = [] for x in movies.genres: all_genres.extend(x.split('|')) genres = pd.unique(all_genres) print(genres) # ['Animation' \"Children's\" 'Comedy' 'Adventure' 'Fantasy' 'Romance' 'Drama' # 'Action' 'Crime' 'Thriller' 'Horror' 'Sci-Fi' 'Documentary' 'War' # 'Musical' 'Mystery' 'Film-Noir' 'Western'] \u4f7f\u7528\u51680\u7684DataFrame\u662f\u6784\u5efa\u6307\u6807DataFrame\u7684\u4e00\u79cd\u65b9\u5f0f zero_matrix = np.zeros((len(movies), len(genres))) dummies = pd.DataFrame(zero_matrix, columns=genres) print(zero_matrix) # [[0. 0. 0. ... 0. 0. 0.] # [0. 0. 0. ... 0. 0. 0.] # [0. 0. 0. ... 0. 0. 0.] # ... # [0. 0. 0. ... 0. 0. 0.] # [0. 0. 0. ... 0. 0. 0.] # [0. 0. 0. ... 0. 0. 0.]] print(dummies.head(n=10)) # Animation Children's Comedy ... Mystery Film-Noir Western # 0 0.0 0.0 0.0 ... 0.0 0.0 0.0 # 1 0.0 0.0 0.0 ... 0.0 0.0 0.0 # 2 0.0 0.0 0.0 ... 0.0 0.0 0.0 # 3 0.0 0.0 0.0 ... 0.0 0.0 0.0 # 4 0.0 0.0 0.0 ... 0.0 0.0 0.0 # 5 0.0 0.0 0.0 ... 0.0 0.0 0.0 # 6 0.0 0.0 0.0 ... 0.0 0.0 0.0 # 7 0.0 0.0 0.0 ... 0.0 0.0 0.0 # 8 0.0 0.0 0.0 ... 0.0 0.0 0.0 # 9 0.0 0.0 0.0 ... 0.0 0.0 0.0 # # [10 rows x 18 columns] \u904d\u5386\u6bcf\u4e00\u90e8\u7535\u5f71\uff0c\u5c06dummies\u6bcf\u4e00\u884c\u7684\u6761\u76ee\u8bbe\u7f6e\u4e3a1\u3002\\ \u4f7f\u7528dummies.columns\u6765\u8ba1\u7b97\u6bcf\u4e00\u4e2a\u6d41\u6d3e\u7684\u5217\u6307\u6807 gen = movies.genres[0] print(gen.split('|')) # ['Animation', \"Children's\", 'Comedy'] result = dummies.columns.get_indexer(gen.split('|')) print(result) # [0 1 2] \u4f7f\u7528.loc\u6839\u636e\u8fd9\u4e9b\u6307\u6807\u6765\u8bbe\u7f6e\u503c for i, gen in enumerate(movies.genres): indices = dummies.columns.get_indexer(gen.split('|')) dummies.iloc[i, indices] = 1 \u5c06\u7ed3\u679c\u4e0emovies\u8fdb\u884c\u5408\u5e76 movies_windic = movies.join(dummies.add_prefix('Genre_')) print(movies_windic.iloc[0]) # movie_id 1 # title Toy Story (1995) # genres Animation|Children's|Comedy # Genre_Animation 1.0 # Genre_Children's 1.0 # Genre_Comedy 1.0 # Genre_Adventure 0.0 # Genre_Fantasy 0.0 # Genre_Romance 0.0 # Genre_Drama 0.0 # Genre_Action 0.0 # Genre_Crime 0.0 # Genre_Thriller 0.0 # Genre_Horror 0.0 # Genre_Sci-Fi 0.0 # Genre_Documentary 0.0 # Genre_War 0.0 # Genre_Musical 0.0 # Genre_Mystery 0.0 # Genre_Film-Noir 0.0 # Genre_Western 0.0 # Name: 0, dtype: object \u5bf9\u4e8e\u66f4\u5927\u7684\u6570\u636e\uff0c\u4e0a\u9762\u8fd9\u79cd\u4f7f\u7528\u591a\u6210\u5458\u6784\u5efa\u6307\u6807\u53d8\u91cf\u5e76\u4e0d\u662f\u7279\u522b\u5feb\u901f\u3002\\ \u66f4\u597d\u7684\u65b9\u6cd5\u662f\u5199\u4e00\u4e2a\u76f4\u63a5\u5c06\u6570\u636e\u5199\u4e3aNumPy\u6570\u7ec4\u7684\u5e95\u5c42\u51fd\u6570\uff0c\u7136\u540e\u5c06\u7ed3\u679c\u5c01\u88c5\u8fdbDataFrame\u3002\\ \u5c06get_dummies\u4e0ecut\u7b49\u79bb\u6563\u5316\u51fd\u6570\u7ed3\u5408\u4f7f\u7528\u662f\u7edf\u8ba1\u5e94\u7528\u7684\u4e00\u4e2a\u6709\u7528\u65b9\u6cd5\u3002 np.random.seed(12345) # \u4f7f\u7528numpy.random.seed\u6765\u8bbe\u7f6e\u968f\u673a\u79cd\u5b50\u4ee5\u786e\u4fdd\u793a\u4f8b\u7684\u786e\u5b9a\u6027 values = np.random.rand(10) print(values) # [0.92961609 0.31637555 0.18391881 0.20456028 0.56772503 0.5955447 # 0.96451452 0.6531771 0.74890664 0.65356987] bins = [0, 0.2, 0.4, 0.6, 0.8, 1] result = pd.get_dummies(pd.cut(values, bins)) print(result) # (0.0, 0.2] (0.2, 0.4] (0.4, 0.6] (0.6, 0.8] (0.8, 1.0] # 0 0 0 0 0 1 # 1 0 1 0 0 0 # 2 1 0 0 0 0 # 3 0 1 0 0 0 # 4 0 0 1 0 0 # 5 0 0 1 0 0 # 6 0 0 0 0 1 # 7 0 0 0 1 0 # 8 0 0 0 1 0 # 9 0 0 0 1 0 \u5b57\u7b26\u4e32\u64cd\u4f5c import re pandas\u5141\u8bb8\u5c06\u5b57\u7b26\u4e32\u548c\u6b63\u5219\u8868\u8fbe\u5f0f\u7b80\u6d01\u5730\u5e94\u7528\u5230\u6574\u4e2a\u6570\u636e\u6570\u7ec4\u4e0a\uff0c\u6b64\u5916\u8fd8\u80fd\u5904\u7406\u6570\u636e\u7f3a\u5931\u3002 \u5b57\u7b26\u4e32\u5bf9\u8c61\u65b9\u6cd5 \u5b57\u4e32\u62c6\u5206\u5408\u5e76\u65b9\u6cd5\\ \u5728\u5f88\u591a\u5b57\u7b26\u4e32\u5904\u7406\u548c\u811a\u672c\u5e94\u7528\u4e2d\uff0c\u5185\u5efa\u7684\u5b57\u7b26\u4e32\u65b9\u6cd5\u662f\u8db3\u591f\u7684\u3002\\ \u4f8b\u5982\uff0c\u4e00\u4e2a\u9017\u53f7\u5206\u9694\u7684\u5b57\u7b26\u4e32\u53ef\u4ee5\u4f7f\u7528split\u65b9\u6cd5\u62c6\u5206\u6210\u591a\u5757\u3002 import numpy as np import pandas as pd val = 'a, b, guido' result = val.split(',') print(result) # ['a', ' b', ' guido'] count\uff1a\u8fd4\u56de\u5b50\u5b57\u7b26\u4e32\u5728\u5b57\u7b26\u4e32\u4e2d\u7684\u975e\u91cd\u53e0\u51fa\u73b0\u6b21\u6570 result = val.count(',') print(result) # 2 endswith\uff1a\u5982\u679c\u5b57\u7b26\u4e32\u4ee5\u540e\u7f00\u7ed3\u5c3e\u5219\u8fd4\u56deTrue\\ startswith\uff1a\u5982\u679c\u5b57\u7b26\u4e32\u4ee5\u540e\u7f00\u7ed3\u5c3e\u5219\u8fd4\u56deTrue result = val.endswith('b') print(result) # False result = val.endswith('o') print(result) # True result = val.startswith('a') print(result) # True split\u5e38\u548cstrip\u4e00\u8d77\u4f7f\u7528\uff0c\u7528\u4e8e\u6e05\u9664\u7a7a\u683c\uff08\u5305\u62ec\u6362\u884c\uff09\\ split\uff1a\u4f7f\u7528\u5206\u9694\u7b26\u8bb2\u5b57\u7b26\u4e32\u62c6\u5206\u6210\u5b50\u5b57\u7b26\u4e32\u7684\u5217\u8868\\ strip\uff0crstrip\uff0clstrip\uff1a\u4fee\u526a\u7a7a\u767d\uff0c\u5305\u62ec\u6362\u884c\u7b26\uff1b\u76f8\u5f53\u4e8e\u5bf9\u6bcf\u4e2a\u5143\u7d20\u8fdb\u884cx.strip()(\u4ee5\u53carstrip\uff0clstrip) pieces = [x.strip() for x in val.split(',')] print(pieces) # ['a', 'b', 'guido'] \u8fd9\u4e9b\u5b50\u5b57\u7b26\u4e32\u53ef\u4ee5\u4f7f\u7528\u52a0\u6cd5\u4e0e\u4e24\u4e2a\u5192\u53f7\u5206\u9694\u7b26\u8fde\u63a5\u5728\u4e00\u8d77 first, second, third = pieces result = first + '::' + second + '::' + third print(result) # a::b::guido \u4f46\u662f\u8fd9\u5e76\u4e0d\u662f\u4e00\u4e2a\u5b9e\u7528\u7684\u901a\u7528\u65b9\u6cd5\u3002\\ \u5728\u5b57\u7b26\u4e32\u2019 : : \u2019\u7684join\u65b9\u6cd5\u4e2d\u4f20\u5165\u4e00\u4e2a\u5217\u8868\u6216\u5143\u7ec4\u662f\u4e00\u79cd\u66f4\u5feb\u4e14\u66f4\u52a0Pythonic\uff08Python\u98ce\u683c\u5316\uff09\u7684\u65b9\u6cd5\\ join: \u4f7f\u7528\u5b57\u7b26\u4e32\u5ea7\u4f4d\u95f4\u9694\u7b26\uff0c\u7528\u4e8e\u7c98\u5408\u5176\u4ed6\u5b57\u7b26\u4e32\u7684\u5e8f\u5217 result = '::'.join(pieces) print(result) # a::b::guido \u5b9a\u4f4d\u5b50\u5b57\u7b26\u4e32\u7684\u65b9\u6cd5\u3002\\ \u4f7f\u7528Python\u7684in\u5173\u952e\u5b57\u662f\u68c0\u6d4b\u5b50\u5b57\u7b26\u4e32\u7684\u6700\u4f73\u65b9\u6cd5\uff0c\u5c3d\u7ba1index\u548cfind\u4e5f\u80fd\u5b9e\u73b0\u540c\u6837\u7684\u529f\u80fd result = 'guido' in val print(result) # True index\uff1a\u5982\u679c\u5728\u5b57\u7b26\u4e32\u4e2d\u627e\u5230\uff0c\u5219\u8fd4\u56de\u5b50\u5b57\u7b26\u4e32\u4e2d\u7b2c\u4e00\u4e2a\u5b57\u7b26\u7684\u4f4d\u7f6e\uff0c\u5982\u679c\u627e\u4e0d\u5230\u5219\u89e6\u53d1\u4e00\u4e2aValueError\\ find\uff1a\u8fd4\u56de\u5b57\u7b26\u4e32\u4e2d\u7b2c\u4e00\u4e2a\u51fa\u73b0\u5b50\u5b57\u7b26\u7684\u7b2c\u4e00\u4e2a\u5b57\u7b26\u7684\u4f4d\u7f6e\uff0c\u7c7b\u4f3cindex\uff0c\u5982\u679c\u6ca1\u6709\u627e\u5230\uff0c\u5219\u8fd4\u56de-1\\ rfind\uff1a\u8fd4\u56de\u5b57\u7b26\u4e32\u4e2d\u5b50\u5b57\u7b26\u6700\u540e\u4e00\u6b21\u51fa\u73b0\u65f6\u7b2c\u4e00\u4e2a\u5b57\u7b26\u7684\u4f4d\u7f6e\uff0c\u5982\u679c\u6ca1\u6709\u627e\u5230\uff0c\u5219\u8fd4\u56de-1 result = val.index(',') print(result) # 1 result = val.find(',') print(result) # 1 # result = val.index(':') print(result) # ValueError: substring not found result = val.find(':') print(result) # -1 result = val.rfind(',') print(result) # 4 replace\u5c06\u7528\u4e00\u79cd\u6a21\u5f0f\u66ff\u4ee3\u53e6\u4e00\u79cd\u6a21\u5f0f\u3002\u5b83\u4e5f\u7528\u4e8e\u4f20\u5165\u7a7a\u5b57\u7b26\u4e32\u6765\u5220\u9664\u67d0\u4e2a\u6a21\u5f0f result = val.replace(',', '::') print(result) # a:: b:: guido result = val.replace(', ', '') print(result) # abguido result = val.replace(',', '') print(result) # a b guido lower\uff1a\u5c06\u5927\u5199\u5b57\u6bcd\u8f6c\u6362\u4e3a\u5c0f\u5199\u5b57\u6bcd\\ upper\uff1a\u5c06\u5c0f\u5199\u5b57\u6bcd\u8f6c\u6362\u4e3a\u5927\u5199\u5b57\u6bcd uppers = val.upper() print(uppers) # A, B, GUIDO casefold\uff1a\u548clower\u7c7b\u4f3c\uff0c\u5c06\u5b57\u7b26\u4e32\u4e2d\u7684\u5143\u7d20\u53d8\u6210\u5c0f\u5199\uff0clower\u51fd\u6570\u53ea\u652f\u6301ascill\u8868\u4e2d\u7684\u5b57\u7b26\uff0ccasefold\u652f\u6301\u5f88\u591a\u4e0d\u540c\u79cd\u7c7b\u7684\u8bed\u8a00 str1 = \"Jan Wei\u03b2@cN\u4e0a\u6d77\" result = str1.casefold() print(result) # jan wei\u03b2@cn\u4e0a\u6d77 result = str1.lower() print(result) # jan wei\u03b2@cn\u4e0a\u6d77 ljust\uff0crjust\uff1a\u5de6\u5bf9\u9f50\u6216\u8005\u53f3\u5bf9\u9f50\uff1b\u7528\u7a7a\u683c\u6216\u8005\u5176\u5b83\u4e00\u4e9b\u5b57\u7b26\u586b\u5145\u5b57\u7b26\u4e32\u7684\u76f8\u53cd\u4fa7\uff0c\u4ee5\u8fd4\u56de\u5177\u6709\u6700\u5c0f\u5bbd\u5ea6\u7684\u5b57\u7b26\u4e32 str1 = 'https://docs.python.org/3/' str2 = 'https://packagehub.suse.com/package-categories/python/' print(str1.ljust(60, '*')) print(str2.ljust(60, '*')) # https://docs.python.org/3/********************************** # https://packagehub.suse.com/package-categories/python/****** print(str1.rjust(60, '*')) print(str2.rjust(60, '*')) # **********************************https://docs.python.org/3/ # ******https://packagehub.suse.com/package-categories/python/ print(str1.rjust(60)) print(str2.rjust(60)) \u6b63\u5219\u8868\u8fbe\u5f0f Python\u5185\u5efa\u7684re\u6a21\u5757\u662f\u7528\u4e8e\u5c06\u6b63\u5219\u8868\u8fbe\u5f0f\u5e94\u7528\u5230\u5b57\u7b26\u4e32\u4e0a\u7684\u5e93\u3002\\ re\u6a21\u5757\u4e3b\u8981\u6709\u4e09\u4e2a\u4e3b\u9898\uff1a\u6a21\u5f0f\u5339\u914d\u3001\u66ff\u4ee3\u3001\u62c6\u5206\u3002 \\ \u770b\u4e00\u4e2a\u7b80\u5355\u7684\u793a\u4f8b\uff1a\u5047\u8bbe\u6211\u4eec\u60f3\u5c06\u542b\u6709\u591a\u79cd\u7a7a\u767d\u5b57\u7b26\uff08\u5236\u8868\u7b26\u3001\u7a7a\u683c\u3001\u6362\u884c\u7b26\uff09\u7684\u5b57\u7b26\u4e32\u62c6\u5206\u5f00\u3002\\ \u63cf\u8ff0\u4e00\u4e2a\u6216\u591a\u4e2a\u7a7a\u767d\u5b57\u7b26\u7684\u6b63\u5219\u8868\u8fbe\u5f0f\u662f\\s+\\ \u5f53\u8c03\u7528re.split('\\s+', text)\uff0c\u6b63\u5219\u8868\u8fbe\u5f0f\u9996\u5148\u4f1a\u88ab\u7f16\u8bd1\uff0c\u7136\u540e\u6b63\u5219\u8868\u8fbe\u5f0f\u7684split\u65b9\u6cd5\u5728\u4f20\u5165\u6587\u672c\u4e0a\u88ab\u8c03\u7528\u3002 text = \"foo bar\\t baz \\tqux\" result = re.split('\\s+', text) print(result) # ['foo', 'bar', 'baz', 'qux'] \u53ef\u4ee5\u4f7f\u7528re.compile\u81ea\u884c\u7f16\u8bd1\uff0c\u5f62\u6210\u4e00\u4e2a\u53ef\u590d\u7528\u7684\u6b63\u5219\u8868\u8fbe\u5f0f\u5bf9\u8c61 regex = re.compile('\\s+') result = regex.split(text) print(result) # ['foo', 'bar', 'baz', 'qux'] \u5982\u679c\u60f3\u83b7\u5f97\u7684\u662f\u4e00\u4e2a\u6240\u6709\u5339\u914d\u6b63\u5219\u8868\u8fbe\u5f0f\u7684\u6a21\u5f0f\u7684\u5217\u8868\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528findall\u65b9\u6cd5 result = regex.findall(text) print(result) # [' ', '\\t ', ' \\t'] \u4e3a\u4e86\u5728\u6b63\u5219\u8868\u8fbe\u5f0f\u4e2d\u907f\u514d\u8f6c\u4e49\u7b26\\\u7684\u5f71\u54cd\uff0c\u53ef\u4ee5\u4f7f\u7528\u539f\u751f\u5b57\u7b26\u4e32\u8bed\u6cd5\uff0c\u6bd4\u5982r'C:\\x'\u6216\u8005\u7528\u7b49\u4ef7\u7684'C:\\x'\\ \u5982\u679c\u9700\u8981\u5c06\u76f8\u540c\u7684\u8868\u8fbe\u5f0f\u5e94\u7528\u5230\u591a\u4e2a\u5b57\u7b26\u4e32\u4e0a\uff0c\u63a8\u8350\u4f7f\u7528re.compile\u521b\u5efa\u4e00\u4e2a\u6b63\u5219\u8868\u8fbe\u5f0f\u5bf9\u8c61\uff0c\u8fd9\u6837\u505a\u6709\u5229\u4e8e\u8282\u7ea6CPU\u5468\u671f\u3002\\ \\ match\u548csearch\u4e0efindall\u76f8\u5173\u6027\u5f88\u5927\u3002\\ findall\u8fd4\u56de\u7684\u662f\u5b57\u7b26\u4e32\u4e2d\u6240\u6709\u7684\u5339\u914d\u9879\uff0c\u800csearch\u8fd4\u56de\u7684\u4ec5\u4ec5\u662f\u7b2c\u4e00\u4e2a\u5339\u914d\u9879\u3002\\ match\u66f4\u4e3a\u4e25\u683c\uff0c\u5b83\u53ea\u5728\u5b57\u7b26\u4e32\u7684\u8d77\u59cb\u4f4d\u7f6e\u8fdb\u884c\u5339\u914d\u3002 text = \"\"\"Dave dave@google.com Steve steve@gmail.com Rob rob@gmail.com Ryan ryan@yahoo.com \"\"\" pattern = r'[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}' regex = re.compile(pattern, flags=re.IGNORECASE) # flags=re.IGNORECASE \u4f7f\u6b63\u5219\u8868\u8fbe\u5f0f\u4e0d\u533a\u5206\u5927\u5c0f\u5199 m = regex.findall(text) # findall\u4f1a\u751f\u6210\u4e00\u4e2a\u7535\u5b50\u90ae\u4ef6\u5730\u5740\u7684\u5217\u8868 print(m) # ['dave@google.com', 'steve@gmail.com', 'rob@gmail.com', 'ryan@yahoo.com'] search\u8fd4\u56de\u7684\u662f\u6587\u672c\u4e2d\u7b2c\u4e00\u4e2a\u5339\u914d\u5230\u7684\u7535\u5b50\u90ae\u4ef6\u5730\u5740\u3002\\ \u5bf9\u4e8e\u524d\u9762\u63d0\u5230\u7684\u6b63\u5219\u8868\u8fbe\u5f0f\uff0c\u5339\u914d\u5bf9\u8c61\u53ea\u80fd\u544a\u8bc9\u6211\u4eec\u6a21\u5f0f\u5728\u5b57\u7b26\u4e32\u4e2d\u8d77\u59cb\u548c\u7ed3\u675f\u7684\u4f4d\u7f6e m = regex.search(text) print(m) # <re.Match object; span=(5, 20), match='dave@google.com'> print(text[m.start():m.end()]) # dave@google.com regex.match\u53ea\u5728\u6a21\u5f0f\u51fa\u73b0\u4e8e\u5b57\u7b26\u4e32\u8d77\u59cb\u4f4d\u7f6e\u65f6\u8fdb\u884c\u5339\u914d\uff0c\u5982\u679c\u6ca1\u6709\u5339\u914d\u5230\uff0c\u8fd4\u56deNone m = regex.match(text) print(m) # None m = regex.match('rob@gmail.com') print(m) # <re.Match object; span=(0, 13), match='rob@gmail.com'> print(m.group()) # rob@gmail.com print(m.groups()) # () regex.sub\u4f1a\u8fd4\u56de\u4e00\u4e2a\u65b0\u7684\u5b57\u7b26\u4e32\uff0c\u539f\u5b57\u7b26\u4e32\u4e2d\u7684\u6a21\u5f0f\u4f1a\u88ab\u4e00\u4e2a\u65b0\u7684\u5b57\u7b26\u4e32\u66ff\u4ee3 m = regex.sub('REDACTED', text) print(m) # Dave REDACTED # Steve REDACTED # Rob REDACTED # Ryan REDACTED \u67e5\u627e\u7535\u5b50\u90ae\u4ef6\u5730\u5740\uff0c\u5e76\u5c06\u6bcf\u4e2a\u5730\u5740\u5206\u4e3a\u4e09\u4e2a\u90e8\u5206\uff1a\u7528\u6237\u540d\uff0c\u57df\u540d\u548c\u57df\u540d\u540e\u7f00\u3002\u8981\u5b9e\u73b0\u8fd9\u4e00\u70b9\uff0c\u53ef\u4ee5\u7528\u62ec\u53f7\u5c06pattern\u5305\u8d77\u6765\\ \u4fee\u6539\u540e\u7684\u6b63\u5219\u8868\u8fbe\u5f0f\u4ea7\u751f\u7684\u5339\u914d\u5bf9\u8c61\u7684groups\u65b9\u6cd5\uff0c\u8fd4\u56de\u7684\u662f\u6a21\u5f0f\u7ec4\u4ef6\u7684\u5143\u7ec4 text = \"\"\"Dave dave@google.com Steve steve@gmail.com Rob rob@gmail.com Ryan ryan@yahoo.com \"\"\" pattern = r'([A-Z0-9._%+-]+)@([A-Z0-9.-]+)\\.([A-Z]{2,4})' regex = re.compile(pattern, flags=re.IGNORECASE) m = regex.findall(text) # \u5f53pattern\u53ef\u4ee5\u5206\u7ec4\u65f6\uff0cfindall\u8fd4\u56de\u7684\u662f\u5305\u542b\u5143\u7ec4\u7684\u5217\u8868 print(m) # [('dave', 'google', 'com'), ('steve', 'gmail', 'com'), ('rob', 'gmail', 'com'), ('ryan', 'yahoo', 'com')] m = regex.search(text) print(m) # <re.Match object; span=(5, 20), match='dave@google.com'> print(text[m.start():m.end()]) # dave@google.com m = regex.match('rob@gmail.com') print(m) # <re.Match object; span=(0, 13), match='rob@gmail.com'> print(m.group()) # rob@gmail.com print(m.groups()) # ('rob', 'gmail', 'com') m = regex.sub('REDACTED', text) print(m) # Dave REDACTED # Steve REDACTED # Rob REDACTED # Ryan REDACTED m = regex.sub(r'Username: \\1, Domain: \\2, Suffix: \\3', text) print(m) # Dave Username: dave, Domain: google, Suffix: com # Steve Username: steve, Domain: gmail, Suffix: com # Rob Username: rob, Domain: gmail, Suffix: com # Ryan Username: ryan, Domain: yahoo, Suffix: com pandas\u4e2d\u7684\u5411\u91cf\u5316\u5b57\u7b26\u4e32\u51fd\u6570 \u6e05\u7406\u6742\u4e71\u7684\u6570\u636e\u96c6\u7528\u4e8e\u5206\u6790\u901a\u5e38\u9700\u8981\u5927\u91cf\u7684\u5b57\u7b26\u4e32\u5904\u7406\u548c\u6b63\u5219\u5316\u3002 data = { 'Dave': 'dave@gmail.com', 'Steve': 'steve@gmail.com', 'Rob': 'rob@gmail.com', 'Wes': np.nan } data = pd.Series(data) print(data) # Dave dave@gmail.com # Steve steve@gmail.com # Rob rob@gmail.com # Wes NaN # dtype: object print(data.isnull()) # Dave False # Steve False # Rob False # Wes True # dtype: bool \u53ef\u4ee5\u4f7f\u7528data.map\u5c06\u5b57\u7b26\u4e32\u548c\u6709\u6548\u7684\u6b63\u5219\u8868\u8fbe\u5f0f\u65b9\u6cd5\uff08\u4ee5lambda\u6216\u5176\u4ed6\u51fd\u6570\u7684\u65b9\u5f0f\u4f20\u9012\uff09\u5e94\u7528\u5230\u6bcf\u4e2a\u503c\u4e0a\uff0c\u4f46\u662f\u5728NA\uff08null\uff09\u503c\u4e0a\u4f1a\u5931\u8d25\u3002\\ \u4e3a\u4e86\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0cSeries\u6709\u9762\u5411\u6570\u7ec4\u7684\u65b9\u6cd5\u7528\u4e8e\u8df3\u8fc7NA\u503c\u7684\u5b57\u7b26\u4e32\u64cd\u4f5c\u3002\u8fd9\u4e9b\u65b9\u6cd5\u901a\u8fc7Series\u7684str\u5c5e\u6027\u8fdb\u884c\u8c03\u7528\u3002\\ \\ \u4f8b\u5982\uff0c\u53ef\u4ee5\u901a\u8fc7str.contains\u6765\u68c0\u67e5\u6bcf\u4e2a\u7535\u5b50\u90ae\u4ef6\u5730\u5740\u662f\u5426\u542b\u6709\u2019gmail' m = data.str.contains('gmail') print(m) # Dave True # Steve True # Rob True # Wes NaN # dtype: object \u6b63\u5219\u8868\u8fbe\u5f0f\u4e5f\u53ef\u4ee5\u7ed3\u5408\u4efb\u610f\u7684re\u6a21\u5757\u9009\u9879\u4f7f\u7528\uff0c\u4f8b\u5982IGNORECASE print(pattern) # ([A-Z0-9._%+-]+)@([A-Z0-9.-]+)\\.([A-Z]{2,4}) m = data.str.findall(pattern, flags=re.IGNORECASE) print(m) # Dave [(dave, gmail, com)] # Steve [(steve, gmail, com)] # Rob [(rob, gmail, com)] # Wes NaN # dtype: object \u4f7f\u7528str.get\u6216\u5728str\u5c5e\u6027\u5185\u90e8\u7d22\u5f15\uff0c\u8fdb\u884c\u5411\u91cf\u5316\u7684\u5143\u7d20\u68c0\u7d22\u3002 m = data.str.match(pattern, flags=re.IGNORECASE) print(m) # Dave True # Steve True # Rob True # Wes NaN # dtype: object m = data.str.findall(pattern, flags=re.IGNORECASE) print(m.str.get(1)) # Dave NaN # Steve NaN # Rob NaN # Wes NaN # dtype: float64 print(m.str[0]) # Dave (dave, gmail, com) # Steve (steve, gmail, com) # Rob (rob, gmail, com) # Wes NaN # dtype: object \u4f7f\u7528\u5b57\u7b26\u4e32\u5207\u7247\u7684\u7c7b\u4f3c\u8bed\u6cd5\u8fdb\u884c\u5411\u91cf\u5316\u5207\u7247 print(data.str[:]) # Dave dave@gmail.com # Steve steve@gmail.com # Rob rob@gmail.com # Wes NaN # dtype: object print(data.str[:5]) # Dave dave@ # Steve steve # Rob rob@g # Wes NaN # dtype: object","title":"Ch04"},{"location":"python/DataAnalysis/ch04/#_1","text":"import pandas as pd import numpy as np from numpy import nan as NA \u5bf9\u4e8e\u6570\u503c\u578b\u6570\u636e\uff0cpandas\u4f7f\u7528\u6d6e\u70b9\u503cNaN\uff08Not a Number\u6765\u8868\u793a\u7f3a\u5931\u503c\uff09\u3002\\ \u5728pandas\u4e2d\uff0c\u91c7\u7528\u4e86R\u8bed\u8a00\u4e2d\u7684\u7f16\u7a0b\u60ef\u4f8b\uff0c\u5c06\u7f3a\u5931\u503c\u6210\u4e3aNA\uff0c\u610f\u601d\u662fnotavailable\uff08\u4e0d\u53ef\u7528\uff09\u3002\\ Python\u5185\u5efa\u7684None\u503c\u5728\u5bf9\u8c61\u6570\u7ec4\u4e2d\u4e5f\u88ab\u5f53\u4f5cNA\u5904\u7406\u3002\\ NA\u5904\u7406\u65b9\u6cd5\uff1a * dropna:\u6839\u636e\u6bcf\u4e2a\u6807\u7b7e\u7684\u503c\u662f\u5426\u662f\u786e\u5b9e\u6570\u636e\u6765\u7b5b\u9009\u8f74\u6807\u7b7e\uff0c\u5e76\u6839\u636e\u5141\u8bb8\u4e22\u5931\u7684\u6570\u636e\u91cf\u6765\u786e\u5b9a\u9608\u503c * fillna:\u7528\u67d0\u4e9b\u503c\u586b\u5145\u786e\u5b9e\u7684\u6570\u636e\u6216\u4f7f\u7528\u63d2\u503c\u65b9\u6cd5\uff0c\u5982ffill\u6216bfill * isnull:\u8fd4\u56de\u8868\u660e\u54ea\u4e9b\u503c\u662f\u7f3a\u5931\u503c\u7684\u5e03\u5c14\u503c * notnull:\u662fisnull\u7684\u53cd\u51fd\u6570 string_data = pd.Series(['aardvark', 'artichoke', np.nan, 'avocado']) print(string_data) # 0 aardvark # 1 artichoke # 2 NaN # 3 avocado # dtype: object print(string_data.isnull()) # 0 False # 1 False # 2 True # 3 False # dtype: bool string_data[0] = None print(string_data.isnull()) # 0 True # 1 False # 2 True # 3 False # dtype: bool","title":"\u5904\u7406\u7f3a\u5931\u503c"},{"location":"python/DataAnalysis/ch04/#_2","text":"","title":"\u8fc7\u6ee4\u7f3a\u5931\u503c"},{"location":"python/DataAnalysis/ch04/#series","text":"\u5728Series\u4e0a\u4f7f\u7528dropna\uff0c\u5b83\u4f1a\u8fd4\u56deSeries\u4e2d\u6240\u6709\u7684\u975e\u7a7a\u6570\u636e\u53ca\u5176\u7d22\u5f15\u503c data = pd.Series([1, NA, 3.5, NA, 7]) print(data.dropna()) # 0 1.0 # 2 3.5 # 4 7.0 # dtype: float64 print(data[data.notnull()]) # \u4e0e\u4e0a\u9762\u7b49\u4ef7 # 0 1.0 # 2 3.5 # 4 7.0 # dtype: float64","title":"\u5904\u7406Series"},{"location":"python/DataAnalysis/ch04/#dataframe","text":"data = pd.DataFrame( [[1., 6.5, 3.], [1., NA, NA], [NA, NA, NA], [NA, 6.5, 3.]] ) print(data) # 0 1 2 # 0 1.0 6.5 3.0 # 1 1.0 NaN NaN # 2 NaN NaN NaN # 3 NaN 6.5 3.0 cleaned = data.dropna() # dropna\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u4f1a\u5220\u9664\u5305\u542b\u7f3a\u5931\u503c\u7684\u884c print(cleaned) # 0 1 2 # 0 1.0 6.5 3.0 cleaned = data.dropna(how='all') # \u4f20\u5165how='all\u2019\u65f6\uff0c\u5c06\u5220\u9664\u6240\u6709\u503c\u5747\u4e3aNA\u7684\u884c print(cleaned) # 0 1 2 # 0 1.0 6.5 3.0 # 1 1.0 NaN NaN # 3 NaN 6.5 3.0 data[4] = NA print(data) # 0 1 2 4 # 0 1.0 6.5 3.0 NaN # 1 1.0 NaN NaN NaN # 2 NaN NaN NaN NaN # 3 NaN 6.5 3.0 NaN cleaned = data.dropna(axis=1, how='all') # \u5220\u9664\u5168NA\u7684\u5217 print(cleaned) # 0 1 2 # 0 1.0 6.5 3.0 # 1 1.0 NaN NaN # 2 NaN NaN NaN # 3 NaN 6.5 3.0 df = pd.DataFrame(np.random.randn(7, 3)) print(df) # 0 1 2 # 0 -1.069771 -0.777921 0.181956 # 1 -0.399504 -0.641737 -0.946327 # 2 -1.013920 -0.247588 -0.760146 # 3 1.076946 -1.263203 0.494077 # 4 0.460985 -1.241870 0.283006 # 5 1.168149 1.033752 0.900095 # 6 -1.208514 -1.049546 -0.783680 df.iloc[:4, 1] = NA # \u6807\u7b7e1\uff0c\u524d4\u4e2a\u5143\u7d20 df.iloc[:2, 2] = NA # \u6807\u7b7e2\uff0c\u524d2\u4e2a\u5143\u7d20 print(df) # 0 1 2 # 0 -1.069771 NaN NaN # 1 -0.399504 NaN NaN # 2 -1.013920 NaN -0.760146 # 3 1.076946 NaN 0.494077 # 4 0.460985 -1.241870 0.283006 # 5 1.168149 1.033752 0.900095 # 6 -1.208514 -1.049546 -0.783680 cleaned = df.dropna() print(cleaned) # 0 1 2 # 4 0.033663 0.291886 0.736448 # 5 -0.433380 0.397104 1.252005 # 6 -1.999018 0.303866 1.430109 cleaned = df.dropna(thresh=2) # \u4fdd\u75592\u884c\u542bNA\u7684\u89c2\u5bdf\u503c print(cleaned) # 0 1 2 # 2 -1.413976 NaN 0.222274 # 3 -0.644266 NaN 0.324180 # 4 -0.122160 -2.244880 -0.406562 # 5 -0.140326 0.101133 -0.764048 # 6 -1.809141 0.139091 -0.819175","title":"\u5904\u7406DataFrame"},{"location":"python/DataAnalysis/ch04/#_3","text":"fillna\u51fd\u6570\u53c2\u6570\uff1a * value\uff1a\u6807\u91cf\u503c\u6216\u5b57\u5178\u578b\u5bf9\u8c61\u7528\u4e8e\u586b\u5145\u7f3a\u5931\u503c * method\uff1a\u63d2\u503c\u65b9\u6cd5\uff0c\u5982\u679c\u6ca1\u6709\u5176\u4ed6\u53c2\u6570\uff0c\u9ed8\u8ba4\u662f'ffill' * axis\uff1a\u9700\u8981\u586b\u5145\u7684\u8f74\uff0c\u9ed8\u8ba4axis=0 * inplace\uff1a\u4fee\u6539\u88ab\u8c03\u7528\u5bf9\u8c61\uff0c\u800c\u4e0d\u662f\u751f\u6210\u4e00\u4e2a\u5907\u4efd * limit\uff1a\u7528\u4e8e\u524d\u5411\u6216\u540e\u5411\u586b\u5145\u65f6\u6700\u5927\u7684\u586b\u5145\u8303\u56f4 df = pd.DataFrame(np.random.randn(7, 3)) df.iloc[:4, 1] = NA # \u6807\u7b7e1\uff0c\u524d4\u4e2a\u5143\u7d20 df.iloc[:2, 2] = NA # \u6807\u7b7e2\uff0c\u524d2\u4e2a\u5143\u7d20 print(df) # 0 1 2 # 0 -0.181196 NaN NaN # 1 -1.657668 NaN NaN # 2 -0.053454 NaN 0.391461 # 3 -0.539307 NaN -0.668400 # 4 -0.433439 0.839713 -0.295273 # 5 0.749930 1.661641 -0.495165 # 6 0.591810 1.017372 0.932367 result = df.fillna(0) # \u8c03\u7528fillna\u65f6\uff0c\u53ef\u4ee5\u4f7f\u7528\u4e00\u4e2a\u5e38\u6570\u6765\u66ff\u4ee3\u7f3a\u5931\u503c print(result) # 0 1 2 # 0 -0.430926 0.000000 0.000000 # 1 0.448061 0.000000 0.000000 # 2 -0.059910 0.000000 -1.532646 # 3 -0.315793 0.000000 -0.196546 # 4 -0.546106 0.135108 -0.332309 # 5 1.083075 0.346070 -0.773104 # 6 -0.186511 1.055337 -1.168303 result = df.fillna({1: 0.5, 2: 0}) # \u8c03\u7528fillna\u65f6\u4f7f\u7528\u5b57\u5178\uff0c\u53ef\u4ee5\u4e3a\u4e0d\u540c\u5217\u8bbe\u5b9a\u4e0d\u540c\u7684\u586b\u5145\u503c print(result) # 0 1 2 # 0 -0.794344 0.500000 0.000000 # 1 -0.960917 0.500000 0.000000 # 2 1.494351 0.500000 0.100878 # 3 -0.554765 0.500000 1.118801 # 4 -0.866117 0.523615 1.217478 # 5 -0.706966 -0.681776 0.797690 # 6 -1.456366 1.205518 -0.402432 fillna\u8fd4\u56de\u7684\u662f\u4e00\u4e2a\u65b0\u7684\u5bf9\u8c61\uff0c\u4f46\u4e5f\u53ef\u4ee5\u4fee\u6539\u5df2\u7ecf\u5b58\u5728\u7684\u5bf9\u8c61 _ = df.fillna(0, inplace=True) # inplace=True\u6307\u5b9a\u5728\u5df2\u6709\u5bf9\u8c61\u4e0a\u76f4\u63a5\u4fee\u6539 print(df) # 0 1 2 # 0 -1.176124 0.000000 0.000000 # 1 0.120458 0.000000 0.000000 # 2 -1.206408 0.000000 0.551693 # 3 0.224563 0.000000 1.145156 # 4 -0.557836 0.081135 -0.075282 # 5 2.378837 -0.876145 1.430386 # 6 -0.152662 1.278364 0.479686 df = pd.DataFrame(np.random.randn(6, 3)) df.iloc[2:, 1] = NA # \u6807\u7b7e1\uff0c\u524d4\u4e2a\u5143\u7d20 df.iloc[4:, 2] = NA # \u6807\u7b7e2\uff0c\u524d2\u4e2a\u5143\u7d20 print(df) # 0 1 2 # 0 1.154788 0.033949 -0.122807 # 1 0.258684 -0.580244 1.636514 # 2 1.503756 NaN -1.224203 # 3 0.824049 NaN -0.364345 # 4 -1.247609 NaN NaN # 5 -1.019980 NaN NaN result = df.fillna(method='ffill') # \u5411\u540e\u586b\u5145 print(result) # 0 1 2 # 0 2.082449 0.398874 0.359772 # 1 0.233129 0.385347 1.953533 # 2 0.396555 0.385347 0.592784 # 3 -0.957249 0.385347 0.169815 # 4 0.854452 0.385347 0.169815 # 5 -0.105982 0.385347 0.169815 result = df.fillna(method='ffill', limit=3) # \u6bcf\u5217\u6700\u591a\u586b3\u4e2a print(result) result = df.fillna(df[0].max()) # \u75280\u5217\u7684\u6700\u5927\u503c\u586b\u5145\u6240\u6709\u7684NA print(result) # 0 1 2 # 0 -0.377697 -0.852891 -0.705489 # 1 -0.611759 -0.013237 -0.295764 # 2 -0.389974 1.057881 1.041957 # 3 -0.016845 1.057881 -1.149954 # 4 1.057881 1.057881 1.057881 # 5 -0.463471 1.057881 1.057881","title":"\u8865\u5168\u7f3a\u5931\u503c"},{"location":"python/DataAnalysis/ch04/#_4","text":"import pandas as pd import numpy as np from numpy import nan as NA","title":"\u6570\u636e\u8f6c\u6362"},{"location":"python/DataAnalysis/ch04/#_5","text":"data = pd.DataFrame( { 'k1': ['one', 'two'] * 3 + ['two'], 'k2': [1, 1, 2, 3, 4, 4, 4] } ) print(data) # \u91cd\u590d\u51fa\u73b02\u6b21\u7684\u8bb0\u5f55\uff1atwo 4 # k1 k2 # 0 one 1 # 1 two 1 # 2 one 2 # 3 two 3 # 4 one 4 # 5 two 4 # 6 two 4 DataFrame\u7684duplicated\u65b9\u6cd5\u8fd4\u56de\u7684\u662f\u4e00\u4e2a\u5e03\u5c14\u503cSeries\uff0c\u8fd9\u4e2aSeries\u53cd\u6620\u7684\u662f\u6bcf\u4e00\u884c\u662f\u5426\u5b58\u5728\u91cd\u590d\uff08\u4e0e\u4e4b\u524d\u51fa\u73b0\u8fc7\u7684\u884c\u76f8\u540c\uff09\u60c5\u51b5 \\ \u9ed8\u8ba4\u662f\u5bf9\u5217\u8fdb\u884c\u64cd\u4f5c print(data.duplicated()) # 0 False # 1 False # 2 False # 3 False # 4 False # 5 False # 6 True # dtype: bool drop_duplicates\u8fd4\u56de\u7684\u662fDataFrame\uff0c\u5185\u5bb9\u662fduplicated\u8fd4\u56de\u6570\u7ec4\u4e2d\u4e3aFalse\u7684\u90e8\u5206 \\ \u9ed8\u8ba4\u662f\u5bf9\u5217\u8fdb\u884c\u64cd\u4f5c print(data.drop_duplicates()) # k1 k2 # 0 one 1 # 1 two 1 # 2 one 2 # 3 two 3 # 4 one 4 # 5 two 4 \u53ef\u4ee5\u6307\u5b9a\u6570\u636e\u7684\u4efb\u4f55\u5b50\u96c6\u6765\u68c0\u6d4b\u662f\u5426\u6709\u91cd\u590d\u3002\\ \u5047\u8bbe\u6211\u4eec\u6709\u4e00\u4e2a\u989d\u5916\u7684\u5217\uff0c\u5e76\u60f3\u57fa\u4e8e\u2019k1\u2019\u5217\u53bb\u9664\u91cd\u590d\u503c data['v1'] = range(7) print(data) # k1 k2 v1 # 0 one 1 0 # 1 two 1 1 # 2 one 2 2 # 3 two 3 3 # 4 one 4 4 # 5 two 4 5 # 6 two 4 6 print(data.drop_duplicates(['k1'])) # \u4fdd\u7559\u7b2c\u4e00\u4e2a\u89c2\u6d4b\u5230\u7684one\u548ctwo\uff0c\u5176\u4f59\u4e22\u5f03 # k1 k2 v1 # 0 one 1 0 # 1 two 1 1 duplicated\u548cdrop_duplicates\u9ed8\u8ba4\u90fd\u662f\u4fdd\u7559\u7b2c\u4e00\u4e2a\u89c2\u6d4b\u5230\u7684\u503c\u3002\\ \u4f20\u5165\u53c2\u6570keep='last\u2019\u5c06\u4f1a\u8fd4\u56de\u6700\u540e\u4e00\u4e2a\u3002 print(data.drop_duplicates(['k1'], keep='last')) # \u4fdd\u7559\u6700\u540e\u4e00\u4e2a\u89c2\u6d4b\u5230\u7684one\u548ctwo # k1 k2 v1 # 4 one 4 4 # 6 two 4 6","title":"\u5220\u9664\u91cd\u590d\u503c"},{"location":"python/DataAnalysis/ch04/#_6","text":"\u4f7f\u7528map\u662f\u4e00\u79cd\u53ef\u4ee5\u4fbf\u6377\u6267\u884c\u6309\u5143\u7d20\u8f6c\u6362\u53ca\u5176\u4ed6\u6e05\u6d17\u76f8\u5173\u64cd\u4f5c\u7684\u65b9\u6cd5\u3002 data = pd.DataFrame( { 'food': ['bacon', 'pulled pork', 'bacon', 'Pastrami', 'corned beef', 'Bacon', 'pastrami', 'honey ham', 'nova lox'], 'ounces': [4, 3, 12, 6, 7.5, 8, 3, 5, 6] } ) print(data) # food ounces # 0 bacon 4.0 # 1 pulled pork 3.0 # 2 bacon 12.0 # 3 Pastrami 6.0 # 4 corned beef 7.5 # 5 Bacon 8.0 # 6 pastrami 3.0 # 7 honey ham 5.0 # 8 nova lox 6.0 \u6dfb\u52a0\u4e00\u5217\u7528\u4e8e\u8868\u660e\u6bcf\u79cd\u98df\u7269\u7684\u52a8\u7269\u8089\u7c7b\u578b\u3002\u5148\u521b\u5efa\u4e00\u4e2a\u98df\u7269\u548c\u8089\u7c7b\u7684\u6620\u5c04 meat_to_animal = { 'bacon': 'pig', 'pulled pork': 'pig', 'pastrami': 'cow', 'corned beef': 'cow', 'honey ham': 'pig', 'nova lox': 'salmon' } lowercased = data['food'].str.lower() # \u4f7f\u7528Series\u7684str.lower\u65b9\u6cd5\u5c06food\u7684\u6bcf\u4e2a\u503c\u90fd\u8f6c\u6362\u4e3a\u5c0f\u5199 print(lowercased) # 0 bacon # 1 pulled pork # 2 bacon # 3 pastrami # 4 corned beef # 5 bacon # 6 pastrami # 7 honey ham # 8 nova lox # Name: food, dtype: object data['animal'] = lowercased.map(meat_to_animal) print(data) # food ounces animal # 0 bacon 4.0 pig # 1 pulled pork 3.0 pig # 2 bacon 12.0 pig # 3 Pastrami 6.0 cow # 4 corned beef 7.5 cow # 5 Bacon 8.0 pig # 6 pastrami 3.0 cow # 7 honey ham 5.0 pig # 8 nova lox 6.0 salmon \u4e5f\u53ef\u4ee5\u4f20\u5165\u4e00\u4e2a\u51fd\u6570\uff0c\u5b8c\u6210\u4e0a\u9762\u6240\u6709\u529f\u80fd data = pd.DataFrame( { 'food': ['bacon', 'pulled pork', 'bacon', 'Pastrami', 'corned beef', 'Bacon', 'pastrami', 'honey ham', 'nova lox'], 'ounces': [4, 3, 12, 6, 7.5, 8, 3, 5, 6] } ) result = data['food'].map(lambda x: meat_to_animal[x.lower()]) print(result) # 0 pig # 1 pig # 2 pig # 3 cow # 4 cow # 5 pig # 6 cow # 7 pig # 8 salmon # Name: food, dtype: object","title":"\u4f7f\u7528\u51fd\u6570\u6216\u6620\u5c04\u8fdb\u884c\u6570\u636e\u8f6c\u6362"},{"location":"python/DataAnalysis/ch04/#_7","text":"\u4f7f\u7528fillna\u586b\u5145\u7f3a\u5931\u503c\u662f\u901a\u7528\u503c\u66ff\u6362\u7684\u7279\u6b8a\u6848\u4f8b\u3002\\ map\u53ef\u4ee5\u7528\u6765\u4fee\u6539\u4e00\u4e2a\u5bf9\u8c61\u4e2d\u7684\u5b50\u96c6\u7684\u503c\uff0c\u4f46\u662freplace\u63d0\u4f9b\u4e86\u66f4\u4e3a\u7b80\u5355\u7075\u6d3b\u7684\u5b9e\u73b0\\ data.replace\u65b9\u6cd5\u4e0edata.str.replace\u65b9\u6cd5\u662f\u4e0d\u540c\u7684\uff0cdata.str.replace\u662f\u5bf9\u5b57\u7b26\u4e32\u8fdb\u884c\u6309\u5143\u7d20\u66ff\u4ee3\u7684\u3002\\ \\ \u4e0b\u9762\u7684Series\uff0c-999\u53ef\u80fd\u662f\u7f3a\u5931\u503c\u7684\u6807\u8bc6\u3002\\ \u5982\u679c\u8981\u4f7f\u7528NA\u6765\u66ff\u4ee3\u8fd9\u4e9b\u503c\uff0c\u53ef\u4ee5\u4f7f\u7528replace\u65b9\u6cd5\u751f\u6210\u65b0\u7684Series\uff08\u9664\u975e\u4f20\u5165\u4e86inplace=True\uff09 data = pd.Series([1., -999., 2., -999., -1000., 3.]) print(data) # 0 1.0 # 1 -999.0 # 2 2.0 # 3 -999.0 # 4 -1000.0 # 5 3.0 # dtype: float64 result = data.replace(-999, np.nan) print(result) # 0 1.0 # 1 NaN # 2 2.0 # 3 NaN # 4 -1000.0 # 5 3.0 # dtype: float64 \u8981\u5c06\u4e0d\u540c\u7684\u503c\u66ff\u6362\u4e3a\u4e0d\u540c\u7684\u503c\uff0c\u53ef\u4ee5\u4f20\u5165\u66ff\u4ee3\u503c\u7684\u5217\u8868 result = data.replace([-999, -1000], [np.nan, 0]) print(result) # 0 1.0 # 1 NaN # 2 2.0 # 3 NaN # 4 0.0 # 5 3.0 # dtype: float64 \u4e5f\u53ef\u4ee5\u4f20\u5165\u66ff\u4ee3\u503c\u7684\u5b57\u5178 result = data.replace({-999: np.nan, -1000: 0}) print(result) # 0 1.0 # 1 NaN # 2 2.0 # 3 NaN # 4 0.0 # 5 3.0 # dtype: float64","title":"\u66ff\u4ee3\u503c"},{"location":"python/DataAnalysis/ch04/#_8","text":"\u548cSeries\u4e2d\u503c\u66ff\u6362\u7c7b\u4f3c\uff0c\u53ef\u4ee5\u901a\u8fc7\u51fd\u6570\u6216\u6620\u5c04\u5bf9\u8f74\u6807\u7b7e\u8fdb\u884c\u7c7b\u4f3c\u7684\u8f6c\u6362\uff0c\u751f\u6210\u65b0\u7684\u4e14\u5e26\u6709\u4e0d\u540c\u6807\u7b7e\u7684\u5bf9\u8c61 data = pd.DataFrame( np.arange(12).reshape((3, 4)), index=['Ohio', 'Colorado', 'New York'], columns=['one', 'two', 'three', 'four'] ) print(data) # one two three four # Ohio 0 1 2 3 # Colorado 4 5 6 7 # New York 8 9 10 11 \u4e0eSeries\u7c7b\u4f3c\uff0c\u8f74\u7d22\u5f15\u4e5f\u6709\u4e00\u4e2amap\u65b9\u6cd5 transform = lambda x: x[:4].upper() # \u622a\u53d6index\u7684\u524d\u56db\u4f4d\u5e76\u8f6c\u5316\u4e3a\u5927\u5199\u683c\u5f0f result = data.index.map(transform) print(result) # Index(['OHIO', 'COLO', 'NEW '], dtype='object') \u8d4b\u503c\u7ed9index\uff0c\u4fee\u6539DataFrame data.index = data.index.map(transform) print(data) # one two three four # OHIO 0 1 2 3 # COLO 4 5 6 7 # NEW 8 9 10 11 \u521b\u5efa\u6570\u636e\u96c6\u8f6c\u6362\u540e\u7684\u7248\u672c\uff0c\u5e76\u4e14\u4e0d\u4fee\u6539\u539f\u6709\u7684\u6570\u636e\u96c6\uff0c\u4e00\u4e2a\u6709\u7528\u7684\u65b9\u6cd5\u662frename result = data.rename(index=str.title, columns=str.upper) print(result) # ONE TWO THREE FOUR # Ohio 0 1 2 3 # Colo 4 5 6 7 # New 8 9 10 11 print(data) # \u539f\u6709\u7684\u6570\u636e\u96c6\u672a\u88ab\u4fee\u6539 # one two three four # OHIO 0 1 2 3 # COLO 4 5 6 7 # NEW 8 9 10 11 rename\u53ef\u4ee5\u7ed3\u5408\u5b57\u5178\u578b\u5bf9\u8c61\u4f7f\u7528\uff0c\u4e3a\u8f74\u6807\u7b7e\u7684\u5b50\u96c6\u63d0\u4f9b\u65b0\u7684\u503c result = data.rename(index={'OHIO': 'INDIANA'}, columns={'three': 'peekaboo'}) print(result) # one two peekaboo four # INDIANA 0 1 2 3 # COLO 4 5 6 7 # NEW 8 9 10 11 \u5982\u679c\u8981\u4fee\u6539\u539f\u6709\u7684\u6570\u636e\u96c6\uff0c\u4f20\u5165inplace=True data.rename(index={'OHIO': 'INDIANA'}, columns={'three': 'peekaboo'}, inplace=True) print(data) # one two peekaboo four # INDIANA 0 1 2 3 # COLO 4 5 6 7 # NEW 8 9 10 11","title":"\u91cd\u547d\u540d\u8f74\u7d22\u5f15"},{"location":"python/DataAnalysis/ch04/#_9","text":"\u8fde\u7eed\u503c\u7ecf\u5e38\u9700\u8981\u79bb\u6563\u5316\uff0c\u6216\u8005\u5206\u79bb\u6210\u201d\u7bb1\u5b50\u201c\u8fdb\u884c\u5206\u6790\u3002\\ \\ \u5047\u8bbe\u6709\u4e00\u7ec4\u4eba\u7fa4\u7684\u6570\u636e\uff0c\u60f3\u5c06\u4ed6\u4eec\u8fdb\u884c\u5206\u7ec4\uff0c\u653e\u5165\u79bb\u6563\u7684\u5e74\u9f84\u6846\u4e2d\u3002 ages = [20, 22, 25, 27, 21, 23, 37, 31, 61, 45, 41, 32] \u5c06\u8fd9\u4e9b\u5e74\u9f84\u5206\u4e3a18\uff5e25\u300126\uff5e35\u300136\uff5e60\u4ee5\u53ca61\u53ca\u4ee5\u4e0a\u7b49\u82e5\u5e72\u7ec4\uff0c\u4f7f\u7528pandas\u4e2d\u7684cut\u3002 bins = [18, 25, 35, 60, 100] cats = pd.cut(ages, bins) print(cats) # [(18, 25], (18, 25], (18, 25], (25, 35], (18, 25], ..., (25, 35], (60, 100], (35, 60], (35, 60], (25, 35]] # Length: 12 # Categories (4, interval[int64, right]): [(18, 25] < (25, 35] < (35, 60] < (60, 100]] pandas\u8fd4\u56de\u7684\u5bf9\u8c61\u662f\u4e00\u4e2a\u7279\u6b8a\u7684Categorical\u5bf9\u8c61\u3002\\ \u4f60\u770b\u5230\u7684\u8f93\u51fa\u63cf\u8ff0\u4e86\u7531pandas.cut\u8ba1\u7b97\u51fa\u7684\u7bb1\u3002\\ \u4f60\u53ef\u4ee5\u5c06\u5b83\u5f53\u4f5c\u4e00\u4e2a\u8868\u793a\u7bb1\u540d\u7684\u5b57\u7b26\u4e32\u6570\u7ec4\uff1b\u5b83\u5728\u5185\u90e8\u5305\u542b\u4e00\u4e2acategories\uff08\u7c7b\u522b\uff09\u6570\u7ec4\uff0c\u5b83\u6307\u5b9a\u4e86\u4e0d\u540c\u7684\u7c7b\u522b\u540d\u79f0\u4ee5\u53cacodes\u5c5e\u6027\u4e2d\u7684ages\uff08\u5e74\u9f84\uff09\u6570\u636e\u6807\u7b7e print(cats.categories) # \u56db\u4e2a\u533a\u95f4\u7ec4 # IntervalIndex([(18, 25], (25, 35], (35, 60], (60, 100]], dtype='interval[int64, right]') print(cats.codes) # 61\u5c81\u843d\u5728\u7b2c3\u7ec4\uff08\u7ec4\u7f16\u53f7\u4ece0\u5f00\u59cb\uff09 # [0 0 0 1 0 0 2 1 3 2 2 1] \u6ce8\u610f\uff0cpd.value_counts(cats)\u662f\u5bf9pandas.cut\u7684\u7ed3\u679c\u4e2d\u7684\u7bb1\u6570\u91cf\u7684\u8ba1\u6570 result = pd.value_counts(cats) print(result) # (18, 25] 5 # (25, 35] 3 # (35, 60] 3 # (60, 100] 1 # dtype: int64 \u4e0e\u533a\u95f4\u7684\u6570\u5b66\u7b26\u53f7\u4e00\u81f4\uff0c\u5c0f\u62ec\u53f7\u8868\u793a\u8fb9\u662f\u5f00\u653e\u7684\uff0c\u4e2d\u62ec\u53f7\u8868\u793a\u5b83\u662f\u5c01\u95ed\u7684\uff08\u5305\u62ec\u8fb9\uff09\u3002\\ \u53ef\u4ee5\u901a\u8fc7\u4f20\u9012right=False\u6765\u6539\u53d8\u54ea\u4e00\u8fb9\u662f\u5c01\u95ed\u7684\u3002\u9ed8\u8ba4right=True\u3002 result = pd.cut(ages, [18, 26, 36, 61, 100], right=False) print(result) # [[18, 26), [18, 26), [18, 26), [26, 36), [18, 26), ..., [26, 36), [61, 100), [36, 61), [36, 61), [26, 36)] # Length: 12 # Categories (4, interval[int64, left]): [[18, 26) < [26, 36) < [36, 61) < [61, 100)] \u901a\u8fc7\u5411labels\u9009\u9879\u4f20\u9012\u4e00\u4e2a\u5217\u8868\u6216\u6570\u7ec4\u6765\u4f20\u5165\u81ea\u5b9a\u4e49\u7684\u7bb1\u540d group_name = ['Youth', 'YoungAdult', 'MiddleAged', 'Senior'] result = pd.cut(ages, bins, labels=group_name) print(result) # ['Youth', 'Youth', 'Youth', 'YoungAdult', 'Youth', ..., 'YoungAdult', 'Senior', 'MiddleAged', 'MiddleAged', 'YoungAdult'] # Length: 12 # Categories (4, object): ['Youth' < 'YoungAdult' < 'MiddleAged' < 'Senior'] result = pd.value_counts(pd.cut(ages, bins, labels=group_name)) # \u6807\u7b7e\u8f93\u51fa print(result) # Youth 5 # YoungAdult 3 # MiddleAged 3 # Senior 1 # dtype: int64 result = pd.value_counts(pd.cut(ages, bins)) # \u533a\u95f4\u8f93\u51fa print(result) # (18, 25] 5 # (25, 35] 3 # (35, 60] 3 # (60, 100] 1 # dtype: int64 \u5982\u679c\u4f20\u7ed9cut\u6574\u6570\u4e2a\u7684\u7bb1\u6765\u4ee3\u66ff\u663e\u5f0f\u7684\u7bb1\u8fb9\uff0cpandas\u5c06\u6839\u636e\u6570\u636e\u4e2d\u7684\u6700\u5c0f\u503c\u548c\u6700\u5927\u503c\u8ba1\u7b97\u51fa\u7b49\u957f\u7684\u7bb1\u3002\\ \u4e0b\u9762\u7684\u4f8b\u5b50\u662f\u8003\u8651\u4e00\u4e9b\u5747\u5300\u5206\u5e03\u7684\u6570\u636e\u88ab\u5207\u6210\u56db\u4efd\u7684\u60c5\u51b5\u3002 data = np.random.rand(20) result = pd.cut(data, 4, precision=2) # precision=2\u7684\u9009\u9879\u5c06\u5341\u8fdb\u5236\u7cbe\u5ea6\u9650\u5236\u5728\u4e24\u4f4d\u3002 print(result) # [(0.44, 0.66], (0.0063, 0.23], (0.23, 0.44], (0.0063, 0.23], (0.23, 0.44], ..., (0.23, 0.44], (0.0063, 0.23], (0.23, 0.44], (0.66, 0.88], (0.23, 0.44]] # Length: 20 # Categories (4, interval[float64, right]): [(0.0063, 0.23] < (0.23, 0.44] < (0.44, 0.66] < (0.66, 0.88]] qcut\u662f\u4e00\u4e2a\u4e0e\u5206\u7bb1\u5bc6\u5207\u76f8\u5173\u7684\u51fd\u6570\uff0c\u5b83\u57fa\u4e8e\u6837\u672c\u5206\u4f4d\u6570\u8fdb\u884c\u5206\u7bb1\u3002\\ \u53d6\u51b3\u4e8e\u6570\u636e\u7684\u5206\u5e03\uff0c\u4f7f\u7528cut\u901a\u5e38\u4e0d\u4f1a\u4f7f\u6bcf\u4e2a\u7bb1\u5177\u6709\u76f8\u540c\u6570\u636e\u91cf\u7684\u6570\u636e\u70b9\u3002\\ \u7531\u4e8eqcut\u4f7f\u7528\u6837\u672c\u7684\u5206\u4f4d\u6570\uff0c\u4f60\u53ef\u4ee5\u901a\u8fc7qcut\u83b7\u5f97\u7b49\u957f\u7684\u7bb1 data = np.random.randn(1000) # \u6b63\u6001\u5206\u5e03 cats = pd.qcut(data, 4) # \u5207\u62104\u4efd print(cats) # [(-0.00329, 0.644], (-0.00329, 0.644], (-0.659, -0.00329], (-0.659, -0.00329], (0.644, 3.468], ..., (0.644, 3.468], (-3.9619999999999997, -0.659], (-3.9619999999999997, -0.659], (-0.00329, 0.644], (-0.00329, 0.644]] # Length: 1000 # Categories (4, interval[float64, right]): [(-3.9619999999999997, -0.659] < (-0.659, -0.00329] < (-0.00329, 0.644] < (0.644, 3.468]] result = pd.value_counts(cats) print(result) # (-3.9619999999999997, -0.659] 250 # (-0.659, -0.00329] 250 # (-0.00329, 0.644] 250 # (0.644, 3.468] 250 # dtype: int64 \u4e0ecut\u7c7b\u4f3c\uff0c\u53ef\u4ee5\u4f20\u5165\u81ea\u5b9a\u4e49\u7684\u5206\u4f4d\u6570\uff080\u548c1\u4e4b\u95f4\u7684\u6570\u636e\uff0c\u5305\u62ec\u8fb9\uff09 result = pd.qcut(data, [0, 0.1, 0.5, 0.9, 1.]) print(result) # [(-0.00329, 1.234], (-0.00329, 1.234], (-1.321, -0.00329], (-1.321, -0.00329], (-0.00329, 1.234], ..., (-0.00329, 1.234], (-1.321, -0.00329], (-1.321, -0.00329], (-0.00329, 1.234], (-0.00329, 1.234]] # Length: 1000 # Categories (4, interval[float64, right]): [(-3.9619999999999997, -1.321] < (-1.321, -0.00329] < (-0.00329, 1.234] < (1.234, 3.468]]","title":"\u79bb\u6563\u5316\u548c\u5206\u7bb1"},{"location":"python/DataAnalysis/ch04/#_10","text":"\u8fc7\u6ee4\u6216\u8f6c\u6362\u5f02\u5e38\u503c\u5728\u5f88\u5927\u7a0b\u5ea6\u4e0a\u662f\u5e94\u7528\u6570\u7ec4\u64cd\u4f5c\u7684\u4e8b\u60c5\u3002\\ \\ \u8003\u8651\u4e00\u4e2a\u5177\u6709\u6b63\u6001\u5206\u5e03\u6570\u636e\u7684DataFrame data = pd.DataFrame(np.random.randn(1000, 4)) print(data.describe()) # 0 1 2 3 # count 1000.000000 1000.000000 1000.000000 1000.000000 # mean 0.008124 -0.008050 -0.013403 -0.008261 # std 0.979236 0.992982 0.998819 1.038760 # min -3.231914 -3.441270 -3.345210 -4.320565 # 25% -0.634801 -0.599852 -0.656481 -0.677611 # 50% -0.033252 0.000060 -0.040634 -0.015463 # 75% 0.649340 0.644312 0.678101 0.683849 # max 3.292099 2.758754 2.911447 3.371729 \u627e\u51fa\u4e00\u5217\u4e2d\u7edd\u5bf9\u503c\u5927\u4e8e\u4e09\u7684\u503c col = data[2] result = col[np.abs(col) > 3] print(result) # 519 -3.035355 # 536 -3.345210 # Name: 2, dtype: float64 \u9009\u51fa\u6240\u6709\u503c\u5927\u4e8e3\u6216\u5c0f\u4e8e-3\u7684\u884c\uff0c\u53ef\u4ee5\u5bf9\u5e03\u5c14\u503cDataFrame\u4f7f\u7528any\u65b9\u6cd5 result = data[(np.abs(data) > 3).any(1)] print(result) # 0 1 2 3 # 116 -0.080907 -3.441270 -0.163263 0.392800 # 139 -1.294440 1.828397 1.178897 -3.469466 # 241 -0.486292 0.150443 0.264172 -3.013440 # 295 3.292099 -0.339284 0.732829 -0.475202 # 355 0.307577 -3.053322 0.967497 0.896363 # 359 3.264981 -1.172096 0.207622 -0.281803 # 519 -0.448987 1.623843 -3.035355 -0.436833 # 533 -1.022616 -0.212597 1.030969 3.371729 # 536 1.067598 -1.306839 -3.345210 0.620834 # 541 -0.952760 -2.157970 -0.403199 -4.320565 # 690 0.006821 -3.104117 0.484881 -0.132613 # 750 -3.231914 1.017712 0.070430 0.631447 # 771 -3.007622 0.257960 -0.118179 -1.283365 # 976 1.684760 -0.003295 -0.249843 3.169371 \u6839\u636e\u8fd9\u4e9b\u6807\u51c6\u6765\u8bbe\u7f6e\u6765\u9650\u5b9a\u503c\uff0c\u4e0b\u9762\u4ee3\u7801\u9650\u5236\u4e86-3\u52303\u4e4b\u95f4\u7684\u6570\u503c \\ \u8bed\u53e5np.sign(data)\u6839\u636e\u6570\u636e\u4e2d\u7684\u503c\u7684\u6b63\u8d1f\u5206\u522b\u751f\u62101\u548c-1\u7684\u6570\u503c result = data[(np.abs(data) > 3)] = np.sign(data) * 3 print(result.describe()) # 0 1 2 3 # count 1000.000000 1000.000000 1000.000000 1000.000000 # mean -0.036000 0.000000 -0.084000 -0.048000 # std 3.001285 3.001501 3.000324 3.001117 # min -3.000000 -3.000000 -3.000000 -3.000000 # 25% -3.000000 -3.000000 -3.000000 -3.000000 # 50% -3.000000 0.000000 -3.000000 -3.000000 # 75% 3.000000 3.000000 3.000000 3.000000 # max 3.000000 3.000000 3.000000 3.000000 print(result.head()) # 0 1 2 3 # 0 -3.0 3.0 -3.0 -3.0 # 1 -3.0 -3.0 -3.0 -3.0 # 2 3.0 3.0 -3.0 3.0 # 3 3.0 -3.0 3.0 -3.0 # 4 3.0 -3.0 -3.0 -3.0","title":"\u68c0\u6d4b\u548c\u8fc7\u6ee4\u5f02\u5e38\u503c"},{"location":"python/DataAnalysis/ch04/#_11","text":"\u4f7f\u7528numpy.random.permutation\u5bf9DataFrame\u4e2d\u7684Series\u6216\u884c\u8fdb\u884c\u7f6e\u6362\uff08\u968f\u673a\u91cd\u6392\u5e8f\uff09\u3002\\ \u5728\u8c03\u7528permutation\u65f6\u6839\u636e\u4f60\u60f3\u8981\u7684\u8f74\u957f\u5ea6\u53ef\u4ee5\u4ea7\u751f\u4e00\u4e2a\u8868\u793a\u65b0\u987a\u5e8f\u7684\u6574\u6570\u6570\u7ec4 df = pd.DataFrame(np.arange(5 * 4).reshape((5, 4))) sampler = np.random.permutation(5) print(sampler) # \u8fd4\u56dearray # [1 4 3 0 2] print(df) # 0 1 2 3 # 0 0 1 2 3 # 1 4 5 6 7 # 2 8 9 10 11 # 3 12 13 14 15 # 4 16 17 18 19 \u4e0a\u9762\u8fd4\u56de\u7684sampler\u6574\u6570\u6570\u7ec4[1 4 3 0 2]\u7528\u5728\u57fa\u4e8eiloc\u7684\u7d22\u5f15\u6216\u7b49\u4ef7\u7684take\u51fd\u6570\u4e2d\uff0c\u91cd\u65b0\u6392\u5217\u884c\u987a\u5e8f print(df.take(sampler)) # 0 1 2 3 # 1 4 5 6 7 # 4 16 17 18 19 # 3 12 13 14 15 # 0 0 1 2 3 # 2 8 9 10 11 \u9009\u51fa\u4e00\u4e2a\u4e0d\u542b\u6709\u66ff\u4ee3\u503c\u7684\u968f\u673a\u5b50\u96c6\uff0c\u53ef\u4ee5\u4f7f\u7528Series\u548cDataFrame\u7684sample\u65b9\u6cd5 result = df.sample(n=3) print(result) # 0 1 2 3 # 0 0 1 2 3 # 2 8 9 10 11 # 1 4 5 6 7 \u8981\u751f\u6210\u4e00\u4e2a\u5e26\u6709\u66ff\u4ee3\u503c\u7684\u6837\u672c\uff08\u5141\u8bb8\u6709\u91cd\u590d\u9009\u62e9\uff09\uff0c\u5c06replace=True\u4f20\u5165sample\u65b9\u6cd5 choice = pd.Series([5, 7, -1, 6, 4]) draws = choice.sample(n=10, replace=True) print(choice) # 0 5 # 1 7 # 2 -1 # 3 6 # 4 4 # dtype: int64 print(draws) # 4 4 # 0 5 # 0 5 # 3 6 # 4 4 # 0 5 # 1 7 # 3 6 # 2 -1 # 0 5 # dtype: int64","title":"\u7f6e\u6362\u548c\u968f\u673a\u62bd\u6837"},{"location":"python/DataAnalysis/ch04/#_12","text":"\u5c06\u5206\u7c7b\u53d8\u91cf\u8f6c\u6362\u4e3a\u201c\u865a\u62df\u201d\u6216\u201c\u6307\u6807\u201d\u77e9\u9635\u662f\u53e6\u4e00\u79cd\u7528\u4e8e\u7edf\u8ba1\u5efa\u6a21\u6216\u673a\u5668\u5b66\u4e60\u7684\u8f6c\u6362\u64cd\u4f5c\u3002\\ \u5982\u679cDataFrame\u4e2d\u7684\u4e00\u5217\u6709k\u4e2a\u4e0d\u540c\u7684\u503c\uff0c\u5219\u53ef\u4ee5\u884d\u751f\u4e00\u4e2ak\u5217\u7684\u503c\u4e3a1\u548c0\u7684\u77e9\u9635\u6216DataFrame\u3002\\ pandas\u6709\u4e00\u4e2aget_dummies\u51fd\u6570\u7528\u4e8e\u5b9e\u73b0\u8be5\u529f\u80fd df = pd.DataFrame( { 'key': ['b', 'b', 'a', 'c', 'a', 'b'], 'data1': range(6) } ) print(df) # key data1 # 0 b 0 # 1 b 1 # 2 a 2 # 3 c 3 # 4 a 4 # 5 b 5 \u5728\u6307\u6807DataFrame\u7684\u5217\u4e0a\u52a0\u5165\u524d\u7f00\uff0c\u7136\u540e\u4e0e\u5176\u4ed6\u6570\u636e\u5408\u5e76\u3002\u5728get_dummies\u65b9\u6cd5\u4e2d\u6709\u4e00\u4e2a\u524d\u7f00\u53c2\u6570\u7528\u4e8e\u5b9e\u73b0\u8be5\u529f\u80fd \\ \u901a\u8fc7get_dummies\u65b9\u6cd5\uff0c\u628a\u4e0a\u9762df\u6570\u636e\u6309\u7167key\u8fdb\u884c\u4e86\u5206\u7ec4\uff0c\u5e76\u901a\u8fc7\u4e0d\u540c\u5217\u6765\u5c55\u73b0\u5206\u7ec4\u540e\u7684\u5bf9\u5e94\u5173\u7cfb\u3002\u4f8b\u5982\uff0ckey\u5217\u7684a\uff0c\u5bf9\u5e94\u503c2\u548c4 dummies = pd.get_dummies(df['key'], prefix='key') print(dummies) # key_a key_b key_c # 0 0 1 0 # 1 0 1 0 # 2 1 0 0 # 3 0 0 1 # 4 1 0 0 # 5 0 1 0 df_with_dummy = df[['data1']].join(dummies) print(df_with_dummy) # data1 key_a key_b key_c # 0 0 0 1 0 # 1 1 0 1 0 # 2 2 1 0 0 # 3 3 0 0 1 # 4 4 1 0 0 # 5 5 0 1 0 \u66f4\u4e3a\u590d\u6742\u7684\u60c5\u51b5\uff0cDataFrame\u4e2d\u7684\u4e00\u884c\u5c5e\u4e8e\u591a\u4e2a\u7c7b\u522b\u3002 \u4ee5MovieLens\u76841M\u6570\u636e\u96c6\u4e3a\u4f8b\u3002 \u589e\u52a0\u53c2\u6570 encoding='unicode_escape'\u907f\u514d\u51fa\u73b0\u4e0b\u9762\u7684\u9519\u8bef\uff1a * UnicodeDecodeError: 'utf-8' codec can't decode byte 0xe9 in position 3114: invalid continuation byte \u589e\u52a0\u53c2\u6570 engine='python'\u907f\u514d\u51fa\u73b0\u4e0b\u9762\u7684\u9519\u8bef\uff1a * ParserWarning: Falling back to the 'python' engine because the 'c' engine does not support regex separators * (separators > 1 char and different from '\\s+' are interpreted as regex); * you can avoid this warning by specifying engine='python'. mnames = ['movie_id', 'title', 'genres'] movies = pd.read_table( '../datasets/movielens/movies.dat', sep='::', header=None, names=mnames, encoding='unicode_escape', engine='python' ) print(movies[:10]) # movie_id title genres # 0 1 Toy Story (1995) Animation|Children's|Comedy # 1 2 Jumanji (1995) Adventure|Children's|Fantasy # 2 3 Grumpier Old Men (1995) Comedy|Romance # 3 4 Waiting to Exhale (1995) Comedy|Drama # 4 5 Father of the Bride Part II (1995) Comedy # 5 6 Heat (1995) Action|Crime|Thriller # 6 7 Sabrina (1995) Comedy|Romance # 7 8 Tom and Huck (1995) Adventure|Children's # 8 9 Sudden Death (1995) Action # 9 10 GoldenEye (1995) Action|Adventure|Thriller \u4e3a\u6bcf\u4e2a\u7535\u5f71\u6d41\u6d3e\u6dfb\u52a0\u6307\u6807\u53d8\u91cf\u9700\u8981\u8fdb\u884c\u4e00\u4e9b\u6570\u636e\u5904\u7406\u3002 \\ \u9996\u5148\uff0c\u6211\u4eec\u4ece\u6570\u636e\u96c6\u4e2d\u63d0\u53d6\u51fa\u6240\u6709\u4e0d\u540c\u7684\u6d41\u6d3e\u7684\u5217\u8868\u3002 all_genres = [] for x in movies.genres: all_genres.extend(x.split('|')) genres = pd.unique(all_genres) print(genres) # ['Animation' \"Children's\" 'Comedy' 'Adventure' 'Fantasy' 'Romance' 'Drama' # 'Action' 'Crime' 'Thriller' 'Horror' 'Sci-Fi' 'Documentary' 'War' # 'Musical' 'Mystery' 'Film-Noir' 'Western'] \u4f7f\u7528\u51680\u7684DataFrame\u662f\u6784\u5efa\u6307\u6807DataFrame\u7684\u4e00\u79cd\u65b9\u5f0f zero_matrix = np.zeros((len(movies), len(genres))) dummies = pd.DataFrame(zero_matrix, columns=genres) print(zero_matrix) # [[0. 0. 0. ... 0. 0. 0.] # [0. 0. 0. ... 0. 0. 0.] # [0. 0. 0. ... 0. 0. 0.] # ... # [0. 0. 0. ... 0. 0. 0.] # [0. 0. 0. ... 0. 0. 0.] # [0. 0. 0. ... 0. 0. 0.]] print(dummies.head(n=10)) # Animation Children's Comedy ... Mystery Film-Noir Western # 0 0.0 0.0 0.0 ... 0.0 0.0 0.0 # 1 0.0 0.0 0.0 ... 0.0 0.0 0.0 # 2 0.0 0.0 0.0 ... 0.0 0.0 0.0 # 3 0.0 0.0 0.0 ... 0.0 0.0 0.0 # 4 0.0 0.0 0.0 ... 0.0 0.0 0.0 # 5 0.0 0.0 0.0 ... 0.0 0.0 0.0 # 6 0.0 0.0 0.0 ... 0.0 0.0 0.0 # 7 0.0 0.0 0.0 ... 0.0 0.0 0.0 # 8 0.0 0.0 0.0 ... 0.0 0.0 0.0 # 9 0.0 0.0 0.0 ... 0.0 0.0 0.0 # # [10 rows x 18 columns] \u904d\u5386\u6bcf\u4e00\u90e8\u7535\u5f71\uff0c\u5c06dummies\u6bcf\u4e00\u884c\u7684\u6761\u76ee\u8bbe\u7f6e\u4e3a1\u3002\\ \u4f7f\u7528dummies.columns\u6765\u8ba1\u7b97\u6bcf\u4e00\u4e2a\u6d41\u6d3e\u7684\u5217\u6307\u6807 gen = movies.genres[0] print(gen.split('|')) # ['Animation', \"Children's\", 'Comedy'] result = dummies.columns.get_indexer(gen.split('|')) print(result) # [0 1 2] \u4f7f\u7528.loc\u6839\u636e\u8fd9\u4e9b\u6307\u6807\u6765\u8bbe\u7f6e\u503c for i, gen in enumerate(movies.genres): indices = dummies.columns.get_indexer(gen.split('|')) dummies.iloc[i, indices] = 1 \u5c06\u7ed3\u679c\u4e0emovies\u8fdb\u884c\u5408\u5e76 movies_windic = movies.join(dummies.add_prefix('Genre_')) print(movies_windic.iloc[0]) # movie_id 1 # title Toy Story (1995) # genres Animation|Children's|Comedy # Genre_Animation 1.0 # Genre_Children's 1.0 # Genre_Comedy 1.0 # Genre_Adventure 0.0 # Genre_Fantasy 0.0 # Genre_Romance 0.0 # Genre_Drama 0.0 # Genre_Action 0.0 # Genre_Crime 0.0 # Genre_Thriller 0.0 # Genre_Horror 0.0 # Genre_Sci-Fi 0.0 # Genre_Documentary 0.0 # Genre_War 0.0 # Genre_Musical 0.0 # Genre_Mystery 0.0 # Genre_Film-Noir 0.0 # Genre_Western 0.0 # Name: 0, dtype: object \u5bf9\u4e8e\u66f4\u5927\u7684\u6570\u636e\uff0c\u4e0a\u9762\u8fd9\u79cd\u4f7f\u7528\u591a\u6210\u5458\u6784\u5efa\u6307\u6807\u53d8\u91cf\u5e76\u4e0d\u662f\u7279\u522b\u5feb\u901f\u3002\\ \u66f4\u597d\u7684\u65b9\u6cd5\u662f\u5199\u4e00\u4e2a\u76f4\u63a5\u5c06\u6570\u636e\u5199\u4e3aNumPy\u6570\u7ec4\u7684\u5e95\u5c42\u51fd\u6570\uff0c\u7136\u540e\u5c06\u7ed3\u679c\u5c01\u88c5\u8fdbDataFrame\u3002\\ \u5c06get_dummies\u4e0ecut\u7b49\u79bb\u6563\u5316\u51fd\u6570\u7ed3\u5408\u4f7f\u7528\u662f\u7edf\u8ba1\u5e94\u7528\u7684\u4e00\u4e2a\u6709\u7528\u65b9\u6cd5\u3002 np.random.seed(12345) # \u4f7f\u7528numpy.random.seed\u6765\u8bbe\u7f6e\u968f\u673a\u79cd\u5b50\u4ee5\u786e\u4fdd\u793a\u4f8b\u7684\u786e\u5b9a\u6027 values = np.random.rand(10) print(values) # [0.92961609 0.31637555 0.18391881 0.20456028 0.56772503 0.5955447 # 0.96451452 0.6531771 0.74890664 0.65356987] bins = [0, 0.2, 0.4, 0.6, 0.8, 1] result = pd.get_dummies(pd.cut(values, bins)) print(result) # (0.0, 0.2] (0.2, 0.4] (0.4, 0.6] (0.6, 0.8] (0.8, 1.0] # 0 0 0 0 0 1 # 1 0 1 0 0 0 # 2 1 0 0 0 0 # 3 0 1 0 0 0 # 4 0 0 1 0 0 # 5 0 0 1 0 0 # 6 0 0 0 0 1 # 7 0 0 0 1 0 # 8 0 0 0 1 0 # 9 0 0 0 1 0","title":"\u8ba1\u7b97\u6307\u6807/\u865a\u62df\u53d8\u91cf"},{"location":"python/DataAnalysis/ch04/#_13","text":"import re pandas\u5141\u8bb8\u5c06\u5b57\u7b26\u4e32\u548c\u6b63\u5219\u8868\u8fbe\u5f0f\u7b80\u6d01\u5730\u5e94\u7528\u5230\u6574\u4e2a\u6570\u636e\u6570\u7ec4\u4e0a\uff0c\u6b64\u5916\u8fd8\u80fd\u5904\u7406\u6570\u636e\u7f3a\u5931\u3002","title":"\u5b57\u7b26\u4e32\u64cd\u4f5c"},{"location":"python/DataAnalysis/ch04/#_14","text":"\u5b57\u4e32\u62c6\u5206\u5408\u5e76\u65b9\u6cd5\\ \u5728\u5f88\u591a\u5b57\u7b26\u4e32\u5904\u7406\u548c\u811a\u672c\u5e94\u7528\u4e2d\uff0c\u5185\u5efa\u7684\u5b57\u7b26\u4e32\u65b9\u6cd5\u662f\u8db3\u591f\u7684\u3002\\ \u4f8b\u5982\uff0c\u4e00\u4e2a\u9017\u53f7\u5206\u9694\u7684\u5b57\u7b26\u4e32\u53ef\u4ee5\u4f7f\u7528split\u65b9\u6cd5\u62c6\u5206\u6210\u591a\u5757\u3002 import numpy as np import pandas as pd val = 'a, b, guido' result = val.split(',') print(result) # ['a', ' b', ' guido'] count\uff1a\u8fd4\u56de\u5b50\u5b57\u7b26\u4e32\u5728\u5b57\u7b26\u4e32\u4e2d\u7684\u975e\u91cd\u53e0\u51fa\u73b0\u6b21\u6570 result = val.count(',') print(result) # 2 endswith\uff1a\u5982\u679c\u5b57\u7b26\u4e32\u4ee5\u540e\u7f00\u7ed3\u5c3e\u5219\u8fd4\u56deTrue\\ startswith\uff1a\u5982\u679c\u5b57\u7b26\u4e32\u4ee5\u540e\u7f00\u7ed3\u5c3e\u5219\u8fd4\u56deTrue result = val.endswith('b') print(result) # False result = val.endswith('o') print(result) # True result = val.startswith('a') print(result) # True split\u5e38\u548cstrip\u4e00\u8d77\u4f7f\u7528\uff0c\u7528\u4e8e\u6e05\u9664\u7a7a\u683c\uff08\u5305\u62ec\u6362\u884c\uff09\\ split\uff1a\u4f7f\u7528\u5206\u9694\u7b26\u8bb2\u5b57\u7b26\u4e32\u62c6\u5206\u6210\u5b50\u5b57\u7b26\u4e32\u7684\u5217\u8868\\ strip\uff0crstrip\uff0clstrip\uff1a\u4fee\u526a\u7a7a\u767d\uff0c\u5305\u62ec\u6362\u884c\u7b26\uff1b\u76f8\u5f53\u4e8e\u5bf9\u6bcf\u4e2a\u5143\u7d20\u8fdb\u884cx.strip()(\u4ee5\u53carstrip\uff0clstrip) pieces = [x.strip() for x in val.split(',')] print(pieces) # ['a', 'b', 'guido'] \u8fd9\u4e9b\u5b50\u5b57\u7b26\u4e32\u53ef\u4ee5\u4f7f\u7528\u52a0\u6cd5\u4e0e\u4e24\u4e2a\u5192\u53f7\u5206\u9694\u7b26\u8fde\u63a5\u5728\u4e00\u8d77 first, second, third = pieces result = first + '::' + second + '::' + third print(result) # a::b::guido \u4f46\u662f\u8fd9\u5e76\u4e0d\u662f\u4e00\u4e2a\u5b9e\u7528\u7684\u901a\u7528\u65b9\u6cd5\u3002\\ \u5728\u5b57\u7b26\u4e32\u2019 : : \u2019\u7684join\u65b9\u6cd5\u4e2d\u4f20\u5165\u4e00\u4e2a\u5217\u8868\u6216\u5143\u7ec4\u662f\u4e00\u79cd\u66f4\u5feb\u4e14\u66f4\u52a0Pythonic\uff08Python\u98ce\u683c\u5316\uff09\u7684\u65b9\u6cd5\\ join: \u4f7f\u7528\u5b57\u7b26\u4e32\u5ea7\u4f4d\u95f4\u9694\u7b26\uff0c\u7528\u4e8e\u7c98\u5408\u5176\u4ed6\u5b57\u7b26\u4e32\u7684\u5e8f\u5217 result = '::'.join(pieces) print(result) # a::b::guido \u5b9a\u4f4d\u5b50\u5b57\u7b26\u4e32\u7684\u65b9\u6cd5\u3002\\ \u4f7f\u7528Python\u7684in\u5173\u952e\u5b57\u662f\u68c0\u6d4b\u5b50\u5b57\u7b26\u4e32\u7684\u6700\u4f73\u65b9\u6cd5\uff0c\u5c3d\u7ba1index\u548cfind\u4e5f\u80fd\u5b9e\u73b0\u540c\u6837\u7684\u529f\u80fd result = 'guido' in val print(result) # True index\uff1a\u5982\u679c\u5728\u5b57\u7b26\u4e32\u4e2d\u627e\u5230\uff0c\u5219\u8fd4\u56de\u5b50\u5b57\u7b26\u4e32\u4e2d\u7b2c\u4e00\u4e2a\u5b57\u7b26\u7684\u4f4d\u7f6e\uff0c\u5982\u679c\u627e\u4e0d\u5230\u5219\u89e6\u53d1\u4e00\u4e2aValueError\\ find\uff1a\u8fd4\u56de\u5b57\u7b26\u4e32\u4e2d\u7b2c\u4e00\u4e2a\u51fa\u73b0\u5b50\u5b57\u7b26\u7684\u7b2c\u4e00\u4e2a\u5b57\u7b26\u7684\u4f4d\u7f6e\uff0c\u7c7b\u4f3cindex\uff0c\u5982\u679c\u6ca1\u6709\u627e\u5230\uff0c\u5219\u8fd4\u56de-1\\ rfind\uff1a\u8fd4\u56de\u5b57\u7b26\u4e32\u4e2d\u5b50\u5b57\u7b26\u6700\u540e\u4e00\u6b21\u51fa\u73b0\u65f6\u7b2c\u4e00\u4e2a\u5b57\u7b26\u7684\u4f4d\u7f6e\uff0c\u5982\u679c\u6ca1\u6709\u627e\u5230\uff0c\u5219\u8fd4\u56de-1 result = val.index(',') print(result) # 1 result = val.find(',') print(result) # 1 # result = val.index(':') print(result) # ValueError: substring not found result = val.find(':') print(result) # -1 result = val.rfind(',') print(result) # 4 replace\u5c06\u7528\u4e00\u79cd\u6a21\u5f0f\u66ff\u4ee3\u53e6\u4e00\u79cd\u6a21\u5f0f\u3002\u5b83\u4e5f\u7528\u4e8e\u4f20\u5165\u7a7a\u5b57\u7b26\u4e32\u6765\u5220\u9664\u67d0\u4e2a\u6a21\u5f0f result = val.replace(',', '::') print(result) # a:: b:: guido result = val.replace(', ', '') print(result) # abguido result = val.replace(',', '') print(result) # a b guido lower\uff1a\u5c06\u5927\u5199\u5b57\u6bcd\u8f6c\u6362\u4e3a\u5c0f\u5199\u5b57\u6bcd\\ upper\uff1a\u5c06\u5c0f\u5199\u5b57\u6bcd\u8f6c\u6362\u4e3a\u5927\u5199\u5b57\u6bcd uppers = val.upper() print(uppers) # A, B, GUIDO casefold\uff1a\u548clower\u7c7b\u4f3c\uff0c\u5c06\u5b57\u7b26\u4e32\u4e2d\u7684\u5143\u7d20\u53d8\u6210\u5c0f\u5199\uff0clower\u51fd\u6570\u53ea\u652f\u6301ascill\u8868\u4e2d\u7684\u5b57\u7b26\uff0ccasefold\u652f\u6301\u5f88\u591a\u4e0d\u540c\u79cd\u7c7b\u7684\u8bed\u8a00 str1 = \"Jan Wei\u03b2@cN\u4e0a\u6d77\" result = str1.casefold() print(result) # jan wei\u03b2@cn\u4e0a\u6d77 result = str1.lower() print(result) # jan wei\u03b2@cn\u4e0a\u6d77 ljust\uff0crjust\uff1a\u5de6\u5bf9\u9f50\u6216\u8005\u53f3\u5bf9\u9f50\uff1b\u7528\u7a7a\u683c\u6216\u8005\u5176\u5b83\u4e00\u4e9b\u5b57\u7b26\u586b\u5145\u5b57\u7b26\u4e32\u7684\u76f8\u53cd\u4fa7\uff0c\u4ee5\u8fd4\u56de\u5177\u6709\u6700\u5c0f\u5bbd\u5ea6\u7684\u5b57\u7b26\u4e32 str1 = 'https://docs.python.org/3/' str2 = 'https://packagehub.suse.com/package-categories/python/' print(str1.ljust(60, '*')) print(str2.ljust(60, '*')) # https://docs.python.org/3/********************************** # https://packagehub.suse.com/package-categories/python/****** print(str1.rjust(60, '*')) print(str2.rjust(60, '*')) # **********************************https://docs.python.org/3/ # ******https://packagehub.suse.com/package-categories/python/ print(str1.rjust(60)) print(str2.rjust(60))","title":"\u5b57\u7b26\u4e32\u5bf9\u8c61\u65b9\u6cd5"},{"location":"python/DataAnalysis/ch04/#_15","text":"Python\u5185\u5efa\u7684re\u6a21\u5757\u662f\u7528\u4e8e\u5c06\u6b63\u5219\u8868\u8fbe\u5f0f\u5e94\u7528\u5230\u5b57\u7b26\u4e32\u4e0a\u7684\u5e93\u3002\\ re\u6a21\u5757\u4e3b\u8981\u6709\u4e09\u4e2a\u4e3b\u9898\uff1a\u6a21\u5f0f\u5339\u914d\u3001\u66ff\u4ee3\u3001\u62c6\u5206\u3002 \\ \u770b\u4e00\u4e2a\u7b80\u5355\u7684\u793a\u4f8b\uff1a\u5047\u8bbe\u6211\u4eec\u60f3\u5c06\u542b\u6709\u591a\u79cd\u7a7a\u767d\u5b57\u7b26\uff08\u5236\u8868\u7b26\u3001\u7a7a\u683c\u3001\u6362\u884c\u7b26\uff09\u7684\u5b57\u7b26\u4e32\u62c6\u5206\u5f00\u3002\\ \u63cf\u8ff0\u4e00\u4e2a\u6216\u591a\u4e2a\u7a7a\u767d\u5b57\u7b26\u7684\u6b63\u5219\u8868\u8fbe\u5f0f\u662f\\s+\\ \u5f53\u8c03\u7528re.split('\\s+', text)\uff0c\u6b63\u5219\u8868\u8fbe\u5f0f\u9996\u5148\u4f1a\u88ab\u7f16\u8bd1\uff0c\u7136\u540e\u6b63\u5219\u8868\u8fbe\u5f0f\u7684split\u65b9\u6cd5\u5728\u4f20\u5165\u6587\u672c\u4e0a\u88ab\u8c03\u7528\u3002 text = \"foo bar\\t baz \\tqux\" result = re.split('\\s+', text) print(result) # ['foo', 'bar', 'baz', 'qux'] \u53ef\u4ee5\u4f7f\u7528re.compile\u81ea\u884c\u7f16\u8bd1\uff0c\u5f62\u6210\u4e00\u4e2a\u53ef\u590d\u7528\u7684\u6b63\u5219\u8868\u8fbe\u5f0f\u5bf9\u8c61 regex = re.compile('\\s+') result = regex.split(text) print(result) # ['foo', 'bar', 'baz', 'qux'] \u5982\u679c\u60f3\u83b7\u5f97\u7684\u662f\u4e00\u4e2a\u6240\u6709\u5339\u914d\u6b63\u5219\u8868\u8fbe\u5f0f\u7684\u6a21\u5f0f\u7684\u5217\u8868\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528findall\u65b9\u6cd5 result = regex.findall(text) print(result) # [' ', '\\t ', ' \\t'] \u4e3a\u4e86\u5728\u6b63\u5219\u8868\u8fbe\u5f0f\u4e2d\u907f\u514d\u8f6c\u4e49\u7b26\\\u7684\u5f71\u54cd\uff0c\u53ef\u4ee5\u4f7f\u7528\u539f\u751f\u5b57\u7b26\u4e32\u8bed\u6cd5\uff0c\u6bd4\u5982r'C:\\x'\u6216\u8005\u7528\u7b49\u4ef7\u7684'C:\\x'\\ \u5982\u679c\u9700\u8981\u5c06\u76f8\u540c\u7684\u8868\u8fbe\u5f0f\u5e94\u7528\u5230\u591a\u4e2a\u5b57\u7b26\u4e32\u4e0a\uff0c\u63a8\u8350\u4f7f\u7528re.compile\u521b\u5efa\u4e00\u4e2a\u6b63\u5219\u8868\u8fbe\u5f0f\u5bf9\u8c61\uff0c\u8fd9\u6837\u505a\u6709\u5229\u4e8e\u8282\u7ea6CPU\u5468\u671f\u3002\\ \\ match\u548csearch\u4e0efindall\u76f8\u5173\u6027\u5f88\u5927\u3002\\ findall\u8fd4\u56de\u7684\u662f\u5b57\u7b26\u4e32\u4e2d\u6240\u6709\u7684\u5339\u914d\u9879\uff0c\u800csearch\u8fd4\u56de\u7684\u4ec5\u4ec5\u662f\u7b2c\u4e00\u4e2a\u5339\u914d\u9879\u3002\\ match\u66f4\u4e3a\u4e25\u683c\uff0c\u5b83\u53ea\u5728\u5b57\u7b26\u4e32\u7684\u8d77\u59cb\u4f4d\u7f6e\u8fdb\u884c\u5339\u914d\u3002 text = \"\"\"Dave dave@google.com Steve steve@gmail.com Rob rob@gmail.com Ryan ryan@yahoo.com \"\"\" pattern = r'[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}' regex = re.compile(pattern, flags=re.IGNORECASE) # flags=re.IGNORECASE \u4f7f\u6b63\u5219\u8868\u8fbe\u5f0f\u4e0d\u533a\u5206\u5927\u5c0f\u5199 m = regex.findall(text) # findall\u4f1a\u751f\u6210\u4e00\u4e2a\u7535\u5b50\u90ae\u4ef6\u5730\u5740\u7684\u5217\u8868 print(m) # ['dave@google.com', 'steve@gmail.com', 'rob@gmail.com', 'ryan@yahoo.com'] search\u8fd4\u56de\u7684\u662f\u6587\u672c\u4e2d\u7b2c\u4e00\u4e2a\u5339\u914d\u5230\u7684\u7535\u5b50\u90ae\u4ef6\u5730\u5740\u3002\\ \u5bf9\u4e8e\u524d\u9762\u63d0\u5230\u7684\u6b63\u5219\u8868\u8fbe\u5f0f\uff0c\u5339\u914d\u5bf9\u8c61\u53ea\u80fd\u544a\u8bc9\u6211\u4eec\u6a21\u5f0f\u5728\u5b57\u7b26\u4e32\u4e2d\u8d77\u59cb\u548c\u7ed3\u675f\u7684\u4f4d\u7f6e m = regex.search(text) print(m) # <re.Match object; span=(5, 20), match='dave@google.com'> print(text[m.start():m.end()]) # dave@google.com regex.match\u53ea\u5728\u6a21\u5f0f\u51fa\u73b0\u4e8e\u5b57\u7b26\u4e32\u8d77\u59cb\u4f4d\u7f6e\u65f6\u8fdb\u884c\u5339\u914d\uff0c\u5982\u679c\u6ca1\u6709\u5339\u914d\u5230\uff0c\u8fd4\u56deNone m = regex.match(text) print(m) # None m = regex.match('rob@gmail.com') print(m) # <re.Match object; span=(0, 13), match='rob@gmail.com'> print(m.group()) # rob@gmail.com print(m.groups()) # () regex.sub\u4f1a\u8fd4\u56de\u4e00\u4e2a\u65b0\u7684\u5b57\u7b26\u4e32\uff0c\u539f\u5b57\u7b26\u4e32\u4e2d\u7684\u6a21\u5f0f\u4f1a\u88ab\u4e00\u4e2a\u65b0\u7684\u5b57\u7b26\u4e32\u66ff\u4ee3 m = regex.sub('REDACTED', text) print(m) # Dave REDACTED # Steve REDACTED # Rob REDACTED # Ryan REDACTED \u67e5\u627e\u7535\u5b50\u90ae\u4ef6\u5730\u5740\uff0c\u5e76\u5c06\u6bcf\u4e2a\u5730\u5740\u5206\u4e3a\u4e09\u4e2a\u90e8\u5206\uff1a\u7528\u6237\u540d\uff0c\u57df\u540d\u548c\u57df\u540d\u540e\u7f00\u3002\u8981\u5b9e\u73b0\u8fd9\u4e00\u70b9\uff0c\u53ef\u4ee5\u7528\u62ec\u53f7\u5c06pattern\u5305\u8d77\u6765\\ \u4fee\u6539\u540e\u7684\u6b63\u5219\u8868\u8fbe\u5f0f\u4ea7\u751f\u7684\u5339\u914d\u5bf9\u8c61\u7684groups\u65b9\u6cd5\uff0c\u8fd4\u56de\u7684\u662f\u6a21\u5f0f\u7ec4\u4ef6\u7684\u5143\u7ec4 text = \"\"\"Dave dave@google.com Steve steve@gmail.com Rob rob@gmail.com Ryan ryan@yahoo.com \"\"\" pattern = r'([A-Z0-9._%+-]+)@([A-Z0-9.-]+)\\.([A-Z]{2,4})' regex = re.compile(pattern, flags=re.IGNORECASE) m = regex.findall(text) # \u5f53pattern\u53ef\u4ee5\u5206\u7ec4\u65f6\uff0cfindall\u8fd4\u56de\u7684\u662f\u5305\u542b\u5143\u7ec4\u7684\u5217\u8868 print(m) # [('dave', 'google', 'com'), ('steve', 'gmail', 'com'), ('rob', 'gmail', 'com'), ('ryan', 'yahoo', 'com')] m = regex.search(text) print(m) # <re.Match object; span=(5, 20), match='dave@google.com'> print(text[m.start():m.end()]) # dave@google.com m = regex.match('rob@gmail.com') print(m) # <re.Match object; span=(0, 13), match='rob@gmail.com'> print(m.group()) # rob@gmail.com print(m.groups()) # ('rob', 'gmail', 'com') m = regex.sub('REDACTED', text) print(m) # Dave REDACTED # Steve REDACTED # Rob REDACTED # Ryan REDACTED m = regex.sub(r'Username: \\1, Domain: \\2, Suffix: \\3', text) print(m) # Dave Username: dave, Domain: google, Suffix: com # Steve Username: steve, Domain: gmail, Suffix: com # Rob Username: rob, Domain: gmail, Suffix: com # Ryan Username: ryan, Domain: yahoo, Suffix: com","title":"\u6b63\u5219\u8868\u8fbe\u5f0f"},{"location":"python/DataAnalysis/ch04/#pandas","text":"\u6e05\u7406\u6742\u4e71\u7684\u6570\u636e\u96c6\u7528\u4e8e\u5206\u6790\u901a\u5e38\u9700\u8981\u5927\u91cf\u7684\u5b57\u7b26\u4e32\u5904\u7406\u548c\u6b63\u5219\u5316\u3002 data = { 'Dave': 'dave@gmail.com', 'Steve': 'steve@gmail.com', 'Rob': 'rob@gmail.com', 'Wes': np.nan } data = pd.Series(data) print(data) # Dave dave@gmail.com # Steve steve@gmail.com # Rob rob@gmail.com # Wes NaN # dtype: object print(data.isnull()) # Dave False # Steve False # Rob False # Wes True # dtype: bool \u53ef\u4ee5\u4f7f\u7528data.map\u5c06\u5b57\u7b26\u4e32\u548c\u6709\u6548\u7684\u6b63\u5219\u8868\u8fbe\u5f0f\u65b9\u6cd5\uff08\u4ee5lambda\u6216\u5176\u4ed6\u51fd\u6570\u7684\u65b9\u5f0f\u4f20\u9012\uff09\u5e94\u7528\u5230\u6bcf\u4e2a\u503c\u4e0a\uff0c\u4f46\u662f\u5728NA\uff08null\uff09\u503c\u4e0a\u4f1a\u5931\u8d25\u3002\\ \u4e3a\u4e86\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0cSeries\u6709\u9762\u5411\u6570\u7ec4\u7684\u65b9\u6cd5\u7528\u4e8e\u8df3\u8fc7NA\u503c\u7684\u5b57\u7b26\u4e32\u64cd\u4f5c\u3002\u8fd9\u4e9b\u65b9\u6cd5\u901a\u8fc7Series\u7684str\u5c5e\u6027\u8fdb\u884c\u8c03\u7528\u3002\\ \\ \u4f8b\u5982\uff0c\u53ef\u4ee5\u901a\u8fc7str.contains\u6765\u68c0\u67e5\u6bcf\u4e2a\u7535\u5b50\u90ae\u4ef6\u5730\u5740\u662f\u5426\u542b\u6709\u2019gmail' m = data.str.contains('gmail') print(m) # Dave True # Steve True # Rob True # Wes NaN # dtype: object \u6b63\u5219\u8868\u8fbe\u5f0f\u4e5f\u53ef\u4ee5\u7ed3\u5408\u4efb\u610f\u7684re\u6a21\u5757\u9009\u9879\u4f7f\u7528\uff0c\u4f8b\u5982IGNORECASE print(pattern) # ([A-Z0-9._%+-]+)@([A-Z0-9.-]+)\\.([A-Z]{2,4}) m = data.str.findall(pattern, flags=re.IGNORECASE) print(m) # Dave [(dave, gmail, com)] # Steve [(steve, gmail, com)] # Rob [(rob, gmail, com)] # Wes NaN # dtype: object \u4f7f\u7528str.get\u6216\u5728str\u5c5e\u6027\u5185\u90e8\u7d22\u5f15\uff0c\u8fdb\u884c\u5411\u91cf\u5316\u7684\u5143\u7d20\u68c0\u7d22\u3002 m = data.str.match(pattern, flags=re.IGNORECASE) print(m) # Dave True # Steve True # Rob True # Wes NaN # dtype: object m = data.str.findall(pattern, flags=re.IGNORECASE) print(m.str.get(1)) # Dave NaN # Steve NaN # Rob NaN # Wes NaN # dtype: float64 print(m.str[0]) # Dave (dave, gmail, com) # Steve (steve, gmail, com) # Rob (rob, gmail, com) # Wes NaN # dtype: object \u4f7f\u7528\u5b57\u7b26\u4e32\u5207\u7247\u7684\u7c7b\u4f3c\u8bed\u6cd5\u8fdb\u884c\u5411\u91cf\u5316\u5207\u7247 print(data.str[:]) # Dave dave@gmail.com # Steve steve@gmail.com # Rob rob@gmail.com # Wes NaN # dtype: object print(data.str[:5]) # Dave dave@ # Steve steve # Rob rob@g # Wes NaN # dtype: object","title":"pandas\u4e2d\u7684\u5411\u91cf\u5316\u5b57\u7b26\u4e32\u51fd\u6570"},{"location":"python/DataAnalysis/ch05/","text":"\u5206\u5c42\u7d22\u5f15 import pandas as pd import numpy as np import re \u5206\u5c42\u7d22\u5f15\u662fpandas\u7684\u91cd\u8981\u7279\u6027\uff0c\u5141\u8bb8\u4f60\u5728\u4e00\u4e2a\u8f74\u5411\u4e0a\u62e5\u6709\u591a\u4e2a\uff08\u4e24\u4e2a\u6216\u4e24\u4e2a\u4ee5\u4e0a\uff09\u7d22\u5f15\u5c42\u7ea7\u3002\\ \u5206\u5c42\u7d22import re\u5f15\u63d0\u4f9b\u4e86\u4e00\u79cd\u5728\u66f4\u4f4e\u7ef4\u5ea6\u7684\u5f62\u5f0f\u4e2d\u5904\u7406\u66f4\u9ad8\u7ef4\u5ea6\u6570\u636e\u7684\u65b9\u5f0f\u3002 Series\u7d22\u5f15\u5206\u5c42 data = pd.Series( np.random.randn(9), index=[['a', 'a', 'a', 'b', 'b', 'c', 'c', 'd', 'd'], [1, 2, 3, 1, 3, 1, 2, 2, 3]] ) \u8f93\u51fa\u662f\u4e00\u4e2a\u4ee5MultiIndex\u4f5c\u4e3a\u7d22\u5f15\u7684Series\u7684\u7f8e\u5316\u89c6\u56fe\u3002\\ \u7d22\u5f15\u4e2d\u7684\"\u95f4\u9699\"\u8868\u793a\"\u76f4\u63a5\u4f7f\u7528\u4e0a\u9762\u7684\u6807\u7b7e\" print(data) # a 1 0.163468 # 2 -1.525926 # 3 -0.210247 # b 1 -0.956063 # 3 -1.839111 # c 1 -0.398905 # 2 0.595279 # d 2 0.034305 # 3 -0.896078 # dtype: float64 print(data.index) # MultiIndex([('a', 1), # ('a', 2), # ('a', 3), # ('b', 1), # ('b', 3), # ('c', 1), # ('c', 2), # ('d', 2), # ('d', 3)], # ) \u901a\u8fc7\u5206\u5c42\u7d22\u5f15\u5bf9\u8c61\uff0c\u4e5f\u53ef\u4ee5\u79f0\u4e3a\u90e8\u5206\u7d22\u5f15\uff0c\u53ef\u4ee5\u7b80\u6d01\u5730\u9009\u62e9\u51fa\u6570\u636e\u7684\u5b50\u96c6 m = data['b'] print(m) # 1 -0.956063 # 3 -1.839111 # dtype: float64 m = data['b': 'c'] print(m) # b 1 -0.956063 # 3 -1.839111 # c 1 -0.398905 # 2 0.595279 # dtype: float64 m = data.loc[['b', 'c']] print(m) # b 1 -0.956063 # 3 -1.839111 # c 1 -0.398905 # 2 0.595279 # dtype: float64 m = data.loc[:, 2] print(m) # a -1.525926 # c 0.595279 # d 0.034305 # dtype: float64 \u5206\u5c42\u7d22\u5f15\u5728\u91cd\u5851\u6570\u636e\u548c\u6570\u7ec4\u900f\u89c6\u8868\u7b49\u5206\u7ec4\u64cd\u4f5c\u4e2d\u626e\u6f14\u4e86\u91cd\u8981\u89d2\u8272\u3002\\ \u4f8b\u5982\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528unstack\u65b9\u6cd5\u5c06\u6570\u636e\u5728DataFrame\u4e2d\u91cd\u65b0\u6392\u5217 m = data.unstack() print(m) # 1 2 3 # a 0.163468 -1.525926 -0.210247 # b -0.956063 NaN -1.839111 # c -0.398905 0.595279 NaN # d NaN 0.034305 -0.896078 n = m.stack() print(n) # \u6216\u8005 print(data.unstack().stack()) # a 1 0.163468 # 2 -1.525926 # 3 -0.210247 # b 1 -0.956063 # 3 -1.839111 # c 1 -0.398905 # 2 0.595279 # d 2 0.034305 # 3 -0.896078 # dtype: float64 DataFrame\u7d22\u5f15\u5206\u5c42 \u5728DataFrame\u4e2d\uff0c\u6bcf\u4e2a\u8f74\u90fd\u53ef\u4ee5\u62e5\u6709\u5206\u5c42\u7d22\u5f15\\ \u53c2\u8003\uff1ahttps://www.jianshu.com/p/2c1c8fbee55a \u65b9\u6cd51\uff1a\u76f4\u63a5\u521b\u5efa \u76f4\u63a5\u901a\u8fc7\u7ed9index\uff08columns\uff09\u53c2\u6570\u4f20\u9012\u591a\u7ef4\u6570\u7ec4\uff0c\u8fdb\u800c\u6784\u5efa\u591a\u7ef4\u7d22\u5f15\u3002\\ \u6570\u7ec4\u4e2d\u6bcf\u4e2a\u7ef4\u5ea6\u5bf9\u5e94\u4f4d\u7f6e\u7684\u5143\u7d20\uff0c\u7ec4\u6210\u6bcf\u4e2a\u7d22\u5f15\u503c\u3002 frame = pd.DataFrame( np.arange(12).reshape((4, 3)), index=[['a', 'a', 'b', 'b'], [1, 2, 1, 2]], columns=[['Ohio', 'Ohio', 'Colorado'], ['Green', 'Red', 'Green']] ) print(frame) # Ohio Colorado # Green Red Green # a 1 0 1 2 # 2 3 4 5 # b 1 6 7 8 # 2 9 10 11 \u4e0a\u9762\u8f93\u51fa\u4e2d\u76842\u4e2a\u5c42\u7ea7\u662f\u6ca1\u6709\u540d\u5b57\u3002\\ \u5206\u5c42\u7684\u5c42\u7ea7\u53ef\u4ee5\u6709\u540d\u79f0\uff08\u53ef\u4ee5\u662f\u5b57\u7b26\u4e32\u6216Python\u5bf9\u8c61\uff09\u3002\\ \u5982\u679c\u5c42\u7ea7\u6709\u540d\u79f0\uff0c\u8fd9\u4e9b\u540d\u79f0\u4f1a\u5728\u63a7\u5236\u53f0\u8f93\u51fa\u4e2d\u663e\u793a\u3002 print(frame.index.names) # [None, None] print(frame.columns.names) # [None, None] \u7ed9\u5c42\u7ea7\u8d4b\u4e88\u540d\u79f0\u3002\u6ce8\u610f\u533a\u5206\u884c\u6807\u7b7e\u4e2d\u7684\u7d22\u5f15\u540d\u79f0\u2019state\u2019\u548c\u2019color'\u3002 frame.index.names = ['key1', 'key2'] frame.columns.names = ['state', 'color'] print(frame) # state Ohio Colorado # color Green Red Green # key1 key2 # a 1 0 1 2 # 2 3 4 5 # b 1 6 7 8 # 2 9 10 11 print(frame['Ohio']) # color Green Red # key1 key2 # a 1 0 1 # 2 3 4 # b 1 6 7 # 2 9 10 print(frame.index) # MultiIndex([('a', 1), # ('a', 2), # ('b', 1), # ('b', 2)], # names=['key1', 'key2']) \u901a\u8fc7MultiIndex\u7c7b\u7684\u76f8\u5173\u65b9\u6cd5\uff0c\u9884\u5148\u521b\u5efa\u4e00\u4e2aMultiIndex\u5bf9\u8c61\uff0c\u7136\u540e\u4f5c\u4e3aSeries\u4e0eDataFrame\u4e2d\u7684index\uff08\u6216columns\uff09\u53c2\u6570\u503c\u3002 \u540c\u65f6\uff0c\u53ef\u4ee5\u901a\u8fc7names\u53c2\u6570\u6307\u5b9a\u591a\u5c42\u7d22\u5f15\u7684\u540d\u79f0\u3002 \u65b9\u6cd52\uff1afrom_arrays from_arrays\uff1a\u63a5\u6536\u4e00\u4e2a\u591a\u7ef4\u6570\u7ec4\u53c2\u6570\uff0c\u9ad8\u7ef4\u6307\u5b9a\u9ad8\u5c42\u7d22\u5f15\uff0c\u4f4e\u7ef4\u6307\u5b9a\u5e95\u5c42\u7d22\u5f15\u3002 mindex = pd.MultiIndex.from_arrays( [['a', 'a', 'b', 'b'], [1, 2, 1, 2]], names=['key1', 'key2'] ) frame = pd.DataFrame( np.arange(12).reshape((4, 3)), index=mindex, columns=[['Ohio', 'Ohio', 'Colorado'], ['Green', 'Red', 'Green']] ) frame.columns.names = ['state', 'color'] print(frame) # state Ohio Colorado # color Green Red Green # key1 key2 # a 1 0 1 2 # 2 3 4 5 # b 1 6 7 8 # 2 9 10 11 \u65b9\u6cd53\uff1afrom_tuples from_tuples\uff1a\u63a5\u6536\u4e00\u4e2a\u5143\u7ec4\u7684\u5217\u8868\uff0c\u6bcf\u4e2a\u5143\u7ec4\u6307\u5b9a\u6bcf\u4e2a\u7d22\u5f15\uff08\u9ad8\u7ef4\u7d22\u5f15\uff0c\u4f4e\u7ef4\u7d22\u5f15\uff09\u3002 mindex = pd.MultiIndex.from_tuples( [('a', 1), ('a', 2), ('b', 1), ('b', 2)] ) frame = pd.DataFrame( np.arange(12).reshape((4, 3)), index=mindex, columns=[['Ohio', 'Ohio', 'Colorado'], ['Green', 'Red', 'Green']] ) frame.index.names = ['key1', 'key2'] frame.columns.names = ['state', 'color'] print(frame) # state Ohio Colorado # color Green Red Green # key1 key2 # a 1 0 1 2 # 2 3 4 5 # b 1 6 7 8 # 2 9 10 11 \u65b9\u6cd54\uff1afrom_product from_product\uff1a\u63a5\u6536\u4e00\u4e2a\u53ef\u8fed\u4ee3\u5bf9\u8c61\u7684\u5217\u8868\uff0c\u6839\u636e\u591a\u4e2a\u53ef\u8fed\u4ee3\u5bf9\u8c61\u5143\u7d20\u7684\u7b1b\u5361\u5c14\u79ef\u8fdb\u884c\u521b\u5efa\u7d22\u5f15\u3002\\ \u4f7f\u7528\u7b1b\u5361\u5c14\u79ef\u7684\u65b9\u5f0f\u6765\u521b\u5efa\u591a\u5c42\u7d22\u5f15\u3002\u53c2\u6570\u4e3a\u5d4c\u5957\u7684\u53ef\u8fed\u4ee3\u5bf9\u8c61\u3002\u7ed3\u679c\u4e3a\u4f7f\u7528\u6bcf\u4e2a\u4e00\u7ef4\u6570\u7ec4\u4e2d\u7684\u5143\u7d20\u4e0e\u5176\u4ed6\u4e00\u7ef4\u6570\u7ec4\u4e2d\u7684\u5143\u7d20\u6765\u751f\u6210\\ \u7b1b\u5361\u5c14\u79ef\u7684\u65b9\u5f0f\u7684\u5c40\u9650\uff1a\u4e24\u4e24\u7ec4\u5408\u5fc5\u987b\u90fd\u5b58\u5728\uff0c\u5426\u5219\uff0c\u5c31\u4e0d\u80fd\u4f7f\u7528\u8fd9\u79cd\u65b9\u5f0f\u3002 mindex = pd.MultiIndex.from_product( [['a', 'b'], ['1', '2']], names=['key1', 'key2'] ) frame = pd.DataFrame( np.arange(12).reshape((4, 3)), index=mindex, columns=[['Ohio', 'Ohio', 'Colorado'], ['Green', 'Red', 'Green']] ) frame.columns.names = ['state', 'color'] print(frame) # state Ohio Colorado # color Green Red Green # key1 key2 # a 1 0 1 2 # 2 3 4 5 # b 1 6 7 8 # 2 9 10 11 \u91cd\u6392\u5e8f\u548c\u5c42\u7ea7\u6392\u5e8f \u5982\u679c\u9700\u8981\u91cd\u65b0\u6392\u5217\u8f74\u4e0a\u7684\u5c42\u7ea7\u987a\u5e8f\uff0c\u6216\u8005\u6309\u7167\u7279\u5b9a\u5c42\u7ea7\u7684\u503c\u5bf9\u6570\u636e\u8fdb\u884c\u6392\u5e8f\uff0c\\ \u53ef\u4ee5\u901a\u8fc7swaplevel\u63a5\u6536\u4e24\u4e2a\u5c42\u7ea7\u5e8f\u53f7\u6216\u5c42\u7ea7\u540d\u79f0\uff0c\u8fd4\u56de\u4e00\u4e2a\u8fdb\u884c\u4e86\u5c42\u7ea7\u53d8\u66f4\u7684\u65b0\u5bf9\u8c61\uff08\u4f46\u662f\u6570\u636e\u662f\u4e0d\u53d8\u7684\uff09 print(frame) # state Ohio Colorado # color Green Red Green # key1 key2 # a 1 0 1 2 # 2 3 4 5 # b 1 6 7 8 # 2 9 10 11 m = frame.swaplevel('key1', 'key2') print(m) # state Ohio Colorado # color Green Red Green # key2 key1 # 1 a 0 1 2 # 2 a 3 4 5 # 1 b 6 7 8 # 2 b 9 10 11 sort_index\u53ea\u80fd\u5728\u5355\u4e00\u5c42\u7ea7\u4e0a\u5bf9\u6570\u636e\u8fdb\u884c\u6392\u5e8f\u3002\\ \u5728\u8fdb\u884c\u5c42\u7ea7\u53d8\u6362\u65f6\uff0c\u4f7f\u7528sort_index\u4ee5\u4f7f\u5f97\u7ed3\u679c\u6309\u7167\u5c42\u7ea7\u8fdb\u884c\u5b57\u5178\u6392\u5e8f m = frame.sort_index(level=1) # \u5bf9key2\u6392\u5e8f\uff0c\u5e95\u5c42\u7d22\u5f15 print(m) # state Ohio Colorado # color Green Red Green # key1 key2 # a 1 0 1 2 # b 1 6 7 8 # a 2 3 4 5 # b 2 9 10 11 m = frame.sort_index(level=0) # \u5bf9key1\u6392\u5e8f\uff0c\u9ad8\u5c42\u7d22\u5f15 print(m) # state Ohio Colorado # color Green Red Green # key1 key2 # a 1 0 1 2 # 2 3 4 5 # b 1 6 7 8 # 2 9 10 11 m = frame.swaplevel(0, 1).sort_index(level=1) # swaplevel(0, 1)\u7b49\u540c\u4e8eswaplevel(key1, key2)\uff0c\u4ea4\u6362\u540ekey1\u53d8\u6210\u4e86\u5e95\u5c42\u7d22\u5f15 print(m) # state Ohio Colorado # color Green Red Green # key2 key1 # 1 a 0 1 2 # 2 a 3 4 5 # 1 b 6 7 8 # 2 b 9 10 11 \u6309\u5c42\u7ea7\u8fdb\u884c\u6c47\u603b\u7edf\u8ba1 DataFrame\u548cSeries\u4e2d\u5f88\u591a\u63cf\u8ff0\u6027\u548c\u6c47\u603b\u6027\u7edf\u8ba1\u6709\u4e00\u4e2alevel\u9009\u9879\uff0c\u901a\u8fc7level\u9009\u9879\u4f60\u53ef\u4ee5\u6307\u5b9a\u4f60\u60f3\u8981\u5728\u67d0\u4e2a\u7279\u5b9a\u7684\u8f74\u4e0a\u8fdb\u884c\u805a\u5408\u3002 print(frame) # state Ohio Colorado # color Green Red Green # key1 key2 # a 1 0 1 2 # 2 3 4 5 # b 1 6 7 8 # 2 9 10 11 m = frame.groupby(level='key2').sum() print(m) # state Ohio Colorado # color Green Red Green # key2 # 1 6 8 10 # 2 12 14 16 m = frame.groupby(level='color', axis=1).sum() print(m) # color Green Red # key1 key2 # a 1 2 1 # 2 8 4 # b 1 14 7 # 2 20 10 \u4f7f\u7528DataFrame\u7684\u5217\u8fdb\u884c\u7d22\u5f15 \u901a\u5e38\u6211\u4eec\u4e0d\u4f1a\u4f7f\u7528DataFrame\u4e2d\u4e00\u4e2a\u6216\u591a\u4e2a\u5217\u4f5c\u4e3a\u884c\u7d22\u5f15\uff1b\u53cd\u800c\u4f60\u53ef\u80fd\u60f3\u8981\u5c06\u884c\u7d22\u5f15\u79fb\u52a8\u5230DataFrame\u7684\u5217\u4e2d\u3002 frame = pd.DataFrame( {'a': range(7), 'b': range(7, 0, -1), 'c': ['one', 'one', 'one', 'two', 'two', 'two', 'two'], 'd': [0, 1, 2, 0, 1, 2, 3] } ) print(frame) # a b c d # 0 0 7 one 0 # 1 1 6 one 1 # 2 2 5 one 2 # 3 3 4 two 0 # 4 4 3 two 1 # 5 5 2 two 2 # 6 6 1 two 3 DataFrame\u7684set_index\u51fd\u6570\u4f1a\u751f\u6210\u4e00\u4e2a\u65b0\u7684DataFrame\uff0c\u65b0\u7684DataFrame\u4f7f\u7528\u4e00\u4e2a\u6216\u591a\u4e2a\u5217\u4f5c\u4e3a\u7d22\u5f15\\ \u9ed8\u8ba4\u60c5\u51b5\u4e0b\u8fd9\u4e9b\u7d22\u5f15\u5217\u4f1a\u4eceDataFrame\u4e2d\u79fb\u9664\uff0c\u4e5f\u53ef\u4ee5\u5c06\u5b83\u4eec\u7559\u5728DataFrame\u4e2d frame2 = frame.set_index(['c', 'd'], drop=False) print(frame2) # a b c d # c d # one 0 0 7 one 0 # 1 1 6 one 1 # 2 2 5 one 2 # two 0 3 4 two 0 # 1 4 3 two 1 # 2 5 2 two 2 # 3 6 1 two 3 frame2 = frame.set_index(['c', 'd']) print(frame2) # a b # c d # one 0 0 7 # 1 1 6 # 2 2 5 # two 0 3 4 # 1 4 3 # 2 5 2 # 3 6 1 reset_index\u662fset_index\u7684\u53cd\u64cd\u4f5c\uff0c\u5206\u5c42\u7d22\u5f15\u7684\u7d22\u5f15\u5c42\u7ea7\u4f1a\u88ab\u79fb\u52a8\u5230\u5217\u4e2d\\ \u6ce8\u610f\uff1a\u5982\u679c\u5728set_index\u65f6\u4f7f\u7528\u4e86drop=False\uff0c\u5728\u4f7f\u7528reset_index\u4f1a\u62a5\u9519 m = frame2.reset_index() print(m) # c d a b # 0 one 0 0 7 # 1 one 1 1 6 # 2 one 2 2 5 # 3 two 0 3 4 # 4 two 1 4 3 # 5 two 2 5 2 # 6 two 3 6 1 \u8054\u5408\u4e0e\u5408\u5e76\u6570\u636e\u96c6 \u5305\u542b\u5728pandas\u5bf9\u8c61\u7684\u6570\u636e\u53ef\u4ee5\u901a\u8fc7\u591a\u79cd\u65b9\u5f0f\u8054\u5408\u5728\u4e00\u8d77\uff1a * pandas.merge\u6839\u636e\u4e00\u4e2a\u6216\u591a\u4e2a\u952e\u5c06\u884c\u8fdb\u884c\u8fde\u63a5\u3002\u5bf9\u4e8eSQL\u6216\u5176\u4ed6\u5173\u7cfb\u578b\u6570\u636e\u5e93\u7684\u7528\u6237\u6765\u8bf4\uff0c\u8fd9\u79cd\u65b9\u5f0f\u6bd4\u8f83\u719f\u6089\uff0c\u5b83\u5b9e\u73b0\u7684\u662f\u6570\u636e\u5e93\u7684\u8fde\u63a5\u64cd\u4f5c\u3002 * pandas.concat\u4f7f\u5bf9\u8c61\u5728\u8f74\u5411\u4e0a\u8fdb\u884c\u9ecf\u5408\u6216\u201c\u5806\u53e0\u201d\u3002 * combine_first\u5b9e\u4f8b\u65b9\u6cd5\u5141\u8bb8\u5c06\u91cd\u53e0\u7684\u6570\u636e\u62fc\u63a5\u5728\u4e00\u8d77\uff0c\u4ee5\u4f7f\u7528\u4e00\u4e2a\u5bf9\u8c61\u4e2d\u7684\u503c\u586b\u5145\u53e6\u4e00\u4e2a\u5bf9\u8c61\u4e2d\u7684\u7f3a\u5931\u503c\u3002 \u6570\u636e\u5e93\u98ce\u683c\u7684DataFrame\u8fde\u63a5 \u5408\u5e76\u6216\u8fde\u63a5\u64cd\u4f5c\u901a\u8fc7\u4e00\u4e2a\u6216\u591a\u4e2a\u952e\u8fde\u63a5\u884c\u6765\u8054\u5408\u6570\u636e\u96c6\u3002\\ \u8fd9\u4e9b\u64cd\u4f5c\u662f\u5173\u7cfb\u578b\u6570\u636e\u5e93\u7684\u6838\u5fc3\u5185\u5bb9\uff08\u4f8b\u5982\u57fa\u4e8eSQL\u7684\u6570\u636e\u5e93\uff09\u3002\\ pandas\u4e2d\u7684merge\u51fd\u6570\u4e3b\u8981\u7528\u4e8e\u5c06\u5404\u79cdjoin\u64cd\u4f5c\u7b97\u6cd5\u8fd0\u7528\u5728\u6570\u636e\u4e0a\u3002\\ \u5728\u8fdb\u884c\u5217-\u5217\u8fde\u63a5\u65f6\uff0c\u4f20\u9012\u7684DataFrame\u7d22\u5f15\u5bf9\u8c61\u4f1a\u88ab\u4e22\u5f03\\ \u5408\u5e76\u64cd\u4f5c\u4e5f\u8981\u8003\u8651\u5982\u4f55\u5904\u7406\u91cd\u53e0\u7684\u5217\u540d(suffixes\u540e\u7f00\u9009\u9879)\u3002\\ \\ \u4e0b\u9762\u662f\u4e00\u4e2a\u591a\u5bf9\u4e00\u8fde\u63a5\u7684\u4f8b\u5b50\u3002\\ df1\u7684\u6570\u636e\u6709\u591a\u4e2a\u884c\u7684\u6807\u7b7e\u4e3aa\u548cb\uff0c\u800cdf2\u5728key\u5217\u4e2d\u6bcf\u4e2a\u503c\u4ec5\u6709\u4e00\u884c\u3002 df1 = pd.DataFrame( { 'key': ['b', 'b', 'a', 'c', 'a', 'a', 'b'], 'data1': range(7) } ) df2 = pd.DataFrame( { 'key': ['a', 'b', 'd'], 'data1': range(3) } ) print(df1) # key data1 # 0 b 0 # 1 b 1 # 2 a 2 # 3 c 3 # 4 a 4 # 5 a 5 # 6 b 6 print(df2) # key data1 # 0 a 0 # 1 b 1 # 2 d 2 \u8c03\u7528merge\u5904\u7406\uff0c\u63a8\u8350\u663e\u5f0f\u5730\u6307\u5b9a\u8fde\u63a5\u952e\u3002 result = pd.merge(df1, df2) print(result) # key data1 # 0 b 1 result = pd.merge(df1, df2, on=['key', 'data1']) print(result) # key data1 # 0 b 1 result = pd.merge(df1, df2, on='key') print(result) # key data1_x data1_y # 0 b 0 1 # 1 b 1 1 # 2 b 6 1 # 3 a 2 0 # 4 a 4 0 # 5 a 5 0 \u5982\u679c\u6bcf\u4e2a\u5bf9\u8c61\u7684\u5217\u540d\u662f\u4e0d\u540c\u7684\uff0c\u53ef\u4ee5\u5206\u522b\u4e3a\u5b83\u4eec\u6307\u5b9a\u5217\u540d df3 = pd.DataFrame( { 'lkey': ['b', 'b', 'a', 'c', 'a', 'a', 'b'], 'data1': range(7) } ) df4 = pd.DataFrame( { 'rkey': ['a', 'b', 'd'], 'data2': range(3) } ) print(df3) # lkey data1 # 0 b 0 # 1 b 1 # 2 a 2 # 3 c 3 # 4 a 4 # 5 a 5 # 6 b 6 print(df4) # rkey data2 # 0 a 0 # 1 b 1 # 2 d 2 \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0cmerge\u505a\u7684\u662f\u5185\u8fde\u63a5\uff08'inner'join\uff09\uff0c\u7ed3\u679c\u4e2d\u7684\u952e\u662f\u4e24\u5f20\u8868\u7684\u4ea4\u96c6\u3002 result = pd.merge(df3, df4, left_on='lkey', right_on='rkey') # df4\u7684[a,0]\u5bf9\u5e94df3\u7684\u6240\u6709[a,?]\u8bb0\u5f55\uff08\u901a\u8fc7\u91cd\u590d\u6765\u586b\u5145\u4e0d\u8db3\uff09 print(result) # lkey data1 rkey data2 # 0 b 0 b 1 # 1 b 1 b 1 # 2 b 6 b 1 # 3 a 2 a 0 # 4 a 4 a 0 # 5 a 5 a 0 \u5916\u8fde\u63a5\uff08outer join\uff09\u662f\u952e\u7684\u5e76\u96c6\uff0c\u8054\u5408\u4e86\u5de6\u8fde\u63a5\u548c\u53f3\u8fde\u63a5\u7684\u6548\u679c\\ \u591a\u5bf9\u591a\u8fde\u63a5\u662f\u884c\u7684\u7b1b\u5361\u5c14\u79ef df1 = pd.DataFrame( { 'key': ['b', 'b', 'a', 'c', 'a', 'b'], 'data1': range(6) } ) df2 = pd.DataFrame( { 'key': ['a', 'b', 'a', 'b', 'd'], 'data2': range(5) } ) print(df1.sort_values(by='key')) # key data1 # 2 a 2 # 4 a 4 # 0 b 0 # 1 b 1 # 5 b 5 # 3 c 3 print(df2.sort_values(by='key')) # key data2 # 0 a 0 # 2 a 2 # 1 b 1 # 3 b 3 # 4 d 4 result = pd.merge(df1, df2, on='key', how='left') print(result.sort_values(by='key')) # key data1 data2 # 4 a 2 0.0 # 5 a 2 2.0 # 7 a 4 0.0 # 8 a 4 2.0 # 0 b 0 1.0 # 1 b 0 3.0 # 2 b 1 1.0 # 3 b 1 3.0 # 9 b 5 1.0 # 10 b 5 3.0 # 6 c 3 NaN result = pd.merge(df1, df2, on='key', how='outer') # \u591a\u5bf9\u591a\u8fde\u63a5 print(result.sort_values(by='key')) # key data1 data2 # 6 a 2.0 0.0 # 7 a 2.0 2.0 # 8 a 4.0 0.0 # 9 a 4.0 2.0 # 0 b 0.0 1.0 # 1 b 0.0 3.0 # 2 b 1.0 1.0 # 3 b 1.0 3.0 # 4 b 5.0 1.0 # 5 b 5.0 3.0 # 10 c 3.0 NaN # 11 d NaN 4.0 \u591a\u952e\u5408\u5e76 df1 = pd.DataFrame( { 'key1': ['foo', 'foo', 'bar'], 'key2': ['one', 'two', 'one'], 'lval': [1, 2, 3] } ) df2 = pd.DataFrame( { 'key1': ['foo', 'foo', 'bar', 'bar'], 'key2': ['one', 'one', 'one', 'two'], 'rval': [4, 5, 6, 7] } ) print(df1.sort_values(by=['key1', 'key2'])) # key1 key2 lval # 2 bar one 3 # 0 foo one 1 # 1 foo two 2 print(df2.sort_values(by=['key1', 'key2'])) # key1 key2 rval # 2 bar one 6 # 3 bar two 7 # 0 foo one 4 # 1 foo one 5 result = pd.merge(df1, df2, on=['key1', 'key2'], how='outer') print(result.sort_values(by=['key1', 'key2'])) # key1 key2 lval rval # 3 bar one 3.0 6.0 # 4 bar two NaN 7.0 # 0 foo one 1.0 4.0 # \u91cd\u590d\u586b\u5145 # 1 foo one 1.0 5.0 # \u91cd\u590d\u586b\u5145 # 2 foo two 2.0 NaN \u5904\u7406\u91cd\u53e0\u5217\u540d result = pd.merge(df1, df2, on='key1') print(result.sort_values(by='key1')) # key1 key2_x lval key2_y rval # 4 bar one 3 one 6 # 5 bar one 3 two 7 # 0 foo one 1 one 4 # 1 foo one 1 one 5 # 2 foo two 2 one 4 # 3 foo two 2 one 5 result = pd.merge(df1, df2, on='key1', suffixes=('_left', '_right')) print(result.sort_values(by='key1')) # key1 key2_left lval key2_right rval # 4 bar one 3 one 6 # 5 bar one 3 two 7 # 0 foo one 1 one 4 # 1 foo one 1 one 5 # 2 foo two 2 one 4 # 3 foo two 2 one 5 \u6839\u636e\u7d22\u5f15\u5408\u5e76 \u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\uff0cDataFrame\u4e2d\u7528\u4e8e\u5408\u5e76\u7684\u952e\u662f\u5b83\u7684\u7d22\u5f15\u3002\u53ef\u4ee5\u4f20\u9012left_index=True\u6216right_index=True\uff08\u6216\u8005\u90fd\u4f20\uff09\u6765\u8868\u793a\u7d22\u5f15\u9700\u8981\u7528\u6765\u4f5c\u4e3a\u5408\u5e76\u7684\u952e df1 = pd.DataFrame( { 'key1': ['foo', 'foo', 'bar'], 'key2': ['one', 'two', 'one'], 'lval': [1, 2, 3] } ) df2 = pd.DataFrame( { 'key1': ['foo', 'foo', 'bar', 'bar'], 'key2': ['one', 'one', 'one', 'two'], 'rval': [4, 5, 6, 7] }, index=['foo', 'foo', 'bar', 'bar'] ) print(df1) # key1 key2 lval # 0 foo one 1 # 1 foo two 2 # 2 bar one 3 print(df2) # key1 key2 rval # foo foo one 4 # foo foo one 5 # bar bar one 6 # bar bar two 7 result = pd.merge(df1, df2, left_on='key1', right_index=True, suffixes=('_left', '_right')) print(result.sort_index()) # key1 key1_left key2_left lval key1_right key2_right rval # 0 foo foo one 1 foo one 4 # 0 foo foo one 1 foo one 5 # 1 foo foo two 2 foo one 4 # 1 foo foo two 2 foo one 5 # 2 bar bar one 3 bar one 6 # 2 bar bar one 3 bar two 7 result = pd.merge(df1, df2, left_on='key1', right_index=True, how='outer', suffixes=('_left', '_right')) # \u548c\u4e0a\u8ff0\u7ed3\u679c\u4e00\u6837 print(result.sort_index()) # key1 key1_left key2_left lval key1_right key2_right rval # 0 foo foo one 1 foo one 4 # 0 foo foo one 1 foo one 5 # 1 foo foo two 2 foo one 4 # 1 foo foo two 2 foo one 5 # 2 bar bar one 3 bar one 6 # 2 bar bar one 3 bar two 7 \u5728\u66f4\u590d\u6742\u591a\u5c42\u7d22\u5f15\u6570\u636e\u7684\u591a\u952e\u5408\u5e76\uff0c\u5728\u7d22\u5f15\u4e0a\u8fde\u63a5\u662f\u4e00\u4e2a\u9690\u5f0f\u7684\u591a\u952e\u5408\u5e76\\ \u5fc5\u987b\u4ee5\u5217\u8868\u7684\u65b9\u5f0f\u6307\u660e\u5408\u5e76\u6240\u9700\u591a\u4e2a\u5217\uff08\u6ce8\u610f\u4f7f\u7528how='outer\u2019\u5904\u7406\u91cd\u590d\u7684\u7d22\u5f15\u503c\uff09 df1 = pd.DataFrame( { 'key1': ['Ohio', 'Ohio', 'Ohio', 'Nevada', 'Nevada'], 'key2': [2000, 2001, 2002, 2001, 2002], 'data': np.arange(5.) } ) df2 = pd.DataFrame( np.arange(12).reshape((6, 2)), index=[ ['Nevada', 'Nevada', 'Ohio', 'Ohio', 'Ohio', 'Ohio'], [2001, 2000, 2000, 2000, 2001, 2002] ], columns=['event1', 'event2'] ) print(df1) # key1 key2 data # 0 Ohio 2000 0.0 # 1 Ohio 2001 1.0 # 2 Ohio 2002 2.0 # 3 Nevada 2001 3.0 # 4 Nevada 2002 4.0 print(df2) # event1 event2 # Nevada 2001 0 1 # 2000 2 3 # Ohio 2000 4 5 # 2000 6 7 # 2001 8 9 # 2002 10 11 result = pd.merge(df1, df2, left_on=['key1', 'key2'], right_index=True) print(result) # key1 key2 data event1 event2 # 0 Ohio 2000 0.0 4 5 # 0 Ohio 2000 0.0 6 7 # 1 Ohio 2001 1.0 8 9 # 2 Ohio 2002 2.0 10 11 # 3 Nevada 2001 3.0 0 1 result = pd.merge(df1, df2, left_on=['key1', 'key2'], right_index=True, how='outer') print(result) # key1 key2 data event1 event2 # 0 Ohio 2000 0.0 4.0 5.0 # 0 Ohio 2000 0.0 6.0 7.0 # 1 Ohio 2001 1.0 8.0 9.0 # 2 Ohio 2002 2.0 10.0 11.0 # 3 Nevada 2001 3.0 0.0 1.0 # 4 Nevada 2002 4.0 NaN NaN # 4 Nevada 2000 NaN 2.0 3.0 \u4f7f\u7528\u4e24\u8fb9\u7684\u7d22\u5f15\u8fdb\u884c\u5408\u5e76\u4e5f\u662f\u53ef\u4ee5\u7684\uff0c# \u524d\u63d0\u662f\u7528\u4e24\u8fb9\u7528\u6765\u5408\u5e76\u7684\u7d22\u5f15\u6709\u4ea4\u96c6\uff08\u516c\u5171\u90e8\u5206\uff09\u3002\\ \u5728\u4f7f\u7528merge\u65f6\uff0c\u53c2\u6570on=['key1', 'key2']\u4e0d\u80fd\u548c left_index=True, right_index=True\u540c\u65f6\u5b58\u5728\u3002\\ \u5bf9\u4e8e\u91cd\u590d\u7d22\u5f15\uff0c\u5982\u679c\u503c\u4e0d\u540c\uff0c\u5219\u591a\u884c\u663e\u793a\uff0c\u548c\u6570\u636e\u5e93SQL\u7684full join\u7c7b\u4f3c\u6982\u5ff5\u3002\\ \u5982\u679c\u51fa\u73b0\u76f8\u540c\u5217\u540d\uff0c\u5219\u4f1a\u81ea\u52a8\u6dfb\u52a0\u540e\u7f00\u5b57\u7b26\u4ee5\u793a\u533a\u522b\u3002 df1 = pd.DataFrame( [[1, 2], [3, 4], [5, 6]], index=['a', 'c', 'e'], columns=['Ohio', 'Nevada'] ) print(df1) # Ohio Nevada # a 1 2 # c 3 4 # e 5 6 df2 = pd.DataFrame( [[7, 8], [9, 10], [11, 12], [13, 14]], index=['b', 'c', 'c', 'e'], columns=['Missouri', 'Alabama'] ) print(df2) # Missouri Alabama # b 7 8 # c 9 10 # c 11 12 # e 13 14 df3 = pd.DataFrame( [[7, 8], [9, 10], [11, 12], [13, 14]], index=['a', 'c', 'e', 'f'], columns=['Nevada', 'Alabama'] ) print(df3) # Nevada Alabama # a 7 8 # c 9 10 # e 11 12 # f 13 14 result = pd.merge(df1, df2, left_index=True, right_index=True, how='outer') print(result) # Ohio Nevada Missouri Alabama # a 1.0 2.0 NaN NaN # b NaN NaN 7.0 8.0 # c 3.0 4.0 9.0 10.0 # c 3.0 4.0 11.0 12.0 # e 5.0 6.0 13.0 14.0 result = pd.merge(df1, df3, left_index=True, right_index=True, how='outer') print(result) # Ohio Nevada_x Nevada_y Alabama # a 1.0 2.0 7 8 # c 3.0 4.0 9 10 # e 5.0 6.0 11 12 # f NaN NaN 13 14 \u53e6\u4e00\u79cd\u5199\u6cd5\uff1a result = df1.join(df2, how='outer') print(result) # Ohio Nevada Missouri Alabama # a 1.0 2.0 NaN NaN # b NaN NaN 7.0 8.0 # c 3.0 4.0 9.0 10.0 # c 3.0 4.0 11.0 12.0 # e 5.0 6.0 13.0 14.0 \u4e5f\u53ef\u4ee5\u5411join\u65b9\u6cd5\u4f20\u5165\u4e00\u4e2aDataFrame\u5217\u8868\uff0c\u7c7b\u4f3c\u4e8e\u5bf9\u4e09\u4e2a\u6570\u636e\u96c6\u8fdb\u884cjoin\u64cd\u4f5c result = df1.join([df2, df3]) print(result) # Ohio Nevada_x Missouri Alabama_x Nevada_y Alabama_y # a 1 2 NaN NaN 7 8 # c 3 4 9.0 10.0 9 10 # c 3 4 11.0 12.0 9 10 # e 5 6 13.0 14.0 11 12 \u6cbf\u8f74\u5411\u8fde\u63a5 \u53e6\u4e00\u79cd\u6570\u636e\u7ec4\u5408\u64cd\u4f5c\u53ef\u79f0\u4e3a\u62fc\u63a5\u3001\u7ed1\u5b9a\u6216\u5806\u53e0\u3002NumPy\u7684concatenate\u51fd\u6570\u53ef\u4ee5\u5728NumPy\u6570\u7ec4\u4e0a\u5b9e\u73b0\u8be5\u529f\u80fd\u3002\\ \\ \u57fa\u4e8eSeries\u7684pandas\u7684concat\u51fd\u6570\u7684\u5de5\u4f5c\u673a\u5236\u5206\u6790\\ \u4e0b\u9762\u4e09\u4e2a\u7d22\u5f15\u4e0d\u91cd\u53e0\u7684Series s1 = pd.Series([0, 1], index=['a', 'b']) s2 = pd.Series([2, 3, 4], index=['c', 'd', 'e']) s3 = pd.Series([5, 6], index=['f', 'g']) \u7528\u5217\u8868\u4e2d\u7684\u8fd9\u4e9b\u5bf9\u8c61\u8c03\u7528concat\u65b9\u6cd5\u4f1a\u5c06\u503c\u548c\u7d22\u5f15\u7c98\u5728\u4e00\u8d77\uff1a\\ \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0cconcat\u65b9\u6cd5\u662f\u6cbf\u7740axis=0\u7684\u8f74\u5411\u751f\u6548\u7684\uff0c\u751f\u6210\u53e6\u4e00\u4e2aSeries\u3002\\ \u5982\u679c\u4f20\u9012axis=1\uff0c\u8fd4\u56de\u7684\u7ed3\u679c\u5219\u662f\u4e00\u4e2aDataFrame\uff08axis=1\u65f6\u662f\u5217\uff09 result = pd.concat([s1, s2, s3]) print(result) # a 0 # b 1 # c 2 # d 3 # e 4 # f 5 # g 6 # dtype: int64 result = pd.concat([s1, s2, s3], keys=['one', 'two', 'three']) # \u901a\u8fc7keys\u53c2\u6570\uff0c\u5728\u8fde\u63a5\u8f74\u5411\u4e0a\u521b\u5efa\u4e00\u4e2a\u591a\u5c42\u7d22\u5f15\uff0c\u4ee5\u4fbf\u5728\u7ed3\u679c\u4e2d\u533a\u5206\u5404\u90e8\u5206 print(result) # one a 0 # b 1 # two c 2 # d 3 # e 4 # three f 5 # g 6 # dtype: int64 print(result.unstack()) # \u628a\u539f\u7d22\u5f15\u4f5c\u4e3a\u5217\u6807\u7b7e\u5c55\u5f00 # a b c d e f g # one 0.0 1.0 NaN NaN NaN NaN NaN # two NaN NaN 2.0 3.0 4.0 NaN NaN # three NaN NaN NaN NaN NaN 5.0 6.0 result = pd.concat([s1, s2, s3], axis=1) # \u5728\u8fd9\u4e2a\u6848\u4f8b\u4e2daxis=1\u8f74\u5411\u4e0a\u5e76\u6ca1\u6709\u91cd\u53e0 print(result) # 0 1 2 # a 0.0 NaN NaN # b 1.0 NaN NaN # c NaN 2.0 NaN # d NaN 3.0 NaN # e NaN 4.0 NaN # f NaN NaN 5.0 # g NaN NaN 6.0 result = pd.concat([s1, s2, s3], axis=1, keys=['one', 'two', 'three']) # \u5728\u8fd9\u4e2a\u6848\u4f8b\u4e2daxis=1\u8f74\u5411\u4e0a\u5e76\u6ca1\u6709\u91cd\u53e0 print(result) # one two three # a 0.0 NaN NaN # b 1.0 NaN NaN # c NaN 2.0 NaN # d NaN 3.0 NaN # e NaN 4.0 NaN # f NaN NaN 5.0 # g NaN NaN 6.0 print(result.unstack()) # \u5bf9\u6bd4axis=0\u7684\u591a\u5c42\u7d22\u5f15\uff0c\u5f53axis=1\u65f6\u5bf9\u8f93\u51fa\u5404index\u7684\u5e76\u96c6\u505a\u4e86\u5206\u7ec4\u3002 # one a 0.0 # b 1.0 # c NaN # d NaN # e NaN # f NaN # g NaN # two a NaN # b NaN # c 2.0 # d 3.0 # e 4.0 # f NaN # g NaN # three a NaN # b NaN # c NaN # d NaN # e NaN # f 5.0 # g 6.0 # dtype: float64 s4 = pd.concat([s1, s3]) print(s4) # a 0 # b 1 # f 5 # g 6 # dtype: int64 result = pd.concat([s1, s4]) print(result) # a 0 # b 1 # a 0 # b 1 # f 5 # g 6 # dtype: int64 result = pd.concat([s1, s4], axis=1) # \u73b0\u5728\u5728\u4e2daxis=1\u8f74\u5411\u4e0a\u6709\u91cd\u53e0 print(result) # 0 1 # a 0.0 0 # b 1.0 1 # f NaN 5 # g NaN 6 result = pd.concat([s1, s4], axis=1, keys=['one', 'two', 'three']) print(result) # one two # a 0.0 0 # b 1.0 1 # f NaN 5 # g NaN 6 result = pd.concat([s1, s4], axis=0, keys=['one', 'two', 'three']) # \u901a\u8fc7keys\u53c2\u6570\uff0c\u5728\u8fde\u63a5\u8f74\u5411\u4e0a\u521b\u5efa\u4e00\u4e2a\u591a\u5c42\u7d22\u5f15 print(result) # one a 0 # b 1 # two a 0 # b 1 # f 5 # g 6 # dtype: int64 result = pd.concat([s1, s4], axis=1, join='inner') # \u5185\u8fde\u63a5\u65b9\u5f0f\u5408\u5e76\u7d22\u5f15\uff08\u7d22\u5f15\u4ea4\u96c6\uff09 print(result) # 0 1 # a 0 0 # b 1 1 result = pd.concat([s1, s4], axis=1).reindex(['a', 'c', 'b', 'e']) # \u4f7f\u7528join_axes(\u5df2\u88ab\u66ff\u6362\u6210reindex)\u6765\u6307\u5b9a\u7528\u4e8e\u8fde\u63a5\u5176\u4ed6\u8f74\u5411\u7684\u8f74 print(result) # 0 1 # a 0.0 0.0 # c NaN NaN # b 1.0 1.0 # e NaN NaN \u57fa\u4e8eDataFrame\u7684pandas\u7684concat\u51fd\u6570\u7684\u5de5\u4f5c\u673a\u5236\u5206\u6790 df1 = pd.DataFrame( np.arange(12).reshape((6, 2)), index=[ ['Ohio', 'Ohio', 'Ohio', 'Nevada', 'Nevada', 'Nevada'], [2000, 2001, 2002, 2000, 2001, 2002] ], columns=['event1', 'event2'] ) df2 = pd.DataFrame( np.arange(12).reshape((6, 2)), index=[ ['Ohio', 'Ohio', 'Ohio', 'Nevada', 'Nevada', 'Nevada'], [2000, 2001, 2002, 2000, 2001, 2002] ], columns=['event3', 'event4'] ) print(df1) # event1 event2 # Ohio 2000 0 1 # 2001 2 3 # 2002 4 5 # Nevada 2000 6 7 # 2001 8 9 # 2002 10 11 print(df2) # event3 event4 # Ohio 2000 0 1 # 2001 2 3 # 2002 4 5 # Nevada 2000 6 7 # 2001 8 9 # 2002 10 11 result = np.concatenate([df1, df2], axis=0) # \u6cbf0\u8f74\u62fc\u63a5 print(result) # [[ 0 1] # [ 2 3] # [ 4 5] # [ 6 7] # [ 8 9] # [10 11] # [ 0 1] # [ 2 3] # [ 4 5] # [ 6 7] # [ 8 9] # [10 11]] result = np.concatenate([df1, df2], axis=1) # \u6cbf1\u8f74\u62fc\u63a5 print(result) # [[ 0 1 0 1] # [ 2 3 2 3] # [ 4 5 4 5] # [ 6 7 6 7] # [ 8 9 8 9] # [10 11 10 11]] result = np.concatenate([df1, df2], axis=None) # \u5c06\u6570\u7ec4\u5c55\u5e73 print(result) # [ 0 1 2 3 4 5 6 7 8 9 10 11 0 1 2 3 4 5 6 7 8 9 10 11] \u8054\u5408\u91cd\u53e0\u6570\u636e \u53e6\u4e00\u4e2a\u6570\u636e\u8054\u5408\u573a\u666f\uff0c\u65e2\u4e0d\u662f\u5408\u5e76\u64cd\u4f5c\uff0c\u4e5f\u4e0d\u662f\u8fde\u63a5\u64cd\u4f5c\u3002\\ \u5047\u5982\u6709\u4e24\u4e2a\u6570\u636e\u96c6\uff0c\u8fd9\u4e24\u4e2a\u6570\u636e\u96c6\u7684\u7d22\u5f15\u5168\u90e8\u6216\u90e8\u5206\u91cd\u53e0\uff0c\u901a\u8fc7NumPy\u7684where\u51fd\u6570\u53ef\u4ee5\u8fdb\u884c\u9762\u5411\u6570\u7ec4\u7684if-else\u7b49\u4ef7\u64cd\u4f5c\u3002 s1 = pd.Series( [np.nan, 2.5, 0.0, 3.5, 4.5, np.nan], index=['f', 'e', 'd', 'c', 'b', 'a'] ) s2 = pd.Series( [0.0, np.nan, 2.0, np.nan, np.nan, 5.0], index=['a', 'b', 'c', 'd', 'e', 'f'] ) print(s1) # f NaN # e 2.5 # d 0.0 # c 3.5 # b 4.5 # a NaN # dtype: float64 print(s2) # a 0.0 # b NaN # c 2.0 # d NaN # e NaN # f 5.0 # dtype: float64 \u65b9\u6cd51\uff0c\u901a\u8fc7Numpy\u7684where\u51fd\u6570 result = np.where(pd.isnull(s1), s2, s1) # An array with elements from 'x'(s2) where 'condition'(isnull(s1)) is True, and elements from 'y'(s1) elsewhere. print(result) # [0. 2.5 0. 3.5 4.5 5. ] # s1 # s2 # result # f NaN # a 0.0 0. \u6761\u4ef6\u4e2ds1\u8be5\u5143\u7d20\u4e3anull\uff0c\u6240\u4ee5where\u51fd\u6570\u53d6\u5bf9\u5e94x(s2)\u7684\u5143\u7d20\uff08\u6ce8\u610f\uff0c\u4e0e\u7d22\u5f15\u987a\u5e8f\u65e0\u5173\uff09 # e 2.5 # b NaN 2.5 \u6761\u4ef6\u4e2ds1\u8be5\u5143\u7d20\u4e0d\u4e3anull\uff0c\u6240\u4ee5where\u51fd\u6570\u53d6\u5bf9\u5e94y(s1)\u7684\u5143\u7d20 # d 0.0 # c 2.0 0. # c 3.5 # d NaN 3.5 # b 4.5 # e NaN 4.5 # a NaN # f 5.0 5.0 \u6761\u4ef6\u4e2ds1\u8be5\u5143\u7d20\u4e3anull\uff0c\u6240\u4ee5where\u51fd\u6570\u53d6\u5bf9\u5e94x(s2)\u7684\u5143\u7d20 result = np.where(pd.isnull(s2), s1, s2) print(result) # [0. 2.5 2. 3.5 4.5 5. ] \u65b9\u6cd52\uff0c\u901a\u8fc7Series\u7684combine_first\u65b9\u6cd5 result = s2.combine_first(s1) # \u6ce8\u610f\uff0ccombine_first\u662f\u6309\u7167s2\u7684\u7d22\u5f15\u987a\u5e8f\u68c0\u7d22\u7684\uff0c\u76f8\u540c\u7d22\u5f15\u7684s1\u7684\u503c\u4f1a\u586b\u5145\u5bf9\u5e94s2\u7684null print(result) # a 0.0 # b 4.5 # c 2.0 # d 0.0 # e 2.5 # f 5.0 # dtype: float64 \u65b9\u6cd53\uff1aPandas\u7684combine_first\u65b9\u6cd5 df1 = pd.DataFrame( { 'a': [1.0, np.nan, 5.0, np.nan], 'b': [np.nan, 2.0, np.nan, 6.0], 'c': [2.0, 6.0, 10.0, 15.0] } ) df2 = pd.DataFrame( { 'a': [5.0, 4.0, np.nan, 3.0, 7.0], 'b': [np.nan, 3.0, 4.0, 6.0, 8.0] } ) print(df1) # a b c # 0 1.0 NaN 2.0 # 1 NaN 2.0 6.0 # 2 5.0 NaN 10.0 # 3 NaN 6.0 15.0 print(df2) # a b # 0 5.0 NaN # 1 4.0 3.0 # 2 NaN 4.0 # 3 3.0 6.0 # 4 7.0 8.0 result = df2.combine_first(df1) # \u7528df1\u7684\u503c\u53bb\u586b\u5145df2\u5bf9\u5e94\u7d22\u5f15\u4f4d\u7f6e\u7684null\u503c print(result) # a b c # 0 5.0 NaN 2.0 # 1 4.0 3.0 6.0 # 2 5.0 4.0 10.0 # 3 3.0 6.0 15.0 # 4 7.0 8.0 NaN \u91cd\u5851\u548c\u900f\u89c6 \u91cd\u65b0\u6392\u5217\u8868\u683c\u578b\u6570\u636e\u6709\u591a\u79cd\u57fa\u7840\u64cd\u4f5c\u3002\u8fd9\u4e9b\u64cd\u4f5c\u88ab\u79f0\u4e3a\u91cd\u5851\u6216\u900f\u89c6\u3002 import numpy as np import pandas as pd \u4f7f\u7528\u591a\u5c42\u7d22\u5f15\u8fdb\u884c\u91cd\u5851 \u591a\u5c42\u7d22\u5f15\u5728DataFrame\u4e2d\u63d0\u4f9b\u4e86\u4e00\u79cd\u4e00\u81f4\u6027\u65b9\u5f0f\u7528\u4e8e\u91cd\u6392\u5217\u6570\u636e\u3002\u4ee5\u4e0b\u662f\u4e24\u4e2a\u57fa\u7840\u64cd\u4f5c\uff1a * statck\uff08\u5806\u53e0\uff09\u8be5\u64cd\u4f5c\u4f1a\u201c\u65cb\u8f6c\u201d\u6216\u5c06\u5217\u4e2d\u7684\u6570\u636e\u900f\u89c6\u5230\u884c\u3002 * unstack\uff08\u62c6\u5806\uff09\u8be5\u64cd\u4f5c\u4f1a\u5c06\u884c\u4e2d\u7684\u6570\u636e\u900f\u89c6\u5230\u5217\u3002 df = pd.DataFrame( np.arange(6).reshape((2, 3)), index=pd.Index(['Ohio', 'Colorado'], name='state'), columns=pd.Index(['one', 'two', 'three'], name='number') ) print(df) # number one two three # state # Ohio 0 1 2 # Colorado 3 4 5 \u5728\u8fd9\u4efd\u6570\u636e\u4e0a\u4f7f\u7528stack\u65b9\u6cd5\u4f1a\u5c06\u5217\u900f\u89c6\u5230\u884c\uff0c\u4ea7\u751f\u4e00\u4e2a\u65b0\u7684Series\uff1a result = df.stack() print(result) # state number # Ohio one 0 # two 1 # three 2 # Colorado one 3 # two 4 # three 5 # dtype: int64 \u4ece\u4e00\u4e2a\u591a\u5c42\u7d22\u5f15\u5e8f\u5217\u4e2d\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528unstack\u65b9\u6cd5\u5c06\u6570\u636e\u91cd\u6392\u5217\u540e\u653e\u5165\u4e00\u4e2aDataFrame\u4e2d\uff1a print(result.unstack()) # number one two three # state # Ohio 0 1 2 # Colorado 3 4 5 print(result.unstack(0)) # \u53ef\u4ee5\u4f20\u5165\u4e00\u4e2a\u5c42\u7ea7\u5e8f\u53f7\u6216\u540d\u79f0\u6765\u62c6\u5206\u4e00\u4e2a\u4e0d\u540c\u7684\u5c42\u7ea7 # state Ohio Colorado # number # one 0 3 # two 1 4 # three 2 5 print(result.unstack(1)) # number one two three # state # Ohio 0 1 2 # Colorado 3 4 5 print(result.unstack('state')) # \u8f93\u51fa\u7ed3\u679c\u548c\u4f20\u5165\u5c42\u7ea70\u4e00\u6837 # state Ohio Colorado # number # one 0 3 # two 1 4 # three 2 5 print(result.unstack('number')) # \u8f93\u51fa\u7ed3\u679c\u548c\u4f20\u5165\u5c42\u7ea71\u4e00\u6837 # number one two three # state # Ohio 0 1 2 # Colorado 3 4 5 \u5982\u679c\u5c42\u7ea7\u4e2d\u7684\u6240\u6709\u503c\u5e76\u672a\u5305\u542b\u4e8e\u6bcf\u4e2a\u5b50\u5206\u7ec4\u4e2d\u65f6\uff0c\u62c6\u5206\u53ef\u80fd\u4f1a\u5f15\u5165\u7f3a\u5931\u503c\uff1a s1 = pd.Series([0, 1, 2, 3], index=['a', 'b', 'c', 'd']) s2 = pd.Series([4, 5, 6], index=['c', 'd', 'e']) s3 = pd.concat([s1, s2], keys=['one', 'two']) print(s3) # one a 0 # b 1 # c 2 # d 3 # two c 4 # d 5 # e 6 # dtype: int64 print(s3.unstack(0)) # one two # a 0.0 NaN # b 1.0 NaN # c 2.0 4.0 # d 3.0 5.0 # e NaN 6.0 print(s3.unstack(1)) print(s3.unstack()) # a b c d e # one 0.0 1.0 2.0 3.0 NaN # two NaN NaN 4.0 5.0 6.0 \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u5806\u53e0\u4f1a\u8fc7\u6ee4\u51fa\u7f3a\u5931\u503c\uff0c\u56e0\u6b64\u5806\u53e0\u62c6\u5806\u7684\u64cd\u4f5c\u662f\u53ef\u9006\u7684 print(s3.unstack().stack()) # one a 0.0 # b 1.0 # c 2.0 # d 3.0 # two c 4.0 # d 5.0 # e 6.0 # dtype: float64 print(s3.unstack().stack(dropna=False)) # one a 0.0 # b 1.0 # c 2.0 # d 3.0 # e NaN # two a NaN # b NaN # c 4.0 # d 5.0 # e 6.0 # dtype: float64 \u5728DataFrame\u4e2d\u62c6\u5806\u65f6\uff0c\u88ab\u62c6\u5806\u7684\u5c42\u7ea7\u4f1a\u53d8\u4e3a\u7ed3\u679c\u4e2d\u6700\u4f4e\u7684\u5c42\u7ea7\\ \u5728\u8c03\u7528stack\u65b9\u6cd5\u65f6\uff0c\u6211\u4eec\u53ef\u4ee5\u6307\u660e\u9700\u8981\u5806\u53e0\u7684\u8f74\u5411\u540d\u79f0 df = pd.DataFrame( {'left': result, 'right': result + 5}, columns=pd.Index(['left', 'right'], name='side') ) print(df) # side left right # state number # Ohio one 0 5 # two 1 6 # three 2 7 # Colorado one 3 8 # two 4 9 # three 5 10 print(df.unstack()) # side left right # number one two three one two three # state # Ohio 0 1 2 5 6 7 # Colorado 3 4 5 8 9 10 print(df.unstack('state')) # \u88ab\u62c6\u5806\u7684\u5c42\u7ea7(state)\u4f1a\u53d8\u4e3a\u7ed3\u679c\u4e2d\u6700\u4f4e\u7684\u5c42\u7ea7 # side left right # state Ohio Colorado Ohio Colorado # number # one 0 3 5 8 # two 1 4 6 9 # three 2 5 7 10 \u5728\u8c03\u7528stack\u65b9\u6cd5\u65f6\uff0c\u53ef\u4ee5\u6307\u660e\u9700\u8981\u5806\u53e0\u7684\u8f74\u5411\u540d\u79f0\uff1a print(df.unstack('state').stack('side')) # state Colorado Ohio # number side # one left 3 0 # right 8 5 # two left 4 1 # right 9 6 # three left 5 2 # right 10 7 \u5c06\u201c\u957f\u201d\u900f\u89c6\u4e3a\u201c\u5bbd\u201d \u5728\u6570\u636e\u5e93\u548cCSV\u4e2d\u5b58\u50a8\u591a\u65f6\u95f4\u5e8f\u5217\u7684\u65b9\u5f0f\u5c31\u662f\u6240\u8c13\u7684\u957f\u683c\u5f0f\u6216\u5806\u53e0\u683c\u5f0f\u3002 data = pd.read_csv('../examples/macrodata.csv') print(data.head(3)) # year quarter realgdp realcons ... unemp pop infl realint # 0 1959.0 1.0 2710.349 1707.4 ... 5.8 177.146 0.00 0.00 # 1 1959.0 2.0 2778.801 1733.7 ... 5.1 177.830 2.34 0.74 # 2 1959.0 3.0 2775.488 1751.8 ... 5.3 178.657 2.74 1.09 # ...... # [3 rows x 14 columns] # PeriodIndex\u5c06year\u548cquarter\u7b49\u5217\u8fdb\u884c\u8054\u5408\u5e76\u751f\u6210\u4e86\u4e00\u79cd\u65f6\u95f4\u95f4\u9694\u7c7b\u578b periods = pd.PeriodIndex( year=data.year, quarter=data.quarter, name='date' ) columns = pd.Index( ['realgdp', 'infl', 'unemp'], name='item' ) data = data.reindex(columns=columns) print(data) # item realgdp infl unemp # 0 2710.349 0.00 5.8 # 1 2778.801 2.34 5.1 # 2 2775.488 2.74 5.3 # ...... # [203 rows x 3 columns] data.index = periods.to_timestamp('D', 'end') print(data.index) # DatetimeIndex(['1959-03-31 23:59:59.999999999', # '1959-06-30 23:59:59.999999999', # ... # '2009-06-30 23:59:59.999999999', # '2009-09-30 23:59:59.999999999'], # dtype='datetime64[ns]', name='date', length=203, freq=None) \u4e0b\u9762\u662fldata\u7684\u6570\u636e\u6837\u672c\u3002\\ \u8fd9\u79cd\u6570\u636e\u5373\u6240\u8c13\u7684\u591a\u65f6\u95f4\u5e8f\u5217\u7684\u957f\u683c\u5f0f\uff0c\u6216\u79f0\u4e3a\u5177\u6709\u4e24\u4e2a\u6216\u66f4\u591a\u4e2a\u952e\u7684\u5176\u4ed6\u89c2\u6d4b\u6570\u636e\uff08\u8fd9\u91cc\uff0c\u6211\u4eec\u7684\u952e\u662fdate\u548citem\uff09\u3002\\ \u8868\u4e2d\u7684\u6bcf\u4e00\u884c\u8868\u793a\u4e00\u4e2a\u65f6\u95f4\u70b9\u4e0a\u7684\u5355\u4e2a\u89c2\u6d4b\u503c\u3002 ldata = data.stack().reset_index().rename(columns={0: 'value'}) print(ldata) # date item value # 0 1959-03-31 23:59:59.999999999 realgdp 2710.349 # 1 1959-03-31 23:59:59.999999999 infl 0.000 # 2 1959-03-31 23:59:59.999999999 unemp 5.800 # 3 1959-06-30 23:59:59.999999999 realgdp 2778.801 # 4 1959-06-30 23:59:59.999999999 infl 2.340 # .. ... ... ... # 604 2009-06-30 23:59:59.999999999 infl 3.370 # 605 2009-06-30 23:59:59.999999999 unemp 9.200 # 606 2009-09-30 23:59:59.999999999 realgdp 12990.341 # 607 2009-09-30 23:59:59.999999999 infl 3.560 # 608 2009-09-30 23:59:59.999999999 unemp 9.600 # [609 rows x 3 columns] \u5728\u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d\uff1a\\ \u6570\u636e\u901a\u5e38\u4ee5\u8fd9\u79cd\u65b9\u5f0f\u5b58\u50a8\u5728\u5173\u7cfb\u578b\u6570\u636e\u5e93\u4e2d\uff0c\u6bd4\u5982MySQL\uff0c\u56e0\u4e3a\u56fa\u5b9a\u6a21\u5f0f\uff08\u5217\u540d\u79f0\u548c\u6570\u636e\u7c7b\u578b\uff09\u5141\u8bb8item\u5217\u4e2d\u4e0d\u540c\u503c\u7684\u6570\u91cf\u968f\u7740\u6570\u636e\u88ab\u6dfb\u52a0\u5230\u8868\u4e2d\u800c\u6539\u53d8\u3002\\ date\u548citem\u901a\u5e38\u662f\u4e3b\u952e\uff08\u4f7f\u7528\u5173\u7cfb\u578b\u6570\u636e\u5e93\u7684\u8bf4\u6cd5\uff09\uff0c\u63d0\u4f9b\u4e86\u5173\u7cfb\u5b8c\u6574\u6027\u548c\u66f4\u7b80\u5355\u7684\u8fde\u63a5\u3002\\ \u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\uff0c\u5904\u7406\u8fd9\u79cd\u683c\u5f0f\u7684\u6570\u636e\u66f4\u4e3a\u56f0\u96be\u3002\u53ef\u80fd\u66f4\u503e\u5411\u4e8e\u83b7\u53d6\u4e00\u4e2a\u6309date\u5217\u65f6\u95f4\u6233\u7d22\u5f15\u7684\u4e14\u6bcf\u4e2a\u4e0d\u540c\u7684item\u72ec\u7acb\u4e00\u5217\u7684DataFrame\u3002\\ DataFrame\u7684pivot\u65b9\u6cd5\u5c31\u662f\u8fdb\u884c\u8fd9\u79cd\u8f6c\u6362\u7684\uff1a\\ \u4e0b\u9762\u4f8b\u5b50\u4e2d\uff0c\u4f20\u9012\u7684\u524d\u4e24\u4e2a\u503c\u662f\u5206\u522b\u7528\u4f5c\u884c\u548c\u5217\u7d22\u5f15\u7684\u5217\uff0c\u7136\u540e\u662f\u53ef\u9009\u7684\u6570\u503c\u5217\u4ee5\u586b\u5145DataFrame\u3002\\ \u6ce8\u610f\uff0cpivot\u65b9\u6cd5\u7b49\u4ef7\u4e8e\u4f7f\u7528set_index\u521b\u5efa\u5206\u5c42\u7d22\u5f15\uff0c\u7136\u540e\u8c03\u7528unstack\u3002 pivoted = ldata.pivot('date', 'item', 'value') print(pivoted) # item infl realgdp unemp # date # 1959-03-31 23:59:59.999999999 0.00 2710.349 5.8 # 1959-06-30 23:59:59.999999999 2.34 2778.801 5.1 # ... ... ... ... # 2009-06-30 23:59:59.999999999 3.37 12901.504 9.2 # 2009-09-30 23:59:59.999999999 3.56 12990.341 9.6 # [203 rows x 3 columns] ldata['value2'] = np.random.randn(len(ldata)) print(ldata[:5]) # date item value value2 # 0 1959-03-31 23:59:59.999999999 realgdp 2710.349 -1.268405 # 1 1959-03-31 23:59:59.999999999 infl 0.000 0.377691 # 2 1959-03-31 23:59:59.999999999 unemp 5.800 -0.342492 # 3 1959-06-30 23:59:59.999999999 realgdp 2778.801 0.132797 # 4 1959-06-30 23:59:59.999999999 infl 2.340 0.180290 \u6b64\u65f6ldata\u5df2\u7ecf\u6dfb\u52a0\u4e86\u4e00\u5217\u3002\u5982\u679c\u9057\u6f0f\u6700\u540e\u4e00\u4e2a\u53c2\u6570\uff0c\u4f1a\u5f97\u5230\u4e00\u4e2a\u542b\u6709\u591a\u5c42\u5217\u7684DataFrame\uff0c\u5982\u4e0b\uff1a pivoted = ldata.pivot('date', 'item') print(pivoted) # value ... value2 # item infl realgdp ... realgdp unemp # date ... # 1959-03-31 23:59:59.999999999 0.00 2710.349 ... 0.157467 -0.222464 # 1959-06-30 23:59:59.999999999 2.34 2778.801 ... 0.861501 0.368855 # ... ... ... ... ... ... # 2009-06-30 23:59:59.999999999 3.37 12901.504 ... 0.279988 0.934972 # 2009-09-30 23:59:59.999999999 3.56 12990.341 ... 0.547914 1.842967 # [203 rows x 6 columns] \u6ce8\u610f\uff0cpivot\u65b9\u6cd5\u7b49\u4ef7\u4e8e\u4f7f\u7528set_index\u521b\u5efa\u5206\u5c42\u7d22\u5f15\uff0c\u7136\u540e\u8c03\u7528unstack\u3002 unstacked = ldata.set_index(['date', 'item']).unstack('item') print(unstacked[:5]) # value ... value2 # item infl realgdp ... realgdp unemp # date ... # 1959-03-31 23:59:59.999999999 0.00 2710.349 ... 0.213120 -0.248004 # 1959-06-30 23:59:59.999999999 2.34 2778.801 ... 0.697763 0.112388 # 1959-09-30 23:59:59.999999999 2.74 2775.488 ... 1.291884 -1.046142 # 1959-12-31 23:59:59.999999999 0.27 2785.204 ... 0.363339 -0.307364 # 1960-03-31 23:59:59.999999999 2.31 2847.699 ... 0.377330 2.272980 # [5 rows x 6 columns] \u5c06\u201c\u5bbd\u201d\u900f\u89c6\u4e3a\u201c\u957f\u201d \u5728DataFrame\u4e2d\uff0cpivot\u65b9\u6cd5\u7684\u53cd\u64cd\u4f5c\u662fpandas.melt\u3002\\ \u4e0e\u5c06\u4e00\u5217\u53d8\u6362\u4e3a\u65b0\u7684DataFrame\u4e2d\u7684\u591a\u5217\u4e0d\u540c\uff0c\u5b83\u5c06\u591a\u5217\u5408\u5e76\u6210\u4e00\u5217\uff0c\u4ea7\u751f\u4e00\u4e2a\u65b0\u7684DataFrame\uff0c\u5176\u957f\u5ea6\u6bd4\u8f93\u5165\u66f4\u957f\u3002 df = pd.DataFrame( { 'key': ['foo', 'bar', 'baz'], 'A': [1, 2, 3], 'B': [4, 5, 6], 'C': [7, 8, 9] } ) print(df) # key A B C # 0 foo 1 4 7 # 1 bar 2 5 8 # 2 baz 3 6 9 'key\u2019\u5217\u53ef\u4ee5\u4f5c\u4e3a\u5206\u7ec4\u6307\u6807\uff0c\u5176\u4ed6\u5217\u5747\u4e3a\u6570\u636e\u503c\u3002\\ \u5f53\u4f7f\u7528pandas.melt\u65f6\uff0c\u6211\u4eec\u5fc5\u987b\u6307\u660e\u54ea\u4e9b\u5217\u662f\u5206\u7ec4\u6307\u6807\uff08\u5982\u679c\u6709\u7684\u8bdd\uff09\u3002\\ \u6b64\u5904\uff0c\u8ba9\u6211\u4eec\u4f7f\u7528\u2019key\u2019\u4f5c\u4e3a\u552f\u4e00\u7684\u5206\u7ec4\u6307\u6807\uff1a melted = pd.melt(df, ['key']) print(melted) # key variable value # 0 foo A 1 # 1 bar A 2 # 2 baz A 3 # 3 foo B 4 # 4 bar B 5 # 5 baz B 6 # 6 foo C 7 # 7 bar C 8 # 8 baz C 9 \u4f7f\u7528pivot\u65b9\u6cd5\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u6570\u636e\u91cd\u5851\u56de\u539f\u5148\u7684\u5e03\u5c40 reshaped = melted.pivot('key', 'variable', 'value') print(reshaped) # variable A B C # key # bar 2 5 8 # baz 3 6 9 # foo 1 4 7 \u7531\u4e8epivot\u7684\u7ed3\u679c\u6839\u636e\u4f5c\u4e3a\u884c\u6807\u7b7e\u7684\u5217\u751f\u6210\u4e86\u7d22\u5f15\uff0c\u53ef\u4f7f\u7528reset_index\u6765\u5c06\u6570\u636e\u56de\u79fb\u4e00\u5217\uff1a print(reshaped.reset_index()) # variable key A B C # 0 bar 2 5 8 # 1 baz 3 6 9 # 2 foo 1 4 7 pandas.melt\u7684\u4f7f\u7528\u4e5f\u53ef\u4ee5\u65e0\u987b\u4efb\u4f55\u5206\u7ec4\u6307\u6807 result = pd.melt(df, value_vars=['A', 'B', 'C']) print(result) # variable value # 0 A 1 # 1 A 2 # 2 A 3 # 3 B 4 # 4 B 5 # 5 B 6 # 6 C 7 # 7 C 8 # 8 C 9 result = pd.melt(df, value_vars=['key', 'B', 'C']) print(result) # variable value # 0 key foo # 1 key bar # 2 key baz # 3 B 4 # 4 B 5 # 5 B 6 # 6 C 7 # 7 C 8 # 8 C 9","title":"Ch05"},{"location":"python/DataAnalysis/ch05/#_1","text":"import pandas as pd import numpy as np import re \u5206\u5c42\u7d22\u5f15\u662fpandas\u7684\u91cd\u8981\u7279\u6027\uff0c\u5141\u8bb8\u4f60\u5728\u4e00\u4e2a\u8f74\u5411\u4e0a\u62e5\u6709\u591a\u4e2a\uff08\u4e24\u4e2a\u6216\u4e24\u4e2a\u4ee5\u4e0a\uff09\u7d22\u5f15\u5c42\u7ea7\u3002\\ \u5206\u5c42\u7d22import re\u5f15\u63d0\u4f9b\u4e86\u4e00\u79cd\u5728\u66f4\u4f4e\u7ef4\u5ea6\u7684\u5f62\u5f0f\u4e2d\u5904\u7406\u66f4\u9ad8\u7ef4\u5ea6\u6570\u636e\u7684\u65b9\u5f0f\u3002","title":"\u5206\u5c42\u7d22\u5f15"},{"location":"python/DataAnalysis/ch05/#series","text":"data = pd.Series( np.random.randn(9), index=[['a', 'a', 'a', 'b', 'b', 'c', 'c', 'd', 'd'], [1, 2, 3, 1, 3, 1, 2, 2, 3]] ) \u8f93\u51fa\u662f\u4e00\u4e2a\u4ee5MultiIndex\u4f5c\u4e3a\u7d22\u5f15\u7684Series\u7684\u7f8e\u5316\u89c6\u56fe\u3002\\ \u7d22\u5f15\u4e2d\u7684\"\u95f4\u9699\"\u8868\u793a\"\u76f4\u63a5\u4f7f\u7528\u4e0a\u9762\u7684\u6807\u7b7e\" print(data) # a 1 0.163468 # 2 -1.525926 # 3 -0.210247 # b 1 -0.956063 # 3 -1.839111 # c 1 -0.398905 # 2 0.595279 # d 2 0.034305 # 3 -0.896078 # dtype: float64 print(data.index) # MultiIndex([('a', 1), # ('a', 2), # ('a', 3), # ('b', 1), # ('b', 3), # ('c', 1), # ('c', 2), # ('d', 2), # ('d', 3)], # ) \u901a\u8fc7\u5206\u5c42\u7d22\u5f15\u5bf9\u8c61\uff0c\u4e5f\u53ef\u4ee5\u79f0\u4e3a\u90e8\u5206\u7d22\u5f15\uff0c\u53ef\u4ee5\u7b80\u6d01\u5730\u9009\u62e9\u51fa\u6570\u636e\u7684\u5b50\u96c6 m = data['b'] print(m) # 1 -0.956063 # 3 -1.839111 # dtype: float64 m = data['b': 'c'] print(m) # b 1 -0.956063 # 3 -1.839111 # c 1 -0.398905 # 2 0.595279 # dtype: float64 m = data.loc[['b', 'c']] print(m) # b 1 -0.956063 # 3 -1.839111 # c 1 -0.398905 # 2 0.595279 # dtype: float64 m = data.loc[:, 2] print(m) # a -1.525926 # c 0.595279 # d 0.034305 # dtype: float64 \u5206\u5c42\u7d22\u5f15\u5728\u91cd\u5851\u6570\u636e\u548c\u6570\u7ec4\u900f\u89c6\u8868\u7b49\u5206\u7ec4\u64cd\u4f5c\u4e2d\u626e\u6f14\u4e86\u91cd\u8981\u89d2\u8272\u3002\\ \u4f8b\u5982\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528unstack\u65b9\u6cd5\u5c06\u6570\u636e\u5728DataFrame\u4e2d\u91cd\u65b0\u6392\u5217 m = data.unstack() print(m) # 1 2 3 # a 0.163468 -1.525926 -0.210247 # b -0.956063 NaN -1.839111 # c -0.398905 0.595279 NaN # d NaN 0.034305 -0.896078 n = m.stack() print(n) # \u6216\u8005 print(data.unstack().stack()) # a 1 0.163468 # 2 -1.525926 # 3 -0.210247 # b 1 -0.956063 # 3 -1.839111 # c 1 -0.398905 # 2 0.595279 # d 2 0.034305 # 3 -0.896078 # dtype: float64","title":"Series\u7d22\u5f15\u5206\u5c42"},{"location":"python/DataAnalysis/ch05/#dataframe","text":"\u5728DataFrame\u4e2d\uff0c\u6bcf\u4e2a\u8f74\u90fd\u53ef\u4ee5\u62e5\u6709\u5206\u5c42\u7d22\u5f15\\ \u53c2\u8003\uff1ahttps://www.jianshu.com/p/2c1c8fbee55a","title":"DataFrame\u7d22\u5f15\u5206\u5c42"},{"location":"python/DataAnalysis/ch05/#1","text":"\u76f4\u63a5\u901a\u8fc7\u7ed9index\uff08columns\uff09\u53c2\u6570\u4f20\u9012\u591a\u7ef4\u6570\u7ec4\uff0c\u8fdb\u800c\u6784\u5efa\u591a\u7ef4\u7d22\u5f15\u3002\\ \u6570\u7ec4\u4e2d\u6bcf\u4e2a\u7ef4\u5ea6\u5bf9\u5e94\u4f4d\u7f6e\u7684\u5143\u7d20\uff0c\u7ec4\u6210\u6bcf\u4e2a\u7d22\u5f15\u503c\u3002 frame = pd.DataFrame( np.arange(12).reshape((4, 3)), index=[['a', 'a', 'b', 'b'], [1, 2, 1, 2]], columns=[['Ohio', 'Ohio', 'Colorado'], ['Green', 'Red', 'Green']] ) print(frame) # Ohio Colorado # Green Red Green # a 1 0 1 2 # 2 3 4 5 # b 1 6 7 8 # 2 9 10 11 \u4e0a\u9762\u8f93\u51fa\u4e2d\u76842\u4e2a\u5c42\u7ea7\u662f\u6ca1\u6709\u540d\u5b57\u3002\\ \u5206\u5c42\u7684\u5c42\u7ea7\u53ef\u4ee5\u6709\u540d\u79f0\uff08\u53ef\u4ee5\u662f\u5b57\u7b26\u4e32\u6216Python\u5bf9\u8c61\uff09\u3002\\ \u5982\u679c\u5c42\u7ea7\u6709\u540d\u79f0\uff0c\u8fd9\u4e9b\u540d\u79f0\u4f1a\u5728\u63a7\u5236\u53f0\u8f93\u51fa\u4e2d\u663e\u793a\u3002 print(frame.index.names) # [None, None] print(frame.columns.names) # [None, None] \u7ed9\u5c42\u7ea7\u8d4b\u4e88\u540d\u79f0\u3002\u6ce8\u610f\u533a\u5206\u884c\u6807\u7b7e\u4e2d\u7684\u7d22\u5f15\u540d\u79f0\u2019state\u2019\u548c\u2019color'\u3002 frame.index.names = ['key1', 'key2'] frame.columns.names = ['state', 'color'] print(frame) # state Ohio Colorado # color Green Red Green # key1 key2 # a 1 0 1 2 # 2 3 4 5 # b 1 6 7 8 # 2 9 10 11 print(frame['Ohio']) # color Green Red # key1 key2 # a 1 0 1 # 2 3 4 # b 1 6 7 # 2 9 10 print(frame.index) # MultiIndex([('a', 1), # ('a', 2), # ('b', 1), # ('b', 2)], # names=['key1', 'key2']) \u901a\u8fc7MultiIndex\u7c7b\u7684\u76f8\u5173\u65b9\u6cd5\uff0c\u9884\u5148\u521b\u5efa\u4e00\u4e2aMultiIndex\u5bf9\u8c61\uff0c\u7136\u540e\u4f5c\u4e3aSeries\u4e0eDataFrame\u4e2d\u7684index\uff08\u6216columns\uff09\u53c2\u6570\u503c\u3002 \u540c\u65f6\uff0c\u53ef\u4ee5\u901a\u8fc7names\u53c2\u6570\u6307\u5b9a\u591a\u5c42\u7d22\u5f15\u7684\u540d\u79f0\u3002","title":"\u65b9\u6cd51\uff1a\u76f4\u63a5\u521b\u5efa"},{"location":"python/DataAnalysis/ch05/#2from_arrays","text":"from_arrays\uff1a\u63a5\u6536\u4e00\u4e2a\u591a\u7ef4\u6570\u7ec4\u53c2\u6570\uff0c\u9ad8\u7ef4\u6307\u5b9a\u9ad8\u5c42\u7d22\u5f15\uff0c\u4f4e\u7ef4\u6307\u5b9a\u5e95\u5c42\u7d22\u5f15\u3002 mindex = pd.MultiIndex.from_arrays( [['a', 'a', 'b', 'b'], [1, 2, 1, 2]], names=['key1', 'key2'] ) frame = pd.DataFrame( np.arange(12).reshape((4, 3)), index=mindex, columns=[['Ohio', 'Ohio', 'Colorado'], ['Green', 'Red', 'Green']] ) frame.columns.names = ['state', 'color'] print(frame) # state Ohio Colorado # color Green Red Green # key1 key2 # a 1 0 1 2 # 2 3 4 5 # b 1 6 7 8 # 2 9 10 11","title":"\u65b9\u6cd52\uff1afrom_arrays"},{"location":"python/DataAnalysis/ch05/#3from_tuples","text":"from_tuples\uff1a\u63a5\u6536\u4e00\u4e2a\u5143\u7ec4\u7684\u5217\u8868\uff0c\u6bcf\u4e2a\u5143\u7ec4\u6307\u5b9a\u6bcf\u4e2a\u7d22\u5f15\uff08\u9ad8\u7ef4\u7d22\u5f15\uff0c\u4f4e\u7ef4\u7d22\u5f15\uff09\u3002 mindex = pd.MultiIndex.from_tuples( [('a', 1), ('a', 2), ('b', 1), ('b', 2)] ) frame = pd.DataFrame( np.arange(12).reshape((4, 3)), index=mindex, columns=[['Ohio', 'Ohio', 'Colorado'], ['Green', 'Red', 'Green']] ) frame.index.names = ['key1', 'key2'] frame.columns.names = ['state', 'color'] print(frame) # state Ohio Colorado # color Green Red Green # key1 key2 # a 1 0 1 2 # 2 3 4 5 # b 1 6 7 8 # 2 9 10 11","title":"\u65b9\u6cd53\uff1afrom_tuples"},{"location":"python/DataAnalysis/ch05/#4from_product","text":"from_product\uff1a\u63a5\u6536\u4e00\u4e2a\u53ef\u8fed\u4ee3\u5bf9\u8c61\u7684\u5217\u8868\uff0c\u6839\u636e\u591a\u4e2a\u53ef\u8fed\u4ee3\u5bf9\u8c61\u5143\u7d20\u7684\u7b1b\u5361\u5c14\u79ef\u8fdb\u884c\u521b\u5efa\u7d22\u5f15\u3002\\ \u4f7f\u7528\u7b1b\u5361\u5c14\u79ef\u7684\u65b9\u5f0f\u6765\u521b\u5efa\u591a\u5c42\u7d22\u5f15\u3002\u53c2\u6570\u4e3a\u5d4c\u5957\u7684\u53ef\u8fed\u4ee3\u5bf9\u8c61\u3002\u7ed3\u679c\u4e3a\u4f7f\u7528\u6bcf\u4e2a\u4e00\u7ef4\u6570\u7ec4\u4e2d\u7684\u5143\u7d20\u4e0e\u5176\u4ed6\u4e00\u7ef4\u6570\u7ec4\u4e2d\u7684\u5143\u7d20\u6765\u751f\u6210\\ \u7b1b\u5361\u5c14\u79ef\u7684\u65b9\u5f0f\u7684\u5c40\u9650\uff1a\u4e24\u4e24\u7ec4\u5408\u5fc5\u987b\u90fd\u5b58\u5728\uff0c\u5426\u5219\uff0c\u5c31\u4e0d\u80fd\u4f7f\u7528\u8fd9\u79cd\u65b9\u5f0f\u3002 mindex = pd.MultiIndex.from_product( [['a', 'b'], ['1', '2']], names=['key1', 'key2'] ) frame = pd.DataFrame( np.arange(12).reshape((4, 3)), index=mindex, columns=[['Ohio', 'Ohio', 'Colorado'], ['Green', 'Red', 'Green']] ) frame.columns.names = ['state', 'color'] print(frame) # state Ohio Colorado # color Green Red Green # key1 key2 # a 1 0 1 2 # 2 3 4 5 # b 1 6 7 8 # 2 9 10 11","title":"\u65b9\u6cd54\uff1afrom_product"},{"location":"python/DataAnalysis/ch05/#_2","text":"\u5982\u679c\u9700\u8981\u91cd\u65b0\u6392\u5217\u8f74\u4e0a\u7684\u5c42\u7ea7\u987a\u5e8f\uff0c\u6216\u8005\u6309\u7167\u7279\u5b9a\u5c42\u7ea7\u7684\u503c\u5bf9\u6570\u636e\u8fdb\u884c\u6392\u5e8f\uff0c\\ \u53ef\u4ee5\u901a\u8fc7swaplevel\u63a5\u6536\u4e24\u4e2a\u5c42\u7ea7\u5e8f\u53f7\u6216\u5c42\u7ea7\u540d\u79f0\uff0c\u8fd4\u56de\u4e00\u4e2a\u8fdb\u884c\u4e86\u5c42\u7ea7\u53d8\u66f4\u7684\u65b0\u5bf9\u8c61\uff08\u4f46\u662f\u6570\u636e\u662f\u4e0d\u53d8\u7684\uff09 print(frame) # state Ohio Colorado # color Green Red Green # key1 key2 # a 1 0 1 2 # 2 3 4 5 # b 1 6 7 8 # 2 9 10 11 m = frame.swaplevel('key1', 'key2') print(m) # state Ohio Colorado # color Green Red Green # key2 key1 # 1 a 0 1 2 # 2 a 3 4 5 # 1 b 6 7 8 # 2 b 9 10 11 sort_index\u53ea\u80fd\u5728\u5355\u4e00\u5c42\u7ea7\u4e0a\u5bf9\u6570\u636e\u8fdb\u884c\u6392\u5e8f\u3002\\ \u5728\u8fdb\u884c\u5c42\u7ea7\u53d8\u6362\u65f6\uff0c\u4f7f\u7528sort_index\u4ee5\u4f7f\u5f97\u7ed3\u679c\u6309\u7167\u5c42\u7ea7\u8fdb\u884c\u5b57\u5178\u6392\u5e8f m = frame.sort_index(level=1) # \u5bf9key2\u6392\u5e8f\uff0c\u5e95\u5c42\u7d22\u5f15 print(m) # state Ohio Colorado # color Green Red Green # key1 key2 # a 1 0 1 2 # b 1 6 7 8 # a 2 3 4 5 # b 2 9 10 11 m = frame.sort_index(level=0) # \u5bf9key1\u6392\u5e8f\uff0c\u9ad8\u5c42\u7d22\u5f15 print(m) # state Ohio Colorado # color Green Red Green # key1 key2 # a 1 0 1 2 # 2 3 4 5 # b 1 6 7 8 # 2 9 10 11 m = frame.swaplevel(0, 1).sort_index(level=1) # swaplevel(0, 1)\u7b49\u540c\u4e8eswaplevel(key1, key2)\uff0c\u4ea4\u6362\u540ekey1\u53d8\u6210\u4e86\u5e95\u5c42\u7d22\u5f15 print(m) # state Ohio Colorado # color Green Red Green # key2 key1 # 1 a 0 1 2 # 2 a 3 4 5 # 1 b 6 7 8 # 2 b 9 10 11","title":"\u91cd\u6392\u5e8f\u548c\u5c42\u7ea7\u6392\u5e8f"},{"location":"python/DataAnalysis/ch05/#_3","text":"DataFrame\u548cSeries\u4e2d\u5f88\u591a\u63cf\u8ff0\u6027\u548c\u6c47\u603b\u6027\u7edf\u8ba1\u6709\u4e00\u4e2alevel\u9009\u9879\uff0c\u901a\u8fc7level\u9009\u9879\u4f60\u53ef\u4ee5\u6307\u5b9a\u4f60\u60f3\u8981\u5728\u67d0\u4e2a\u7279\u5b9a\u7684\u8f74\u4e0a\u8fdb\u884c\u805a\u5408\u3002 print(frame) # state Ohio Colorado # color Green Red Green # key1 key2 # a 1 0 1 2 # 2 3 4 5 # b 1 6 7 8 # 2 9 10 11 m = frame.groupby(level='key2').sum() print(m) # state Ohio Colorado # color Green Red Green # key2 # 1 6 8 10 # 2 12 14 16 m = frame.groupby(level='color', axis=1).sum() print(m) # color Green Red # key1 key2 # a 1 2 1 # 2 8 4 # b 1 14 7 # 2 20 10","title":"\u6309\u5c42\u7ea7\u8fdb\u884c\u6c47\u603b\u7edf\u8ba1"},{"location":"python/DataAnalysis/ch05/#dataframe_1","text":"\u901a\u5e38\u6211\u4eec\u4e0d\u4f1a\u4f7f\u7528DataFrame\u4e2d\u4e00\u4e2a\u6216\u591a\u4e2a\u5217\u4f5c\u4e3a\u884c\u7d22\u5f15\uff1b\u53cd\u800c\u4f60\u53ef\u80fd\u60f3\u8981\u5c06\u884c\u7d22\u5f15\u79fb\u52a8\u5230DataFrame\u7684\u5217\u4e2d\u3002 frame = pd.DataFrame( {'a': range(7), 'b': range(7, 0, -1), 'c': ['one', 'one', 'one', 'two', 'two', 'two', 'two'], 'd': [0, 1, 2, 0, 1, 2, 3] } ) print(frame) # a b c d # 0 0 7 one 0 # 1 1 6 one 1 # 2 2 5 one 2 # 3 3 4 two 0 # 4 4 3 two 1 # 5 5 2 two 2 # 6 6 1 two 3 DataFrame\u7684set_index\u51fd\u6570\u4f1a\u751f\u6210\u4e00\u4e2a\u65b0\u7684DataFrame\uff0c\u65b0\u7684DataFrame\u4f7f\u7528\u4e00\u4e2a\u6216\u591a\u4e2a\u5217\u4f5c\u4e3a\u7d22\u5f15\\ \u9ed8\u8ba4\u60c5\u51b5\u4e0b\u8fd9\u4e9b\u7d22\u5f15\u5217\u4f1a\u4eceDataFrame\u4e2d\u79fb\u9664\uff0c\u4e5f\u53ef\u4ee5\u5c06\u5b83\u4eec\u7559\u5728DataFrame\u4e2d frame2 = frame.set_index(['c', 'd'], drop=False) print(frame2) # a b c d # c d # one 0 0 7 one 0 # 1 1 6 one 1 # 2 2 5 one 2 # two 0 3 4 two 0 # 1 4 3 two 1 # 2 5 2 two 2 # 3 6 1 two 3 frame2 = frame.set_index(['c', 'd']) print(frame2) # a b # c d # one 0 0 7 # 1 1 6 # 2 2 5 # two 0 3 4 # 1 4 3 # 2 5 2 # 3 6 1 reset_index\u662fset_index\u7684\u53cd\u64cd\u4f5c\uff0c\u5206\u5c42\u7d22\u5f15\u7684\u7d22\u5f15\u5c42\u7ea7\u4f1a\u88ab\u79fb\u52a8\u5230\u5217\u4e2d\\ \u6ce8\u610f\uff1a\u5982\u679c\u5728set_index\u65f6\u4f7f\u7528\u4e86drop=False\uff0c\u5728\u4f7f\u7528reset_index\u4f1a\u62a5\u9519 m = frame2.reset_index() print(m) # c d a b # 0 one 0 0 7 # 1 one 1 1 6 # 2 one 2 2 5 # 3 two 0 3 4 # 4 two 1 4 3 # 5 two 2 5 2 # 6 two 3 6 1","title":"\u4f7f\u7528DataFrame\u7684\u5217\u8fdb\u884c\u7d22\u5f15"},{"location":"python/DataAnalysis/ch05/#_4","text":"\u5305\u542b\u5728pandas\u5bf9\u8c61\u7684\u6570\u636e\u53ef\u4ee5\u901a\u8fc7\u591a\u79cd\u65b9\u5f0f\u8054\u5408\u5728\u4e00\u8d77\uff1a * pandas.merge\u6839\u636e\u4e00\u4e2a\u6216\u591a\u4e2a\u952e\u5c06\u884c\u8fdb\u884c\u8fde\u63a5\u3002\u5bf9\u4e8eSQL\u6216\u5176\u4ed6\u5173\u7cfb\u578b\u6570\u636e\u5e93\u7684\u7528\u6237\u6765\u8bf4\uff0c\u8fd9\u79cd\u65b9\u5f0f\u6bd4\u8f83\u719f\u6089\uff0c\u5b83\u5b9e\u73b0\u7684\u662f\u6570\u636e\u5e93\u7684\u8fde\u63a5\u64cd\u4f5c\u3002 * pandas.concat\u4f7f\u5bf9\u8c61\u5728\u8f74\u5411\u4e0a\u8fdb\u884c\u9ecf\u5408\u6216\u201c\u5806\u53e0\u201d\u3002 * combine_first\u5b9e\u4f8b\u65b9\u6cd5\u5141\u8bb8\u5c06\u91cd\u53e0\u7684\u6570\u636e\u62fc\u63a5\u5728\u4e00\u8d77\uff0c\u4ee5\u4f7f\u7528\u4e00\u4e2a\u5bf9\u8c61\u4e2d\u7684\u503c\u586b\u5145\u53e6\u4e00\u4e2a\u5bf9\u8c61\u4e2d\u7684\u7f3a\u5931\u503c\u3002","title":"\u8054\u5408\u4e0e\u5408\u5e76\u6570\u636e\u96c6"},{"location":"python/DataAnalysis/ch05/#dataframe_2","text":"\u5408\u5e76\u6216\u8fde\u63a5\u64cd\u4f5c\u901a\u8fc7\u4e00\u4e2a\u6216\u591a\u4e2a\u952e\u8fde\u63a5\u884c\u6765\u8054\u5408\u6570\u636e\u96c6\u3002\\ \u8fd9\u4e9b\u64cd\u4f5c\u662f\u5173\u7cfb\u578b\u6570\u636e\u5e93\u7684\u6838\u5fc3\u5185\u5bb9\uff08\u4f8b\u5982\u57fa\u4e8eSQL\u7684\u6570\u636e\u5e93\uff09\u3002\\ pandas\u4e2d\u7684merge\u51fd\u6570\u4e3b\u8981\u7528\u4e8e\u5c06\u5404\u79cdjoin\u64cd\u4f5c\u7b97\u6cd5\u8fd0\u7528\u5728\u6570\u636e\u4e0a\u3002\\ \u5728\u8fdb\u884c\u5217-\u5217\u8fde\u63a5\u65f6\uff0c\u4f20\u9012\u7684DataFrame\u7d22\u5f15\u5bf9\u8c61\u4f1a\u88ab\u4e22\u5f03\\ \u5408\u5e76\u64cd\u4f5c\u4e5f\u8981\u8003\u8651\u5982\u4f55\u5904\u7406\u91cd\u53e0\u7684\u5217\u540d(suffixes\u540e\u7f00\u9009\u9879)\u3002\\ \\ \u4e0b\u9762\u662f\u4e00\u4e2a\u591a\u5bf9\u4e00\u8fde\u63a5\u7684\u4f8b\u5b50\u3002\\ df1\u7684\u6570\u636e\u6709\u591a\u4e2a\u884c\u7684\u6807\u7b7e\u4e3aa\u548cb\uff0c\u800cdf2\u5728key\u5217\u4e2d\u6bcf\u4e2a\u503c\u4ec5\u6709\u4e00\u884c\u3002 df1 = pd.DataFrame( { 'key': ['b', 'b', 'a', 'c', 'a', 'a', 'b'], 'data1': range(7) } ) df2 = pd.DataFrame( { 'key': ['a', 'b', 'd'], 'data1': range(3) } ) print(df1) # key data1 # 0 b 0 # 1 b 1 # 2 a 2 # 3 c 3 # 4 a 4 # 5 a 5 # 6 b 6 print(df2) # key data1 # 0 a 0 # 1 b 1 # 2 d 2 \u8c03\u7528merge\u5904\u7406\uff0c\u63a8\u8350\u663e\u5f0f\u5730\u6307\u5b9a\u8fde\u63a5\u952e\u3002 result = pd.merge(df1, df2) print(result) # key data1 # 0 b 1 result = pd.merge(df1, df2, on=['key', 'data1']) print(result) # key data1 # 0 b 1 result = pd.merge(df1, df2, on='key') print(result) # key data1_x data1_y # 0 b 0 1 # 1 b 1 1 # 2 b 6 1 # 3 a 2 0 # 4 a 4 0 # 5 a 5 0 \u5982\u679c\u6bcf\u4e2a\u5bf9\u8c61\u7684\u5217\u540d\u662f\u4e0d\u540c\u7684\uff0c\u53ef\u4ee5\u5206\u522b\u4e3a\u5b83\u4eec\u6307\u5b9a\u5217\u540d df3 = pd.DataFrame( { 'lkey': ['b', 'b', 'a', 'c', 'a', 'a', 'b'], 'data1': range(7) } ) df4 = pd.DataFrame( { 'rkey': ['a', 'b', 'd'], 'data2': range(3) } ) print(df3) # lkey data1 # 0 b 0 # 1 b 1 # 2 a 2 # 3 c 3 # 4 a 4 # 5 a 5 # 6 b 6 print(df4) # rkey data2 # 0 a 0 # 1 b 1 # 2 d 2 \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0cmerge\u505a\u7684\u662f\u5185\u8fde\u63a5\uff08'inner'join\uff09\uff0c\u7ed3\u679c\u4e2d\u7684\u952e\u662f\u4e24\u5f20\u8868\u7684\u4ea4\u96c6\u3002 result = pd.merge(df3, df4, left_on='lkey', right_on='rkey') # df4\u7684[a,0]\u5bf9\u5e94df3\u7684\u6240\u6709[a,?]\u8bb0\u5f55\uff08\u901a\u8fc7\u91cd\u590d\u6765\u586b\u5145\u4e0d\u8db3\uff09 print(result) # lkey data1 rkey data2 # 0 b 0 b 1 # 1 b 1 b 1 # 2 b 6 b 1 # 3 a 2 a 0 # 4 a 4 a 0 # 5 a 5 a 0 \u5916\u8fde\u63a5\uff08outer join\uff09\u662f\u952e\u7684\u5e76\u96c6\uff0c\u8054\u5408\u4e86\u5de6\u8fde\u63a5\u548c\u53f3\u8fde\u63a5\u7684\u6548\u679c\\ \u591a\u5bf9\u591a\u8fde\u63a5\u662f\u884c\u7684\u7b1b\u5361\u5c14\u79ef df1 = pd.DataFrame( { 'key': ['b', 'b', 'a', 'c', 'a', 'b'], 'data1': range(6) } ) df2 = pd.DataFrame( { 'key': ['a', 'b', 'a', 'b', 'd'], 'data2': range(5) } ) print(df1.sort_values(by='key')) # key data1 # 2 a 2 # 4 a 4 # 0 b 0 # 1 b 1 # 5 b 5 # 3 c 3 print(df2.sort_values(by='key')) # key data2 # 0 a 0 # 2 a 2 # 1 b 1 # 3 b 3 # 4 d 4 result = pd.merge(df1, df2, on='key', how='left') print(result.sort_values(by='key')) # key data1 data2 # 4 a 2 0.0 # 5 a 2 2.0 # 7 a 4 0.0 # 8 a 4 2.0 # 0 b 0 1.0 # 1 b 0 3.0 # 2 b 1 1.0 # 3 b 1 3.0 # 9 b 5 1.0 # 10 b 5 3.0 # 6 c 3 NaN result = pd.merge(df1, df2, on='key', how='outer') # \u591a\u5bf9\u591a\u8fde\u63a5 print(result.sort_values(by='key')) # key data1 data2 # 6 a 2.0 0.0 # 7 a 2.0 2.0 # 8 a 4.0 0.0 # 9 a 4.0 2.0 # 0 b 0.0 1.0 # 1 b 0.0 3.0 # 2 b 1.0 1.0 # 3 b 1.0 3.0 # 4 b 5.0 1.0 # 5 b 5.0 3.0 # 10 c 3.0 NaN # 11 d NaN 4.0 \u591a\u952e\u5408\u5e76 df1 = pd.DataFrame( { 'key1': ['foo', 'foo', 'bar'], 'key2': ['one', 'two', 'one'], 'lval': [1, 2, 3] } ) df2 = pd.DataFrame( { 'key1': ['foo', 'foo', 'bar', 'bar'], 'key2': ['one', 'one', 'one', 'two'], 'rval': [4, 5, 6, 7] } ) print(df1.sort_values(by=['key1', 'key2'])) # key1 key2 lval # 2 bar one 3 # 0 foo one 1 # 1 foo two 2 print(df2.sort_values(by=['key1', 'key2'])) # key1 key2 rval # 2 bar one 6 # 3 bar two 7 # 0 foo one 4 # 1 foo one 5 result = pd.merge(df1, df2, on=['key1', 'key2'], how='outer') print(result.sort_values(by=['key1', 'key2'])) # key1 key2 lval rval # 3 bar one 3.0 6.0 # 4 bar two NaN 7.0 # 0 foo one 1.0 4.0 # \u91cd\u590d\u586b\u5145 # 1 foo one 1.0 5.0 # \u91cd\u590d\u586b\u5145 # 2 foo two 2.0 NaN \u5904\u7406\u91cd\u53e0\u5217\u540d result = pd.merge(df1, df2, on='key1') print(result.sort_values(by='key1')) # key1 key2_x lval key2_y rval # 4 bar one 3 one 6 # 5 bar one 3 two 7 # 0 foo one 1 one 4 # 1 foo one 1 one 5 # 2 foo two 2 one 4 # 3 foo two 2 one 5 result = pd.merge(df1, df2, on='key1', suffixes=('_left', '_right')) print(result.sort_values(by='key1')) # key1 key2_left lval key2_right rval # 4 bar one 3 one 6 # 5 bar one 3 two 7 # 0 foo one 1 one 4 # 1 foo one 1 one 5 # 2 foo two 2 one 4 # 3 foo two 2 one 5","title":"\u6570\u636e\u5e93\u98ce\u683c\u7684DataFrame\u8fde\u63a5"},{"location":"python/DataAnalysis/ch05/#_5","text":"\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\uff0cDataFrame\u4e2d\u7528\u4e8e\u5408\u5e76\u7684\u952e\u662f\u5b83\u7684\u7d22\u5f15\u3002\u53ef\u4ee5\u4f20\u9012left_index=True\u6216right_index=True\uff08\u6216\u8005\u90fd\u4f20\uff09\u6765\u8868\u793a\u7d22\u5f15\u9700\u8981\u7528\u6765\u4f5c\u4e3a\u5408\u5e76\u7684\u952e df1 = pd.DataFrame( { 'key1': ['foo', 'foo', 'bar'], 'key2': ['one', 'two', 'one'], 'lval': [1, 2, 3] } ) df2 = pd.DataFrame( { 'key1': ['foo', 'foo', 'bar', 'bar'], 'key2': ['one', 'one', 'one', 'two'], 'rval': [4, 5, 6, 7] }, index=['foo', 'foo', 'bar', 'bar'] ) print(df1) # key1 key2 lval # 0 foo one 1 # 1 foo two 2 # 2 bar one 3 print(df2) # key1 key2 rval # foo foo one 4 # foo foo one 5 # bar bar one 6 # bar bar two 7 result = pd.merge(df1, df2, left_on='key1', right_index=True, suffixes=('_left', '_right')) print(result.sort_index()) # key1 key1_left key2_left lval key1_right key2_right rval # 0 foo foo one 1 foo one 4 # 0 foo foo one 1 foo one 5 # 1 foo foo two 2 foo one 4 # 1 foo foo two 2 foo one 5 # 2 bar bar one 3 bar one 6 # 2 bar bar one 3 bar two 7 result = pd.merge(df1, df2, left_on='key1', right_index=True, how='outer', suffixes=('_left', '_right')) # \u548c\u4e0a\u8ff0\u7ed3\u679c\u4e00\u6837 print(result.sort_index()) # key1 key1_left key2_left lval key1_right key2_right rval # 0 foo foo one 1 foo one 4 # 0 foo foo one 1 foo one 5 # 1 foo foo two 2 foo one 4 # 1 foo foo two 2 foo one 5 # 2 bar bar one 3 bar one 6 # 2 bar bar one 3 bar two 7 \u5728\u66f4\u590d\u6742\u591a\u5c42\u7d22\u5f15\u6570\u636e\u7684\u591a\u952e\u5408\u5e76\uff0c\u5728\u7d22\u5f15\u4e0a\u8fde\u63a5\u662f\u4e00\u4e2a\u9690\u5f0f\u7684\u591a\u952e\u5408\u5e76\\ \u5fc5\u987b\u4ee5\u5217\u8868\u7684\u65b9\u5f0f\u6307\u660e\u5408\u5e76\u6240\u9700\u591a\u4e2a\u5217\uff08\u6ce8\u610f\u4f7f\u7528how='outer\u2019\u5904\u7406\u91cd\u590d\u7684\u7d22\u5f15\u503c\uff09 df1 = pd.DataFrame( { 'key1': ['Ohio', 'Ohio', 'Ohio', 'Nevada', 'Nevada'], 'key2': [2000, 2001, 2002, 2001, 2002], 'data': np.arange(5.) } ) df2 = pd.DataFrame( np.arange(12).reshape((6, 2)), index=[ ['Nevada', 'Nevada', 'Ohio', 'Ohio', 'Ohio', 'Ohio'], [2001, 2000, 2000, 2000, 2001, 2002] ], columns=['event1', 'event2'] ) print(df1) # key1 key2 data # 0 Ohio 2000 0.0 # 1 Ohio 2001 1.0 # 2 Ohio 2002 2.0 # 3 Nevada 2001 3.0 # 4 Nevada 2002 4.0 print(df2) # event1 event2 # Nevada 2001 0 1 # 2000 2 3 # Ohio 2000 4 5 # 2000 6 7 # 2001 8 9 # 2002 10 11 result = pd.merge(df1, df2, left_on=['key1', 'key2'], right_index=True) print(result) # key1 key2 data event1 event2 # 0 Ohio 2000 0.0 4 5 # 0 Ohio 2000 0.0 6 7 # 1 Ohio 2001 1.0 8 9 # 2 Ohio 2002 2.0 10 11 # 3 Nevada 2001 3.0 0 1 result = pd.merge(df1, df2, left_on=['key1', 'key2'], right_index=True, how='outer') print(result) # key1 key2 data event1 event2 # 0 Ohio 2000 0.0 4.0 5.0 # 0 Ohio 2000 0.0 6.0 7.0 # 1 Ohio 2001 1.0 8.0 9.0 # 2 Ohio 2002 2.0 10.0 11.0 # 3 Nevada 2001 3.0 0.0 1.0 # 4 Nevada 2002 4.0 NaN NaN # 4 Nevada 2000 NaN 2.0 3.0 \u4f7f\u7528\u4e24\u8fb9\u7684\u7d22\u5f15\u8fdb\u884c\u5408\u5e76\u4e5f\u662f\u53ef\u4ee5\u7684\uff0c# \u524d\u63d0\u662f\u7528\u4e24\u8fb9\u7528\u6765\u5408\u5e76\u7684\u7d22\u5f15\u6709\u4ea4\u96c6\uff08\u516c\u5171\u90e8\u5206\uff09\u3002\\ \u5728\u4f7f\u7528merge\u65f6\uff0c\u53c2\u6570on=['key1', 'key2']\u4e0d\u80fd\u548c left_index=True, right_index=True\u540c\u65f6\u5b58\u5728\u3002\\ \u5bf9\u4e8e\u91cd\u590d\u7d22\u5f15\uff0c\u5982\u679c\u503c\u4e0d\u540c\uff0c\u5219\u591a\u884c\u663e\u793a\uff0c\u548c\u6570\u636e\u5e93SQL\u7684full join\u7c7b\u4f3c\u6982\u5ff5\u3002\\ \u5982\u679c\u51fa\u73b0\u76f8\u540c\u5217\u540d\uff0c\u5219\u4f1a\u81ea\u52a8\u6dfb\u52a0\u540e\u7f00\u5b57\u7b26\u4ee5\u793a\u533a\u522b\u3002 df1 = pd.DataFrame( [[1, 2], [3, 4], [5, 6]], index=['a', 'c', 'e'], columns=['Ohio', 'Nevada'] ) print(df1) # Ohio Nevada # a 1 2 # c 3 4 # e 5 6 df2 = pd.DataFrame( [[7, 8], [9, 10], [11, 12], [13, 14]], index=['b', 'c', 'c', 'e'], columns=['Missouri', 'Alabama'] ) print(df2) # Missouri Alabama # b 7 8 # c 9 10 # c 11 12 # e 13 14 df3 = pd.DataFrame( [[7, 8], [9, 10], [11, 12], [13, 14]], index=['a', 'c', 'e', 'f'], columns=['Nevada', 'Alabama'] ) print(df3) # Nevada Alabama # a 7 8 # c 9 10 # e 11 12 # f 13 14 result = pd.merge(df1, df2, left_index=True, right_index=True, how='outer') print(result) # Ohio Nevada Missouri Alabama # a 1.0 2.0 NaN NaN # b NaN NaN 7.0 8.0 # c 3.0 4.0 9.0 10.0 # c 3.0 4.0 11.0 12.0 # e 5.0 6.0 13.0 14.0 result = pd.merge(df1, df3, left_index=True, right_index=True, how='outer') print(result) # Ohio Nevada_x Nevada_y Alabama # a 1.0 2.0 7 8 # c 3.0 4.0 9 10 # e 5.0 6.0 11 12 # f NaN NaN 13 14 \u53e6\u4e00\u79cd\u5199\u6cd5\uff1a result = df1.join(df2, how='outer') print(result) # Ohio Nevada Missouri Alabama # a 1.0 2.0 NaN NaN # b NaN NaN 7.0 8.0 # c 3.0 4.0 9.0 10.0 # c 3.0 4.0 11.0 12.0 # e 5.0 6.0 13.0 14.0 \u4e5f\u53ef\u4ee5\u5411join\u65b9\u6cd5\u4f20\u5165\u4e00\u4e2aDataFrame\u5217\u8868\uff0c\u7c7b\u4f3c\u4e8e\u5bf9\u4e09\u4e2a\u6570\u636e\u96c6\u8fdb\u884cjoin\u64cd\u4f5c result = df1.join([df2, df3]) print(result) # Ohio Nevada_x Missouri Alabama_x Nevada_y Alabama_y # a 1 2 NaN NaN 7 8 # c 3 4 9.0 10.0 9 10 # c 3 4 11.0 12.0 9 10 # e 5 6 13.0 14.0 11 12","title":"\u6839\u636e\u7d22\u5f15\u5408\u5e76"},{"location":"python/DataAnalysis/ch05/#_6","text":"\u53e6\u4e00\u79cd\u6570\u636e\u7ec4\u5408\u64cd\u4f5c\u53ef\u79f0\u4e3a\u62fc\u63a5\u3001\u7ed1\u5b9a\u6216\u5806\u53e0\u3002NumPy\u7684concatenate\u51fd\u6570\u53ef\u4ee5\u5728NumPy\u6570\u7ec4\u4e0a\u5b9e\u73b0\u8be5\u529f\u80fd\u3002\\ \\ \u57fa\u4e8eSeries\u7684pandas\u7684concat\u51fd\u6570\u7684\u5de5\u4f5c\u673a\u5236\u5206\u6790\\ \u4e0b\u9762\u4e09\u4e2a\u7d22\u5f15\u4e0d\u91cd\u53e0\u7684Series s1 = pd.Series([0, 1], index=['a', 'b']) s2 = pd.Series([2, 3, 4], index=['c', 'd', 'e']) s3 = pd.Series([5, 6], index=['f', 'g']) \u7528\u5217\u8868\u4e2d\u7684\u8fd9\u4e9b\u5bf9\u8c61\u8c03\u7528concat\u65b9\u6cd5\u4f1a\u5c06\u503c\u548c\u7d22\u5f15\u7c98\u5728\u4e00\u8d77\uff1a\\ \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0cconcat\u65b9\u6cd5\u662f\u6cbf\u7740axis=0\u7684\u8f74\u5411\u751f\u6548\u7684\uff0c\u751f\u6210\u53e6\u4e00\u4e2aSeries\u3002\\ \u5982\u679c\u4f20\u9012axis=1\uff0c\u8fd4\u56de\u7684\u7ed3\u679c\u5219\u662f\u4e00\u4e2aDataFrame\uff08axis=1\u65f6\u662f\u5217\uff09 result = pd.concat([s1, s2, s3]) print(result) # a 0 # b 1 # c 2 # d 3 # e 4 # f 5 # g 6 # dtype: int64 result = pd.concat([s1, s2, s3], keys=['one', 'two', 'three']) # \u901a\u8fc7keys\u53c2\u6570\uff0c\u5728\u8fde\u63a5\u8f74\u5411\u4e0a\u521b\u5efa\u4e00\u4e2a\u591a\u5c42\u7d22\u5f15\uff0c\u4ee5\u4fbf\u5728\u7ed3\u679c\u4e2d\u533a\u5206\u5404\u90e8\u5206 print(result) # one a 0 # b 1 # two c 2 # d 3 # e 4 # three f 5 # g 6 # dtype: int64 print(result.unstack()) # \u628a\u539f\u7d22\u5f15\u4f5c\u4e3a\u5217\u6807\u7b7e\u5c55\u5f00 # a b c d e f g # one 0.0 1.0 NaN NaN NaN NaN NaN # two NaN NaN 2.0 3.0 4.0 NaN NaN # three NaN NaN NaN NaN NaN 5.0 6.0 result = pd.concat([s1, s2, s3], axis=1) # \u5728\u8fd9\u4e2a\u6848\u4f8b\u4e2daxis=1\u8f74\u5411\u4e0a\u5e76\u6ca1\u6709\u91cd\u53e0 print(result) # 0 1 2 # a 0.0 NaN NaN # b 1.0 NaN NaN # c NaN 2.0 NaN # d NaN 3.0 NaN # e NaN 4.0 NaN # f NaN NaN 5.0 # g NaN NaN 6.0 result = pd.concat([s1, s2, s3], axis=1, keys=['one', 'two', 'three']) # \u5728\u8fd9\u4e2a\u6848\u4f8b\u4e2daxis=1\u8f74\u5411\u4e0a\u5e76\u6ca1\u6709\u91cd\u53e0 print(result) # one two three # a 0.0 NaN NaN # b 1.0 NaN NaN # c NaN 2.0 NaN # d NaN 3.0 NaN # e NaN 4.0 NaN # f NaN NaN 5.0 # g NaN NaN 6.0 print(result.unstack()) # \u5bf9\u6bd4axis=0\u7684\u591a\u5c42\u7d22\u5f15\uff0c\u5f53axis=1\u65f6\u5bf9\u8f93\u51fa\u5404index\u7684\u5e76\u96c6\u505a\u4e86\u5206\u7ec4\u3002 # one a 0.0 # b 1.0 # c NaN # d NaN # e NaN # f NaN # g NaN # two a NaN # b NaN # c 2.0 # d 3.0 # e 4.0 # f NaN # g NaN # three a NaN # b NaN # c NaN # d NaN # e NaN # f 5.0 # g 6.0 # dtype: float64 s4 = pd.concat([s1, s3]) print(s4) # a 0 # b 1 # f 5 # g 6 # dtype: int64 result = pd.concat([s1, s4]) print(result) # a 0 # b 1 # a 0 # b 1 # f 5 # g 6 # dtype: int64 result = pd.concat([s1, s4], axis=1) # \u73b0\u5728\u5728\u4e2daxis=1\u8f74\u5411\u4e0a\u6709\u91cd\u53e0 print(result) # 0 1 # a 0.0 0 # b 1.0 1 # f NaN 5 # g NaN 6 result = pd.concat([s1, s4], axis=1, keys=['one', 'two', 'three']) print(result) # one two # a 0.0 0 # b 1.0 1 # f NaN 5 # g NaN 6 result = pd.concat([s1, s4], axis=0, keys=['one', 'two', 'three']) # \u901a\u8fc7keys\u53c2\u6570\uff0c\u5728\u8fde\u63a5\u8f74\u5411\u4e0a\u521b\u5efa\u4e00\u4e2a\u591a\u5c42\u7d22\u5f15 print(result) # one a 0 # b 1 # two a 0 # b 1 # f 5 # g 6 # dtype: int64 result = pd.concat([s1, s4], axis=1, join='inner') # \u5185\u8fde\u63a5\u65b9\u5f0f\u5408\u5e76\u7d22\u5f15\uff08\u7d22\u5f15\u4ea4\u96c6\uff09 print(result) # 0 1 # a 0 0 # b 1 1 result = pd.concat([s1, s4], axis=1).reindex(['a', 'c', 'b', 'e']) # \u4f7f\u7528join_axes(\u5df2\u88ab\u66ff\u6362\u6210reindex)\u6765\u6307\u5b9a\u7528\u4e8e\u8fde\u63a5\u5176\u4ed6\u8f74\u5411\u7684\u8f74 print(result) # 0 1 # a 0.0 0.0 # c NaN NaN # b 1.0 1.0 # e NaN NaN \u57fa\u4e8eDataFrame\u7684pandas\u7684concat\u51fd\u6570\u7684\u5de5\u4f5c\u673a\u5236\u5206\u6790 df1 = pd.DataFrame( np.arange(12).reshape((6, 2)), index=[ ['Ohio', 'Ohio', 'Ohio', 'Nevada', 'Nevada', 'Nevada'], [2000, 2001, 2002, 2000, 2001, 2002] ], columns=['event1', 'event2'] ) df2 = pd.DataFrame( np.arange(12).reshape((6, 2)), index=[ ['Ohio', 'Ohio', 'Ohio', 'Nevada', 'Nevada', 'Nevada'], [2000, 2001, 2002, 2000, 2001, 2002] ], columns=['event3', 'event4'] ) print(df1) # event1 event2 # Ohio 2000 0 1 # 2001 2 3 # 2002 4 5 # Nevada 2000 6 7 # 2001 8 9 # 2002 10 11 print(df2) # event3 event4 # Ohio 2000 0 1 # 2001 2 3 # 2002 4 5 # Nevada 2000 6 7 # 2001 8 9 # 2002 10 11 result = np.concatenate([df1, df2], axis=0) # \u6cbf0\u8f74\u62fc\u63a5 print(result) # [[ 0 1] # [ 2 3] # [ 4 5] # [ 6 7] # [ 8 9] # [10 11] # [ 0 1] # [ 2 3] # [ 4 5] # [ 6 7] # [ 8 9] # [10 11]] result = np.concatenate([df1, df2], axis=1) # \u6cbf1\u8f74\u62fc\u63a5 print(result) # [[ 0 1 0 1] # [ 2 3 2 3] # [ 4 5 4 5] # [ 6 7 6 7] # [ 8 9 8 9] # [10 11 10 11]] result = np.concatenate([df1, df2], axis=None) # \u5c06\u6570\u7ec4\u5c55\u5e73 print(result) # [ 0 1 2 3 4 5 6 7 8 9 10 11 0 1 2 3 4 5 6 7 8 9 10 11]","title":"\u6cbf\u8f74\u5411\u8fde\u63a5"},{"location":"python/DataAnalysis/ch05/#_7","text":"\u53e6\u4e00\u4e2a\u6570\u636e\u8054\u5408\u573a\u666f\uff0c\u65e2\u4e0d\u662f\u5408\u5e76\u64cd\u4f5c\uff0c\u4e5f\u4e0d\u662f\u8fde\u63a5\u64cd\u4f5c\u3002\\ \u5047\u5982\u6709\u4e24\u4e2a\u6570\u636e\u96c6\uff0c\u8fd9\u4e24\u4e2a\u6570\u636e\u96c6\u7684\u7d22\u5f15\u5168\u90e8\u6216\u90e8\u5206\u91cd\u53e0\uff0c\u901a\u8fc7NumPy\u7684where\u51fd\u6570\u53ef\u4ee5\u8fdb\u884c\u9762\u5411\u6570\u7ec4\u7684if-else\u7b49\u4ef7\u64cd\u4f5c\u3002 s1 = pd.Series( [np.nan, 2.5, 0.0, 3.5, 4.5, np.nan], index=['f', 'e', 'd', 'c', 'b', 'a'] ) s2 = pd.Series( [0.0, np.nan, 2.0, np.nan, np.nan, 5.0], index=['a', 'b', 'c', 'd', 'e', 'f'] ) print(s1) # f NaN # e 2.5 # d 0.0 # c 3.5 # b 4.5 # a NaN # dtype: float64 print(s2) # a 0.0 # b NaN # c 2.0 # d NaN # e NaN # f 5.0 # dtype: float64 \u65b9\u6cd51\uff0c\u901a\u8fc7Numpy\u7684where\u51fd\u6570 result = np.where(pd.isnull(s1), s2, s1) # An array with elements from 'x'(s2) where 'condition'(isnull(s1)) is True, and elements from 'y'(s1) elsewhere. print(result) # [0. 2.5 0. 3.5 4.5 5. ] # s1 # s2 # result # f NaN # a 0.0 0. \u6761\u4ef6\u4e2ds1\u8be5\u5143\u7d20\u4e3anull\uff0c\u6240\u4ee5where\u51fd\u6570\u53d6\u5bf9\u5e94x(s2)\u7684\u5143\u7d20\uff08\u6ce8\u610f\uff0c\u4e0e\u7d22\u5f15\u987a\u5e8f\u65e0\u5173\uff09 # e 2.5 # b NaN 2.5 \u6761\u4ef6\u4e2ds1\u8be5\u5143\u7d20\u4e0d\u4e3anull\uff0c\u6240\u4ee5where\u51fd\u6570\u53d6\u5bf9\u5e94y(s1)\u7684\u5143\u7d20 # d 0.0 # c 2.0 0. # c 3.5 # d NaN 3.5 # b 4.5 # e NaN 4.5 # a NaN # f 5.0 5.0 \u6761\u4ef6\u4e2ds1\u8be5\u5143\u7d20\u4e3anull\uff0c\u6240\u4ee5where\u51fd\u6570\u53d6\u5bf9\u5e94x(s2)\u7684\u5143\u7d20 result = np.where(pd.isnull(s2), s1, s2) print(result) # [0. 2.5 2. 3.5 4.5 5. ] \u65b9\u6cd52\uff0c\u901a\u8fc7Series\u7684combine_first\u65b9\u6cd5 result = s2.combine_first(s1) # \u6ce8\u610f\uff0ccombine_first\u662f\u6309\u7167s2\u7684\u7d22\u5f15\u987a\u5e8f\u68c0\u7d22\u7684\uff0c\u76f8\u540c\u7d22\u5f15\u7684s1\u7684\u503c\u4f1a\u586b\u5145\u5bf9\u5e94s2\u7684null print(result) # a 0.0 # b 4.5 # c 2.0 # d 0.0 # e 2.5 # f 5.0 # dtype: float64 \u65b9\u6cd53\uff1aPandas\u7684combine_first\u65b9\u6cd5 df1 = pd.DataFrame( { 'a': [1.0, np.nan, 5.0, np.nan], 'b': [np.nan, 2.0, np.nan, 6.0], 'c': [2.0, 6.0, 10.0, 15.0] } ) df2 = pd.DataFrame( { 'a': [5.0, 4.0, np.nan, 3.0, 7.0], 'b': [np.nan, 3.0, 4.0, 6.0, 8.0] } ) print(df1) # a b c # 0 1.0 NaN 2.0 # 1 NaN 2.0 6.0 # 2 5.0 NaN 10.0 # 3 NaN 6.0 15.0 print(df2) # a b # 0 5.0 NaN # 1 4.0 3.0 # 2 NaN 4.0 # 3 3.0 6.0 # 4 7.0 8.0 result = df2.combine_first(df1) # \u7528df1\u7684\u503c\u53bb\u586b\u5145df2\u5bf9\u5e94\u7d22\u5f15\u4f4d\u7f6e\u7684null\u503c print(result) # a b c # 0 5.0 NaN 2.0 # 1 4.0 3.0 6.0 # 2 5.0 4.0 10.0 # 3 3.0 6.0 15.0 # 4 7.0 8.0 NaN","title":"\u8054\u5408\u91cd\u53e0\u6570\u636e"},{"location":"python/DataAnalysis/ch05/#_8","text":"\u91cd\u65b0\u6392\u5217\u8868\u683c\u578b\u6570\u636e\u6709\u591a\u79cd\u57fa\u7840\u64cd\u4f5c\u3002\u8fd9\u4e9b\u64cd\u4f5c\u88ab\u79f0\u4e3a\u91cd\u5851\u6216\u900f\u89c6\u3002 import numpy as np import pandas as pd","title":"\u91cd\u5851\u548c\u900f\u89c6"},{"location":"python/DataAnalysis/ch05/#_9","text":"\u591a\u5c42\u7d22\u5f15\u5728DataFrame\u4e2d\u63d0\u4f9b\u4e86\u4e00\u79cd\u4e00\u81f4\u6027\u65b9\u5f0f\u7528\u4e8e\u91cd\u6392\u5217\u6570\u636e\u3002\u4ee5\u4e0b\u662f\u4e24\u4e2a\u57fa\u7840\u64cd\u4f5c\uff1a * statck\uff08\u5806\u53e0\uff09\u8be5\u64cd\u4f5c\u4f1a\u201c\u65cb\u8f6c\u201d\u6216\u5c06\u5217\u4e2d\u7684\u6570\u636e\u900f\u89c6\u5230\u884c\u3002 * unstack\uff08\u62c6\u5806\uff09\u8be5\u64cd\u4f5c\u4f1a\u5c06\u884c\u4e2d\u7684\u6570\u636e\u900f\u89c6\u5230\u5217\u3002 df = pd.DataFrame( np.arange(6).reshape((2, 3)), index=pd.Index(['Ohio', 'Colorado'], name='state'), columns=pd.Index(['one', 'two', 'three'], name='number') ) print(df) # number one two three # state # Ohio 0 1 2 # Colorado 3 4 5 \u5728\u8fd9\u4efd\u6570\u636e\u4e0a\u4f7f\u7528stack\u65b9\u6cd5\u4f1a\u5c06\u5217\u900f\u89c6\u5230\u884c\uff0c\u4ea7\u751f\u4e00\u4e2a\u65b0\u7684Series\uff1a result = df.stack() print(result) # state number # Ohio one 0 # two 1 # three 2 # Colorado one 3 # two 4 # three 5 # dtype: int64 \u4ece\u4e00\u4e2a\u591a\u5c42\u7d22\u5f15\u5e8f\u5217\u4e2d\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528unstack\u65b9\u6cd5\u5c06\u6570\u636e\u91cd\u6392\u5217\u540e\u653e\u5165\u4e00\u4e2aDataFrame\u4e2d\uff1a print(result.unstack()) # number one two three # state # Ohio 0 1 2 # Colorado 3 4 5 print(result.unstack(0)) # \u53ef\u4ee5\u4f20\u5165\u4e00\u4e2a\u5c42\u7ea7\u5e8f\u53f7\u6216\u540d\u79f0\u6765\u62c6\u5206\u4e00\u4e2a\u4e0d\u540c\u7684\u5c42\u7ea7 # state Ohio Colorado # number # one 0 3 # two 1 4 # three 2 5 print(result.unstack(1)) # number one two three # state # Ohio 0 1 2 # Colorado 3 4 5 print(result.unstack('state')) # \u8f93\u51fa\u7ed3\u679c\u548c\u4f20\u5165\u5c42\u7ea70\u4e00\u6837 # state Ohio Colorado # number # one 0 3 # two 1 4 # three 2 5 print(result.unstack('number')) # \u8f93\u51fa\u7ed3\u679c\u548c\u4f20\u5165\u5c42\u7ea71\u4e00\u6837 # number one two three # state # Ohio 0 1 2 # Colorado 3 4 5 \u5982\u679c\u5c42\u7ea7\u4e2d\u7684\u6240\u6709\u503c\u5e76\u672a\u5305\u542b\u4e8e\u6bcf\u4e2a\u5b50\u5206\u7ec4\u4e2d\u65f6\uff0c\u62c6\u5206\u53ef\u80fd\u4f1a\u5f15\u5165\u7f3a\u5931\u503c\uff1a s1 = pd.Series([0, 1, 2, 3], index=['a', 'b', 'c', 'd']) s2 = pd.Series([4, 5, 6], index=['c', 'd', 'e']) s3 = pd.concat([s1, s2], keys=['one', 'two']) print(s3) # one a 0 # b 1 # c 2 # d 3 # two c 4 # d 5 # e 6 # dtype: int64 print(s3.unstack(0)) # one two # a 0.0 NaN # b 1.0 NaN # c 2.0 4.0 # d 3.0 5.0 # e NaN 6.0 print(s3.unstack(1)) print(s3.unstack()) # a b c d e # one 0.0 1.0 2.0 3.0 NaN # two NaN NaN 4.0 5.0 6.0 \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u5806\u53e0\u4f1a\u8fc7\u6ee4\u51fa\u7f3a\u5931\u503c\uff0c\u56e0\u6b64\u5806\u53e0\u62c6\u5806\u7684\u64cd\u4f5c\u662f\u53ef\u9006\u7684 print(s3.unstack().stack()) # one a 0.0 # b 1.0 # c 2.0 # d 3.0 # two c 4.0 # d 5.0 # e 6.0 # dtype: float64 print(s3.unstack().stack(dropna=False)) # one a 0.0 # b 1.0 # c 2.0 # d 3.0 # e NaN # two a NaN # b NaN # c 4.0 # d 5.0 # e 6.0 # dtype: float64 \u5728DataFrame\u4e2d\u62c6\u5806\u65f6\uff0c\u88ab\u62c6\u5806\u7684\u5c42\u7ea7\u4f1a\u53d8\u4e3a\u7ed3\u679c\u4e2d\u6700\u4f4e\u7684\u5c42\u7ea7\\ \u5728\u8c03\u7528stack\u65b9\u6cd5\u65f6\uff0c\u6211\u4eec\u53ef\u4ee5\u6307\u660e\u9700\u8981\u5806\u53e0\u7684\u8f74\u5411\u540d\u79f0 df = pd.DataFrame( {'left': result, 'right': result + 5}, columns=pd.Index(['left', 'right'], name='side') ) print(df) # side left right # state number # Ohio one 0 5 # two 1 6 # three 2 7 # Colorado one 3 8 # two 4 9 # three 5 10 print(df.unstack()) # side left right # number one two three one two three # state # Ohio 0 1 2 5 6 7 # Colorado 3 4 5 8 9 10 print(df.unstack('state')) # \u88ab\u62c6\u5806\u7684\u5c42\u7ea7(state)\u4f1a\u53d8\u4e3a\u7ed3\u679c\u4e2d\u6700\u4f4e\u7684\u5c42\u7ea7 # side left right # state Ohio Colorado Ohio Colorado # number # one 0 3 5 8 # two 1 4 6 9 # three 2 5 7 10 \u5728\u8c03\u7528stack\u65b9\u6cd5\u65f6\uff0c\u53ef\u4ee5\u6307\u660e\u9700\u8981\u5806\u53e0\u7684\u8f74\u5411\u540d\u79f0\uff1a print(df.unstack('state').stack('side')) # state Colorado Ohio # number side # one left 3 0 # right 8 5 # two left 4 1 # right 9 6 # three left 5 2 # right 10 7","title":"\u4f7f\u7528\u591a\u5c42\u7d22\u5f15\u8fdb\u884c\u91cd\u5851"},{"location":"python/DataAnalysis/ch05/#_10","text":"\u5728\u6570\u636e\u5e93\u548cCSV\u4e2d\u5b58\u50a8\u591a\u65f6\u95f4\u5e8f\u5217\u7684\u65b9\u5f0f\u5c31\u662f\u6240\u8c13\u7684\u957f\u683c\u5f0f\u6216\u5806\u53e0\u683c\u5f0f\u3002 data = pd.read_csv('../examples/macrodata.csv') print(data.head(3)) # year quarter realgdp realcons ... unemp pop infl realint # 0 1959.0 1.0 2710.349 1707.4 ... 5.8 177.146 0.00 0.00 # 1 1959.0 2.0 2778.801 1733.7 ... 5.1 177.830 2.34 0.74 # 2 1959.0 3.0 2775.488 1751.8 ... 5.3 178.657 2.74 1.09 # ...... # [3 rows x 14 columns] # PeriodIndex\u5c06year\u548cquarter\u7b49\u5217\u8fdb\u884c\u8054\u5408\u5e76\u751f\u6210\u4e86\u4e00\u79cd\u65f6\u95f4\u95f4\u9694\u7c7b\u578b periods = pd.PeriodIndex( year=data.year, quarter=data.quarter, name='date' ) columns = pd.Index( ['realgdp', 'infl', 'unemp'], name='item' ) data = data.reindex(columns=columns) print(data) # item realgdp infl unemp # 0 2710.349 0.00 5.8 # 1 2778.801 2.34 5.1 # 2 2775.488 2.74 5.3 # ...... # [203 rows x 3 columns] data.index = periods.to_timestamp('D', 'end') print(data.index) # DatetimeIndex(['1959-03-31 23:59:59.999999999', # '1959-06-30 23:59:59.999999999', # ... # '2009-06-30 23:59:59.999999999', # '2009-09-30 23:59:59.999999999'], # dtype='datetime64[ns]', name='date', length=203, freq=None) \u4e0b\u9762\u662fldata\u7684\u6570\u636e\u6837\u672c\u3002\\ \u8fd9\u79cd\u6570\u636e\u5373\u6240\u8c13\u7684\u591a\u65f6\u95f4\u5e8f\u5217\u7684\u957f\u683c\u5f0f\uff0c\u6216\u79f0\u4e3a\u5177\u6709\u4e24\u4e2a\u6216\u66f4\u591a\u4e2a\u952e\u7684\u5176\u4ed6\u89c2\u6d4b\u6570\u636e\uff08\u8fd9\u91cc\uff0c\u6211\u4eec\u7684\u952e\u662fdate\u548citem\uff09\u3002\\ \u8868\u4e2d\u7684\u6bcf\u4e00\u884c\u8868\u793a\u4e00\u4e2a\u65f6\u95f4\u70b9\u4e0a\u7684\u5355\u4e2a\u89c2\u6d4b\u503c\u3002 ldata = data.stack().reset_index().rename(columns={0: 'value'}) print(ldata) # date item value # 0 1959-03-31 23:59:59.999999999 realgdp 2710.349 # 1 1959-03-31 23:59:59.999999999 infl 0.000 # 2 1959-03-31 23:59:59.999999999 unemp 5.800 # 3 1959-06-30 23:59:59.999999999 realgdp 2778.801 # 4 1959-06-30 23:59:59.999999999 infl 2.340 # .. ... ... ... # 604 2009-06-30 23:59:59.999999999 infl 3.370 # 605 2009-06-30 23:59:59.999999999 unemp 9.200 # 606 2009-09-30 23:59:59.999999999 realgdp 12990.341 # 607 2009-09-30 23:59:59.999999999 infl 3.560 # 608 2009-09-30 23:59:59.999999999 unemp 9.600 # [609 rows x 3 columns] \u5728\u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d\uff1a\\ \u6570\u636e\u901a\u5e38\u4ee5\u8fd9\u79cd\u65b9\u5f0f\u5b58\u50a8\u5728\u5173\u7cfb\u578b\u6570\u636e\u5e93\u4e2d\uff0c\u6bd4\u5982MySQL\uff0c\u56e0\u4e3a\u56fa\u5b9a\u6a21\u5f0f\uff08\u5217\u540d\u79f0\u548c\u6570\u636e\u7c7b\u578b\uff09\u5141\u8bb8item\u5217\u4e2d\u4e0d\u540c\u503c\u7684\u6570\u91cf\u968f\u7740\u6570\u636e\u88ab\u6dfb\u52a0\u5230\u8868\u4e2d\u800c\u6539\u53d8\u3002\\ date\u548citem\u901a\u5e38\u662f\u4e3b\u952e\uff08\u4f7f\u7528\u5173\u7cfb\u578b\u6570\u636e\u5e93\u7684\u8bf4\u6cd5\uff09\uff0c\u63d0\u4f9b\u4e86\u5173\u7cfb\u5b8c\u6574\u6027\u548c\u66f4\u7b80\u5355\u7684\u8fde\u63a5\u3002\\ \u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\uff0c\u5904\u7406\u8fd9\u79cd\u683c\u5f0f\u7684\u6570\u636e\u66f4\u4e3a\u56f0\u96be\u3002\u53ef\u80fd\u66f4\u503e\u5411\u4e8e\u83b7\u53d6\u4e00\u4e2a\u6309date\u5217\u65f6\u95f4\u6233\u7d22\u5f15\u7684\u4e14\u6bcf\u4e2a\u4e0d\u540c\u7684item\u72ec\u7acb\u4e00\u5217\u7684DataFrame\u3002\\ DataFrame\u7684pivot\u65b9\u6cd5\u5c31\u662f\u8fdb\u884c\u8fd9\u79cd\u8f6c\u6362\u7684\uff1a\\ \u4e0b\u9762\u4f8b\u5b50\u4e2d\uff0c\u4f20\u9012\u7684\u524d\u4e24\u4e2a\u503c\u662f\u5206\u522b\u7528\u4f5c\u884c\u548c\u5217\u7d22\u5f15\u7684\u5217\uff0c\u7136\u540e\u662f\u53ef\u9009\u7684\u6570\u503c\u5217\u4ee5\u586b\u5145DataFrame\u3002\\ \u6ce8\u610f\uff0cpivot\u65b9\u6cd5\u7b49\u4ef7\u4e8e\u4f7f\u7528set_index\u521b\u5efa\u5206\u5c42\u7d22\u5f15\uff0c\u7136\u540e\u8c03\u7528unstack\u3002 pivoted = ldata.pivot('date', 'item', 'value') print(pivoted) # item infl realgdp unemp # date # 1959-03-31 23:59:59.999999999 0.00 2710.349 5.8 # 1959-06-30 23:59:59.999999999 2.34 2778.801 5.1 # ... ... ... ... # 2009-06-30 23:59:59.999999999 3.37 12901.504 9.2 # 2009-09-30 23:59:59.999999999 3.56 12990.341 9.6 # [203 rows x 3 columns] ldata['value2'] = np.random.randn(len(ldata)) print(ldata[:5]) # date item value value2 # 0 1959-03-31 23:59:59.999999999 realgdp 2710.349 -1.268405 # 1 1959-03-31 23:59:59.999999999 infl 0.000 0.377691 # 2 1959-03-31 23:59:59.999999999 unemp 5.800 -0.342492 # 3 1959-06-30 23:59:59.999999999 realgdp 2778.801 0.132797 # 4 1959-06-30 23:59:59.999999999 infl 2.340 0.180290 \u6b64\u65f6ldata\u5df2\u7ecf\u6dfb\u52a0\u4e86\u4e00\u5217\u3002\u5982\u679c\u9057\u6f0f\u6700\u540e\u4e00\u4e2a\u53c2\u6570\uff0c\u4f1a\u5f97\u5230\u4e00\u4e2a\u542b\u6709\u591a\u5c42\u5217\u7684DataFrame\uff0c\u5982\u4e0b\uff1a pivoted = ldata.pivot('date', 'item') print(pivoted) # value ... value2 # item infl realgdp ... realgdp unemp # date ... # 1959-03-31 23:59:59.999999999 0.00 2710.349 ... 0.157467 -0.222464 # 1959-06-30 23:59:59.999999999 2.34 2778.801 ... 0.861501 0.368855 # ... ... ... ... ... ... # 2009-06-30 23:59:59.999999999 3.37 12901.504 ... 0.279988 0.934972 # 2009-09-30 23:59:59.999999999 3.56 12990.341 ... 0.547914 1.842967 # [203 rows x 6 columns] \u6ce8\u610f\uff0cpivot\u65b9\u6cd5\u7b49\u4ef7\u4e8e\u4f7f\u7528set_index\u521b\u5efa\u5206\u5c42\u7d22\u5f15\uff0c\u7136\u540e\u8c03\u7528unstack\u3002 unstacked = ldata.set_index(['date', 'item']).unstack('item') print(unstacked[:5]) # value ... value2 # item infl realgdp ... realgdp unemp # date ... # 1959-03-31 23:59:59.999999999 0.00 2710.349 ... 0.213120 -0.248004 # 1959-06-30 23:59:59.999999999 2.34 2778.801 ... 0.697763 0.112388 # 1959-09-30 23:59:59.999999999 2.74 2775.488 ... 1.291884 -1.046142 # 1959-12-31 23:59:59.999999999 0.27 2785.204 ... 0.363339 -0.307364 # 1960-03-31 23:59:59.999999999 2.31 2847.699 ... 0.377330 2.272980 # [5 rows x 6 columns]","title":"\u5c06\u201c\u957f\u201d\u900f\u89c6\u4e3a\u201c\u5bbd\u201d"},{"location":"python/DataAnalysis/ch05/#_11","text":"\u5728DataFrame\u4e2d\uff0cpivot\u65b9\u6cd5\u7684\u53cd\u64cd\u4f5c\u662fpandas.melt\u3002\\ \u4e0e\u5c06\u4e00\u5217\u53d8\u6362\u4e3a\u65b0\u7684DataFrame\u4e2d\u7684\u591a\u5217\u4e0d\u540c\uff0c\u5b83\u5c06\u591a\u5217\u5408\u5e76\u6210\u4e00\u5217\uff0c\u4ea7\u751f\u4e00\u4e2a\u65b0\u7684DataFrame\uff0c\u5176\u957f\u5ea6\u6bd4\u8f93\u5165\u66f4\u957f\u3002 df = pd.DataFrame( { 'key': ['foo', 'bar', 'baz'], 'A': [1, 2, 3], 'B': [4, 5, 6], 'C': [7, 8, 9] } ) print(df) # key A B C # 0 foo 1 4 7 # 1 bar 2 5 8 # 2 baz 3 6 9 'key\u2019\u5217\u53ef\u4ee5\u4f5c\u4e3a\u5206\u7ec4\u6307\u6807\uff0c\u5176\u4ed6\u5217\u5747\u4e3a\u6570\u636e\u503c\u3002\\ \u5f53\u4f7f\u7528pandas.melt\u65f6\uff0c\u6211\u4eec\u5fc5\u987b\u6307\u660e\u54ea\u4e9b\u5217\u662f\u5206\u7ec4\u6307\u6807\uff08\u5982\u679c\u6709\u7684\u8bdd\uff09\u3002\\ \u6b64\u5904\uff0c\u8ba9\u6211\u4eec\u4f7f\u7528\u2019key\u2019\u4f5c\u4e3a\u552f\u4e00\u7684\u5206\u7ec4\u6307\u6807\uff1a melted = pd.melt(df, ['key']) print(melted) # key variable value # 0 foo A 1 # 1 bar A 2 # 2 baz A 3 # 3 foo B 4 # 4 bar B 5 # 5 baz B 6 # 6 foo C 7 # 7 bar C 8 # 8 baz C 9 \u4f7f\u7528pivot\u65b9\u6cd5\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u6570\u636e\u91cd\u5851\u56de\u539f\u5148\u7684\u5e03\u5c40 reshaped = melted.pivot('key', 'variable', 'value') print(reshaped) # variable A B C # key # bar 2 5 8 # baz 3 6 9 # foo 1 4 7 \u7531\u4e8epivot\u7684\u7ed3\u679c\u6839\u636e\u4f5c\u4e3a\u884c\u6807\u7b7e\u7684\u5217\u751f\u6210\u4e86\u7d22\u5f15\uff0c\u53ef\u4f7f\u7528reset_index\u6765\u5c06\u6570\u636e\u56de\u79fb\u4e00\u5217\uff1a print(reshaped.reset_index()) # variable key A B C # 0 bar 2 5 8 # 1 baz 3 6 9 # 2 foo 1 4 7 pandas.melt\u7684\u4f7f\u7528\u4e5f\u53ef\u4ee5\u65e0\u987b\u4efb\u4f55\u5206\u7ec4\u6307\u6807 result = pd.melt(df, value_vars=['A', 'B', 'C']) print(result) # variable value # 0 A 1 # 1 A 2 # 2 A 3 # 3 B 4 # 4 B 5 # 5 B 6 # 6 C 7 # 7 C 8 # 8 C 9 result = pd.melt(df, value_vars=['key', 'B', 'C']) print(result) # variable value # 0 key foo # 1 key bar # 2 key baz # 3 B 4 # 4 B 5 # 5 B 6 # 6 C 7 # 7 C 8 # 8 C 9","title":"\u5c06\u201c\u5bbd\u201d\u900f\u89c6\u4e3a\u201c\u957f\u201d"},{"location":"python/DataAnalysis/ch06/","text":"\u7b80\u660ematplotlib API\u5165\u95e8 import matplotlib as mpl import matplotlib.pyplot as plt import numpy as np import pandas as pd from io import BytesIO \u6267\u884cplt.show()\u65f6\u62a5\u9519\uff1a\\ UserWarning: Matplotlib is currently using agg, which is a non-GUI backend, so cannot show the figure.\\ \\ \u6267\u884c\u4e0b\u9762\u547d\u4ee4\uff0c\u5f97\u5230plt\u7684backend\u662f\u7528agg\\ import matplotlib.pyplot as plt\\ plt.get_backend()\u4f8b\u5982\uff1a\u4e0b\u9762\u4e24\u79cd\u8868\u8fbe\u65b9\u5f0f\u6548\u679c\u4e00\u6837\\ ax.plot(x, y, 'g--')\\ ax.plot(x, y, linestyle='--', color='g')\\ Out[6]: 'agg'\\ \\ \u5b89\u88c5\u4e0b\u9762\u51e0\u4e2a\u5305\uff1a\\ sudo zypper in python-tk python3-tk\\ sudo zypper in plplot-tcltk-devel plplot-tcltk-libs\\ pip install tk\\ \u6dfb\u52a0\u4e0b\u9762\u5230python\u4ee3\u7801\u4e2d\\ import matplotlib.pyplot as plt\\ mpl.use('TkAgg')\\ \\ \u6267\u884c\u540e\u62a5\u4e0b\u9762\u9519\u8bef\uff1a\\ your Python may not be configured for Tk\\ \u8fdb\u5165python\u6e90\u7801\u76ee\u5f55\uff0c\u91cd\u65b0\u7f16\u8bd1\u4f8b\u5982\uff1a\u4e0b\u9762\u4e24\u79cd\u8868\u8fbe\u65b9\u5f0f\u6548\u679c\u4e00\u6837\\ ax.plot(x, y, 'g--')\\ ax.plot(x, y, linestyle='--', color='g')\\ james@lizard:/opt/Python-3.9.6> sudo make\\ james@lizard:/opt/Python-3.9.6> sudo make install\\ \\ \u95ee\u9898\u89e3\u51b3\uff0c\u5373\u4f7f\u4e0d\u52a0\u5165mpl.use('TkAgg')\uff0c\u6267\u884cplt.show()\u4e5f\u662f\u53ef\u4ee5\u8f93\u51fa\u56fe\u50cf\u3002 \u56fe\u7247\u4e0e\u5b50\u56fe matplotlib\u6240\u7ed8\u5236\u7684\u56fe\u4f4d\u4e8e\u56fe\u7247\uff08Figure\uff09\u5bf9\u8c61\u4e2d\u3002\u53ef\u4ee5\u4f7f\u7528plt.figure\u751f\u6210\u4e00\u4e2a\u65b0\u7684\u56fe\u7247\u3002 \\ \u4f7f\u7528add_subplot\u521b\u5efa\u4e00\u4e2a\u6216\u591a\u4e2a\u5b50\u56fe\uff08subplot\uff09\u3002\\ plt\u4e0eax\u7ed8\u56fe fig = plt.figure() # plt: \u5148\u751f\u6210\u4e86\u4e00\u4e2a\u753b\u5e03\uff0c\u7136\u540e\u5728\u8fd9\u4e2a\u753b\u5e03\u4e0a\u9690\u5f0f\u7684\u751f\u6210\u4e00\u4e2a\u753b\u56fe\u533a\u57df\u6765\u8fdb\u884c\u753b\u56fe # plt.plot([1, 2, 3, 4]) # plt.show() # ax: \u5148\u751f\u6210\u4e00\u4e2a\u753b\u5e03\uff082\u00d72\u7684\u533a\u57df\uff0c\u6700\u591a\u653e\u56db\u4e2a\u56fe\u5f62\uff09\uff0c\u7136\u540e\u5728\u6b64\u753b\u5e03\u4e0a\uff0c\u9009\u5b9a\u4e00\u4e2a\u5b50\u533a\u57df\u753b\u4e86\u4e00\u4e2a\u5b50\u56fe\uff08\u5e8f\u53f71\u4ee3\u8868\u7b2c\u4e00\u4e2a\u533a\u57df\uff09 ax1 = fig.add_subplot(2, 2, 1) # \u4e5f\u53ef\u4ee5\u5199\u6210fig.add_subplot(221) ax1.plot([1, 2, 3, 4], [1, 4, 3, 2]) # \u8f93\u51fa\u56fe\u7247\u5230\u7b2c\u4e00\u4e2a\u533a\u57df\u3002 # \u7b2c\u4e00\u4e2a\u53c2\u6570\u662f\u6570\u636e\u96c6\u91cc\u5404\u4e2a\u6570\u636e\u70b9\u7684X\u503c\u7684\u96c6\u5408 # \u7b2c\u4e8c\u4e2a\u53c2\u6570\u6570\u636e\u96c6\u91cc\u5404\u4e2a\u6570\u636e\u70b9\u7684Y\u503c\u7684\u96c6\u5408\u3002 # \u4e0d\u662f\u6570\u5b66\u4e0a\u5e38\u89c1\u7684\u6210\u5bf9\u5750\u6807\u70b9\u5982(x1,y1)\u3001(x2,y2)\u3001...\u3001(xn,yn)\u7684\u683c\u5f0f\uff0c\u800c\u662f (x1,x2,...,xn)\u548c(y1,y2,...,yn) \u3002 plt.show() \u770b\u4e0b\u9762\u4f8b\u5b50\uff0c\u589e\u52a0\u5b50\u56fe\u540e\u7684\u6570\u636e\u53ef\u89c6\u5316\u6548\u679c fig = plt.figure() ax1 = fig.add_subplot(2, 2, 1) ax2 = fig.add_subplot(2, 2, 2) ax3 = fig.add_subplot(2, 2, 3) ax1.plot(np.random.randn(50).cumsum(), 'k--') # \u5728\u7b2c\u4e09\u4e2a\u533a\u57df\u8f93\u51fa\u56fe\u50cf\u3002'k--\u2019\u662f\u7528\u4e8e\u7ed8\u5236\u9ed1\u8272\u5206\u6bb5\u7ebf\u7684style\u9009\u9879\u3002 ax2.hist(np.random.randn(100), bins=20, color='k', alpha=0.3) ax3.scatter(np.arange(30), np.arange(30) + 3 * np.random.randn(30)) plt.show() plt.subplots\\ \u901a\u8fc7matplotlib\u7684subplots\u65b9\u6cd5\uff0c\u4f7f\u7528\u5b50\u56fe\u7f51\u683c\u521b\u5efa\u56fe\u7247\uff0c\u7136\u540e\u8fd4\u56de\u5305\u542b\u4e86\u5df2\u751f\u6210\u5b50\u56fe\u5bf9\u8c61\u7684NumPy\u6570\u7ec4\\ \u6570\u7ec4axes\u53ef\u4ee5\u50cf\u4e8c\u7ef4\u6570\u7ec4\u90a3\u6837\u65b9\u4fbf\u5730\u8fdb\u884c\u7d22\u5f15\uff0c\u4f8b\u5982\uff0caxes[0, 1]\u3002\\ plt.subplots\u53c2\u6570\u9009\u9879\uff1a * nrows\uff1a\u53ef\u9009\u7684\uff0c\u6574\u578b\uff0c\u9ed8\u8ba4\u4e3a1\u3002\u5b50\u56fe\u7f51\u683c\u7684\u884c\u6570\u3002 * ncols\uff1a\u53ef\u9009\u7684\uff0c\u6574\u578b\uff0c\u9ed8\u8ba4\u4e3a1\u3002\u5b50\u56fe\u7f51\u683c\u7684\u5217\u6570\u3002 * sharex\uff1a\u53ef\u9009\u7684\uff0c\u9ed8\u8ba4\u4e3aFalse\u3002\u53ef\u9009\u503c\u5982\u4e0b\uff1a * True\u6216all\uff0c\u6240\u6709\u5b50\u56fe\u5171\u4eabx\u8f74 * False\u6216none\uff0c\u6bcf\u4e2a\u5b50\u56fe\u7684x\u8f74\u90fd\u662f\u72ec\u7acb\u7684 * row\uff0c\u6bcf\u884c\u5b50\u56fe\u5171\u4eab\u4e00\u4e2ax\u8f74 * col\uff0c\u6bcf\u5217\u5b50\u56fe\u5171\u4eab\u4e00\u4e2ax\u8f74 * sharey\uff1a\u7c7b\u4f3c\u4e8esharex\uff0c\u8bbe\u7f6ey\u8f74\u7684\u5171\u4eab\u65b9\u5f0f\u3002\u5f53\u67d0\u5217\u5171\u4eab\u4e00\u4e2ax\u8f74\u65f6\uff0c\u53ea\u6709\u5e95\u90e8\u7684\u5b50\u56fe\u4f1a\u521b\u5efax\u8f74\u6807\u8bb0\u3002\u540c\u6837\u7684\uff0c\u5982\u679c\u67d0\u884c\u5171\u4eab\u4e00\u4e2ay\u8f74\u65f6\uff0c\u53ea\u6709\u884c\u7684\u7b2c\u4e00\u5217\u5b50\u56fe\u4f1a\u521b\u5efay\u8f74\u6807\u8bb0\u3002 * squeeze \uff1a\u53ef\u9009\u7684\uff0c\u5e03\u5c14\u578b\uff0c\u9ed8\u8ba4\u4e3aTrue\u3002\u662f\u5426\u538b\u7f29\u8fd4\u56de\u7684Axes\u6570\u7ec4\u3002\u5982\u679c\u4e3aTrue\uff0c\u5f53\u53ea\u6709\u4e00\u4e2a\u5b50\u56fe\uff0c\u5373nrows\u548cncols\u5747\u4e3a1\u65f6\uff0c\u8fd4\u56de\u4e00\u4e2a\u5355\u72ec\u7684Axes\u5bf9\u8c61\uff0c\u5f53\u6709N 1\u548c1 M\u4e2a\u5b50\u56fe\u65f6\uff0c\u8fd4\u56de\u4e00\u4e2a\u4e00\u7ef4Axes\u5bf9\u8c61\u6570\u7ec4\u3002\u5f53\u6709N*M\u4e2a\u5b50\u56fe\uff08N>1\uff0cM>1\uff09\u65f6\uff0c\u8fd4\u56de\u4e8c\u7ef4\u6570\u7ec4\u3002\u5982\u679c\u4e3aFalse\uff0c\u5219\u603b\u662f\u8fd4\u56de\u4e8c\u7ef4\u6570\u7ec4\u3002 * num\uff1a\u53ef\u9009\u7684\uff0c\u6574\u578b\u6216\u5b57\u7b26\u4e32\uff0c\u9ed8\u8ba4\u4e3aNone\u3002\u662fmatplotlib.pyplot.figure\u7684\u5173\u952e\u5b57\uff0c\u7528\u4e8e\u8bbe\u7f6e\u56fe\u50cf\u6570\u5b57\u6216\u6807\u7b7e\u3002\u5982\u679c\u672a\u8bbe\u7f6e\u6b64\u53c2\u6570\uff0c\u4f1a\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u56fe\u50cf\uff0c\u5e76\u9012\u589e\u56fe\u50cf\u7f16\u53f7\uff0cfigure\u5bf9\u8c61\u4f1a\u5c06\u7f16\u53f7\u4fdd\u5b58\u5728number\u5c5e\u6027\u4e2d\u3002\u5982\u679c\u8bbe\u7f6e\u4e86\u6b64\u53c2\u6570\uff0c\u5e76\u4e14\u5b58\u5728\u53c2\u6570\u6307\u5b9a\u7684\u56fe\u50cf\uff0c\u5219\u4f1a\u8fd4\u56de\u6b64\u56fe\u50cf\u7684\u5f15\u7528\uff0c\u5982\u679c\u4e0d\u5b58\u5728\u5219\u4f1a\u521b\u5efa\u65b0\u7684\u56fe\u50cf\u5e76\u8fd4\u56de\u5b83\u7684\u5f15\u7528\u3002\u5982\u679c\u662f\u5b57\u7b26\u4e32\uff0c\u5219\u7a97\u53e3\u6807\u9898\u4f1a\u88ab\u8bbe\u7f6e\u4e3a\u6b64\u5b57\u7b26\u4e32\u7684\u503c\u3002 * subplot_kw\uff1a\u53ef\u9009\u7684\uff0c\u5b57\u5178\u7c7b\u578b\u3002\u5305\u542b\u4f20\u9012\u7ed9\u7528\u4e8e\u521b\u5efa\u5b50\u56fe\u7684\u8c03\u7528add_subplot\u7684\u5173\u952e\u5b57\u53c2\u6570\u3002 * gridspec_kw\uff1a\u53ef\u9009\u7684\uff0c\u5b57\u5178\u7c7b\u578b\u3002\u5305\u542b\u4f20\u9012\u7ed9\u7528\u4e8e\u521b\u5efa\u5b50\u56fe\u7f51\u683c\u7684GridSpec\u6784\u9020\u51fd\u6570\u7684\u5173\u952e\u5b57\u53c2\u6570\u3002 fig, axes = plt.subplots(2, 3) print(axes) # \u5c06\u751f\u6210\u7684axes\u5bf9\u8c61\u653e\u5165NumPy\u6570\u7ec4\u3002 # [[<AxesSubplot:> <AxesSubplot:> <AxesSubplot:>] # [<AxesSubplot:> <AxesSubplot:> <AxesSubplot:>]] \u8c03\u6574\u5b50\u56fe\u5468\u56f4\u7684\u95f4\u8ddd\\ \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0cmatplotlib\u4f1a\u5728\u5b50\u56fe\u7684\u5916\u90e8\u548c\u5b50\u56fe\u4e4b\u95f4\u7559\u51fa\u4e00\u5b9a\u7684\u95f4\u8ddd\u3002\\ \u8fd9\u4e2a\u95f4\u8ddd\u90fd\u662f\u76f8\u5bf9\u4e8e\u56fe\u7684\u9ad8\u5ea6\u548c\u5bbd\u5ea6\u6765\u6307\u5b9a\u7684\uff0c\u624b\u52a8\u8c03\u6574\u56fe\u7684\u5927\u5c0f\uff0c\u90a3\u4e48\u95f4\u8ddd\u4f1a\u81ea\u52a8\u8c03\u6574\u3002\\ \u4e5f\u53ef\u4ee5\u4f7f\u7528\u56fe\u5bf9\u8c61\u4e0a\u7684subplots_adjust\u65b9\u6cd5\u66f4\u6539\u95f4\u8ddd\uff0c\u4e5f\u53ef\u4ee5\u7528\u4f5c\u9876\u5c42\u51fd\u6570\u3002 fig, axes = plt.subplots(2, 2, sharex=True, sharey=True) for i in range(2): for j in range(2): axes[i, j].hist(np.random.randn(500), bins=50, color='k', alpha=0.5) plt.subplots_adjust(wspace=0, hspace=0) plt.show() \u4e0a\u9762\u8f93\u51fa\u56fe\u50cf\u7684\u8f74\u6807\u7b7e\u662f\u5b58\u5728\u91cd\u53e0\u7684\u3002matplotlib\u5e76\u4e0d\u68c0\u67e5\u6807\u7b7e\u662f\u5426\u91cd\u53e0\uff0c\u56e0\u6b64\u5728\u7c7b\u4f3c\u60c5\u51b5\u4e0b\u4f60\u9700\u8981\u901a\u8fc7\u663e\u5f0f\u6307\u5b9a\u523b\u5ea6\u4f4d\u7f6e\u548c\u523b\u5ea6\u6807\u7b7e\u7684\u65b9\u6cd5\u6765\u4fee\u590d\u8f74\u6807\u7b7e\u3002 \u989c\u8272\u3001\u6807\u8bb0\u548c\u7ebf\u7c7b\u578b matplotlib\u7684\u4e3b\u51fd\u6570plot\u63a5\u6536\u5e26\u6709x\u548cy\u8f74\u7684\u6570\u7ec4\u4ee5\u53ca\u4e00\u4e9b\u53ef\u9009\u7684\u5b57\u7b26\u4e32\u7f29\u5199\u53c2\u6570\u6765\u6307\u660e\u989c\u8272\u548c\u7ebf\u7c7b\u578b\u3002\\ \u4f8b\u5982\uff1a\u4e0b\u9762\u4e24\u79cd\u8868\u8fbe\u65b9\u5f0f\u6548\u679c\u4e00\u6837\\ ax.plot(x, y, 'g--')\\ ax.plot(x, y, linestyle='--', color='g') data = np.random.randn(30).cumsum() plt.plot(data, 'ko--') plt.show() # \u4e0a\u9762\u7684\u4ee3\u7801\u53ef\u4ee5\u5199\u5f97\u66f4\u4e3a\u663e\u5f0f\uff1a plt.plot(data, color='k', linestyle='dashed', marker='o') plt.show() plt.plot(data, color='k', linestyle='dashed', marker='o', label='Default') plt.show() plt.plot(data, color='k', linestyle='dashed', marker='o', label='steps-post', drawstyle='steps-post') plt.show() \u523b\u5ea6\u3001\u6807\u7b7e\u548c\u56fe\u4f8b \u5bf9\u4e8e\u5927\u591a\u6570\u56fe\u8868\u4fee\u9970\u5de5\u4f5c\uff0c\u6709\u4e24\u79cd\u4e3b\u8981\u7684\u65b9\u5f0f\uff1a\u4f7f\u7528\u7a0b\u5e8f\u6027\u7684pyplot\u63a5\u53e3\uff08\u5373matplotlib.pyplot\uff09\u548c\u66f4\u591a\u9762\u5411\u5bf9\u8c61\u7684\u539f\u751fmatplotlib API\u3002\\ pyplot\u63a5\u53e3\u8bbe\u8ba1\u4e3a\u4ea4\u4e92\u5f0f\u4f7f\u7528\uff0c\u5305\u542b\u4e86\u50cfxlim\u3001xticks\u548cxticklabels\u7b49\u65b9\u6cd5\u3002\u8fd9\u4e9b\u65b9\u6cd5\u5206\u522b\u63a7\u5236\u4e86\u7ed8\u56fe\u8303\u56f4\u3001\u523b\u5ea6\u4f4d\u7f6e\u4ee5\u53ca\u523b\u5ea6\u6807\u7b7e\u3002 * \u5728\u6ca1\u6709\u51fd\u6570\u53c2\u6570\u7684\u60c5\u51b5\u4e0b\u8c03\u7528\uff0c\u8fd4\u56de\u5f53\u524d\u7684\u53c2\u6570\u503c\uff08\u4f8b\u5982plt.xlim()\u8fd4\u56de\u5f53\u524d\u7684x\u8f74\u7ed8\u56fe\u8303\u56f4\uff09\u3002 * \u4f20\u5165\u53c2\u6570\u7684\u60c5\u51b5\u4e0b\u8c03\u7528\uff0c\u5e76\u8bbe\u7f6e\u53c2\u6570\u503c\uff08\u4f8b\u5982plt.xlim\uff08[0, 10]\uff09\u4f1a\u5c06x\u8f74\u7684\u8303\u56f4\u8bbe\u7f6e\u4e3a0\u523010\uff09\u3002 \u6240\u6709\u7684\u8fd9\u4e9b\u65b9\u6cd5\u90fd\u4f1a\u5728\u5f53\u524d\u6d3b\u52a8\u7684\u6216\u6700\u8fd1\u521b\u5efa\u7684AxesSubplot\u4e0a\u751f\u6548\u3002\\ \u8fd9\u4e9b\u65b9\u6cd5\u4e2d\u7684\u6bcf\u4e00\u4e2a\u5bf9\u5e94\u4e8e\u5b50\u56fe\u81ea\u8eab\u7684\u4e24\u4e2a\u65b9\u6cd5\u3002\u6bd4\u5982xlim\u5bf9\u5e94\u4e8eax.get_lim\u548cax.set_lim\u3002\\ \u63a8\u8350\u4f7f\u7528subplot\u7684\u5b9e\u4f8b\u65b9\u6cd5\uff0c\u56e0\u4e3a\u8fd9\u6837\u66f4\u4e3a\u663e\u5f0f\uff08\u5c24\u5176\u662f\u5728\u5904\u7406\u591a\u4e2a\u5b50\u56fe\u65f6\uff09\u3002 data = np.random.randn(1000).cumsum() fig = plt.figure() # \u8bbe\u5b9a\u5b50\u56fe ax = fig.add_subplot(1, 1, 1) # \u8bbe\u5b9ax\u8f74\u5bf9\u5e94\u53c2\u6570\uff1a # \u8bbe\u5b9ax\u8f74\u523b\u5ea6 ax.set_xticks([0, 250, 500, 750, 1000]) # \u8bbe\u5b9ax\u8f74\u6807\u7b7e ax.set_xticklabels(['one(0)', 'two(250)', 'three(500)', 'four(750)', 'five(1000)'], rotation=30, fontsize='small') # \u7ed9x\u8f74\u4e00\u4e2a\u540d\u79f0 ax.set_xlabel('Stages') # \u8bbe\u5b9ay\u8f74\u5bf9\u5e94\u53c2\u6570\uff1a # \u672a\u6307\u5b9a\u7684\u53c2\u6570\u7531\u7cfb\u7edf\u9ed8\u8ba4\u4ea7\u751f\u3002 ax.set_ylabel('Steps') # \u7ed9\u5b50\u56fe\u6dfb\u52a0\u4e00\u4e2a\u6807\u9898 ax.set_title('My first matplotlib plot') # \u7ed9\u5b50\u56fe\u6dfb\u52a0\u4e00\u4e2a\u56fe\u4f8b\uff08\u5982\uff1a\u7ed9\u5b50\u56fe\u5185\u4e00\u4e2a\u56fe\u5f62\u66f2\u7ebf\u6dfb\u52a0\u4e00\u4e2alabel\uff09 ax.plot(data, 'k--', label='Label One') # loc\u53c2\u6570\u544a\u8bc9matplotlib\u5728\u54ea\u91cc\u653e\u7f6e\u56fe\u8868\u3002legend\u65b9\u6cd5\u6709\u591a\u4e2a\u5176\u4ed6\u7684\u4f4d\u7f6e\u53c2\u6570loc\u3002 ax.legend(loc='best') # \u6216\u8005plt.legend(loc='best') \u3002 # \u5728\u56fe\u5f62\u5750\u6807\u4e3a(0, 0)\u7684\u4f4d\u7f6e\u6dfb\u52a0\u4e00\u4e2alable ax.text(0, 0, 'Hello World1', family='monospace', fontsize=10) # \u7ed9\u5b50\u56fe\u6dfb\u52a0annotate\u3002\u7528\u4e00\u4e2a\u7bad\u5934\u6307\u5411\u8981\u6ce8\u91ca\u7684\u5730\u65b9\uff0c\u518d\u5199\u4e0a\u4e00\u6bb5\u8bdd\u7684\u884c\u4e3a\uff0c\u53eb\u505aannotate\u3002 # * s: \u6ce8\u91ca\u7684\u5185\u5bb9\uff0c\u4e00\u6bb5\u6587\u5b57\uff1b # * xytext: \u8fd9\u6bb5\u6587\u5b57\u6240\u5904\u7684\u4f4d\u7f6e; # * xy: \u7bad\u5934\u6307\u5411\u7684\u4f4d\u7f6e\uff1b # * arrowprops: \u901a\u8fc7arrowstyle\u8868\u660e\u7bad\u5934\u7684\u98ce\u683c\u6216\u79cd\u7c7b\u3002 ax.annotate('Zero is here!', xytext=(20, 20), xy=(1, 1), arrowprops=dict(arrowstyle='->')) # \u7ed9\u5b50\u56fe\u6dfb\u52a0\u4e00\u4e9b\u56fe\u5f62 # matplotlib\u542b\u6709\u8868\u793a\u591a\u79cd\u5e38\u89c1\u56fe\u5f62\u7684\u5bf9\u8c61\uff0c\u8fd9\u4e9b\u5bf9\u8c61\u7684\u5f15\u7528\u662fpatches\u3002 # \u4e00\u4e9b\u56fe\u5f62\uff0c\u6bd4\u5982Rectangle\uff08\u77e9\u5f62\uff09\u548cCircle\uff08\u5706\u5f62\uff09\uff0c\u53ef\u4ee5\u5728matplotlib.pyplot\u4e2d\u627e\u5230\uff0c\u4f46\u56fe\u5f62\u7684\u5168\u96c6\u4f4d\u4e8ematplotlib.patches\u3002 rect = plt.Rectangle((10, 5), 100, 15, color='k', alpha=0.3) circ = plt.Circle((200, 9), 95, color='b', alpha=0.3) pgon = plt.Polygon([[500, 5], [600, -5], [700, 30]], color='g', alpha=0.5) ax.add_patch(rect) ax.add_patch(circ) ax.add_patch(pgon) # \u5c06\u56fe\u7247\u4fdd\u5b58\u5230\u6587\u4ef6 # \u6587\u4ef6\u7c7b\u578b\u662f\u4ece\u6587\u4ef6\u6269\u5c55\u540d\u4e2d\u63a8\u65ad\u51fa\u6765\u7684\u3002\u6240\u4ee5\u5982\u679c\u4f60\u4f7f\u7528\uff0epdf\uff0c\u5219\u4f1a\u5f97\u5230\u4e00\u4e2aPDF\u3002 # \u51e0\u4e2a\u91cd\u8981\u7684\u9009\u9879\uff1adpi\uff0c\u5b83\u63a7\u5236\u6bcf\u82f1\u5bf8\u70b9\u6570\u7684\u5206\u8fa8\u7387\uff1bbbox_inches\uff0c\u53ef\u4ee5\u4fee\u526a\u5b9e\u9645\u56fe\u5f62\u7684\u7a7a\u767d\u3002 plt.savefig('../examples/figpath.png', dpi=400, bbox_inches='tight') # saveifg\u5e76\u975e\u4e00\u5b9a\u662f\u5199\u5230\u786c\u76d8\u7684\uff0c\u5b83\u53ef\u4ee5\u5c06\u56fe\u7247\u5199\u5165\u5230\u6240\u6709\u7684\u6587\u4ef6\u578b\u5bf9\u8c61\u4e2d\uff0c\u4f8b\u5982BytesIO buffer = BytesIO() plt.savefig(buffer) plot_data = buffer.getvalue() plt.show() matplotlib\u8bbe\u7f6e matplotlib\u914d\u7f6e\u4e86\u914d\u8272\u65b9\u6848\u548c\u9ed8\u8ba4\u8bbe\u7f6e\uff0c\u901a\u8fc7\u5168\u5c40\u53c2\u6570\u6765\u5b9a\u5236\uff0c\u5305\u62ec\u56fe\u5f62\u5927\u5c0f\u3001\u5b50\u56fe\u95f4\u8ddd\u3001\u989c\u8272\u3001\u5b57\u4f53\u5927\u5c0f\u548c\u7f51\u683c\u6837\u5f0f\u7b49\u7b49\u3002\\ \u4f7f\u7528rc\u65b9\u6cd5\u662f\u4f7f\u7528Python\u7f16\u7a0b\u4fee\u6539\u914d\u7f6e\u7684\u4e00\u79cd\u65b9\u5f0f\u3002\\ rc\u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\u662f\u4f60\u60f3\u8981\u81ea\u5b9a\u4e49\u7684\u7ec4\u4ef6\uff0c\u6bd4\u5982\u2019figure'\u3001'axes'\u3001'xtick'\u3001'ytick'\u3001'grid'\u3001'legend\u2019\u7b49\u7b49\u3002\u4e4b\u540e\uff0c\u53ef\u4ee5\u6309\u7167\u5173\u952e\u5b57\u53c2\u6570\u7684\u5e8f\u5217\u6307\u5b9a\u65b0\u53c2\u6570\u3002\\ \u5b57\u5178\u662f\u4e00\u79cd\u5728\u7a0b\u5e8f\u4e2d\u8bbe\u7f6e\u9009\u9879\u7684\u7b80\u5355\u65b9\u5f0f\u3002\\ \u6bd4\u5982 plt.rc('figure', figsize=(10, 10)) font_options = { 'family': 'monospace', 'weight': 'bold', 'size': 'small' } plt.rc('font', **font_options) \u4f7f\u7528pandas\u548cseaborn\u7ed8\u56fe pandas\u81ea\u8eab\u6709\u5f88\u591a\u5185\u5efa\u65b9\u6cd5\u53ef\u4ee5\u7b80\u5316\u4eceDataFrame\u548cSeries\u5bf9\u8c61\u751f\u6210\u53ef\u89c6\u5316\u7684\u8fc7\u7a0b\u3002\\ \u53e6\u4e00\u4e2a\u5e93\u662fseaborn \uff08https://seaborn.pydata.org/\uff09\u3002seaborn\u7b80\u5316\u4e86\u5f88\u591a\u5e38\u7528\u53ef\u89c6\u5316\u7c7b\u578b\u7684\u751f\u6210\u3002\\ \u5bfc\u5165seaborn\u4f1a\u4fee\u6539\u9ed8\u8ba4\u7684matplotlib\u914d\u8272\u65b9\u6848\u548c\u7ed8\u56fe\u6837\u5f0f\uff0c\u8fd9\u4f1a\u63d0\u9ad8\u56fe\u8868\u7684\u53ef\u8bfb\u6027\u548c\u7f8e\u89c2\u6027\u3002\\ \u5373\u4f7f\u4e0d\u4f7f\u7528seaborn\u7684API\uff0c\u4e5f\u53ef\u4ee5\u5bfc\u5165seaborn\u6765\u4e3a\u901a\u7528matplotlib\u56fe\u8868\u63d0\u4f9b\u66f4\u597d\u7684\u89c6\u89c9\u7f8e\u89c2\u5ea6\u3002 import pandas as pd import numpy as np import matplotlib.pyplot as plt import seaborn as sns \u6298\u7ebf\u56fe Series\u548cDataFrame\u90fd\u6709\u4e00\u4e2aplot\u5c5e\u6027\uff0c\u7528\u4e8e\u7ed8\u5236\u57fa\u672c\u7684\u56fe\u5f62\u3002\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0cplot()\u7ed8\u5236\u7684\u662f\u6298\u7ebf\u56fe\\ \\ Series\u7684plot\u53c2\u6570 * ax: matplotlib\u5b50\u56fe\u5bf9\u8c61axes\uff0c\u5982\u679c\u6ca1\u6709\u4f20\u503c\uff0c\u5219\u4f7f\u7528\u5f53\u524d\u6d3b\u52a8\u7684\u5b50\u56fe\u9ed8\u8ba4\u4f7f\u7528gca() * alpha: \u56fe\u7247\u4e0d\u900f\u660e\u5ea6\uff080\u52301\uff09 * data: \u6570\u636e\u5e8f\u5217Series * figsize: \u56fe\u50cf\u5c3a\u5bf8\uff0ctuple(\u5bbd\u5ea6\uff0c\u9ad8\u5ea6)\uff0c\u6ce8\u610f\u8fd9\u91cc\u7684\u5355\u4f4d\u662f\u82f1\u5bf8 * fontsize: \u8bbe\u7f6e\u523b\u5ea6\u6807\u7b7e\uff08xticks, yticks\uff09\u7684\u5927\u5c0f * grid: \u7f51\u683c\u7ebf\uff08\u9ed8\u8ba4\u662f\u6253\u5f00\u7684\uff09 * kind: \u56fe\u7c7b\u578b\uff1a\u6298\u7ebf\u56fe\uff0c\u67f1\u5f62\u56fe\uff0c\u6a2a\u5411\u67f1\u5f62\u56fe\uff0c\u76f4\u65b9\u56fe\uff0c\u7bb1\u7ebf\u56fe\uff0c\u5bc6\u5ea6\u56fe\uff0c\u9762\u79ef\u56fe\uff0c\u997c\u56fe * label: \u5217\u7684\u522b\u540d\uff0c\u4f5c\u7528\u5728\u56fe\u4f8b\u4e0a * legend: \u56fe\u4f8b * loglog: x,y\u8f74\u90fd\u4f7f\u7528\u5bf9\u6570\u523b\u5ea6 * logx: x\u8f74\u4f7f\u7528\u5bf9\u6570\u523b\u5ea6 * logy: y\u8f74\u4f7f\u7528\u5bf9\u6570\u523b\u5ea6 * mark_right: \u53cc y \u8f74\u65f6\uff0c\u5728\u56fe\u4f8b\u4e2d\u7684\u5217\u6807\u7b7e\u65c1\u589e\u52a0\u663e\u793a (right) \u6807\u8bc6 * position: \u67f1\u5f62\u56fe\u7684\u67f1\u5b50\u7684\u4f4d\u7f6e\u8bbe\u7f6e * rot: \u6539\u53d8\u523b\u5ea6\u6807\u7b7e\uff08xticks, yticks\uff09\u7684\u65cb\u8f6c\u5ea6\uff080\u5230360\uff09 * secondary_y: \u53cc y \u8f74\uff0c\u5728\u53f3\u8fb9\u7684\u7b2c\u4e8c\u4e2a y \u8f74 * style: \u7ebf\u7684\u6837\u5f0f\uff0c\u6bd4\u5982'ko--' * table: \u5c06\u6570\u636e\u4ee5\u8868\u683c\u7684\u5f62\u5f0f\u5c55\u793a\u51fa\u6765 * title: \u6807\u9898 * use_index: \u662f\u5426\u4f7f\u7528\u7d22\u5f15\u4f5c\u4e3ax\u523b\u5ea6\u6807\u7b7e * xerr: \u5e26\u8bef\u5dee\u7ebf\u7684\u67f1\u5f62\u56fe * xlim: \u6a2a\u8f74\u5750\u6807\u523b\u5ea6\u7684\u53d6\u503c\u8303\u56f4 * xticks: x\u8f74\u523b\u5ea6\u6807\u7b7e * yerr: \u5e26\u8bef\u5dee\u7ebf\u7684\u67f1\u5f62\u56fe * ylim: \u7eb5\u8f74\u5750\u6807\u523b\u5ea6\u7684\u53d6\u503c\u8303\u56f4 * yticks: y\u8f74\u523b\u5ea6\u6807\u7b7e * **kwds: matplotlib plot\u65b9\u6cd5\u7684\u5176\u4ed6\u53c2\u6570 \\ DataFrame\u7684plot\u53c2\u6570 * x : \u6307\u6570\u636e\u6846\u5217\u7684\u6807\u7b7e\u6216\u4f4d\u7f6e\u53c2\u6570 * y : \u6307\u6570\u636e\u6846\u5217\u7684\u6807\u7b7e\u6216\u4f4d\u7f6e\u53c2\u6570 * kind : * 'line' : \u6298\u7ebf\u56fe * 'bar' : \u6761\u5f62\u56fe * 'barh' : \u6a2a\u5411\u6761\u5f62\u56fe * 'hist' : \u67f1\u72b6\u56fe * 'box' : \u7bb1\u7ebf\u56fe * 'kde' : Kernel\u7684\u5bc6\u5ea6\u4f30\u8ba1\u56fe\uff0c\u4e3b\u8981\u5bf9\u67f1\u72b6\u56fe\u6dfb\u52a0Kernel \u6982\u7387\u5bc6\u5ea6\u7ebf * 'density' : 'kde' * 'area' : area plot * 'pie' : \u997c\u56fe * 'scatter' : \u6563\u70b9\u56fe \u9700\u8981\u4f20\u5165columns\u65b9\u5411\u7684\u7d22\u5f15 * 'hexbin' : hexbin plot * ax : \u5b50\u56fe(axes, \u4e5f\u53ef\u4ee5\u7406\u89e3\u6210\u5750\u6807\u8f74) \u8981\u5728\u5176\u4e0a\u8fdb\u884c\u7ed8\u5236\u7684matplotlib subplot\u5bf9\u8c61\u3002\u5982\u679c\u6ca1\u6709\u8bbe\u7f6e\uff0c\u5219\u4f7f\u7528\u5f53\u524dmatplotlib subplot\u3002\u5176\u4e2d\uff0c\u53d8\u91cf\u548c\u51fd\u6570\u901a\u8fc7\u6539\u53d8figure\u548caxes\u4e2d\u7684\u5143\u7d20\uff08\u4f8b\u5982\uff1atitle,label,\u70b9\u548c\u7ebf\u7b49\u7b49\uff09\u4e00\u8d77\u63cf\u8ff0figure\u548caxes\uff0c\u4e5f\u5c31\u662f\u5728\u753b\u5e03\u4e0a\u7ed8\u56fe\u3002 * subplots : \u5224\u65ad\u56fe\u7247\u4e2d\u662f\u5426\u6709\u5b50\u56fe * sharex : \u5982\u679c\u6709\u5b50\u56fe\uff0c\u5b50\u56fe\u5171x\u8f74\u523b\u5ea6\uff0c\u6807\u7b7e * sharey : \u5982\u679c\u6709\u5b50\u56fe\uff0c\u5b50\u56fe\u5171y\u8f74\u523b\u5ea6\uff0c\u6807\u7b7e * layout : \u5b50\u56fe\u7684\u884c\u5217\u5e03\u5c40 * figsize : \u56fe\u7247\u5c3a\u5bf8\u5927\u5c0f * use_index : \u9ed8\u8ba4\u7528\u7d22\u5f15\u505ax\u8f74 * title : \u56fe\u7247\u7684\u6807\u9898\u7528\u5b57\u7b26\u4e32 * grid : \u56fe\u7247\u662f\u5426\u6709\u7f51\u683c * legend : \u5b50\u56fe\u7684\u56fe\u4f8b\uff0c\u6dfb\u52a0\u4e00\u4e2asubplot\u56fe\u4f8b(\u9ed8\u8ba4\u4e3aTrue) * style : \u5bf9\u6bcf\u5217\u6298\u7ebf\u56fe\u8bbe\u7f6e\u7ebf\u7684\u7c7b\u578b * logx : \u8bbe\u7f6ex\u8f74\u523b\u5ea6\u662f\u5426\u53d6\u5bf9\u6570 * logy : \u8bbe\u7f6ey\u8f74\u523b\u5ea6\u662f\u5426\u53d6\u5bf9\u6570 * loglog : \u540c\u65f6\u8bbe\u7f6ex\uff0cy\u8f74\u523b\u5ea6\u662f\u5426\u53d6\u5bf9\u6570 * xticks : \u8bbe\u7f6ex\u8f74\u523b\u5ea6\u503c\uff0c\u5e8f\u5217\u5f62\u5f0f\uff08\u6bd4\u5982\u5217\u8868\uff09 * yticks : \u8bbe\u7f6ey\u8f74\u523b\u5ea6\uff0c\u5e8f\u5217\u5f62\u5f0f\uff08\u6bd4\u5982\u5217\u8868\uff09 * xlim : \u8bbe\u7f6e\u5750\u6807\u8f74x\u7684\u8303\u56f4\uff0c\u5217\u8868\u6216\u5143\u7ec4\u5f62\u5f0f * ylim : \u8bbe\u7f6e\u5750\u6807\u8f74y\u7684\u8303\u56f4\uff0c\u5217\u8868\u6216\u5143\u7ec4\u5f62\u5f0f * rot : \u8bbe\u7f6e\u8f74\u6807\u7b7e\uff08\u8f74\u523b\u5ea6\uff09\u7684\u663e\u793a\u65cb\u8f6c\u5ea6\u6570 * fontsize : \u8bbe\u7f6e\u8f74\u523b\u5ea6\u7684\u5b57\u4f53\u5927\u5c0f * colormap : \u8bbe\u7f6e\u56fe\u7684\u533a\u57df\u989c\u8272 * colorbar : \u56fe\u7247\u67f1\u5b50 * position : Specify relative alignments for bar plot layout. From 0 (left/bottom-end) to 1 (right/top-end). Default is 0.5 (center) * layout : \u5e03\u5c40(rows, columns) for the layout of the plot * table : \u5982\u679c\u4e3a\u6b63\uff0c\u5219\u9009\u62e9DataFrame\u7c7b\u578b\u7684\u6570\u636e\u5e76\u4e14\u8f6c\u6362\u5339\u914dmatplotlib\u7684\u5e03\u5c40 * yerr : \u5e26\u8bef\u5dee\u7ebf\u7684\u67f1\u5f62\u56fe * xerr : \u5e26\u8bef\u5dee\u7ebf\u7684\u67f1\u5f62\u56fe * stacked : \u751f\u6210\u5806\u79ef\u67f1\u72b6\u56fe * sort_columns : \u4ee5\u5b57\u6bcd\u8868\u987a\u5e8f\u7ed8\u5236\u5404\u5217\uff0c\u9ed8\u8ba4\u4f7f\u7528\u524d\u5217\u987a\u5e8f * secondary_y : \u8bbe\u7f6e\u7b2c\u4e8c\u4e2ay\u8f74\uff08\u53f3y\u8f74\uff09 * mark_right : When using a secondary_y axis, automatically mark the column labels with \u201c(right)\u201d in the legend * kwds : Options to pass to matplotlib plotting method \\ Series data1 = np.random.randn(10).cumsum(0) s1 = pd.Series( data1, index=np.arange(0, 100, 10), ) print(s1) fig, axes = plt.subplots(3, 1) # 3\u4e2a\u5b50\u56fe s1.plot.bar(ax=axes[0], color='k', alpha=0.7) # \u6761\u5f62\u56fe(\u5b50\u56fe0)\uff0ccolor='k\u2019(\u67f1\u5b50\u7684\u989c\u8272\u8bbe\u7f6e\u4e3a\u9ed1\u8272)\uff0calpha=0.7(\u56fe\u50cf\u7684\u586b\u5145\u8272\u8bbe\u7f6e\u4e3a\u90e8\u5206\u900f\u660e) s1.plot.barh(ax=axes[1], color='k', alpha=0.7) # \u6a2a\u5411\u6761\u5f62\u56fe(\u5b50\u56fe1) s1.value_counts().plot.pie(ax=axes[2]) # \u901a\u8fc7value_counts()\u5bf9Series\u503c\u9891\u7387\u8fdb\u884c\u53ef\u89c6\u5316 plt.show() DataFrame data2 = np.random.randn(10, 4).cumsum(0) df1 = pd.DataFrame( data2, columns=pd.Index(['A', 'B', 'C', 'D'], name='Genus'), index=np.arange(0, 100, 10) ) print(df1) fig, axes = plt.subplots(2, 1) # 2\u4e2a\u5b50\u56fe df1.plot.kde(ax=axes[0], alpha=0.7, grid='True', title='KDE Figure', sharex=True) df1.plot.bar(ax=axes[1], grid='True', title='Line Figure', sharex=True, use_index=False, stacked=True) # \u56e0\u4e3a\u5171\u4eabx\u8f74\uff0c\u6240\u4ee5\u5728KDE\u5b50\u56fe\u4e2d\u6307\u5b9ause_index=False\u770b\u4e0d\u51fa\u6548\u679c\u3002 # DataFrame\u7684\u5217\u540d\u79f0\"Genus\"\u88ab\u7528\u4f5c\u4e86\u56fe\u4f8b\u6807\u9898 # stacked=True\u6765\u751f\u6210\u5806\u79ef\u67f1\u72b6\u56fe plt.show() \u5b9e\u4f8b\uff1a\u7ed8\u5236\u4e00\u4e2a\u5806\u79ef\u67f1\u72b6\u56fe\uff0c\u7528\u4e8e\u5c55\u793a\u6bcf\u4e2a\u6d3e\u5bf9\u5728\u6bcf\u5929\u7684\u6570\u636e\u70b9\u5360\u6bd4\\ \u4ea4\u53c9\u8868\u662f\u4e00\u79cd\u5e38\u7528\u7684\u5206\u7c7b\u6c47\u603b\u8868\u683c\uff0c\u7528\u4e8e\u9891\u6570\u5206\u5e03\u7edf\u8ba1\uff0c\u4e3b\u8981\u4ef7\u503c\u5728\u4e8e\u63cf\u8ff0\u4e86\u53d8\u91cf\u95f4\u5173\u7cfb\u7684\u6df1\u523b\u542b\u4e49\u3002\\ \u867d\u7136\u4e24\u4e2a\uff08\u6216\u4ee5\u4e0a\uff09\u53d8\u91cf\u53ef\u4ee5\u662f\u5206\u7c7b\u7684\u6216\u6570\u91cf\u7684\uff0c\u4f46\u662f\u4ee5\u90fd\u662f\u5206\u7c7b\u7684\u60c5\u5f62\u6700\u4e3a\u5e38\u89c1\u3002\\ Pandas\u7684crosstab()\u65b9\u6cd5\u80fd\u591f\u5feb\u901f\u6784\u5efa\u4ea4\u53c9\u8868\uff0c\u5e76\u53ef\u4ee5\u901a\u8fc7\u53c2\u6570\u52a0\u4ee5\u4e2a\u6027\u5316\u7684\u8bbe\u7f6e\u3002\u5176\u4e2d\uff0c\u7b2c\u4e00\u4e2a\u53c2\u6570\u5c06\u6784\u6210\u4ea4\u53c9\u8868\u7684\u884c\uff0c\u7b2c\u4e8c\u4e2a\u53c2\u6570\u5c06\u6784\u6210\u4ea4\u53c9\u8868\u7684\u5217\\ \u5b98\u65b9\u6587\u6863: https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.crosstab.html tips = pd.read_csv('../examples/tips.csv') print(tips) # total_bill tip smoker day time size # 0 16.99 1.01 No Sun Dinner 2 # 1 10.34 1.66 No Sun Dinner 3 # 2 21.01 3.50 No Sun Dinner 3 # 3 23.68 3.31 No Sun Dinner 2 # 4 24.59 3.61 No Sun Dinner 4 # .. ... ... ... ... ... ... # 239 29.03 5.92 No Sat Dinner 3 # 240 27.18 2.00 Yes Sat Dinner 2 # 241 22.67 2.00 Yes Sat Dinner 2 # 242 17.82 1.75 No Sat Dinner 2 # 243 18.78 3.00 No Thur Dinner 2 # [244 rows x 6 columns] party_counts = pd.crosstab(tips['day'], tips['size']) # \u5bf9\u539f\u59cb\u6570\u636e\u7684day\u548csize\u8fdb\u884c\u805a\u5408\uff0c\u5e76\u6784\u5efa\u4ea4\u53c9\u8868\uff0cday\u4f5c\u4e3a\u884c\uff0csize\u4f5c\u4e3a\u5217\u3002 print(party_counts) # size 1 2 3 4 5 6 # day # Fri 1 16 1 1 0 0 # Sat 2 53 18 13 1 0 # Sun 0 39 15 18 3 1 # Thur 1 48 4 5 1 3 # \u6ca1\u6709\u592a\u591a\u76841\u4eba\u548c6\u4eba\u6d3e\u5bf9\uff0c\u820d\u5f03\u8fd9\u4e9b\u6570\u636e party_counts = party_counts.loc[:, 2:5] print(party_counts) # size 2 3 4 5 # day # Fri 16 1 1 0 # Sat 53 18 13 1 # Sun 39 15 18 3 # Thur 48 4 5 1 # \u6807\u51c6\u5316\u81f3\u548c\u4e3a1\uff1a\u6cbf0\u8f74\uff08\u884c\uff09\u5bf9\u6bcf\u5217\u6c42\u548c\uff0c\u6bcf\u884c\u5404\u503c\u9664\u4ee5\u548c\uff0c\u4ee5\u786e\u4fdd\u6bcf\u4e00\u884c\u7684\u503c\u548c\u4e3a1\uff0c\u7136\u540e\u8fdb\u884c\u7ed8\u56fe party_pcts = party_counts.div(party_counts.sum(1), axis=0) print(party_pcts) # size 2 3 4 5 # day # Fri 0.888889 0.055556 0.055556 0.000000 # Sat 0.623529 0.211765 0.152941 0.011765 # Sun 0.520000 0.200000 0.240000 0.040000 # Thur 0.827586 0.068966 0.086207 0.017241 party_counts.plot.bar() plt.show() \u53ef\u4ee5\u770b\u5230\u672c\u6570\u636e\u96c6\u4e2d\u7684\u6d3e\u5bf9\u6570\u91cf\u5728\u5468\u672b\u4f1a\u589e\u52a0 \u5b9e\u4f8b\uff1a\u4f7f\u7528seaborn\u8fdb\u884c\u6309\u661f\u671f\u65e5\u671f\u8ba1\u7b97\u5c0f\u8d39\u767e\u5206\u6bd4\\ Seaborn\u8981\u6c42\u6570\u636e\u7684\u8f93\u5165\u7c7b\u578b\u4e3apandas\u7684Dataframe\u6216Numpy \u6570\u7ec4 tips['tip_pct'] = tips['tip'] / (tips['total_bill'] - tips['tip']) print(tips) # total_bill tip smoker day time size tip_pct # 0 16.99 1.01 No Sun Dinner 2 0.063204 # 1 10.34 1.66 No Sun Dinner 3 0.191244 # 2 21.01 3.50 No Sun Dinner 3 0.199886 # 3 23.68 3.31 No Sun Dinner 2 0.162494 # 4 24.59 3.61 No Sun Dinner 4 0.172069 # .. ... ... ... ... ... ... ... # 239 29.03 5.92 No Sat Dinner 3 0.256166 # 240 27.18 2.00 Yes Sat Dinner 2 0.079428 # 241 22.67 2.00 Yes Sat Dinner 2 0.096759 # 242 17.82 1.75 No Sat Dinner 2 0.108899 # 243 18.78 3.00 No Thur Dinner 2 0.190114 # [244 rows x 7 columns] # barplot: \u5c06\u70b9\u4f30\u8ba1\u548c\u7f6e\u4fe1\u533a\u95f4\u663e\u793a\u4e3a\u77e9\u5f62\u6761\u3002\u6761\u5f62\u56fe\u8868\u793a\u5177\u6709\u6bcf\u4e2a\u77e9\u5f62\u7684\u9ad8\u5ea6\u7684\u6570\u503c\u53d8\u91cf\u7684\u96c6\u4e2d\u8d8b\u52bf\u7684\u4f30\u8ba1\uff0c\u5e76\u4e14\u4f7f\u7528\u8bef\u5dee\u6761\u63d0\u4f9b\u56f4\u7ed5\u8be5\u4f30\u8ba1\u7684\u4e0d\u786e\u5b9a\u6027\u7684\u4e00\u4e9b\u6307\u793a # \u67f1\u5b50\u7684\u503c\u662ftip_pct\u7684\u5e73\u5747\u503c # \u67f1\u5b50\u4e0a\u753b\u51fa\u7684\u9ed1\u7ebf\u4ee3\u8868\u7684\u662f95%\u7684\u7f6e\u4fe1\u533a\u95f4\uff08\u7f6e\u4fe1\u533a\u95f4\u53ef\u4ee5\u901a\u8fc7\u53ef\u9009\u53c2\u6570\u8fdb\u884c\u8bbe\u7f6e\uff09 # hue\u9009\u9879\uff0c\u5141\u8bb8\u6211\u4eec\u901a\u8fc7\u4e00\u4e2a\u989d\u5916\u7684\u5206\u7c7b\u503c\u5c06\u6570\u636e\u5206\u79bb # \u5e26\u53c2\u6570hue='time'\u65f6\uff0c\u56db\u4e2a\u4e0d\u540c\u989c\u8272\u7684\u67f1\u5b50\uff0c\u6bcf\u4e2a\u67f1\u5b50\u4e0a\u6709\u7f6e\u4fe1\u533a\u95f4\u7684\u9ed1\u7ebf\uff0c\u523b\u5ea60.00~0.30\uff0c\u6b65\u957f0.05 # \u4e0d\u5e26\u53c2\u6570hue='time'\u65f6\uff0c\u4e24\u4e2a\u4e0d\u540c\u989c\u8272\u7684\u67f1\u5b50\uff0c\u5206\u522b\u4ee3\u8868Dinner\u548cLunch\uff0c\u4e0d\u662f\u6bcf\u4e2a\u67f1\u5b50\u4e0a\u90fd\u6709\u7f6e\u4fe1\u533a\u95f4\u7684\u9ed1\u7ebf\uff0c\u523b\u5ea60.00~0.30\uff0c\u6b65\u957f0.05 sns.barplot(x='tip_pct', y='day', data=tips, hue='time', orient='h') # \u6839\u636e\u661f\u671f\u65e5\u671f\u548c\u65f6\u95f4\u8ba1\u7b97\u7684\u5c0f\u8d39\u767e\u5206\u6bd4 # sns.barplot(x='tip_pct', y='day', data=tips, orient='h') sns.set(style=\"darkgrid\", palette=\"deep\") # style=\"whitegrid\" plt.show() \u76f4\u65b9\u56fe\u548c\u5bc6\u5ea6\u56fe \u76f4\u65b9\u56fe\u662f\u4e00\u79cd\u6761\u5f62\u56fe\uff0c\u7528\u4e8e\u7ed9\u51fa\u503c\u9891\u7387\u7684\u79bb\u6563\u663e\u793a\u3002\u6570\u636e\u70b9\u88ab\u5206\u6210\u79bb\u6563\u7684\uff0c\u5747\u5300\u95f4\u9694\u7684\u7bb1\uff0c\u5e76\u4e14\u7ed8\u5236\u6bcf\u4e2a\u7bb1\u4e2d\u6570\u636e\u70b9\u7684\u6570\u91cf\u3002 tips['tip_pct'].plot.hist(bins=50) # \u5c0f\u8d39\u767e\u5206\u6bd4\u7684\u76f4\u65b9\u56fe plt.show() \u5bc6\u5ea6\u56fe\u662f\u4e00\u79cd\u4e0e\u76f4\u65b9\u56fe\u76f8\u5173\u7684\u56fe\u8868\u7c7b\u578b\uff0c\u5b83\u901a\u8fc7\u8ba1\u7b97\u53ef\u80fd\u4ea7\u751f\u89c2\u6d4b\u6570\u636e\u7684\u8fde\u7eed\u6982\u7387\u5206\u5e03\u4f30\u8ba1\u800c\u4ea7\u751f\u3002\\ \u901a\u5e38\u7684\u505a\u6cd5\u662f\u5c06\u8fd9\u79cd\u5206\u5e03\u8fd1\u4f3c\u4e3a\u201c\u5185\u6838\u201d\u7684\u6df7\u5408\uff0c\u4e5f\u5c31\u662f\u50cf\u6b63\u6001\u5206\u5e03\u90a3\u6837\u7b80\u5355\u7684\u5206\u5e03\u3002\\ \u56e0\u6b64\uff0c\u5bc6\u5ea6\u56fe\u4e5f\u88ab\u79f0\u4e3a\u5185\u6838\u5bc6\u5ea6\u4f30\u8ba1\u56fe\uff08KDE\uff09\u3002 tips['tip_pct'].plot.density() # \u5c0f\u8d39\u767e\u5206\u6bd4\u5bc6\u5ea6\u56fe plt.show() \u7ed8\u5236\u76f4\u65b9\u56fe\u548c\u8fde\u7eed\u5bc6\u5ea6\u4f30\u8ba1sns.displot() sns.distplot(tips['tip_pct'], bins=100, color='k') plt.show() # FutureWarning: `distplot` is a deprecated function and will be removed in a future version. # Please adapt your code to use either `displot` (a figure-level function with similar flexibility) # or `histplot` (an axes-level function for histograms). \u6563\u70b9\u56fe\u6216\u70b9\u56fe \u70b9\u56fe\u6216\u6563\u70b9\u56fe\u53ef\u4ee5\u7528\u4e8e\u68c0\u9a8c\u4e24\u4e2a\u4e00\u7ef4\u6570\u636e\u5e8f\u5217\u4e4b\u95f4\u7684\u5173\u7cfb\u3002\\ \u5b9e\u4f8b\uff1a\u4ecestatsmodels\u9879\u76ee\u4e2d\u8f7d\u5165\u4e86macrodata\u6570\u636e\u96c6\uff0c\u5e76\u9009\u62e9\u4e86\u4e00\u4e9b\u53d8\u91cf\uff0c\u4e4b\u540e\u8ba1\u7b97\u5bf9\u6570\u5dee\u3002 macro = pd.read_csv('../examples/macrodata.csv') print(macro.head(5)) # year quarter realgdp realcons ... unemp pop infl realint # 0 1959.0 1.0 2710.349 1707.4 ... 5.8 177.146 0.00 0.00 # 1 1959.0 2.0 2778.801 1733.7 ... 5.1 177.830 2.34 0.74 # 2 1959.0 3.0 2775.488 1751.8 ... 5.3 178.657 2.74 1.09 # 3 1959.0 4.0 2785.204 1753.7 ... 5.6 179.386 0.27 4.06 # 4 1960.0 1.0 2847.699 1770.5 ... 5.2 180.007 2.31 1.19 # [5 rows x 14 columns] data = macro[['cpi', 'm1', 'tbilrate', 'unemp']] print(data.head(5)) # cpi m1 tbilrate unemp # 0 28.98 139.7 2.82 5.8 # 1 29.15 141.7 3.08 5.1 # 2 29.35 140.5 3.82 5.3 # 3 29.37 140.0 4.33 5.6 # 4 29.54 139.6 3.50 5.2 trans_data = np.log(data).diff().dropna() print(trans_data[-5:]) # cpi m1 tbilrate unemp # 198 -0.007904 0.045361 -0.396881 0.105361 # 199 -0.021979 0.066753 -2.277267 0.139762 # 200 0.002340 0.010286 0.606136 0.160343 # 201 0.008419 0.037461 -0.200671 0.127339 # 202 0.008894 0.012202 -0.405465 0.042560 \u7528seaborn\u7684regplot\u65b9\u6cd5\u7ed8\u5236\u6563\u70b9\u56fe\uff0c\u5e76\u62df\u5408\u51fa\u4e00\u4e2a\u6761\u7ebf\u6027\u56de\u5f52\u7ebf sns.regplot('m1', 'unemp', data=trans_data) plt.title('Changes in log %s versus log %s ' % ('m1', 'unemp')) plt.show() \u5728\u63a2\u7d22\u6027\u6570\u636e\u5206\u6790\u4e2d\uff0c\u80fd\u591f\u67e5\u770b\u4e00\u7ec4\u53d8\u91cf\u4e2d\u7684\u6240\u6709\u6563\u70b9\u56fe\u662f\u6709\u5e2e\u52a9\u7684\uff0c\u8fd9\u88ab\u79f0\u4e3a\u6210\u5bf9\u56fe\u6216\u6563\u70b9\u56fe\u77e9\u9635\u3002\\ Seaborn\u6709\u4e00\u4e2a\u65b9\u4fbf\u7684pairplot\u51fd\u6570\uff0c\u5b83\u652f\u6301\u5728\u5bf9\u89d2\u7ebf\u4e0a\u653e\u7f6e\u6bcf\u4e2a\u53d8\u91cf\u7684\u76f4\u65b9\u56fe\u6216\u5bc6\u5ea6\u4f30\u8ba1\u503c\u3002\\ plot_ksw\u53c2\u6570\u80fd\u591f\u5c06\u914d\u7f6e\u9009\u9879\u4f20\u9012\u7ed9\u975e\u5bf9\u89d2\u5143\u7d20\u4e0a\u7684\u5404\u4e2a\u7ed8\u56fe\u8c03\u7528\u3002 sns.pairplot(trans_data, diag_kind='kde', plot_kws={'alpha': 0.2}) plt.show() \u5206\u9762\u7f51\u683c\u548c\u5206\u7c7b\u6570\u636e \u5982\u679c\u6570\u636e\u96c6\u6709\u989d\u5916\u7684\u5206\u7ec4\u7ef4\u5ea6\u600e\u4e48\u529e\uff1f\u4f7f\u7528\u5206\u9762\u7f51\u683c\u662f\u5229\u7528\u591a\u79cd\u5206\u7ec4\u53d8\u91cf\u5bf9\u6570\u636e\u8fdb\u884c\u53ef\u89c6\u5316\u7684\u65b9\u5f0f\u3002\\ seaborn\u62e5\u6709\u4e00\u4e2a\u6709\u6548\u7684\u5185\u5efa\u51fd\u6570factorplot\uff0c\u5b83\u53ef\u4ee5\u7b80\u5316\u591a\u79cd\u5206\u9762\u7ed8\u56fe\u3002 sns.factorplot(x='day', y='tip_pct', hue='time', col='smoker', kind='bar', data=tips[tips.tip_pct < 1]) plt.show() # UserWarning: The `factorplot` function has been renamed to `catplot`. # The original name will be removed in a future release. Please update your code. # Note that the default `kind` in `factorplot` (`'point'`) has changed `'strip'` in `catplot`. sns.catplot(x='day', y='tip_pct', hue='time', col='smoker', kind='box', data=tips[tips.tip_pct < 0.5]) plt.show() seaborn\u6587\u6863 https://seaborn.pydata.org/ \u5176\u4ed6Python\u53ef\u89c6\u5316\u5de5\u5177 \u81ea2010\u5e74\u4ee5\u6765\uff0c\u5f88\u591a\u5f00\u53d1\u5de5\u4f5c\u90fd\u96c6\u4e2d\u5728\u521b\u5efaweb\u4ea4\u4e92\u5f0f\u56fe\u5f62\u4e0a\u3002\\ \u501f\u52a9\u50cf Bokeh \u548c Plotly \u8fd9\u6837\u7684\u5de5\u5177\uff0c\u5728web\u6d4f\u89c8\u5668\u4e2d\u521b\u5efa\u52a8\u6001\u7684\u3001\u4ea4\u4e92\u5f0f\u56fe\u50cf\u7684\u5de5\u4f5c\u73b0\u5728\u5df2\u7ecf\u53ef\u4ee5\u5b9e\u73b0\u3002\\ \u53ef\u89c6\u5316\u662f\u4e00\u4e2a\u6d3b\u8dc3\u7684\u7814\u7a76\u9886\u57df\u3002","title":"Ch06"},{"location":"python/DataAnalysis/ch06/#matplotlib-api","text":"import matplotlib as mpl import matplotlib.pyplot as plt import numpy as np import pandas as pd from io import BytesIO \u6267\u884cplt.show()\u65f6\u62a5\u9519\uff1a\\ UserWarning: Matplotlib is currently using agg, which is a non-GUI backend, so cannot show the figure.\\ \\ \u6267\u884c\u4e0b\u9762\u547d\u4ee4\uff0c\u5f97\u5230plt\u7684backend\u662f\u7528agg\\ import matplotlib.pyplot as plt\\ plt.get_backend()\u4f8b\u5982\uff1a\u4e0b\u9762\u4e24\u79cd\u8868\u8fbe\u65b9\u5f0f\u6548\u679c\u4e00\u6837\\ ax.plot(x, y, 'g--')\\ ax.plot(x, y, linestyle='--', color='g')\\ Out[6]: 'agg'\\ \\ \u5b89\u88c5\u4e0b\u9762\u51e0\u4e2a\u5305\uff1a\\ sudo zypper in python-tk python3-tk\\ sudo zypper in plplot-tcltk-devel plplot-tcltk-libs\\ pip install tk\\ \u6dfb\u52a0\u4e0b\u9762\u5230python\u4ee3\u7801\u4e2d\\ import matplotlib.pyplot as plt\\ mpl.use('TkAgg')\\ \\ \u6267\u884c\u540e\u62a5\u4e0b\u9762\u9519\u8bef\uff1a\\ your Python may not be configured for Tk\\ \u8fdb\u5165python\u6e90\u7801\u76ee\u5f55\uff0c\u91cd\u65b0\u7f16\u8bd1\u4f8b\u5982\uff1a\u4e0b\u9762\u4e24\u79cd\u8868\u8fbe\u65b9\u5f0f\u6548\u679c\u4e00\u6837\\ ax.plot(x, y, 'g--')\\ ax.plot(x, y, linestyle='--', color='g')\\ james@lizard:/opt/Python-3.9.6> sudo make\\ james@lizard:/opt/Python-3.9.6> sudo make install\\ \\ \u95ee\u9898\u89e3\u51b3\uff0c\u5373\u4f7f\u4e0d\u52a0\u5165mpl.use('TkAgg')\uff0c\u6267\u884cplt.show()\u4e5f\u662f\u53ef\u4ee5\u8f93\u51fa\u56fe\u50cf\u3002","title":"\u7b80\u660ematplotlib API\u5165\u95e8"},{"location":"python/DataAnalysis/ch06/#_1","text":"matplotlib\u6240\u7ed8\u5236\u7684\u56fe\u4f4d\u4e8e\u56fe\u7247\uff08Figure\uff09\u5bf9\u8c61\u4e2d\u3002\u53ef\u4ee5\u4f7f\u7528plt.figure\u751f\u6210\u4e00\u4e2a\u65b0\u7684\u56fe\u7247\u3002 \\ \u4f7f\u7528add_subplot\u521b\u5efa\u4e00\u4e2a\u6216\u591a\u4e2a\u5b50\u56fe\uff08subplot\uff09\u3002\\ plt\u4e0eax\u7ed8\u56fe fig = plt.figure() # plt: \u5148\u751f\u6210\u4e86\u4e00\u4e2a\u753b\u5e03\uff0c\u7136\u540e\u5728\u8fd9\u4e2a\u753b\u5e03\u4e0a\u9690\u5f0f\u7684\u751f\u6210\u4e00\u4e2a\u753b\u56fe\u533a\u57df\u6765\u8fdb\u884c\u753b\u56fe # plt.plot([1, 2, 3, 4]) # plt.show() # ax: \u5148\u751f\u6210\u4e00\u4e2a\u753b\u5e03\uff082\u00d72\u7684\u533a\u57df\uff0c\u6700\u591a\u653e\u56db\u4e2a\u56fe\u5f62\uff09\uff0c\u7136\u540e\u5728\u6b64\u753b\u5e03\u4e0a\uff0c\u9009\u5b9a\u4e00\u4e2a\u5b50\u533a\u57df\u753b\u4e86\u4e00\u4e2a\u5b50\u56fe\uff08\u5e8f\u53f71\u4ee3\u8868\u7b2c\u4e00\u4e2a\u533a\u57df\uff09 ax1 = fig.add_subplot(2, 2, 1) # \u4e5f\u53ef\u4ee5\u5199\u6210fig.add_subplot(221) ax1.plot([1, 2, 3, 4], [1, 4, 3, 2]) # \u8f93\u51fa\u56fe\u7247\u5230\u7b2c\u4e00\u4e2a\u533a\u57df\u3002 # \u7b2c\u4e00\u4e2a\u53c2\u6570\u662f\u6570\u636e\u96c6\u91cc\u5404\u4e2a\u6570\u636e\u70b9\u7684X\u503c\u7684\u96c6\u5408 # \u7b2c\u4e8c\u4e2a\u53c2\u6570\u6570\u636e\u96c6\u91cc\u5404\u4e2a\u6570\u636e\u70b9\u7684Y\u503c\u7684\u96c6\u5408\u3002 # \u4e0d\u662f\u6570\u5b66\u4e0a\u5e38\u89c1\u7684\u6210\u5bf9\u5750\u6807\u70b9\u5982(x1,y1)\u3001(x2,y2)\u3001...\u3001(xn,yn)\u7684\u683c\u5f0f\uff0c\u800c\u662f (x1,x2,...,xn)\u548c(y1,y2,...,yn) \u3002 plt.show() \u770b\u4e0b\u9762\u4f8b\u5b50\uff0c\u589e\u52a0\u5b50\u56fe\u540e\u7684\u6570\u636e\u53ef\u89c6\u5316\u6548\u679c fig = plt.figure() ax1 = fig.add_subplot(2, 2, 1) ax2 = fig.add_subplot(2, 2, 2) ax3 = fig.add_subplot(2, 2, 3) ax1.plot(np.random.randn(50).cumsum(), 'k--') # \u5728\u7b2c\u4e09\u4e2a\u533a\u57df\u8f93\u51fa\u56fe\u50cf\u3002'k--\u2019\u662f\u7528\u4e8e\u7ed8\u5236\u9ed1\u8272\u5206\u6bb5\u7ebf\u7684style\u9009\u9879\u3002 ax2.hist(np.random.randn(100), bins=20, color='k', alpha=0.3) ax3.scatter(np.arange(30), np.arange(30) + 3 * np.random.randn(30)) plt.show() plt.subplots\\ \u901a\u8fc7matplotlib\u7684subplots\u65b9\u6cd5\uff0c\u4f7f\u7528\u5b50\u56fe\u7f51\u683c\u521b\u5efa\u56fe\u7247\uff0c\u7136\u540e\u8fd4\u56de\u5305\u542b\u4e86\u5df2\u751f\u6210\u5b50\u56fe\u5bf9\u8c61\u7684NumPy\u6570\u7ec4\\ \u6570\u7ec4axes\u53ef\u4ee5\u50cf\u4e8c\u7ef4\u6570\u7ec4\u90a3\u6837\u65b9\u4fbf\u5730\u8fdb\u884c\u7d22\u5f15\uff0c\u4f8b\u5982\uff0caxes[0, 1]\u3002\\ plt.subplots\u53c2\u6570\u9009\u9879\uff1a * nrows\uff1a\u53ef\u9009\u7684\uff0c\u6574\u578b\uff0c\u9ed8\u8ba4\u4e3a1\u3002\u5b50\u56fe\u7f51\u683c\u7684\u884c\u6570\u3002 * ncols\uff1a\u53ef\u9009\u7684\uff0c\u6574\u578b\uff0c\u9ed8\u8ba4\u4e3a1\u3002\u5b50\u56fe\u7f51\u683c\u7684\u5217\u6570\u3002 * sharex\uff1a\u53ef\u9009\u7684\uff0c\u9ed8\u8ba4\u4e3aFalse\u3002\u53ef\u9009\u503c\u5982\u4e0b\uff1a * True\u6216all\uff0c\u6240\u6709\u5b50\u56fe\u5171\u4eabx\u8f74 * False\u6216none\uff0c\u6bcf\u4e2a\u5b50\u56fe\u7684x\u8f74\u90fd\u662f\u72ec\u7acb\u7684 * row\uff0c\u6bcf\u884c\u5b50\u56fe\u5171\u4eab\u4e00\u4e2ax\u8f74 * col\uff0c\u6bcf\u5217\u5b50\u56fe\u5171\u4eab\u4e00\u4e2ax\u8f74 * sharey\uff1a\u7c7b\u4f3c\u4e8esharex\uff0c\u8bbe\u7f6ey\u8f74\u7684\u5171\u4eab\u65b9\u5f0f\u3002\u5f53\u67d0\u5217\u5171\u4eab\u4e00\u4e2ax\u8f74\u65f6\uff0c\u53ea\u6709\u5e95\u90e8\u7684\u5b50\u56fe\u4f1a\u521b\u5efax\u8f74\u6807\u8bb0\u3002\u540c\u6837\u7684\uff0c\u5982\u679c\u67d0\u884c\u5171\u4eab\u4e00\u4e2ay\u8f74\u65f6\uff0c\u53ea\u6709\u884c\u7684\u7b2c\u4e00\u5217\u5b50\u56fe\u4f1a\u521b\u5efay\u8f74\u6807\u8bb0\u3002 * squeeze \uff1a\u53ef\u9009\u7684\uff0c\u5e03\u5c14\u578b\uff0c\u9ed8\u8ba4\u4e3aTrue\u3002\u662f\u5426\u538b\u7f29\u8fd4\u56de\u7684Axes\u6570\u7ec4\u3002\u5982\u679c\u4e3aTrue\uff0c\u5f53\u53ea\u6709\u4e00\u4e2a\u5b50\u56fe\uff0c\u5373nrows\u548cncols\u5747\u4e3a1\u65f6\uff0c\u8fd4\u56de\u4e00\u4e2a\u5355\u72ec\u7684Axes\u5bf9\u8c61\uff0c\u5f53\u6709N 1\u548c1 M\u4e2a\u5b50\u56fe\u65f6\uff0c\u8fd4\u56de\u4e00\u4e2a\u4e00\u7ef4Axes\u5bf9\u8c61\u6570\u7ec4\u3002\u5f53\u6709N*M\u4e2a\u5b50\u56fe\uff08N>1\uff0cM>1\uff09\u65f6\uff0c\u8fd4\u56de\u4e8c\u7ef4\u6570\u7ec4\u3002\u5982\u679c\u4e3aFalse\uff0c\u5219\u603b\u662f\u8fd4\u56de\u4e8c\u7ef4\u6570\u7ec4\u3002 * num\uff1a\u53ef\u9009\u7684\uff0c\u6574\u578b\u6216\u5b57\u7b26\u4e32\uff0c\u9ed8\u8ba4\u4e3aNone\u3002\u662fmatplotlib.pyplot.figure\u7684\u5173\u952e\u5b57\uff0c\u7528\u4e8e\u8bbe\u7f6e\u56fe\u50cf\u6570\u5b57\u6216\u6807\u7b7e\u3002\u5982\u679c\u672a\u8bbe\u7f6e\u6b64\u53c2\u6570\uff0c\u4f1a\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u56fe\u50cf\uff0c\u5e76\u9012\u589e\u56fe\u50cf\u7f16\u53f7\uff0cfigure\u5bf9\u8c61\u4f1a\u5c06\u7f16\u53f7\u4fdd\u5b58\u5728number\u5c5e\u6027\u4e2d\u3002\u5982\u679c\u8bbe\u7f6e\u4e86\u6b64\u53c2\u6570\uff0c\u5e76\u4e14\u5b58\u5728\u53c2\u6570\u6307\u5b9a\u7684\u56fe\u50cf\uff0c\u5219\u4f1a\u8fd4\u56de\u6b64\u56fe\u50cf\u7684\u5f15\u7528\uff0c\u5982\u679c\u4e0d\u5b58\u5728\u5219\u4f1a\u521b\u5efa\u65b0\u7684\u56fe\u50cf\u5e76\u8fd4\u56de\u5b83\u7684\u5f15\u7528\u3002\u5982\u679c\u662f\u5b57\u7b26\u4e32\uff0c\u5219\u7a97\u53e3\u6807\u9898\u4f1a\u88ab\u8bbe\u7f6e\u4e3a\u6b64\u5b57\u7b26\u4e32\u7684\u503c\u3002 * subplot_kw\uff1a\u53ef\u9009\u7684\uff0c\u5b57\u5178\u7c7b\u578b\u3002\u5305\u542b\u4f20\u9012\u7ed9\u7528\u4e8e\u521b\u5efa\u5b50\u56fe\u7684\u8c03\u7528add_subplot\u7684\u5173\u952e\u5b57\u53c2\u6570\u3002 * gridspec_kw\uff1a\u53ef\u9009\u7684\uff0c\u5b57\u5178\u7c7b\u578b\u3002\u5305\u542b\u4f20\u9012\u7ed9\u7528\u4e8e\u521b\u5efa\u5b50\u56fe\u7f51\u683c\u7684GridSpec\u6784\u9020\u51fd\u6570\u7684\u5173\u952e\u5b57\u53c2\u6570\u3002 fig, axes = plt.subplots(2, 3) print(axes) # \u5c06\u751f\u6210\u7684axes\u5bf9\u8c61\u653e\u5165NumPy\u6570\u7ec4\u3002 # [[<AxesSubplot:> <AxesSubplot:> <AxesSubplot:>] # [<AxesSubplot:> <AxesSubplot:> <AxesSubplot:>]] \u8c03\u6574\u5b50\u56fe\u5468\u56f4\u7684\u95f4\u8ddd\\ \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0cmatplotlib\u4f1a\u5728\u5b50\u56fe\u7684\u5916\u90e8\u548c\u5b50\u56fe\u4e4b\u95f4\u7559\u51fa\u4e00\u5b9a\u7684\u95f4\u8ddd\u3002\\ \u8fd9\u4e2a\u95f4\u8ddd\u90fd\u662f\u76f8\u5bf9\u4e8e\u56fe\u7684\u9ad8\u5ea6\u548c\u5bbd\u5ea6\u6765\u6307\u5b9a\u7684\uff0c\u624b\u52a8\u8c03\u6574\u56fe\u7684\u5927\u5c0f\uff0c\u90a3\u4e48\u95f4\u8ddd\u4f1a\u81ea\u52a8\u8c03\u6574\u3002\\ \u4e5f\u53ef\u4ee5\u4f7f\u7528\u56fe\u5bf9\u8c61\u4e0a\u7684subplots_adjust\u65b9\u6cd5\u66f4\u6539\u95f4\u8ddd\uff0c\u4e5f\u53ef\u4ee5\u7528\u4f5c\u9876\u5c42\u51fd\u6570\u3002 fig, axes = plt.subplots(2, 2, sharex=True, sharey=True) for i in range(2): for j in range(2): axes[i, j].hist(np.random.randn(500), bins=50, color='k', alpha=0.5) plt.subplots_adjust(wspace=0, hspace=0) plt.show() \u4e0a\u9762\u8f93\u51fa\u56fe\u50cf\u7684\u8f74\u6807\u7b7e\u662f\u5b58\u5728\u91cd\u53e0\u7684\u3002matplotlib\u5e76\u4e0d\u68c0\u67e5\u6807\u7b7e\u662f\u5426\u91cd\u53e0\uff0c\u56e0\u6b64\u5728\u7c7b\u4f3c\u60c5\u51b5\u4e0b\u4f60\u9700\u8981\u901a\u8fc7\u663e\u5f0f\u6307\u5b9a\u523b\u5ea6\u4f4d\u7f6e\u548c\u523b\u5ea6\u6807\u7b7e\u7684\u65b9\u6cd5\u6765\u4fee\u590d\u8f74\u6807\u7b7e\u3002","title":"\u56fe\u7247\u4e0e\u5b50\u56fe"},{"location":"python/DataAnalysis/ch06/#_2","text":"matplotlib\u7684\u4e3b\u51fd\u6570plot\u63a5\u6536\u5e26\u6709x\u548cy\u8f74\u7684\u6570\u7ec4\u4ee5\u53ca\u4e00\u4e9b\u53ef\u9009\u7684\u5b57\u7b26\u4e32\u7f29\u5199\u53c2\u6570\u6765\u6307\u660e\u989c\u8272\u548c\u7ebf\u7c7b\u578b\u3002\\ \u4f8b\u5982\uff1a\u4e0b\u9762\u4e24\u79cd\u8868\u8fbe\u65b9\u5f0f\u6548\u679c\u4e00\u6837\\ ax.plot(x, y, 'g--')\\ ax.plot(x, y, linestyle='--', color='g') data = np.random.randn(30).cumsum() plt.plot(data, 'ko--') plt.show() # \u4e0a\u9762\u7684\u4ee3\u7801\u53ef\u4ee5\u5199\u5f97\u66f4\u4e3a\u663e\u5f0f\uff1a plt.plot(data, color='k', linestyle='dashed', marker='o') plt.show() plt.plot(data, color='k', linestyle='dashed', marker='o', label='Default') plt.show() plt.plot(data, color='k', linestyle='dashed', marker='o', label='steps-post', drawstyle='steps-post') plt.show()","title":"\u989c\u8272\u3001\u6807\u8bb0\u548c\u7ebf\u7c7b\u578b"},{"location":"python/DataAnalysis/ch06/#_3","text":"\u5bf9\u4e8e\u5927\u591a\u6570\u56fe\u8868\u4fee\u9970\u5de5\u4f5c\uff0c\u6709\u4e24\u79cd\u4e3b\u8981\u7684\u65b9\u5f0f\uff1a\u4f7f\u7528\u7a0b\u5e8f\u6027\u7684pyplot\u63a5\u53e3\uff08\u5373matplotlib.pyplot\uff09\u548c\u66f4\u591a\u9762\u5411\u5bf9\u8c61\u7684\u539f\u751fmatplotlib API\u3002\\ pyplot\u63a5\u53e3\u8bbe\u8ba1\u4e3a\u4ea4\u4e92\u5f0f\u4f7f\u7528\uff0c\u5305\u542b\u4e86\u50cfxlim\u3001xticks\u548cxticklabels\u7b49\u65b9\u6cd5\u3002\u8fd9\u4e9b\u65b9\u6cd5\u5206\u522b\u63a7\u5236\u4e86\u7ed8\u56fe\u8303\u56f4\u3001\u523b\u5ea6\u4f4d\u7f6e\u4ee5\u53ca\u523b\u5ea6\u6807\u7b7e\u3002 * \u5728\u6ca1\u6709\u51fd\u6570\u53c2\u6570\u7684\u60c5\u51b5\u4e0b\u8c03\u7528\uff0c\u8fd4\u56de\u5f53\u524d\u7684\u53c2\u6570\u503c\uff08\u4f8b\u5982plt.xlim()\u8fd4\u56de\u5f53\u524d\u7684x\u8f74\u7ed8\u56fe\u8303\u56f4\uff09\u3002 * \u4f20\u5165\u53c2\u6570\u7684\u60c5\u51b5\u4e0b\u8c03\u7528\uff0c\u5e76\u8bbe\u7f6e\u53c2\u6570\u503c\uff08\u4f8b\u5982plt.xlim\uff08[0, 10]\uff09\u4f1a\u5c06x\u8f74\u7684\u8303\u56f4\u8bbe\u7f6e\u4e3a0\u523010\uff09\u3002 \u6240\u6709\u7684\u8fd9\u4e9b\u65b9\u6cd5\u90fd\u4f1a\u5728\u5f53\u524d\u6d3b\u52a8\u7684\u6216\u6700\u8fd1\u521b\u5efa\u7684AxesSubplot\u4e0a\u751f\u6548\u3002\\ \u8fd9\u4e9b\u65b9\u6cd5\u4e2d\u7684\u6bcf\u4e00\u4e2a\u5bf9\u5e94\u4e8e\u5b50\u56fe\u81ea\u8eab\u7684\u4e24\u4e2a\u65b9\u6cd5\u3002\u6bd4\u5982xlim\u5bf9\u5e94\u4e8eax.get_lim\u548cax.set_lim\u3002\\ \u63a8\u8350\u4f7f\u7528subplot\u7684\u5b9e\u4f8b\u65b9\u6cd5\uff0c\u56e0\u4e3a\u8fd9\u6837\u66f4\u4e3a\u663e\u5f0f\uff08\u5c24\u5176\u662f\u5728\u5904\u7406\u591a\u4e2a\u5b50\u56fe\u65f6\uff09\u3002 data = np.random.randn(1000).cumsum() fig = plt.figure() # \u8bbe\u5b9a\u5b50\u56fe ax = fig.add_subplot(1, 1, 1) # \u8bbe\u5b9ax\u8f74\u5bf9\u5e94\u53c2\u6570\uff1a # \u8bbe\u5b9ax\u8f74\u523b\u5ea6 ax.set_xticks([0, 250, 500, 750, 1000]) # \u8bbe\u5b9ax\u8f74\u6807\u7b7e ax.set_xticklabels(['one(0)', 'two(250)', 'three(500)', 'four(750)', 'five(1000)'], rotation=30, fontsize='small') # \u7ed9x\u8f74\u4e00\u4e2a\u540d\u79f0 ax.set_xlabel('Stages') # \u8bbe\u5b9ay\u8f74\u5bf9\u5e94\u53c2\u6570\uff1a # \u672a\u6307\u5b9a\u7684\u53c2\u6570\u7531\u7cfb\u7edf\u9ed8\u8ba4\u4ea7\u751f\u3002 ax.set_ylabel('Steps') # \u7ed9\u5b50\u56fe\u6dfb\u52a0\u4e00\u4e2a\u6807\u9898 ax.set_title('My first matplotlib plot') # \u7ed9\u5b50\u56fe\u6dfb\u52a0\u4e00\u4e2a\u56fe\u4f8b\uff08\u5982\uff1a\u7ed9\u5b50\u56fe\u5185\u4e00\u4e2a\u56fe\u5f62\u66f2\u7ebf\u6dfb\u52a0\u4e00\u4e2alabel\uff09 ax.plot(data, 'k--', label='Label One') # loc\u53c2\u6570\u544a\u8bc9matplotlib\u5728\u54ea\u91cc\u653e\u7f6e\u56fe\u8868\u3002legend\u65b9\u6cd5\u6709\u591a\u4e2a\u5176\u4ed6\u7684\u4f4d\u7f6e\u53c2\u6570loc\u3002 ax.legend(loc='best') # \u6216\u8005plt.legend(loc='best') \u3002 # \u5728\u56fe\u5f62\u5750\u6807\u4e3a(0, 0)\u7684\u4f4d\u7f6e\u6dfb\u52a0\u4e00\u4e2alable ax.text(0, 0, 'Hello World1', family='monospace', fontsize=10) # \u7ed9\u5b50\u56fe\u6dfb\u52a0annotate\u3002\u7528\u4e00\u4e2a\u7bad\u5934\u6307\u5411\u8981\u6ce8\u91ca\u7684\u5730\u65b9\uff0c\u518d\u5199\u4e0a\u4e00\u6bb5\u8bdd\u7684\u884c\u4e3a\uff0c\u53eb\u505aannotate\u3002 # * s: \u6ce8\u91ca\u7684\u5185\u5bb9\uff0c\u4e00\u6bb5\u6587\u5b57\uff1b # * xytext: \u8fd9\u6bb5\u6587\u5b57\u6240\u5904\u7684\u4f4d\u7f6e; # * xy: \u7bad\u5934\u6307\u5411\u7684\u4f4d\u7f6e\uff1b # * arrowprops: \u901a\u8fc7arrowstyle\u8868\u660e\u7bad\u5934\u7684\u98ce\u683c\u6216\u79cd\u7c7b\u3002 ax.annotate('Zero is here!', xytext=(20, 20), xy=(1, 1), arrowprops=dict(arrowstyle='->')) # \u7ed9\u5b50\u56fe\u6dfb\u52a0\u4e00\u4e9b\u56fe\u5f62 # matplotlib\u542b\u6709\u8868\u793a\u591a\u79cd\u5e38\u89c1\u56fe\u5f62\u7684\u5bf9\u8c61\uff0c\u8fd9\u4e9b\u5bf9\u8c61\u7684\u5f15\u7528\u662fpatches\u3002 # \u4e00\u4e9b\u56fe\u5f62\uff0c\u6bd4\u5982Rectangle\uff08\u77e9\u5f62\uff09\u548cCircle\uff08\u5706\u5f62\uff09\uff0c\u53ef\u4ee5\u5728matplotlib.pyplot\u4e2d\u627e\u5230\uff0c\u4f46\u56fe\u5f62\u7684\u5168\u96c6\u4f4d\u4e8ematplotlib.patches\u3002 rect = plt.Rectangle((10, 5), 100, 15, color='k', alpha=0.3) circ = plt.Circle((200, 9), 95, color='b', alpha=0.3) pgon = plt.Polygon([[500, 5], [600, -5], [700, 30]], color='g', alpha=0.5) ax.add_patch(rect) ax.add_patch(circ) ax.add_patch(pgon) # \u5c06\u56fe\u7247\u4fdd\u5b58\u5230\u6587\u4ef6 # \u6587\u4ef6\u7c7b\u578b\u662f\u4ece\u6587\u4ef6\u6269\u5c55\u540d\u4e2d\u63a8\u65ad\u51fa\u6765\u7684\u3002\u6240\u4ee5\u5982\u679c\u4f60\u4f7f\u7528\uff0epdf\uff0c\u5219\u4f1a\u5f97\u5230\u4e00\u4e2aPDF\u3002 # \u51e0\u4e2a\u91cd\u8981\u7684\u9009\u9879\uff1adpi\uff0c\u5b83\u63a7\u5236\u6bcf\u82f1\u5bf8\u70b9\u6570\u7684\u5206\u8fa8\u7387\uff1bbbox_inches\uff0c\u53ef\u4ee5\u4fee\u526a\u5b9e\u9645\u56fe\u5f62\u7684\u7a7a\u767d\u3002 plt.savefig('../examples/figpath.png', dpi=400, bbox_inches='tight') # saveifg\u5e76\u975e\u4e00\u5b9a\u662f\u5199\u5230\u786c\u76d8\u7684\uff0c\u5b83\u53ef\u4ee5\u5c06\u56fe\u7247\u5199\u5165\u5230\u6240\u6709\u7684\u6587\u4ef6\u578b\u5bf9\u8c61\u4e2d\uff0c\u4f8b\u5982BytesIO buffer = BytesIO() plt.savefig(buffer) plot_data = buffer.getvalue() plt.show()","title":"\u523b\u5ea6\u3001\u6807\u7b7e\u548c\u56fe\u4f8b"},{"location":"python/DataAnalysis/ch06/#matplotlib","text":"matplotlib\u914d\u7f6e\u4e86\u914d\u8272\u65b9\u6848\u548c\u9ed8\u8ba4\u8bbe\u7f6e\uff0c\u901a\u8fc7\u5168\u5c40\u53c2\u6570\u6765\u5b9a\u5236\uff0c\u5305\u62ec\u56fe\u5f62\u5927\u5c0f\u3001\u5b50\u56fe\u95f4\u8ddd\u3001\u989c\u8272\u3001\u5b57\u4f53\u5927\u5c0f\u548c\u7f51\u683c\u6837\u5f0f\u7b49\u7b49\u3002\\ \u4f7f\u7528rc\u65b9\u6cd5\u662f\u4f7f\u7528Python\u7f16\u7a0b\u4fee\u6539\u914d\u7f6e\u7684\u4e00\u79cd\u65b9\u5f0f\u3002\\ rc\u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\u662f\u4f60\u60f3\u8981\u81ea\u5b9a\u4e49\u7684\u7ec4\u4ef6\uff0c\u6bd4\u5982\u2019figure'\u3001'axes'\u3001'xtick'\u3001'ytick'\u3001'grid'\u3001'legend\u2019\u7b49\u7b49\u3002\u4e4b\u540e\uff0c\u53ef\u4ee5\u6309\u7167\u5173\u952e\u5b57\u53c2\u6570\u7684\u5e8f\u5217\u6307\u5b9a\u65b0\u53c2\u6570\u3002\\ \u5b57\u5178\u662f\u4e00\u79cd\u5728\u7a0b\u5e8f\u4e2d\u8bbe\u7f6e\u9009\u9879\u7684\u7b80\u5355\u65b9\u5f0f\u3002\\ \u6bd4\u5982 plt.rc('figure', figsize=(10, 10)) font_options = { 'family': 'monospace', 'weight': 'bold', 'size': 'small' } plt.rc('font', **font_options)","title":"matplotlib\u8bbe\u7f6e"},{"location":"python/DataAnalysis/ch06/#pandasseaborn","text":"pandas\u81ea\u8eab\u6709\u5f88\u591a\u5185\u5efa\u65b9\u6cd5\u53ef\u4ee5\u7b80\u5316\u4eceDataFrame\u548cSeries\u5bf9\u8c61\u751f\u6210\u53ef\u89c6\u5316\u7684\u8fc7\u7a0b\u3002\\ \u53e6\u4e00\u4e2a\u5e93\u662fseaborn \uff08https://seaborn.pydata.org/\uff09\u3002seaborn\u7b80\u5316\u4e86\u5f88\u591a\u5e38\u7528\u53ef\u89c6\u5316\u7c7b\u578b\u7684\u751f\u6210\u3002\\ \u5bfc\u5165seaborn\u4f1a\u4fee\u6539\u9ed8\u8ba4\u7684matplotlib\u914d\u8272\u65b9\u6848\u548c\u7ed8\u56fe\u6837\u5f0f\uff0c\u8fd9\u4f1a\u63d0\u9ad8\u56fe\u8868\u7684\u53ef\u8bfb\u6027\u548c\u7f8e\u89c2\u6027\u3002\\ \u5373\u4f7f\u4e0d\u4f7f\u7528seaborn\u7684API\uff0c\u4e5f\u53ef\u4ee5\u5bfc\u5165seaborn\u6765\u4e3a\u901a\u7528matplotlib\u56fe\u8868\u63d0\u4f9b\u66f4\u597d\u7684\u89c6\u89c9\u7f8e\u89c2\u5ea6\u3002 import pandas as pd import numpy as np import matplotlib.pyplot as plt import seaborn as sns","title":"\u4f7f\u7528pandas\u548cseaborn\u7ed8\u56fe"},{"location":"python/DataAnalysis/ch06/#_4","text":"Series\u548cDataFrame\u90fd\u6709\u4e00\u4e2aplot\u5c5e\u6027\uff0c\u7528\u4e8e\u7ed8\u5236\u57fa\u672c\u7684\u56fe\u5f62\u3002\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0cplot()\u7ed8\u5236\u7684\u662f\u6298\u7ebf\u56fe\\ \\ Series\u7684plot\u53c2\u6570 * ax: matplotlib\u5b50\u56fe\u5bf9\u8c61axes\uff0c\u5982\u679c\u6ca1\u6709\u4f20\u503c\uff0c\u5219\u4f7f\u7528\u5f53\u524d\u6d3b\u52a8\u7684\u5b50\u56fe\u9ed8\u8ba4\u4f7f\u7528gca() * alpha: \u56fe\u7247\u4e0d\u900f\u660e\u5ea6\uff080\u52301\uff09 * data: \u6570\u636e\u5e8f\u5217Series * figsize: \u56fe\u50cf\u5c3a\u5bf8\uff0ctuple(\u5bbd\u5ea6\uff0c\u9ad8\u5ea6)\uff0c\u6ce8\u610f\u8fd9\u91cc\u7684\u5355\u4f4d\u662f\u82f1\u5bf8 * fontsize: \u8bbe\u7f6e\u523b\u5ea6\u6807\u7b7e\uff08xticks, yticks\uff09\u7684\u5927\u5c0f * grid: \u7f51\u683c\u7ebf\uff08\u9ed8\u8ba4\u662f\u6253\u5f00\u7684\uff09 * kind: \u56fe\u7c7b\u578b\uff1a\u6298\u7ebf\u56fe\uff0c\u67f1\u5f62\u56fe\uff0c\u6a2a\u5411\u67f1\u5f62\u56fe\uff0c\u76f4\u65b9\u56fe\uff0c\u7bb1\u7ebf\u56fe\uff0c\u5bc6\u5ea6\u56fe\uff0c\u9762\u79ef\u56fe\uff0c\u997c\u56fe * label: \u5217\u7684\u522b\u540d\uff0c\u4f5c\u7528\u5728\u56fe\u4f8b\u4e0a * legend: \u56fe\u4f8b * loglog: x,y\u8f74\u90fd\u4f7f\u7528\u5bf9\u6570\u523b\u5ea6 * logx: x\u8f74\u4f7f\u7528\u5bf9\u6570\u523b\u5ea6 * logy: y\u8f74\u4f7f\u7528\u5bf9\u6570\u523b\u5ea6 * mark_right: \u53cc y \u8f74\u65f6\uff0c\u5728\u56fe\u4f8b\u4e2d\u7684\u5217\u6807\u7b7e\u65c1\u589e\u52a0\u663e\u793a (right) \u6807\u8bc6 * position: \u67f1\u5f62\u56fe\u7684\u67f1\u5b50\u7684\u4f4d\u7f6e\u8bbe\u7f6e * rot: \u6539\u53d8\u523b\u5ea6\u6807\u7b7e\uff08xticks, yticks\uff09\u7684\u65cb\u8f6c\u5ea6\uff080\u5230360\uff09 * secondary_y: \u53cc y \u8f74\uff0c\u5728\u53f3\u8fb9\u7684\u7b2c\u4e8c\u4e2a y \u8f74 * style: \u7ebf\u7684\u6837\u5f0f\uff0c\u6bd4\u5982'ko--' * table: \u5c06\u6570\u636e\u4ee5\u8868\u683c\u7684\u5f62\u5f0f\u5c55\u793a\u51fa\u6765 * title: \u6807\u9898 * use_index: \u662f\u5426\u4f7f\u7528\u7d22\u5f15\u4f5c\u4e3ax\u523b\u5ea6\u6807\u7b7e * xerr: \u5e26\u8bef\u5dee\u7ebf\u7684\u67f1\u5f62\u56fe * xlim: \u6a2a\u8f74\u5750\u6807\u523b\u5ea6\u7684\u53d6\u503c\u8303\u56f4 * xticks: x\u8f74\u523b\u5ea6\u6807\u7b7e * yerr: \u5e26\u8bef\u5dee\u7ebf\u7684\u67f1\u5f62\u56fe * ylim: \u7eb5\u8f74\u5750\u6807\u523b\u5ea6\u7684\u53d6\u503c\u8303\u56f4 * yticks: y\u8f74\u523b\u5ea6\u6807\u7b7e * **kwds: matplotlib plot\u65b9\u6cd5\u7684\u5176\u4ed6\u53c2\u6570 \\ DataFrame\u7684plot\u53c2\u6570 * x : \u6307\u6570\u636e\u6846\u5217\u7684\u6807\u7b7e\u6216\u4f4d\u7f6e\u53c2\u6570 * y : \u6307\u6570\u636e\u6846\u5217\u7684\u6807\u7b7e\u6216\u4f4d\u7f6e\u53c2\u6570 * kind : * 'line' : \u6298\u7ebf\u56fe * 'bar' : \u6761\u5f62\u56fe * 'barh' : \u6a2a\u5411\u6761\u5f62\u56fe * 'hist' : \u67f1\u72b6\u56fe * 'box' : \u7bb1\u7ebf\u56fe * 'kde' : Kernel\u7684\u5bc6\u5ea6\u4f30\u8ba1\u56fe\uff0c\u4e3b\u8981\u5bf9\u67f1\u72b6\u56fe\u6dfb\u52a0Kernel \u6982\u7387\u5bc6\u5ea6\u7ebf * 'density' : 'kde' * 'area' : area plot * 'pie' : \u997c\u56fe * 'scatter' : \u6563\u70b9\u56fe \u9700\u8981\u4f20\u5165columns\u65b9\u5411\u7684\u7d22\u5f15 * 'hexbin' : hexbin plot * ax : \u5b50\u56fe(axes, \u4e5f\u53ef\u4ee5\u7406\u89e3\u6210\u5750\u6807\u8f74) \u8981\u5728\u5176\u4e0a\u8fdb\u884c\u7ed8\u5236\u7684matplotlib subplot\u5bf9\u8c61\u3002\u5982\u679c\u6ca1\u6709\u8bbe\u7f6e\uff0c\u5219\u4f7f\u7528\u5f53\u524dmatplotlib subplot\u3002\u5176\u4e2d\uff0c\u53d8\u91cf\u548c\u51fd\u6570\u901a\u8fc7\u6539\u53d8figure\u548caxes\u4e2d\u7684\u5143\u7d20\uff08\u4f8b\u5982\uff1atitle,label,\u70b9\u548c\u7ebf\u7b49\u7b49\uff09\u4e00\u8d77\u63cf\u8ff0figure\u548caxes\uff0c\u4e5f\u5c31\u662f\u5728\u753b\u5e03\u4e0a\u7ed8\u56fe\u3002 * subplots : \u5224\u65ad\u56fe\u7247\u4e2d\u662f\u5426\u6709\u5b50\u56fe * sharex : \u5982\u679c\u6709\u5b50\u56fe\uff0c\u5b50\u56fe\u5171x\u8f74\u523b\u5ea6\uff0c\u6807\u7b7e * sharey : \u5982\u679c\u6709\u5b50\u56fe\uff0c\u5b50\u56fe\u5171y\u8f74\u523b\u5ea6\uff0c\u6807\u7b7e * layout : \u5b50\u56fe\u7684\u884c\u5217\u5e03\u5c40 * figsize : \u56fe\u7247\u5c3a\u5bf8\u5927\u5c0f * use_index : \u9ed8\u8ba4\u7528\u7d22\u5f15\u505ax\u8f74 * title : \u56fe\u7247\u7684\u6807\u9898\u7528\u5b57\u7b26\u4e32 * grid : \u56fe\u7247\u662f\u5426\u6709\u7f51\u683c * legend : \u5b50\u56fe\u7684\u56fe\u4f8b\uff0c\u6dfb\u52a0\u4e00\u4e2asubplot\u56fe\u4f8b(\u9ed8\u8ba4\u4e3aTrue) * style : \u5bf9\u6bcf\u5217\u6298\u7ebf\u56fe\u8bbe\u7f6e\u7ebf\u7684\u7c7b\u578b * logx : \u8bbe\u7f6ex\u8f74\u523b\u5ea6\u662f\u5426\u53d6\u5bf9\u6570 * logy : \u8bbe\u7f6ey\u8f74\u523b\u5ea6\u662f\u5426\u53d6\u5bf9\u6570 * loglog : \u540c\u65f6\u8bbe\u7f6ex\uff0cy\u8f74\u523b\u5ea6\u662f\u5426\u53d6\u5bf9\u6570 * xticks : \u8bbe\u7f6ex\u8f74\u523b\u5ea6\u503c\uff0c\u5e8f\u5217\u5f62\u5f0f\uff08\u6bd4\u5982\u5217\u8868\uff09 * yticks : \u8bbe\u7f6ey\u8f74\u523b\u5ea6\uff0c\u5e8f\u5217\u5f62\u5f0f\uff08\u6bd4\u5982\u5217\u8868\uff09 * xlim : \u8bbe\u7f6e\u5750\u6807\u8f74x\u7684\u8303\u56f4\uff0c\u5217\u8868\u6216\u5143\u7ec4\u5f62\u5f0f * ylim : \u8bbe\u7f6e\u5750\u6807\u8f74y\u7684\u8303\u56f4\uff0c\u5217\u8868\u6216\u5143\u7ec4\u5f62\u5f0f * rot : \u8bbe\u7f6e\u8f74\u6807\u7b7e\uff08\u8f74\u523b\u5ea6\uff09\u7684\u663e\u793a\u65cb\u8f6c\u5ea6\u6570 * fontsize : \u8bbe\u7f6e\u8f74\u523b\u5ea6\u7684\u5b57\u4f53\u5927\u5c0f * colormap : \u8bbe\u7f6e\u56fe\u7684\u533a\u57df\u989c\u8272 * colorbar : \u56fe\u7247\u67f1\u5b50 * position : Specify relative alignments for bar plot layout. From 0 (left/bottom-end) to 1 (right/top-end). Default is 0.5 (center) * layout : \u5e03\u5c40(rows, columns) for the layout of the plot * table : \u5982\u679c\u4e3a\u6b63\uff0c\u5219\u9009\u62e9DataFrame\u7c7b\u578b\u7684\u6570\u636e\u5e76\u4e14\u8f6c\u6362\u5339\u914dmatplotlib\u7684\u5e03\u5c40 * yerr : \u5e26\u8bef\u5dee\u7ebf\u7684\u67f1\u5f62\u56fe * xerr : \u5e26\u8bef\u5dee\u7ebf\u7684\u67f1\u5f62\u56fe * stacked : \u751f\u6210\u5806\u79ef\u67f1\u72b6\u56fe * sort_columns : \u4ee5\u5b57\u6bcd\u8868\u987a\u5e8f\u7ed8\u5236\u5404\u5217\uff0c\u9ed8\u8ba4\u4f7f\u7528\u524d\u5217\u987a\u5e8f * secondary_y : \u8bbe\u7f6e\u7b2c\u4e8c\u4e2ay\u8f74\uff08\u53f3y\u8f74\uff09 * mark_right : When using a secondary_y axis, automatically mark the column labels with \u201c(right)\u201d in the legend * kwds : Options to pass to matplotlib plotting method \\ Series data1 = np.random.randn(10).cumsum(0) s1 = pd.Series( data1, index=np.arange(0, 100, 10), ) print(s1) fig, axes = plt.subplots(3, 1) # 3\u4e2a\u5b50\u56fe s1.plot.bar(ax=axes[0], color='k', alpha=0.7) # \u6761\u5f62\u56fe(\u5b50\u56fe0)\uff0ccolor='k\u2019(\u67f1\u5b50\u7684\u989c\u8272\u8bbe\u7f6e\u4e3a\u9ed1\u8272)\uff0calpha=0.7(\u56fe\u50cf\u7684\u586b\u5145\u8272\u8bbe\u7f6e\u4e3a\u90e8\u5206\u900f\u660e) s1.plot.barh(ax=axes[1], color='k', alpha=0.7) # \u6a2a\u5411\u6761\u5f62\u56fe(\u5b50\u56fe1) s1.value_counts().plot.pie(ax=axes[2]) # \u901a\u8fc7value_counts()\u5bf9Series\u503c\u9891\u7387\u8fdb\u884c\u53ef\u89c6\u5316 plt.show() DataFrame data2 = np.random.randn(10, 4).cumsum(0) df1 = pd.DataFrame( data2, columns=pd.Index(['A', 'B', 'C', 'D'], name='Genus'), index=np.arange(0, 100, 10) ) print(df1) fig, axes = plt.subplots(2, 1) # 2\u4e2a\u5b50\u56fe df1.plot.kde(ax=axes[0], alpha=0.7, grid='True', title='KDE Figure', sharex=True) df1.plot.bar(ax=axes[1], grid='True', title='Line Figure', sharex=True, use_index=False, stacked=True) # \u56e0\u4e3a\u5171\u4eabx\u8f74\uff0c\u6240\u4ee5\u5728KDE\u5b50\u56fe\u4e2d\u6307\u5b9ause_index=False\u770b\u4e0d\u51fa\u6548\u679c\u3002 # DataFrame\u7684\u5217\u540d\u79f0\"Genus\"\u88ab\u7528\u4f5c\u4e86\u56fe\u4f8b\u6807\u9898 # stacked=True\u6765\u751f\u6210\u5806\u79ef\u67f1\u72b6\u56fe plt.show() \u5b9e\u4f8b\uff1a\u7ed8\u5236\u4e00\u4e2a\u5806\u79ef\u67f1\u72b6\u56fe\uff0c\u7528\u4e8e\u5c55\u793a\u6bcf\u4e2a\u6d3e\u5bf9\u5728\u6bcf\u5929\u7684\u6570\u636e\u70b9\u5360\u6bd4\\ \u4ea4\u53c9\u8868\u662f\u4e00\u79cd\u5e38\u7528\u7684\u5206\u7c7b\u6c47\u603b\u8868\u683c\uff0c\u7528\u4e8e\u9891\u6570\u5206\u5e03\u7edf\u8ba1\uff0c\u4e3b\u8981\u4ef7\u503c\u5728\u4e8e\u63cf\u8ff0\u4e86\u53d8\u91cf\u95f4\u5173\u7cfb\u7684\u6df1\u523b\u542b\u4e49\u3002\\ \u867d\u7136\u4e24\u4e2a\uff08\u6216\u4ee5\u4e0a\uff09\u53d8\u91cf\u53ef\u4ee5\u662f\u5206\u7c7b\u7684\u6216\u6570\u91cf\u7684\uff0c\u4f46\u662f\u4ee5\u90fd\u662f\u5206\u7c7b\u7684\u60c5\u5f62\u6700\u4e3a\u5e38\u89c1\u3002\\ Pandas\u7684crosstab()\u65b9\u6cd5\u80fd\u591f\u5feb\u901f\u6784\u5efa\u4ea4\u53c9\u8868\uff0c\u5e76\u53ef\u4ee5\u901a\u8fc7\u53c2\u6570\u52a0\u4ee5\u4e2a\u6027\u5316\u7684\u8bbe\u7f6e\u3002\u5176\u4e2d\uff0c\u7b2c\u4e00\u4e2a\u53c2\u6570\u5c06\u6784\u6210\u4ea4\u53c9\u8868\u7684\u884c\uff0c\u7b2c\u4e8c\u4e2a\u53c2\u6570\u5c06\u6784\u6210\u4ea4\u53c9\u8868\u7684\u5217\\ \u5b98\u65b9\u6587\u6863: https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.crosstab.html tips = pd.read_csv('../examples/tips.csv') print(tips) # total_bill tip smoker day time size # 0 16.99 1.01 No Sun Dinner 2 # 1 10.34 1.66 No Sun Dinner 3 # 2 21.01 3.50 No Sun Dinner 3 # 3 23.68 3.31 No Sun Dinner 2 # 4 24.59 3.61 No Sun Dinner 4 # .. ... ... ... ... ... ... # 239 29.03 5.92 No Sat Dinner 3 # 240 27.18 2.00 Yes Sat Dinner 2 # 241 22.67 2.00 Yes Sat Dinner 2 # 242 17.82 1.75 No Sat Dinner 2 # 243 18.78 3.00 No Thur Dinner 2 # [244 rows x 6 columns] party_counts = pd.crosstab(tips['day'], tips['size']) # \u5bf9\u539f\u59cb\u6570\u636e\u7684day\u548csize\u8fdb\u884c\u805a\u5408\uff0c\u5e76\u6784\u5efa\u4ea4\u53c9\u8868\uff0cday\u4f5c\u4e3a\u884c\uff0csize\u4f5c\u4e3a\u5217\u3002 print(party_counts) # size 1 2 3 4 5 6 # day # Fri 1 16 1 1 0 0 # Sat 2 53 18 13 1 0 # Sun 0 39 15 18 3 1 # Thur 1 48 4 5 1 3 # \u6ca1\u6709\u592a\u591a\u76841\u4eba\u548c6\u4eba\u6d3e\u5bf9\uff0c\u820d\u5f03\u8fd9\u4e9b\u6570\u636e party_counts = party_counts.loc[:, 2:5] print(party_counts) # size 2 3 4 5 # day # Fri 16 1 1 0 # Sat 53 18 13 1 # Sun 39 15 18 3 # Thur 48 4 5 1 # \u6807\u51c6\u5316\u81f3\u548c\u4e3a1\uff1a\u6cbf0\u8f74\uff08\u884c\uff09\u5bf9\u6bcf\u5217\u6c42\u548c\uff0c\u6bcf\u884c\u5404\u503c\u9664\u4ee5\u548c\uff0c\u4ee5\u786e\u4fdd\u6bcf\u4e00\u884c\u7684\u503c\u548c\u4e3a1\uff0c\u7136\u540e\u8fdb\u884c\u7ed8\u56fe party_pcts = party_counts.div(party_counts.sum(1), axis=0) print(party_pcts) # size 2 3 4 5 # day # Fri 0.888889 0.055556 0.055556 0.000000 # Sat 0.623529 0.211765 0.152941 0.011765 # Sun 0.520000 0.200000 0.240000 0.040000 # Thur 0.827586 0.068966 0.086207 0.017241 party_counts.plot.bar() plt.show() \u53ef\u4ee5\u770b\u5230\u672c\u6570\u636e\u96c6\u4e2d\u7684\u6d3e\u5bf9\u6570\u91cf\u5728\u5468\u672b\u4f1a\u589e\u52a0 \u5b9e\u4f8b\uff1a\u4f7f\u7528seaborn\u8fdb\u884c\u6309\u661f\u671f\u65e5\u671f\u8ba1\u7b97\u5c0f\u8d39\u767e\u5206\u6bd4\\ Seaborn\u8981\u6c42\u6570\u636e\u7684\u8f93\u5165\u7c7b\u578b\u4e3apandas\u7684Dataframe\u6216Numpy \u6570\u7ec4 tips['tip_pct'] = tips['tip'] / (tips['total_bill'] - tips['tip']) print(tips) # total_bill tip smoker day time size tip_pct # 0 16.99 1.01 No Sun Dinner 2 0.063204 # 1 10.34 1.66 No Sun Dinner 3 0.191244 # 2 21.01 3.50 No Sun Dinner 3 0.199886 # 3 23.68 3.31 No Sun Dinner 2 0.162494 # 4 24.59 3.61 No Sun Dinner 4 0.172069 # .. ... ... ... ... ... ... ... # 239 29.03 5.92 No Sat Dinner 3 0.256166 # 240 27.18 2.00 Yes Sat Dinner 2 0.079428 # 241 22.67 2.00 Yes Sat Dinner 2 0.096759 # 242 17.82 1.75 No Sat Dinner 2 0.108899 # 243 18.78 3.00 No Thur Dinner 2 0.190114 # [244 rows x 7 columns] # barplot: \u5c06\u70b9\u4f30\u8ba1\u548c\u7f6e\u4fe1\u533a\u95f4\u663e\u793a\u4e3a\u77e9\u5f62\u6761\u3002\u6761\u5f62\u56fe\u8868\u793a\u5177\u6709\u6bcf\u4e2a\u77e9\u5f62\u7684\u9ad8\u5ea6\u7684\u6570\u503c\u53d8\u91cf\u7684\u96c6\u4e2d\u8d8b\u52bf\u7684\u4f30\u8ba1\uff0c\u5e76\u4e14\u4f7f\u7528\u8bef\u5dee\u6761\u63d0\u4f9b\u56f4\u7ed5\u8be5\u4f30\u8ba1\u7684\u4e0d\u786e\u5b9a\u6027\u7684\u4e00\u4e9b\u6307\u793a # \u67f1\u5b50\u7684\u503c\u662ftip_pct\u7684\u5e73\u5747\u503c # \u67f1\u5b50\u4e0a\u753b\u51fa\u7684\u9ed1\u7ebf\u4ee3\u8868\u7684\u662f95%\u7684\u7f6e\u4fe1\u533a\u95f4\uff08\u7f6e\u4fe1\u533a\u95f4\u53ef\u4ee5\u901a\u8fc7\u53ef\u9009\u53c2\u6570\u8fdb\u884c\u8bbe\u7f6e\uff09 # hue\u9009\u9879\uff0c\u5141\u8bb8\u6211\u4eec\u901a\u8fc7\u4e00\u4e2a\u989d\u5916\u7684\u5206\u7c7b\u503c\u5c06\u6570\u636e\u5206\u79bb # \u5e26\u53c2\u6570hue='time'\u65f6\uff0c\u56db\u4e2a\u4e0d\u540c\u989c\u8272\u7684\u67f1\u5b50\uff0c\u6bcf\u4e2a\u67f1\u5b50\u4e0a\u6709\u7f6e\u4fe1\u533a\u95f4\u7684\u9ed1\u7ebf\uff0c\u523b\u5ea60.00~0.30\uff0c\u6b65\u957f0.05 # \u4e0d\u5e26\u53c2\u6570hue='time'\u65f6\uff0c\u4e24\u4e2a\u4e0d\u540c\u989c\u8272\u7684\u67f1\u5b50\uff0c\u5206\u522b\u4ee3\u8868Dinner\u548cLunch\uff0c\u4e0d\u662f\u6bcf\u4e2a\u67f1\u5b50\u4e0a\u90fd\u6709\u7f6e\u4fe1\u533a\u95f4\u7684\u9ed1\u7ebf\uff0c\u523b\u5ea60.00~0.30\uff0c\u6b65\u957f0.05 sns.barplot(x='tip_pct', y='day', data=tips, hue='time', orient='h') # \u6839\u636e\u661f\u671f\u65e5\u671f\u548c\u65f6\u95f4\u8ba1\u7b97\u7684\u5c0f\u8d39\u767e\u5206\u6bd4 # sns.barplot(x='tip_pct', y='day', data=tips, orient='h') sns.set(style=\"darkgrid\", palette=\"deep\") # style=\"whitegrid\" plt.show()","title":"\u6298\u7ebf\u56fe"},{"location":"python/DataAnalysis/ch06/#_5","text":"\u76f4\u65b9\u56fe\u662f\u4e00\u79cd\u6761\u5f62\u56fe\uff0c\u7528\u4e8e\u7ed9\u51fa\u503c\u9891\u7387\u7684\u79bb\u6563\u663e\u793a\u3002\u6570\u636e\u70b9\u88ab\u5206\u6210\u79bb\u6563\u7684\uff0c\u5747\u5300\u95f4\u9694\u7684\u7bb1\uff0c\u5e76\u4e14\u7ed8\u5236\u6bcf\u4e2a\u7bb1\u4e2d\u6570\u636e\u70b9\u7684\u6570\u91cf\u3002 tips['tip_pct'].plot.hist(bins=50) # \u5c0f\u8d39\u767e\u5206\u6bd4\u7684\u76f4\u65b9\u56fe plt.show() \u5bc6\u5ea6\u56fe\u662f\u4e00\u79cd\u4e0e\u76f4\u65b9\u56fe\u76f8\u5173\u7684\u56fe\u8868\u7c7b\u578b\uff0c\u5b83\u901a\u8fc7\u8ba1\u7b97\u53ef\u80fd\u4ea7\u751f\u89c2\u6d4b\u6570\u636e\u7684\u8fde\u7eed\u6982\u7387\u5206\u5e03\u4f30\u8ba1\u800c\u4ea7\u751f\u3002\\ \u901a\u5e38\u7684\u505a\u6cd5\u662f\u5c06\u8fd9\u79cd\u5206\u5e03\u8fd1\u4f3c\u4e3a\u201c\u5185\u6838\u201d\u7684\u6df7\u5408\uff0c\u4e5f\u5c31\u662f\u50cf\u6b63\u6001\u5206\u5e03\u90a3\u6837\u7b80\u5355\u7684\u5206\u5e03\u3002\\ \u56e0\u6b64\uff0c\u5bc6\u5ea6\u56fe\u4e5f\u88ab\u79f0\u4e3a\u5185\u6838\u5bc6\u5ea6\u4f30\u8ba1\u56fe\uff08KDE\uff09\u3002 tips['tip_pct'].plot.density() # \u5c0f\u8d39\u767e\u5206\u6bd4\u5bc6\u5ea6\u56fe plt.show() \u7ed8\u5236\u76f4\u65b9\u56fe\u548c\u8fde\u7eed\u5bc6\u5ea6\u4f30\u8ba1sns.displot() sns.distplot(tips['tip_pct'], bins=100, color='k') plt.show() # FutureWarning: `distplot` is a deprecated function and will be removed in a future version. # Please adapt your code to use either `displot` (a figure-level function with similar flexibility) # or `histplot` (an axes-level function for histograms).","title":"\u76f4\u65b9\u56fe\u548c\u5bc6\u5ea6\u56fe"},{"location":"python/DataAnalysis/ch06/#_6","text":"\u70b9\u56fe\u6216\u6563\u70b9\u56fe\u53ef\u4ee5\u7528\u4e8e\u68c0\u9a8c\u4e24\u4e2a\u4e00\u7ef4\u6570\u636e\u5e8f\u5217\u4e4b\u95f4\u7684\u5173\u7cfb\u3002\\ \u5b9e\u4f8b\uff1a\u4ecestatsmodels\u9879\u76ee\u4e2d\u8f7d\u5165\u4e86macrodata\u6570\u636e\u96c6\uff0c\u5e76\u9009\u62e9\u4e86\u4e00\u4e9b\u53d8\u91cf\uff0c\u4e4b\u540e\u8ba1\u7b97\u5bf9\u6570\u5dee\u3002 macro = pd.read_csv('../examples/macrodata.csv') print(macro.head(5)) # year quarter realgdp realcons ... unemp pop infl realint # 0 1959.0 1.0 2710.349 1707.4 ... 5.8 177.146 0.00 0.00 # 1 1959.0 2.0 2778.801 1733.7 ... 5.1 177.830 2.34 0.74 # 2 1959.0 3.0 2775.488 1751.8 ... 5.3 178.657 2.74 1.09 # 3 1959.0 4.0 2785.204 1753.7 ... 5.6 179.386 0.27 4.06 # 4 1960.0 1.0 2847.699 1770.5 ... 5.2 180.007 2.31 1.19 # [5 rows x 14 columns] data = macro[['cpi', 'm1', 'tbilrate', 'unemp']] print(data.head(5)) # cpi m1 tbilrate unemp # 0 28.98 139.7 2.82 5.8 # 1 29.15 141.7 3.08 5.1 # 2 29.35 140.5 3.82 5.3 # 3 29.37 140.0 4.33 5.6 # 4 29.54 139.6 3.50 5.2 trans_data = np.log(data).diff().dropna() print(trans_data[-5:]) # cpi m1 tbilrate unemp # 198 -0.007904 0.045361 -0.396881 0.105361 # 199 -0.021979 0.066753 -2.277267 0.139762 # 200 0.002340 0.010286 0.606136 0.160343 # 201 0.008419 0.037461 -0.200671 0.127339 # 202 0.008894 0.012202 -0.405465 0.042560 \u7528seaborn\u7684regplot\u65b9\u6cd5\u7ed8\u5236\u6563\u70b9\u56fe\uff0c\u5e76\u62df\u5408\u51fa\u4e00\u4e2a\u6761\u7ebf\u6027\u56de\u5f52\u7ebf sns.regplot('m1', 'unemp', data=trans_data) plt.title('Changes in log %s versus log %s ' % ('m1', 'unemp')) plt.show() \u5728\u63a2\u7d22\u6027\u6570\u636e\u5206\u6790\u4e2d\uff0c\u80fd\u591f\u67e5\u770b\u4e00\u7ec4\u53d8\u91cf\u4e2d\u7684\u6240\u6709\u6563\u70b9\u56fe\u662f\u6709\u5e2e\u52a9\u7684\uff0c\u8fd9\u88ab\u79f0\u4e3a\u6210\u5bf9\u56fe\u6216\u6563\u70b9\u56fe\u77e9\u9635\u3002\\ Seaborn\u6709\u4e00\u4e2a\u65b9\u4fbf\u7684pairplot\u51fd\u6570\uff0c\u5b83\u652f\u6301\u5728\u5bf9\u89d2\u7ebf\u4e0a\u653e\u7f6e\u6bcf\u4e2a\u53d8\u91cf\u7684\u76f4\u65b9\u56fe\u6216\u5bc6\u5ea6\u4f30\u8ba1\u503c\u3002\\ plot_ksw\u53c2\u6570\u80fd\u591f\u5c06\u914d\u7f6e\u9009\u9879\u4f20\u9012\u7ed9\u975e\u5bf9\u89d2\u5143\u7d20\u4e0a\u7684\u5404\u4e2a\u7ed8\u56fe\u8c03\u7528\u3002 sns.pairplot(trans_data, diag_kind='kde', plot_kws={'alpha': 0.2}) plt.show()","title":"\u6563\u70b9\u56fe\u6216\u70b9\u56fe"},{"location":"python/DataAnalysis/ch06/#_7","text":"\u5982\u679c\u6570\u636e\u96c6\u6709\u989d\u5916\u7684\u5206\u7ec4\u7ef4\u5ea6\u600e\u4e48\u529e\uff1f\u4f7f\u7528\u5206\u9762\u7f51\u683c\u662f\u5229\u7528\u591a\u79cd\u5206\u7ec4\u53d8\u91cf\u5bf9\u6570\u636e\u8fdb\u884c\u53ef\u89c6\u5316\u7684\u65b9\u5f0f\u3002\\ seaborn\u62e5\u6709\u4e00\u4e2a\u6709\u6548\u7684\u5185\u5efa\u51fd\u6570factorplot\uff0c\u5b83\u53ef\u4ee5\u7b80\u5316\u591a\u79cd\u5206\u9762\u7ed8\u56fe\u3002 sns.factorplot(x='day', y='tip_pct', hue='time', col='smoker', kind='bar', data=tips[tips.tip_pct < 1]) plt.show() # UserWarning: The `factorplot` function has been renamed to `catplot`. # The original name will be removed in a future release. Please update your code. # Note that the default `kind` in `factorplot` (`'point'`) has changed `'strip'` in `catplot`. sns.catplot(x='day', y='tip_pct', hue='time', col='smoker', kind='box', data=tips[tips.tip_pct < 0.5]) plt.show() seaborn\u6587\u6863 https://seaborn.pydata.org/","title":"\u5206\u9762\u7f51\u683c\u548c\u5206\u7c7b\u6570\u636e"},{"location":"python/DataAnalysis/ch06/#python","text":"\u81ea2010\u5e74\u4ee5\u6765\uff0c\u5f88\u591a\u5f00\u53d1\u5de5\u4f5c\u90fd\u96c6\u4e2d\u5728\u521b\u5efaweb\u4ea4\u4e92\u5f0f\u56fe\u5f62\u4e0a\u3002\\ \u501f\u52a9\u50cf Bokeh \u548c Plotly \u8fd9\u6837\u7684\u5de5\u5177\uff0c\u5728web\u6d4f\u89c8\u5668\u4e2d\u521b\u5efa\u52a8\u6001\u7684\u3001\u4ea4\u4e92\u5f0f\u56fe\u50cf\u7684\u5de5\u4f5c\u73b0\u5728\u5df2\u7ecf\u53ef\u4ee5\u5b9e\u73b0\u3002\\ \u53ef\u89c6\u5316\u662f\u4e00\u4e2a\u6d3b\u8dc3\u7684\u7814\u7a76\u9886\u57df\u3002","title":"\u5176\u4ed6Python\u53ef\u89c6\u5316\u5de5\u5177"},{"location":"python/DataAnalysis/ch07/","text":"GroupBy\u673a\u5236 import pandas as pd import numpy as np \u5206\u7ec4\u673a\u5236 \u5206\u7ec4\u64cd\u4f5c\u7b2c\u4e00\u6b65\uff0c\u6570\u636e\u5305\u542b\u5728pandas\u5bf9\u8c61\u4e2d\uff0c\u53ef\u4ee5\u662fSeries\u3001DataFrame\u6216\u5176\u4ed6\u6570\u636e\u7ed3\u6784\u3002\\ \u4e4b\u540e\u6839\u636e\u4f60\u63d0\u4f9b\u7684\u4e00\u4e2a\u6216\u591a\u4e2a\u952e\u5206\u79bb\u5230\u5404\u4e2a\u7ec4\u4e2d\u3002\u5206\u7ec4\u952e\u53ef\u662f\u591a\u79cd\u5f62\u5f0f\u7684\uff0c\u5e76\u4e14\u952e\u4e0d\u4e00\u5b9a\u662f\u5b8c\u5168\u76f8\u540c\u7684\u7c7b\u578b(\u6ce8\u610f\u540e\u9762\u4ecb\u7ecd\u7684\u4e09\u4e2a\u65b9\u6cd5\u662f\u53ef\u4ee5\u4ea7\u751f\u7528\u4e8e\u5206\u9694\u5bf9\u8c61\u7684\u503c\u6570\u7ec4\u7684\u5feb\u6377\u65b9\u5f0f)\uff1a * \u4e0e\u9700\u8981\u5206\u7ec4\u7684\u8f74\u5411\u957f\u5ea6\u4e00\u81f4\u7684\u503c\u5217\u8868\u6216\u503c\u6570\u7ec4\u3002\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0cgroupby\u5728axis=0\u7684\u8f74\u5411\u4e0a\u5206\u7ec4\u3002 * DataFrame\u7684\u5217\u540d\u7684\u503c\u3002 * \u53ef\u4ee5\u5c06\u5206\u7ec4\u8f74\u5411\u4e0a\u7684\u503c\u548c\u5206\u7ec4\u540d\u79f0\u76f8\u5339\u914d\u7684\u5b57\u5178\u6216Series\u3002 * \u53ef\u4ee5\u5728\u8f74\u7d22\u5f15\u6216\u7d22\u5f15\u4e2d\u7684\u5355\u4e2a\u6807\u7b7e\u4e0a\u8c03\u7528\u7684\u51fd\u6570\u3002 \u8bf7\u6ce8\u610f\uff0c\u5206\u7ec4\u952e\u4e2d\u7684\u4efb\u4f55\u7f3a\u5931\u503c\u5c06\u88ab\u6392\u9664\u5728\u7ed3\u679c\u4e4b\u5916\u3002\\ \u5206\u79bb\u64cd\u4f5c\u662f\u5728\u6570\u636e\u5bf9\u8c61\u7684\u7279\u5b9a\u8f74\u5411\u4e0a\u8fdb\u884c\u7684\u3002\u4f8b\u5982\uff0cDataFrame\u53ef\u4ee5\u5728\u5b83\u7684\u884c\u65b9\u5411\uff08axis=0\uff09\u6216\u5217\u65b9\u5411\uff08axis=1\uff09\u8fdb\u884c\u5206\u7ec4\u3002\\ \u5206\u7ec4\u64cd\u4f5c\u540e\uff0c\u4e00\u4e2a\u51fd\u6570\u5c31\u53ef\u4ee5\u5e94\u7528\u5230\u5404\u4e2a\u7ec4\u4e2d\uff0c\u4ea7\u751f\u65b0\u7684\u503c\u3002\\ \u6700\u7ec8\uff0c\u6240\u6709\u51fd\u6570\u7684\u5e94\u7528\u7ed3\u679c\u4f1a\u8054\u5408\u4e3a\u4e00\u4e2a\u7ed3\u679c\u5bf9\u8c61\u3002 df = pd.DataFrame( { 'key1': ['a', 'a', 'b', 'b', 'a'], 'key2': ['one', 'two', 'one', 'two', 'one'], 'data1': [1, 3, 5, 7, 9], 'data2': [2, 4, 6, 8, 10] } ) \u6839\u636ekey1\u6807\u7b7e\u8ba1\u7b97data1\u5217\u7684\u5747\u503c\uff0c\u65b9\u6cd5\u4e00\uff0c\u8bbf\u95eedata1\u5e76\u4f7f\u7528key1\u5217\uff08\u5b83\u662f\u4e00\u4e2aSeries\uff09\u8c03\u7528groupby\u65b9\u6cd5\uff1a grouped = df['data1'].groupby(df['key1']) print(grouped) # <pandas.core.groupby.generic.SeriesGroupBy object at 0x7fdd2cb01430> grouped\u53d8\u91cf\u73b0\u5728\u662f\u4e00\u4e2aGroupBy\u5bf9\u8c61\uff0c\u5b83\u5b9e\u9645\u4e0a\u8fd8\u6ca1\u6709\u8fdb\u884c\u4efb\u4f55\u8ba1\u7b97\uff0c\u62e5\u6709\u4e00\u4e9b\u5173\u4e8e\u5206\u7ec4\u952edf['key1']\u7684\u4e00\u4e9b\u4e2d\u95f4\u6570\u636e\u7684\u4fe1\u606f \u4e0b\u9762\u5bf9grouped\u5bf9\u8c61\u505a\u4e00\u4e9b\u64cd\u4f5c\uff1a result = grouped.mean() # \u8ba1\u7b97\u5e73\u5747\u503c print(result) # key1 # a 4.333333 # b 6.000000 # Name: data1, dtype: float64 grouped_means = df['data1'].groupby([df['key1'], df['key2']]).mean() print(grouped_means) # key1 key2 # a one 5.0 # two 3.0 # b one 5.0 # two 7.0 # Name: data1, dtype: float64 \u4e0a\u9762\u4f8b\u5b50\u4f7f\u7528\u4e86\u4e24\u4e2a\u952e\u5bf9\u6570\u636e\u8fdb\u884c\u5206\u7ec4\uff0c\u5e76\u4e14\u7ed3\u679cSeries\u73b0\u5728\u62e5\u6709\u4e00\u4e2a\u5305\u542b\u552f\u4e00\u952e\u5bf9\u7684\u591a\u5c42\u7d22\u5f15 \u4e0b\u9762\u5bf9\u8ba1\u7b97\u7684\u5e73\u5747\u503c\uff08mean\uff09\u8fdb\u884c\u91cd\u5851\uff08unstack\uff09 print(grouped_means.unstack()) # key2 one two # key1 # a 5.0 3.0 # b 5.0 7.0 \u5206\u7ec4\u4fe1\u606f\u901a\u5e38\u5305\u542b\u5728\u540c\u4e00\u4e2aDataFrame\u4e2d\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u53ef\u4ee5\u4f20\u9012\u5217\u540d\uff08\u65e0\u8bba\u90a3\u4e9b\u5217\u540d\u662f\u5b57\u7b26\u4e32\u3001\u6570\u5b57\u6216\u5176\u4ed6Python\u5bf9\u8c61\uff09\u4f5c\u4e3a\u5206\u7ec4\u952e\uff1a \u4e0b\u9762\u4f8b\u5b50\u4e2ddf.groupby('key1').mean()\u7684\u7ed3\u679c\u91cc\u5e76\u6ca1\u6709key2\u5217\u3002\u8fd9\u662f\u56e0\u4e3adf['key2']\u5e76\u4e0d\u662f\u6570\u503c\u6570\u636e\uff0c\u5373df['key2']\u662f\u4e00\u4e2a\u5197\u4f59\u5217\uff0c\u56e0\u6b64\u88ab\u6392\u9664\u5728\u7ed3\u679c\u4e4b\u5916 result = df.groupby('key1').mean() print(result) # data1 data2 # key1 # a 4.333333 5.333333 # b 6.000000 7.000000 result = df.groupby(['key1', 'key2']).mean() print(result) # data1 data2 # key1 key2 # a one 5.0 6.0 # two 3.0 4.0 # b one 5.0 6.0 # two 7.0 8.0 result = df.groupby(['key1', 'key2']).size() print(result) # key1 key2https://zhuanlan.zhihu.com/p/126206923 # a one 2 # two 1 # b one 1 # two 1 # dtype: int64 \u904d\u5386\u5404\u5206\u7ec4 GroupBy\u5bf9\u8c61\u652f\u6301\u8fed\u4ee3\uff0c\u4f1a\u751f\u6210\u4e00\u4e2a\u5305\u542b\u7ec4\u540d\u548c\u6570\u636e\u5757\u76842\u7ef4\u5143\u7ec4\u5e8f\u5217\u3002 df = pd.DataFrame( { 'key1': ['a', 'a', 'b', 'b', 'a'], 'key2': ['one', 'two', 'one', 'two', 'one'], 'data1': [1, 3, 5, 7, 9], 'data2': [2, 4, 6, 8, 10] } ) \u5355\u4e2a\u5206\u7ec4\u952e\u7684\u60c5\u51b5: for name, group in df.groupby('key1'): print(name) print(group) # a # key1 key2 data1 data2 # 0 a one 1 2 # 1 a two 3 4 # 4 a one 9 10 # b # key1 key2 data1 data2 # 2 b one 5 6 # 3 b two 7 8 \u591a\u4e2a\u5206\u7ec4\u952e\u7684\u60c5\u51b5: \u5143\u7ec4\u4e2d\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\u662f\u952e\u503c\u7684\u5143\u7ec4 for (k1, k2), group in df.groupby(['key1', 'key2']): print((k1, k2)) print(group) # ('a', 'one') # key1 key2 data1 data2 # 0 a one 1 2 # 4 a one 9 10 # ('a', 'two') # key1 key2 data1 data2 # 1 a two 3 4 # ('b', 'one') # key1 key2 data1 data2 # 2 b one 5 6 # ('b', 'two') # key1 key2 data1 data2 # 3 b two 7 8 result = dict(list(df.groupby('key1'))) print(result) # df.groupby('key1')\u7684\u7ed3\u679c\u662f\u4e00\u4e2a\u5bf9\u8c61 # <pandas.core.groupby.generic.DataFrameGroupBy object at 0x7f240fe058b0> # list(df.groupby('key1'))\u7684\u7ed3\u679c\u662f\u5305\u542bFrameData\u7684\u7ed3\u6784\u7684\u5217\u8868list: # [ # ('a', key1 key2 data1 data2 # 0 a one 1 2 # 1 a two 3 4 # 4 a one 9 10), # ('b', key1 key2 data1 data2 # 2 b one 5 6 # 3 b two 7 8) # ] # dict(list(df.groupby('key1')))\u7684\u7ed3\u679c\u662f\u5305\u542bFrameData\u7684\u7ed3\u6784\u7684\u5b57\u5178dict # { # 'a': key1 key2 data1 data2 # 0 a one 1 2 # 1 a two 3 4 # 4 a one 9 10, # 'b': key1 key2 data1 data2 # 2 b one 5 6 # 3 b two 7 8 # } print(result['b']) # key1 key2 data1 data2 # 2 b one 5 6 # 3 b two 7 8 \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0cgroupby\u5728axis=0\u7684\u8f74\u5411\u4e0a\u5206\u7ec4\uff0c\u4e5f\u53ef\u4ee5\u5728\u5176\u4ed6\u4efb\u610f\u8f74\u5411\u4e0a\u8fdb\u884c\u5206\u7ec4\u3002 print(df.dtypes) # key1 object # key2 object # data1 int64 # data2 int64 # dtype: object grouped = df.groupby(df.dtypes, axis=1) print(grouped) # <pandas.core.groupby.generic.DataFrameGroupBy object at 0x7f4f6636df70> print(list(grouped)) # [ # (dtype('int64'), data1 data2 # 0 1 2 # 1 3 4 # 2 5 6 # 3 7 8 # 4 9 10), # (dtype('O'), key1 key2 # 0 a one # 1 a two # 2 b one # 3 b two # 4 a one) # ] \u6253\u5370\u5404\u5206\u7ec4\u5982\u4e0b\uff1a for dtype, group in grouped: print(dtype) print(group) # int64 # data1 data2 # 0 1 2 # 1 3 4 # 2 5 6 # 3 7 8 # 4 9 10 # object # key1 key2 # 0 a one # 1 a two # 2 b one # 3 b two # 4 a one \u9009\u62e9\u4e00\u5217\u6216\u6240\u6709\u5217\u7684\u5b50\u96c6 \u5bf9\u4e8e\u4eceDataFrame\u521b\u5efa\u7684GroupBy\u5bf9\u8c61\uff0c\u7528\u5217\u540d\u79f0\u6216\u5217\u540d\u79f0\u6570\u7ec4\u8fdb\u884c\u7d22\u5f15\u65f6\uff0c\u4f1a\u4ea7\u751f\u7528\u4e8e\u805a\u5408\u7684\u5217\u5b50\u96c6\u7684\u6548\u679c\\ \u5982\u679c\u4f20\u9012\u7684\u662f\u5217\u8868\u6216\u6570\u7ec4\uff0c\u5219\u6b64\u7d22\u5f15\u64cd\u4f5c\u8fd4\u56de\u7684\u5bf9\u8c61\u662f\u5206\u7ec4\u7684DataFrame\uff1b\\ \u5982\u679c\u53ea\u6709\u5355\u4e2a\u5217\u540d\u4f5c\u4e3a\u6807\u91cf\u4f20\u9012\uff0c\u5219\u4e3a\u5206\u7ec4\u7684Series\uff1b \u5bf9\u6bd4\u4e0b\u97624\u53e5\uff1a result = df.groupby('key1')['data1'] # \u5355\u4e2a\u5217\u540d print(result) # <pandas.core.groupby.generic.SeriesGroupBy object at 0x7fa988609040> for key, data in result: print(key) print(data) result = df['data1'].groupby(df['key1']) # \u5355\u4e2a\u5217\u540d print(result) # <pandas.core.groupby.generic.SeriesGroupBy object at 0x7fa988609910> for key, data in result: print(key) print(data) # a # 0 1 # 1 3 # 4 9 # Name: data1, dtype: int64 # b # 2 5 # 3 7 # Name: data1, dtype: int64 result = df.groupby('key1')[['data1']] # \u5217\u8868\u6216\u6570\u7ec4 print(result) # <pandas.core.groupby.generic.DataFrameGroupBy object at 0x7f32666176a0> for key, data in result: print(key) print(data) # a # key1 key2 data1 data2 # 0 a one 1 2 # 1 a two 3 4 # 4 a one 9 10 # b # key1 key2 data1 data2 # 2 b one 5 6 # 3 b two 7 8 result = df[['data1']].groupby(df['key1']) # \u5217\u8868\u6216\u6570\u7ec4 print(result) # <pandas.core.groupby.generic.DataFrameGroupBy object at 0x7f32666171f0> for key, data in result: print(key) print(data) # a # data1 # 0 1 # 1 3 # 4 9 # b # data1 # 2 5 # 3 7 \u4f7f\u7528\u5b57\u5178\u548cSeries\u5206\u7ec4 \u5206\u7ec4\u4fe1\u606f\u53ef\u80fd\u4f1a\u4ee5\u975e\u6570\u7ec4\u5f62\u5f0f\u5b58\u5728\u3002 \u751f\u6210\u4e00\u4e2a\u793a\u4f8bDataFrame people = pd.DataFrame( [[1, 3, 5, 7, 9], [0, 2, 4, 6, 8], [0, 2, 4, 6, 8], [1, 3, 5, 7, 9], [1, 2, 3, 4, 5]], columns=['a', 'b', 'c', 'd', 'e'], index=['Joe', 'Steve', 'Wes', 'Jim', 'Travis'] ) \u6dfb\u52a0\u4e00\u4e9bNA\u503c people.iloc[2:3, [1, 2]] = np.nan print(people) # a b c d e # Joe 1 3.0 5.0 7 9 # Steve 0 2.0 4.0 6 8 # Wes 0 NaN NaN 6 8 # Jim 1 3.0 5.0 7 9 # Travis 1 2.0 3.0 4 5 \u5047\u8bbe\u6709\u5982\u4e0b\u5404\u5217\u7684\u5206\u7ec4\u5bf9\u5e94\u5173\u7cfb\uff0c\u5e76\u4e14\u60f3\u628a\u5404\u5217\u6309\u7ec4\u7d2f\u52a0\uff1a mapping = { 'a': 'red', 'b': 'red', 'c': 'blue', 'd': 'blue', 'e': 'red', 'f': 'orange' # \u6ce8\u610f\uff1a\u5065f\u867d\u7136\u6ca1\u6709\u88ab\u7528\u5230\uff0c\u4f46\u4e0d\u5f71\u54cd\u5728\u8fd9\u91cc\u5b9a\u4e49\u3002 } \u628amapping\u8fd9\u4e2a\u5b57\u5178\u4f20\u7ed9groupby() by_column = people.groupby(mapping, axis=1) print(by_column.sum()) # blue red # Joe 12.0 13.0 # Steve 10.0 10.0 # Wes 6.0 8.0 # Jim 12.0 13.0 # Travis 7.0 8.0 Series\u4e5f\u6709\u76f8\u540c\u7684\u529f\u80fd\uff0c\u53ef\u4ee5\u89c6\u4e3a\u56fa\u5b9a\u5927\u5c0f\u7684\u6620\u5c04\uff1a map_services = pd.Series(mapping) print(map_services) # a red # b red # c blue # d blue # e red # f orange # dtype: object result = people.groupby(map_services, axis=1).count() print(result) # blue red # Joe 2 3 # Steve 2 3 # Wes 1 2 # Jim 2 3 # Travis 2 3 \u4f7f\u7528\u51fd\u6570\u5206\u7ec4 \u4e0e\u4f7f\u7528\u5b57\u5178\u6216Series\u5206\u7ec4\u76f8\u6bd4\uff0c\u4f7f\u7528Python\u51fd\u6570\u662f\u5b9a\u4e49\u5206\u7ec4\u5173\u7cfb\u7684\u4e00\u79cd\u66f4\u4e3a\u901a\u7528\u7684\u65b9\u5f0f\u3002\\ \u4f5c\u4e3a\u5206\u7ec4\u952e\u4f20\u9012\u7684\u51fd\u6570\u5c06\u4f1a\u6309\u7167\u6bcf\u4e2a\u7d22\u5f15\u503c\u8c03\u7528\u4e00\u6b21\uff0c\u540c\u65f6\u8fd4\u56de\u503c\u4f1a\u88ab\u7528\u4f5c\u5206\u7ec4\u540d\u79f0\u3002\u6ce8\u610f\uff1a\u51fd\u6570\u662f\u4f5c\u7528\u5728\u7d22\u5f15\u4e0a\u3002 result = people.groupby(len).sum() # \u4eba\u7684\u540d\u5b57\u662f\u7d22\u5f15\u503c\uff0c\u6839\u636e\u540d\u5b57\u7684\u957f\u5ea6\u6765\u8fdb\u884c\u5206\u7ec4 print(result) # a b c d e # 3 2 6.0 10.0 20 26 # 5 0 2.0 4.0 6 8 # 6 1 2.0 3.0 4 5 \u53ef\u4ee5\u5c06\u51fd\u6570\u4e0e\u6570\u7ec4\u3001\u5b57\u5178\u6216Series\u8fdb\u884c\u6df7\u5408\uff0c\u6240\u6709\u7684\u5bf9\u8c61\u90fd\u4f1a\u5728\u5185\u90e8\u8f6c\u6362\u4e3a\u6570\u7ec4 key_list = ['one', 'one', 'one', 'two', 'two'] result = people.groupby([len, key_list]).min() print(result) # a b c d e # 3 one 0 3.0 5.0 6 8 # two 1 3.0 5.0 7 9 # 5 one 0 2.0 4.0 6 8 # 6 two 1 2.0 3.0 4 5 \u6839\u636e\u7d22\u5f15\u5c42\u7ea7\u5206\u7ec4 \u6839\u636e\u5c42\u7ea7\u5206\u7ec4\u65f6\uff0c\u5c06\u5c42\u7ea7\u6570\u503c\u6216\u5c42\u7ea7\u540d\u79f0\u4f20\u9012\u7ed9level\u5173\u952e\u5b57\uff1a columns = pd.MultiIndex.from_arrays( [['US', 'US', 'US', 'JP', 'JP'], [1, 3, 5, 1, 3]], names=['cty', 'tenor'] ) hier_df = pd.DataFrame( [[1, 3, 5, 7, 9], [0, 2, 4, 6, 8], [1, 3, 5, 7, 9], [1, 2, 3, 4, 5]], columns=columns ) print(hier_df) # cty US JP # tenor 1 3 5 1 3 # 0 1 3 5 7 9 # 1 0 2 4 6 8 # 2 1 3 5 7 9 # 3 1 2 3 4 5 result = hier_df.groupby(level='cty', axis=1).count() print(result) # cty JP US # 0 2 3 # 1 2 3 # 2 2 3 # 3 2 3 \u6570\u636e\u805a\u5408 \u805a\u5408\u662f\u6307\u6240\u6709\u6839\u636e\u6570\u7ec4\u4ea7\u751f\u6807\u91cf\u503c\u7684\u6570\u636e\u8f6c\u6362\u8fc7\u7a0b\uff0c\u6bd4\u5982\uff1amean\u3001count\u3001min\u548csum\u7b49\u4e00\u4e9b\u805a\u5408\u64cd\u4f5c\u3002 import pandas as pd import numpy as np \u9884\u5907\u77e5\u8bc6\uff1a\\ \u5206\u4f4d\u6570\uff08Quantile\uff09\uff0c\u4e5f\u79f0\u5206\u4f4d\u70b9\uff0c\u662f\u6307\u5c06\u4e00\u4e2a\u968f\u673a\u53d8\u91cf\u7684\u6982\u7387\u5206\u5e03\u8303\u56f4\u5206\u4e3a\u51e0\u4e2a\u7b49\u4efd\u7684\u6570\u503c\u70b9\uff0c\u5206\u6790\u5176\u6570\u636e\u53d8\u91cf\u7684\u8d8b\u52bf\u3002\\ \u5e38\u7528\u7684\u5206\u4f4d\u6570\u6709 \u4e2d\u4f4d\u6570\u3001\u56db\u5206\u4f4d\u6570\u3001\u767e\u5206\u4f4d\u6570\u7b49\u3002\\ \u4e2d\u4f4d\u6570\uff08Medians\uff09\u662f\u4e00\u4e2a\u7edf\u8ba1\u5b66\u7684\u4e13\u6709\u540d\u8bcd\uff0c\u4ee3\u8868\u4e00\u4e2a\u6837\u672c\u3001\u79cd\u7fa4\u6216\u6982\u7387\u5206\u5e03\u4e2d\u7684\u4e00\u4e2a\u6570\u503c\uff0c\u53ef\u4ee5\u5c06\u6570\u503c\u96c6\u5408\u5212\u5206\u4e3a\u76f8\u7b49\u7684\u4e24\u90e8\u5206\u3002\\ \u5229\u7528pandas\u5e93\u8ba1\u7b97data = [6, 47, 49, 15, 42, 41, 7, 39, 43, 40, 36]\u7684\u5206\u4f4d\u6570\u3002\\ \u786e\u5b9ap\u5206\u4f4d\u6570\u4f4d\u7f6e\u7684\u4e24\u79cd\u65b9\u6cd5(n\u4e3a\u6570\u636e\u7684\u603b\u4e2a\u6570\uff0cp\u4e3a0-1\u4e4b\u95f4\u7684\u503c)\u3002\u5728python\u4e2d\u8ba1\u7b97\u5206\u4f4d\u6570\u4f4d\u7f6e\u7684\u65b9\u6848\u91c7\u7528position=1+(n-1) p\\ * position = (n+1) p * position = 1 + (n-1)*p \u6848\u4f8b1 data = pd.Series(np.array([6, 47, 49, 15, 42, 41, 7, 39, 43, 40, 36])) print(\"\u6570\u636e\u683c\u5f0f\uff1a\") print(np.sort(data)) # \u5fc5\u987b\u8981\u6392\u5e8f print('Q1:', data.quantile(.25)) print('Q2:', data.quantile(.5)) print('Q3:', data.quantile(.75)) # \u6570\u636e\u683c\u5f0f\uff1a # [ 6 7 15 36 39 40 41 42 43 47 49] # Q1: 25.5 # Q2: 40.0 # Q3: 42.5 # \u624b\u7b97\u8ba1\u7b97\u7ed3\u679c\uff1a # Q1\u7684p\u5206\u4f4d\u6570(0.25)\u4f4d\u7f6eposition = 1+(11-1)*0.25 = 3.5(\u53d6\u7b2c3\u4f4d) (p=0.25) Q1=15+(36-15)*0.5=25.5 (\u7b2c3\u30014\u4f4d\u7684\u5dee\u4e58\u4ee5\u4f59\u65700.5) # Q2\u7684p\u5206\u4f4d\u6570(0.5)\u4f4d\u7f6eposition = 1+(11-1)*0.5 = 6 (p=0.5) Q2=40 # Q3\u7684p\u5206\u4f4d\u6570(0.75)\u4f4d\u7f6eposition = 1+(11-1)*0.75 = 9 (p=0.75) Q3=42+(43-42)*0.5=42.5 # IQR = Q3 - Q1 = 17 \u6848\u4f8b2 df = pd.DataFrame(np.array([[1, 1], [2, 10], [3, 100], [4, 100]]), columns=['a', 'b']) print(\"\u6570\u636e\u539f\u59cb\u683c\u5f0f\uff1a\") print(df) print(\"\u8ba1\u7b97p=0.1\u65f6\uff0ca\u5217\u548cb\u5217\u7684\u5206\u4f4d\u6570\") print(df.quantile(.1)) # \u6570\u636e\u539f\u59cb\u683c\u5f0f\uff1a # a b # 0 1 1 # 1 2 10 # 2 3 100 # 3 4 100 # \u8ba1\u7b97p=0.1\u65f6\uff0ca\u5217\u548cb\u5217\u7684\u5206\u4f4d\u6570 # a 1.3 # b 3.7 # Name: 0.1, dtype: float64 # \u624b\u7b97\u8ba1\u7b97\u7ed3\u679c\uff1a # \u8ba1\u7b97a\u5217 # position=1+(4-1)*0.1=1.3 (\u53d6\u7b2c1\u4f4d) # Q1=1+(2-1)*0.3=1.3 (\u7b2c1\u30012\u4f4d\u7684\u5dee\u4e58\u4ee5\u4f59\u65700.3) # \u8ba1\u7b97b\u5217 # position=1+(4-1)*0.1=1.3 (\u53d6\u7b2c1\u4f4d) # Q1=1+(10-1)*0.3=3.7 (\u7b2c1\u30012\u4f4d\u7684\u5dee\u4e58\u4ee5\u4f59\u65700.3) \u4f18\u5316\u7684groupby\u65b9\u6cd5\uff1a * count: \u5206\u7ec4\u4e2d\u975eNA\u503c\u7684\u6570\u91cf * sum: \u975eNA\u503c\u7684\u7d2f\u52a0\u548c * mean: \u975eNA\u503c\u7684\u5e73\u5747\u503c * median: \u975eNA\u503c\u7684\u7b97\u672f\u4e2d\u4f4d\u6570 * std, var: \u65e0\u504f\u7684(n-1\u5206\u6bcd)\u6807\u51c6\u5dee\u548c\u65b9\u5dee * min, max: \u975eNA\u503c\u7684\u6700\u5c0f\u503c\u3001\u6700\u5927\u503c * prod: \u975eNA\u503c\u7684\u4e58\u79ef * first, last: \u975eNA\u503c\u7684\u7b2c\u4e00\u4e2a\u3001\u6700\u540e\u4e00\u4e2a\u503c df = pd.DataFrame( { 'key1': ['a', 'a', 'b', 'b', 'a'], 'key2': ['one', 'two', 'one', 'two', 'one'], 'data1': [1, 3, 5, 7, 9], 'data2': [2, 4, 6, 8, 10] } ) print(df) # key1 key2 data1 data2 # 0 a one 1 2 # 1 a two 3 4 # 2 b one 5 6 # 3 b two 7 8 # 4 a one 9 10 grouped = df.groupby('key1') result = grouped['data1'] for i in result: print(i) # ('a', 0 1 # 1 3 # 4 9 # Name: data1, dtype: int64) # ('b', 2 5 # 3 7 # Name: data1, dtype: int64) result = grouped['data1'].quantile(0.9) # quantile\u5206\u4f4d\u6570 print(result) # key1 # a 7.8 # b 6.8 # Name: data1, dtype: float64 # \u624b\u7b97\u8ba1\u7b97\u7ed3\u679c\uff1a # \u8ba1\u7b97a\u5217 # position=1+(3-1)*0.9=2.8 # Q1=3+(9-3)*0.8=7.8 # \u8ba1\u7b97b\u5217 # position=1+(2-1)*0.9=1.9 # Q1=5+(7-5)*0.9=6.8 \u4f7f\u7528\u81ea\u884c\u5236\u5b9a\u7684\u805a\u5408\uff0c\u5e76\u518d\u8c03\u7528\u5df2\u7ecf\u5728\u5206\u7ec4\u5bf9\u8c61\u4e0a\u5b9a\u4e49\u597d\u7684\u65b9\u6cd5\u3002 def peak_to_peak(arr): return arr.max() - arr.min() result = grouped.agg(peak_to_peak) print(result) # data1 data2 # key1 # a 8 8 # b 2 2 result = grouped.describe() print(result) # data1 ... data2 # count mean std min 25% ... min 25% 50% 75% max # key1 ... # a 3.0 4.333333 4.163332 1.0 2.0 ... 2.0 3.0 4.0 7.0 10.0 # b 2.0 6.000000 1.414214 5.0 5.5 ... 6.0 6.5 7.0 7.5 8.0 \u9010\u5217\u53ca\u591a\u51fd\u6570\u5e94\u7528 tips = pd.read_csv('../examples/tips.csv') tips['tip_pct'] = tips['tip'] / (tips['total_bill'] - tips['tip']) print(tips.head(5)) # total_bill tip smoker day time size tip_pct # 0 16.99 1.01 No Sun Dinner 2 0.063204 # 1 10.34 1.66 No Sun Dinner 3 0.191244 # 2 21.01 3.50 No Sun Dinner 3 0.199886 # 3 23.68 3.31 No Sun Dinner 2 0.162494 # 4 24.59 3.61 No Sun Dinner 4 0.172069 \u6839\u636e\u5404\u5217\u540c\u65f6\u4f7f\u7528\u591a\u4e2a\u51fd\u6570\u8fdb\u884c\u805a\u5408 grouped = tips.groupby(['day', 'smoker']) # for i in grouped: # print(i) # (('Fri', 'No'), total_bill tip smoker day time size tip_pct # 91 22.49 3.50 No Fri Dinner 2 0.184308 # ...... # 223 15.98 3.00 No Fri Lunch 3 0.231125) # (('Fri', 'Yes'), total_bill tip smoker day time size tip_pct # 90 28.97 3.00 Yes Fri Dinner 2 0.115518 # ...... # 226 10.09 2.00 Yes Fri Lunch 2 0.247219) # ...... grouped_pct = grouped['tip_pct'] for i in grouped_pct: print(i) # (('Fri', 'No'), 91 0.184308 # 94 0.166667 # ...... # Name: tip_pct, dtype: float64) # (('Fri', 'Yes'), 90 0.115518 # 92 0.210526 # ...... # Name: tip_pct, dtype: float64) # ...... \u5c06\u51fd\u6570\u540d\u4ee5\u5b57\u7b26\u4e32\u5f62\u5f0f\u4f20\u9012 result = grouped_pct.agg('mean') print(result) # day smoker # Fri No 0.179740 # Yes 0.216293 # Sat No 0.190412 # Yes 0.179833 # Sun No 0.193617 # Yes 0.322021 # Thur No 0.193424 # Yes 0.198508 # Name: tip_pct, dtype: float64 \u5982\u679c\u4f20\u9012\u7684\u662f\u51fd\u6570\u6216\u8005\u51fd\u6570\u540d\u7684\u5217\u8868\uff0c\u4f1a\u5f97\u5230\u4e00\u4e2a\u5217\u540d\u662f\u8fd9\u4e9b\u51fd\u6570\u540d\u7684DataFrame\u3002 \u4e0b\u9762\u4f20\u9012\u4e86\u805a\u5408\u51fd\u6570\u7684\u5217\u8868\u7ed9agg\u65b9\u6cd5\uff0c\u8fd9\u4e9b\u51fd\u6570\u4f1a\u5404\u81ea\u8fd0\u7528\u4e8e\u6570\u636e\u5206\u7ec4\u3002 result = grouped_pct.agg(['mean', 'std', peak_to_peak]) print(result) # mean std peak_to_peak # day smoker # Fri No 0.179740 0.039458 0.094263 # Yes 0.216293 0.077530 0.242219 # Sat No 0.190412 0.058626 0.352192 # Yes 0.179833 0.089496 0.446137 # Sun No 0.193617 0.060302 0.274897 # Yes 0.322021 0.538061 2.382107 # Thur No 0.193424 0.056065 0.284273 # Yes 0.198508 0.057170 0.219047 \u5982\u679c\u4f20\u9012\u7684\u662f(name, function)\u5143\u7ec4\u7684\u5217\u8868\uff0c\u6bcf\u4e2a\u5143\u7ec4\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\u5c06\u4f5c\u4e3aDataFrame\u7684\u5217\u540d\uff08\u53ef\u4ee5\u8ba4\u4e3a\u4e8c\u5143\u5143\u7ec4\u7684\u5217\u8868\u662f\u4e00\u79cd\u6709\u5e8f\u7684\u5bf9\u5e94\u5173\u7cfb\uff09\uff1a result = grouped_pct.agg([('foo', 'mean'), ('bar', np.std)]) # foo\u662fmean\u503c\u7684\u5217\u540d print(result) # foo bar # day smoker # Fri No 0.179740 0.039458 # Yes 0.216293 0.077530 # Sat No 0.190412 0.058626 # Yes 0.179833 0.089496 # Sun No 0.193617 0.060302 # Yes 0.322021 0.538061 # Thur No 0.193424 0.056065 # Yes 0.198508 0.057170 \u53ef\u4ee5\u6307\u5b9a\u5e94\u7528\u5230\u6240\u6709\u5217\u4e0a\u7684\u51fd\u6570\u5217\u8868\u6216\u6bcf\u4e00\u5217\u4e0a\u8981\u5e94\u7528\u7684\u4e0d\u540c\u51fd\u6570\u3002\\ \u4e0b\u9762\u4ea7\u751f\u7684DataFrame\u62e5\u6709\u5206\u5c42\u5217\uff0c\u4e0e\u5206\u522b\u805a\u5408\u6bcf\u4e00\u5217\uff0c\u518d\u4ee5\u5217\u540d\u4f5c\u4e3akeys\u53c2\u6570\u4f7f\u7528concat\u5c06\u7ed3\u679c\u62fc\u63a5\u5728\u4e00\u8d77\u7684\u7ed3\u679c\u76f8\u540c\u3002 functions = ['count', 'mean', 'max'] result = grouped[['tip_pct', 'total_bill']].agg(functions) print(result) # tip_pct total_bill # count mean max count mean max # day smoker # Fri No 4 0.179740 0.231125 4 18.420000 22.75 # Yes 15 0.216293 0.357737 15 16.813333 40.17 # Sat No 45 0.190412 0.412409 45 19.661778 48.33 # Yes 42 0.179833 0.483092 42 21.276667 50.81 # Sun No 57 0.193617 0.338101 57 20.506667 48.17 # Yes 19 0.322021 2.452381 19 24.120000 45.35 # Thur No 45 0.193424 0.362976 45 17.113111 41.19 # Yes 17 0.198508 0.317965 17 19.190588 43.11 # \u628a['tip_pct', 'total_bill']\u6539\u6210[['tip_pct', 'total_bill']]\uff0c\u5c31\u53ef\u4ee5\u907f\u514d\u62a5\u9519 # FutureWarning: Indexing with multiple keys (implicitly converted to a tuple of keys) will be deprecated, use a list instead. # result = grouped['tip_pct', 'total_bill'].agg(functions) print(result['tip_pct']) # count mean max # day smoker # Fri No 4 0.179740 0.231125 # Yes 15 0.216293 0.357737 # Sat No 45 0.190412 0.412409 # Yes 42 0.179833 0.483092 # Sun No 57 0.193617 0.338101 # Yes 19 0.322021 2.452381 # Thur No 45 0.193424 0.362976 # Yes 17 0.198508 0.317965 \u4e5f\u540c\u6837\u53ef\u4ee5\u4f20\u9012\u5177\u6709\u81ea\u5b9a\u4e49\u540d\u79f0\u7684\u5143\u7ec4\u5217\u8868\uff1a ftuples = [('Durchschnitt', 'mean'), ('Abweichung', np.var)] result = grouped[['tip_pct', 'total_bill']].agg(ftuples) print(result) # tip_pct total_bill # Durchschnitt Abweichung Durchschnitt Abweichung # day smoker # Fri No 0.179740 0.001557 18.420000 25.596333 # Yes 0.216293 0.006011 16.813333 82.562438 # Sat No 0.190412 0.003437 19.661778 79.908965 # Yes 0.179833 0.008010 21.276667 101.387535 # Sun No 0.193617 0.003636 20.506667 66.099980 # Yes 0.322021 0.289509 24.120000 109.046044 # Thur No 0.193424 0.003143 17.113111 59.625081 # Yes 0.198508 0.003268 19.190588 69.808518 \u8981\u5c06\u4e0d\u540c\u7684\u51fd\u6570\u5e94\u7528\u5230\u4e00\u4e2a\u6216\u591a\u4e2a\u5217\u4e0a\uff0c\u9700\u8981\u5c06\u542b\u6709\u5217\u540d\u4e0e\u51fd\u6570\u5bf9\u5e94\u5173\u7cfb\u7684\u5b57\u5178\u4f20\u9012\u7ed9agg\uff1a result = grouped.agg({'tip': np.max, 'size': 'sum'}) print(result) # tip size # day smoker # Fri No 3.50 9 # Yes 4.73 31 # Sat No 9.00 115 # Yes 10.00 104 # Sun No 6.00 167 # Yes 6.50 49 # Thur No 6.70 112 # Yes 5.00 40 result = grouped.agg({'tip_pct': ['min', 'max', 'mean', 'std']}) print(result) # tip_pct # min max mean std # day smoker # Fri No 0.136861 0.231125 0.179740 0.039458 # Yes 0.115518 0.357737 0.216293 0.077530 # Sat No 0.060217 0.412409 0.190412 0.058626 # Yes 0.036955 0.483092 0.179833 0.089496 # Sun No 0.063204 0.338101 0.193617 0.060302 # Yes 0.070274 2.452381 0.322021 0.538061 # Thur No 0.078704 0.362976 0.193424 0.056065 # Yes 0.098918 0.317965 0.198508 0.057170 \u53ea\u6709\u591a\u4e2a\u51fd\u6570\u5e94\u7528\u4e8e\u81f3\u5c11\u4e00\u4e2a\u5217\u65f6\uff0cDataFrame\u624d\u5177\u6709\u5206\u5c42\u5217\u3002 \u8fd4\u56de\u4e0d\u542b\u884c\u7d22\u5f15\u7684\u805a\u5408\u6570\u636e \u5728\u524d\u9762\u6240\u6709\u7684\u4f8b\u5b50\u4e2d\uff0c\u805a\u5408\u6570\u636e\u8fd4\u56de\u65f6\u90fd\u662f\u5e26\u6709\u7d22\u5f15\u7684\uff0c\u6709\u65f6\u7d22\u5f15\u662f\u5206\u5c42\u7684\uff0c\u7531\u552f\u4e00\u7684\u5206\u7ec4\u952e\u8054\u5408\u5f62\u6210\u3002\\ \u56e0\u4e3a\u4e0d\u662f\u6240\u6709\u7684\u60c5\u51b5\u4e0b\u90fd\u9700\u8981\u7d22\u5f15\uff0c\u6240\u4ee5\u5728\u5927\u591a\u6570\u60c5\u51b5\u4e0b\u53ef\u4ee5\u901a\u8fc7\u5411groupby\u4f20\u9012as_index=False\u6765\u7981\u7528\u5206\u7ec4\u952e\u4f5c\u4e3a\u7d22\u5f15\u7684\u884c\u4e3a\uff1a result = tips.groupby(['day', 'smoker'], as_index=False).mean() print(result) # day smoker total_bill tip size tip_pct # 0 Fri No 18.420000 2.812500 2.250000 0.179740 # 1 Fri Yes 16.813333 2.714000 2.066667 0.216293 # 2 Sat No 19.661778 3.102889 2.555556 0.190412 # 3 Sat Yes 21.276667 2.875476 2.476190 0.179833 # 4 Sun No 20.506667 3.167895 2.929825 0.193617 # 5 Sun Yes 24.120000 3.516842 2.578947 0.322021 # 6 Thur No 17.113111 2.673778 2.488889 0.193424 # 7 Thur Yes 19.190588 3.030000 2.352941 0.198508 \u901a\u8fc7\u5728\u7ed3\u679c\u4e0a\u8c03\u7528reset_index\u4e5f\u53ef\u4ee5\u83b7\u5f97\u540c\u6837\u7684\u7ed3\u679c\u3002\u4f7f\u7528as_index=False\u53ef\u4ee5\u907f\u514d\u4e00\u4e9b\u4e0d\u5fc5\u8981\u7684\u8ba1\u7b97\u3002 result = tips.groupby(['day', 'smoker']).mean() print(result.reset_index()) # day smoker total_bill tip size tip_pct # 0 Fri No 18.420000 2.812500 2.250000 0.179740 # 1 Fri Yes 16.813333 2.714000 2.066667 0.216293 # 2 Sat No 19.661778 3.102889 2.555556 0.190412 # 3 Sat Yes 21.276667 2.875476 2.476190 0.179833 # 4 Sun No 20.506667 3.167895 2.929825 0.193617 # 5 Sun Yes 24.120000 3.516842 2.578947 0.322021 # 6 Thur No 17.113111 2.673778 2.488889 0.193424 # 7 Thur Yes 19.190588 3.030000 2.352941 0.198508 print(result) # total_bill tip size tip_pct # day smoker # Fri No 18.420000 2.812500 2.250000 0.179740 # Yes 16.813333 2.714000 2.066667 0.216293 # Sat No 19.661778 3.102889 2.555556 0.190412 # Yes 21.276667 2.875476 2.476190 0.179833 # Sun No 20.506667 3.167895 2.929825 0.193617 # Yes 24.120000 3.516842 2.578947 0.322021 # Thur No 17.113111 2.673778 2.488889 0.193424 # Yes 19.190588 3.030000 2.352941 0.198508 \u5e94\u7528\uff1a\u901a\u7528\u62c6\u5206-\u5e94\u7528-\u8054\u5408 import pandas as pd import numpy as np import statsmodels.api as sm GroupBy\u65b9\u6cd5\u6700\u5e38\u89c1\u7684\u76ee\u7684\u662fapply\uff08\u5e94\u7528\uff09\u3002apply\u5c06\u5bf9\u8c61\u62c6\u5206\u6210\u591a\u5757\uff0c\u7136\u540e\u5728\u6bcf\u4e00\u5757\u4e0a\u8c03\u7528\u4f20\u9012\u7684\u51fd\u6570\uff0c\u4e4b\u540e\u5c1d\u8bd5\u5c06\u6bcf\u4e00\u5757\u62fc\u63a5\u5230\u4e00\u8d77\u3002 \u6839\u636e\u4e0b\u9762\u7684\u5c0f\u8d39\u6570\u636e\u96c6\uff0c\u6309\u7ec4\u9009\u51fa\u5c0f\u8d39\u767e\u5206\u6bd4\uff08tip-pct\uff09\u6700\u9ad8\u7684\u4e94\u7ec4\u3002 tips = pd.read_csv('../examples/tips.csv') tips['tip_pct'] = tips['tip'] / (tips['total_bill'] - tips['tip']) \u6837\u672c\u6570\u636e print(tips.head(5)) # total_bill tip smoker day time size tip_pct # 0 16.99 1.01 No Sun Dinner 2 0.063204 # 1 10.34 1.66 No Sun Dinner 3 0.191244 # 2 21.01 3.50 No Sun Dinner 3 0.199886 # 3 23.68 3.31 No Sun Dinner 2 0.162494 # 4 24.59 3.61 No Sun Dinner 4 0.172069 \u9996\u5148\uff0c\u5199\u4e00\u4e2a\u53ef\u4ee5\u5728\u7279\u5b9a\u5217\u4e2d\u9009\u51fa\u6700\u5927\u503c\u6240\u5728\u884c\u7684\u51fd\u6570\uff1a\\ \u6dfb\u52a0\u4e86\u5347\u5e8f\uff0c\u7ed3\u679c\u8f93\u51fa\u6700\u540e5\u884c\uff08\u6700\u540e\u76845\u884c\u4e5f\u662f\u6700\u5927\u76845\u4e2atip_tcp\u8bb0\u5f55\uff09 def top(df, n=5, column='tip_pct'): return df.sort_values(by=column, ascending=True)[-n:] result = top(tips, n=6) print(result) # \u7b49\u4ef7\u65b9\u5f0f\uff1a # result = tips.sort_values('tip_pct')[-6:] # print(result) # total_bill tip smoker day time size tip_pct # 109 14.31 4.00 Yes Sat Dinner 2 0.387973 # 183 23.17 6.50 Yes Sun Dinner 4 0.389922 # 232 11.61 3.39 No Sat Dinner 2 0.412409 # 67 3.07 1.00 Yes Sat Dinner 1 0.483092 # 178 9.60 4.00 Yes Sun Dinner 2 0.714286 # 172 7.25 5.15 Yes Sun Dinner 2 2.452381 \u5982\u679c\u6309\u7167smoker\u8fdb\u884c\u5206\u7ec4\uff0c\u4e4b\u540e\u8c03\u7528apply\uff0c\u4f1a\u5f97\u5230\u4ee5\u4e0b\u7ed3\u679c\uff1a\\ top\u51fd\u6570\u5728DataFrame\u7684\u6bcf\u4e00\u884c\u5206\u7ec4\u4e0a\u88ab\u8c03\u7528\uff0c\u4e4b\u540e\u4f7f\u7528pandas.concat\u5c06\u51fd\u6570\u7ed3\u679c\u7c98\u8d34\u5728\u4e00\u8d77\uff0c\u5e76\u4f7f\u7528\u5206\u7ec4\u540d\u4f5c\u4e3a\u5404\u7ec4\u7684\u6807\u7b7e\u3002\\ \u56e0\u6b64\u7ed3\u679c\u5305\u542b\u4e00\u4e2a\u5206\u5c42\u7d22\u5f15\uff0c\u8be5\u5206\u5c42\u7d22\u5f15\u7684\u5185\u90e8\u5c42\u7ea7\u5305\u542b\u539fDataFrame\u7684\u7d22\u5f15\u503c\u3002 result = tips.groupby('smoker').apply(top) print(result) # total_bill tip smoker day time size tip_pct # smoker # No 88 24.71 5.85 No Thur Lunch 2 0.310180 # 185 20.69 5.00 No Sun Dinner 5 0.318674 # 51 10.29 2.60 No Sun Dinner 2 0.338101 # 149 7.51 2.00 No Thur Lunch 2 0.362976 # 232 11.61 3.39 No Sat Dinner 2 0.412409 # Yes 109 14.31 4.00 Yes Sat Dinner 2 0.387973 # 183 23.17 6.50 Yes Sun Dinner 4 0.389922 # 67 3.07 1.00 Yes Sat Dinner 1 0.483092 # 178 9.60 4.00 Yes Sun Dinner 2 0.714286 # 172 7.25 5.15 Yes Sun Dinner 2 2.452381 \u5982\u679c\u9664\u4e86\u5411apply\u4f20\u9012\u51fd\u6570\uff0c\u8fd8\u4f20\u9012\u5176\u4ed6\u53c2\u6570\u6216\u5173\u952e\u5b57\u7684\u8bdd\uff0c\u4f60\u53ef\u4ee5\u628a\u8fd9\u4e9b\u653e\u5728\u51fd\u6570\u540e\u8fdb\u884c\u4f20\u9012 result = tips.groupby('smoker').apply(top, n=1, column='total_bill') print(result) # \u8fd92\u884c\u90fd\u662fsmoker\u662fyes\u548cno\u65f6\u6700\u5927total_bill\u503c\u6240\u5728\u884c\u3002 # total_bill tip smoker day time size tip_pct # smoker # No 212 48.33 9.0 No Sat Dinner 4 0.228833 # Yes 170 50.81 10.0 Yes Sat Dinner 3 0.245038 \u5728GroupBy\u5bf9\u8c61\u4e0a\u8c03\u7528describe\u65b9\u6cd5 result = tips.groupby('smoker')['tip_pct'].describe() print(result) # count mean std ... 50% 75% max # smoker ... # No 151.0 0.192237 0.057665 ... 0.184308 0.227015 0.412409 # Yes 93.0 0.218176 0.254295 ... 0.181818 0.242326 2.452381 # [2 rows x 8 columns] print(result.unstack('smoker')) # \u7c7b\u4f3c\u4e8e\u8f6c\u7f6e # smoker # count No 151.000000 # Yes 93.000000 # mean No 0.192237 # Yes 0.218176 # std No 0.057665 # Yes 0.254295 # min No 0.060217 # Yes 0.036955 # 25% No 0.158622 # Yes 0.119534 # 50% No 0.184308 # Yes 0.181818 # 75% No 0.227015 # Yes 0.242326 # max No 0.412409 # Yes 2.452381 # dtype: float64 \u5728GroupBy\u5bf9\u8c61\u7684\u5185\u90e8\uff0c\u5f53\u8c03\u7528\u50cfdescribe\u8fd9\u6837\u7684\u65b9\u6cd5\u65f6\uff0c\u5b9e\u9645\u4e0a\u662f\u4ee5\u4e0b\u4ee3\u7801\u7684\u7b80\u5199\uff1a grouped = tips.groupby(['smoker']) f = lambda x: x.describe() result = grouped.apply(f) print(result) # total_bill tip size tip_pct # smoker # No count 151.000000 151.000000 151.000000 151.000000 # mean 19.188278 2.991854 2.668874 0.192237 # std 8.255582 1.377190 1.017984 0.057665 # min 7.250000 1.000000 1.000000 0.060217 # 25% 13.325000 2.000000 2.000000 0.158622 # 50% 17.590000 2.740000 2.000000 0.184308 # 75% 22.755000 3.505000 3.000000 0.227015 # max 48.330000 9.000000 6.000000 0.412409 # Yes count 93.000000 93.000000 93.000000 93.000000 # mean 20.756344 3.008710 2.408602 0.218176 # std 9.832154 1.401468 0.810751 0.254295 # min 3.070000 1.000000 1.000000 0.036955 # 25% 13.420000 2.000000 2.000000 0.119534 # 50% 17.920000 3.000000 2.000000 0.181818 # 75% 26.860000 3.680000 3.000000 0.242326 # max 50.810000 10.000000 5.000000 2.452381 \u538b\u7f29\u5206\u7ec4\u952e \u5728\u524d\u9762\u7684\u4f8b\u5b50\u4e2d\u6240\u5f97\u5230\u7684\u5bf9\u8c61\uff0c\u90fd\u5177\u6709\u5206\u7ec4\u952e\u6240\u5f62\u6210\u7684\u5206\u5c42\u7d22\u5f15\u4ee5\u53ca\u6bcf\u4e2a\u539f\u59cb\u5bf9\u8c61\u7684\u7d22\u5f15\u3002\\ \u4e5f\u53ef\u4ee5\u901a\u8fc7\u5411groupby\u4f20\u9012group_keys=False\u6765\u7981\u7528\u8fd9\u4e2a\u529f\u80fd\u3002 result = tips.groupby('smoker', group_keys=True).apply(top) print(result) # total_bill tip smoker day time size tip_pct # smoker # No 88 24.71 5.85 No Thur Lunch 2 0.310180 # 185 20.69 5.00 No Sun Dinner 5 0.318674 # 51 10.29 2.60 No Sun Dinner 2 0.338101 # 149 7.51 2.00 No Thur Lunch 2 0.362976 # 232 11.61 3.39 No Sat Dinner 2 0.412409 # Yes 109 14.31 4.00 Yes Sat Dinner 2 0.387973 # 183 23.17 6.50 Yes Sun Dinner 4 0.389922 # 67 3.07 1.00 Yes Sat Dinner 1 0.483092 # 178 9.60 4.00 Yes Sun Dinner 2 0.714286 # 172 7.25 5.15 Yes Sun Dinner 2 2.452381 result = tips.groupby('smoker', group_keys=False).apply(top) print(result) # total_bill tip smoker day time size tip_pct # 88 24.71 5.85 No Thur Lunch 2 0.310180 # 185 20.69 5.00 No Sun Dinner 5 0.318674 # 51 10.29 2.60 No Sun Dinner 2 0.338101 # 149 7.51 2.00 No Thur Lunch 2 0.362976 # 232 11.61 3.39 No Sat Dinner 2 0.412409 # 109 14.31 4.00 Yes Sat Dinner 2 0.387973 # 183 23.17 6.50 Yes Sun Dinner 4 0.389922 # 67 3.07 1.00 Yes Sat Dinner 1 0.483092 # 178 9.60 4.00 Yes Sun Dinner 2 0.714286 # 172 7.25 5.15 Yes Sun Dinner 2 2.452381 \u5206\u4f4d\u6570\u4e0e\u6876\u5206\u6790 \u7b2c8\u7ae0\u4e2d\uff0cpandas\u6709\u4e00\u4e9b\u5de5\u5177\uff0c\u5c24\u5176\u662fcut\u548cqcut\uff0c\u7528\u4e8e\u5c06\u6570\u636e\u6309\u7167\u4f60\u9009\u62e9\u7684\u7bb1\u4f4d\u6216\u6837\u672c\u5206\u4f4d\u6570\u8fdb\u884c\u5206\u6876\u3002\\ \u4e0egroupby\u65b9\u6cd5\u4e00\u8d77\u4f7f\u7528\u8fd9\u4e9b\u51fd\u6570\u53ef\u4ee5\u5bf9\u6570\u636e\u96c6\u66f4\u65b9\u4fbf\u5730\u8fdb\u884c\u5206\u6876\u6216\u5206\u4f4d\u5206\u6790\u3002 \u590d\u4e60\uff1a\\ \u673a\u68b0\u5b66\u4e60\u4e2d\u7684\u5206\u7bb1\u5904\u7406\\ \u5728\u673a\u68b0\u5b66\u4e60\u4e2d\u7ecf\u5e38\u4f1a\u5bf9\u6570\u636e\u8fdb\u884c\u5206\u7bb1\u5904\u7406\u7684\u64cd\u4f5c\uff0c \u4e5f\u5c31\u662f\u628a\u4e00\u6bb5\u8fde\u7eed\u7684\u503c\u5207\u5206\u6210\u82e5\u5e72\u6bb5\uff0c\u6bcf\u4e00\u6bb5\u7684\u503c\u770b\u6210\u4e00\u4e2a\u5206\u7c7b\u3002\u8fd9\u4e2a\u628a\u8fde\u7eed\u503c\u8f6c\u6362\u6210\u79bb\u6563\u503c\u7684\u8fc7\u7a0b\uff0c\u6211\u4eec\u53eb\u505a\u5206\u7bb1\u5904\u7406\u3002\\ \u6bd4\u5982\uff0c\u628a\u5e74\u9f84\u630915\u5c81\u5212\u5206\u6210\u4e00\u7ec4\uff0c0-15\u5c81\u53eb\u505a\u5c11\u5e74\uff0c16-30\u5c81\u53eb\u505a\u9752\u5e74\uff0c31-45\u5c81\u53eb\u505a\u58ee\u5e74\u3002\u5728\u8fd9\u4e2a\u8fc7\u7a0b\u4e2d\uff0c\u6211\u4eec\u628a\u8fde\u7eed\u7684\u5e74\u9f84\u5206\u6210\u4e86\u4e09\u4e2a\u7c7b\u522b\uff0c\u201c\u5c11\u5e74\u201d\uff0c\u201c\u9752\u5e74\u201d\u548c\u201c\u58ee\u5e74\u201d\u5c31\u662f\u5404\u4e2a\u7c7b\u522b\u7684\u540d\u79f0\uff0c\u6216\u8005\u53eb\u505a\u6807\u7b7e\u3002\\ \u5728pandas\u4e2d\uff0ccut\u548cqcut\u51fd\u6570\u90fd\u53ef\u4ee5\u8fdb\u884c\u5206\u7bb1\u5904\u7406\u64cd\u4f5c\u3002 * cut()\u6309\u7167\u53d8\u91cf\u7684\u503c\u5bf9\u53d8\u91cf\u8fdb\u884c\u5206\u5272\uff0c\u6bcf\u4e2a\u5206\u7ec4\u91cc\u6570\u636e\u7684\u4e2a\u6570\u5e76\u4e0d\u4e00\u6837\u3002 * qcut()\u662f\u6309\u53d8\u91cf\u7684\u6570\u91cf\u6765\u5bf9\u53d8\u91cf\u8fdb\u884c\u5206\u5272\uff0c\u5e76\u4e14\u5c3d\u91cf\u4fdd\u8bc1\u6bcf\u4e2a\u5206\u7ec4\u91cc\u53d8\u91cf\u7684\u4e2a\u6570\u76f8\u540c\u3002 \u8003\u8651\u4e0b\u9762\u4e00\u4e2a\u7b80\u5355\u7684\u968f\u673a\u6570\u636e\u96c6\u548c\u4e00\u4e2a\u4f7f\u7528cut\u7684\u7b49\u957f\u6876\u5206\u7c7b\uff1a df = pd.DataFrame( { 'data1': np.random.randn(1000), 'data2': np.random.randn(1000) } ) quartiles = pd.cut(df.data1, 4) # \u6309\u7167data1\u503c\u7531\u5c0f\u5230\u5927\u7684\u987a\u5e8f\u5c06\u6570\u636e\u5206\u62104\u4efd\uff0c\u5e76\u4e14\u4f7f\u6bcf\u7ec4\u503c\u7684\u8303\u56f4\u5927\u81f4\u76f8\u7b49\u3002 print(quartiles[:10]) # 0 (-0.0743, 1.729] # 1 (-0.0743, 1.729] # 2 (-0.0743, 1.729] # 3 (-0.0743, 1.729] # 4 (-1.877, -0.0743] # 5 (-0.0743, 1.729] # 6 (-0.0743, 1.729] # 7 (-0.0743, 1.729] # 8 (-1.877, -0.0743] # 9 (-0.0743, 1.729] # Name: data1, dtype: category # Categories ( # 4, # interval[float64, right]): [ # (-3.687, -1.877] < (-1.877, -0.0743] < (-0.0743, 1.729] < (1.729, 3.531] # ] \u4e0a\u9762cut\u8fd4\u56de\u7684Categorical\u5bf9\u8c61\u53ef\u4ee5\u76f4\u63a5\u4f20\u9012\u7ed9groupby\u3002\u5229\u7528\u5b83\u8ba1\u7b97\u51fadata2\u5217\u7684\u4e00\u4e2a\u7edf\u8ba1\u503c\u96c6\u5408\uff0c\u5982\u4e0b\uff1a def get_stats(group): return { 'min': group.min(), 'max': group.max(), 'count': group.count(), 'mean': group.mean() } grouped = df.data2.groupby(quartiles) for i in grouped: print(i) result = grouped.apply(get_stats).unstack() print(result) # min max count mean # data1 # (-3.145, -1.424] -1.759377 2.484321 77.0 -0.127900 # (-1.424, 0.29] -3.142344 2.830654 524.0 -0.081931 # (0.29, 2.005] -3.557136 3.261635 376.0 0.015715 # (2.005, 3.719] -2.829458 1.766352 23.0 -0.198780 \u4f7f\u7528qcut\uff0c\u6839\u636e\u6837\u672c\u5206\u4f4d\u6570\u8ba1\u7b97\u51fa\u7b49\u5927\u5c0f\u7684\u6876\uff0c\u5c31\u662f\u7b49\u957f\u6876\u3002\u901a\u8fc7\u4f20\u9012labels=False\u6765\u83b7\u5f97\u5206\u4f4d\u6570\u6570\u503c\u3002 grouping = pd.qcut(df.data1, 10, labels=False) grouped = df.data2.groupby(grouping) result = grouped.apply(get_stats).unstack() print(result) # min max count mean # data1 # 0 -3.678934 3.022862 100.0 0.029658 # 1 -2.319813 2.646502 100.0 0.094035 # 2 -2.873727 2.470840 100.0 0.023866 # 3 -2.196701 2.042251 100.0 0.021232 # 4 -2.154161 2.020809 100.0 0.110834 # 5 -2.723061 2.415626 100.0 0.057365 # 6 -2.291470 2.536159 100.0 0.020866 # 7 -2.064083 1.799356 100.0 -0.081025 # 8 -3.405679 1.792581 100.0 -0.009705 # 9 -2.469285 2.600849 100.0 -0.061721 \u793a\u4f8b\uff1a\u4f7f\u7528\u6307\u5b9a\u5206\u7ec4\u503c\u586b\u5145\u7f3a\u5931\u503c \u5728\u6e05\u9664\u7f3a\u5931\u503c\u65f6\uff0c\u6709\u65f6\u4f1a\u4f7f\u7528dropna\u6765\u53bb\u9664\u7f3a\u5931\u503c\uff0c\u6709\u65f6\u4f7f\u7528\u4fee\u6b63\u503c\u6216\u6765\u81ea\u4e8e\u5176\u4ed6\u6570\u636e\u7684\u503c\u6765\u8f93\u5165\uff08\u586b\u5145\uff09\u5230null\u503c\uff08NA\uff09\u3002\\ fillna\u662f\u4e00\u4e2a\u53ef\u4ee5\u4f7f\u7528\u7684\u6b63\u786e\u5de5\u5177\u3002\\ \u4f8b\u5982\u4e0b\u9762\u4f8b\u5b50\u4e2d\u4f7f\u7528\u4f7f\u7528\u5e73\u5747\u503c\u6765\u586b\u5145NA\u503c\uff1a data = (100, 110, 120, 130, 140, 150) s = pd.Series(data) print(s) # 0 100 # 1 110 # 2 120 # 3 130 # 4 140 # 5 150 # dtype: float64 \u5c06\u6570\u636e\u4e2d\u7684\u4e00\u4e9b\u503c\u8bbe\u7f6e\u4e3a\u7f3a\u5931\u503c\uff1a s[::2] = np.nan print(s) # 0 NaN # 1 110.0 # 2 NaN # 3 130.0 # 4 NaN # 5 150.0 # dtype: float64 result = s.fillna(s.mean()) # 110, 130, 150\u7684\u5e73\u5747\u503c\u662f130 print(result) # 0 130.0 # 1 110.0 # 2 130.0 # 3 130.0 # 4 130.0 # 5 150.0 # dtype: float64 \u4e0b\u9762\u7684\u4f8b\u5b50\u662f\u6309\u7ec4\u586b\u5145NA\u503c * \u65b9\u6cd51,\u5bf9\u6570\u636e\u5206\u7ec4\u540e\u4f7f\u7528apply\u3002 * \u65b9\u6cd52,\u5728\u6bcf\u4e2a\u6570\u636e\u5757\u4e0a\u90fd\u8c03\u7528fillna\u7684\u51fd\u6570\u3002 data = (100, 110, 120, 130, 140, 150, 160, 170) states = ['Ohio', 'New York', 'Vermont', 'Florida', 'Oregon', 'Nevada', 'California', 'Idaho'] group_key = ['East'] * 4 + ['West'] * 4 # 4\u4e2aEast\u548c4\u4e2aWest\u62fc\u63a5\u7684\u5217\u8868list s = pd.Series(data, index=states) print(s) # Ohio 100 # New York 110 # Vermont 120 # Florida 130 # Oregon 140 # Nevada 150 # California 160 # Idaho 170 # dtype: int64 \u5c06\u6570\u636e\u4e2d\u7684\u4e00\u4e9b\u503c\u8bbe\u7f6e\u4e3a\u7f3a\u5931\u503c\uff1a s[['Vermont', 'Nevada', 'Idaho']] = np.nan print(s) # Ohio 100.0 # New York 110.0 # Vermont NaN # Florida 130.0 # Oregon 140.0 # Nevada NaN # California 160.0 # Idaho NaN # dtype: float64 result = s.groupby(group_key).mean() print(result) # East 113.333333 # West 150.000000 # dtype: float64 \u7528\u4e0a\u9762\u5f97\u51fa\u7684\u5206\u7ec4\u5e73\u5747\u503c\u6765\u586b\u5145NA fill_mean = lambda g: g.fillna(g.mean()) result = s.groupby(group_key).apply(fill_mean) print(result) # Ohio 100.000000 # New York 110.000000 # Vermont 113.333333 # Florida 130.000000 # Oregon 140.000000 # Nevada 150.000000 # California 160.000000 # Idaho 150.000000 # dtype: float64 \u5982\u679c\u5df2\u7ecf\u5728\u4ee3\u7801\u4e2d\u4e3a\u6bcf\u4e2a\u5206\u7ec4\u9884\u5b9a\u4e49\u4e86\u586b\u5145\u503c\uff0c\u53ef\u4ee5\u5229\u7528\u6bcf\u4e2a\u5206\u7ec4\u90fd\u6709\u7684\u5185\u7f6e\u7684name\u5c5e\u6027\uff0c\u5b9e\u73b0\u586b\u5145NA\u3002 fill_value = {'East': 0.5, 'West': -1} fill_func = lambda g: g.fillna(fill_value[g.name]) result = s.groupby(group_key).apply(fill_func) print(result) # Ohio 100.0 # New York 110.0 # Vermont 0.5 # Florida 130.0 # Oregon 140.0 # Nevada -1.0 # California 160.0 # Idaho -1.0 # dtype: float64 \u793a\u4f8b\uff1a\u968f\u673a\u91c7\u6837\u4e0e\u6392\u5217 \u5047\u8bbe\u60f3\u4ece\u5927\u6570\u636e\u96c6\u4e2d\u62bd\u53d6\u968f\u673a\u6837\u672c\uff08\u6709\u6216\u6ca1\u6709\u66ff\u6362\uff09\u4ee5\u7528\u4e8e\u8499\u7279\u5361\u7f57\u6a21\u62df\u76ee\u7684\u6216\u67d0\u4e9b\u5176\u4ed6\u5e94\u7528\u7a0b\u5e8f\u3002\\ \u6709\u5f88\u591a\u65b9\u6cd5\u6765\u6267\u884c\u201c\u62bd\u53d6\u201d\uff0c\u8fd9\u91cc\u4f7f\u7528Series\u7684sample\u65b9\u6cd5\u3002\\ \u4e3a\u4e86\u6f14\u793a\uff0c\u8fd9\u91cc\u4ecb\u7ecd\u4e00\u79cd\u6784\u9020\u4e00\u526f\u82f1\u5f0f\u6251\u514b\u724c\u7684\u65b9\u6cd5\uff1a # \u6885\u82b1clubs\u3001\u65b9\u5757diamonds\u3001\u7ea2\u6843hearts\u3001\u9ed1\u6843spades\u3002 suits = ['H', 'S', 'C', 'D'] card_val = (list(range(1, 11)) + [10] * 3) * 4 # card_val [ # 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 10, # 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 10, # 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 10, # 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 10 # ] base_names = ['A'] + list(range(2, 11)) + ['J', 'K', 'Q'] # base_names\uff1a ['A', 2, 3, 4, 5, 6, 7, 8, 9, 10, 'J', 'K', 'Q'] \u751f\u6210\u4e86\u4e00\u4e2a\u957f\u5ea6\u4e3a52\u7684Series, Series\u7684\u7d22\u5f15\u5305\u542b\u4e86\u724c\u540d\uff0cSeries\u7684\u503c\u53ef\u4ee5\u7528\u6e38\u620f\uff08\u4e3a\u4e86\u4fdd\u6301\u7b80\u5355\uff0c\u8ba9\u2019A\u2019\u4e3a1 \uff09\uff1a cards = [] for suit in ['H', 'S', 'C', 'D']: cards.extend(str(num) + suit for num in base_names) deck = pd.Series(card_val, index=cards) print(deck) # AH 1 # 2H 2 # 3H 3 # 4H 4 # 5H 5 # 6H 6 # 7H 7 # 8H 8 # 9H 9 # 10H 10 # JH 10 # KH 10 # QH 10 # AS 1 # 2S 2 # 3S 3 # 4S 4 # 5S 5 # 6S 6 # 7S 7 # 8S 8 # 9S 9 # 10S 10 # JS 10 # KS 10 # QS 10 # AC 1 # 2C 2 # 3C 3 # 4C 4 # 5C 5 # 6C 6 # 7C 7 # 8C 8 # 9C 9 # 10C 10 # JC 10 # KC 10 # QC 10 # AD 1 # 2D 2 # 3D 3 # 4D 4 # 5D 5 # 6D 6 # 7D 7 # 8D 8 # 9D 9 # 10D 10 # JD 10 # KD 10 # QD 10 # dtype: int64 \u4ece\u8fd9\u526f\u724c\u4e2d\u62ff\u51fa\u4e94\u5f20\u724c\u53ef\u4ee5\u5199\u6210\uff1a def draw(_deck, n=5): return _deck.sample(n) print(draw(deck)) # KD 10 # 2S 2 # 5C 5 # 6C 6 # QD 10 # dtype: int64 \u5047\u8bbe\u8981\u4ece\u6bcf\u4e2a\u82b1\u8272\u4e2d\u968f\u673a\u62bd\u53d6\u4e24\u5f20\u724c\u3002\u7531\u4e8e\u82b1\u8272\u662f\u724c\u540d\u7684\u6700\u540e\u4e24\u4e2a\u5b57\u7b26\uff0c\u53ef\u4ee5\u57fa\u4e8e\u8fd9\u70b9\u8fdb\u884c\u5206\u7ec4\uff0c\u5e76\u4f7f\u7528apply\uff1a get_suit = lambda card: card[-1] # \u6700\u540e\u4e00\u4e2a\u5b57\u6bcd\u662f\u82b1\u8272 result = deck.groupby(get_suit).apply(draw, n=2) print(result) # C 10C 10 # 3C 3 # D KD 10 # AD 1 # H 5H 5 # 7H 7 # S 3S 3 # 5S 5 # dtype: int64 \u6216\u8005\u4e5f\u53ef\u4ee5\u5199\u6210\uff1a result = deck.groupby(get_suit, group_keys=False).apply(draw, n=2) print(result) # JC 10 # 8C 8 # QD 10 # 4D 4 # 10H 10 # 6H 6 # 7S 7 # KS 10 # dtype: int64 \u793a\u4f8b\uff1a\u5206\u7ec4\u52a0\u6743\u5e73\u5747\u548c\u76f8\u5173\u6027 \u5728groupby\u7684\u62c6\u5206-\u5e94\u7528-\u8054\u5408\u7684\u8303\u5f0f\u4e0b\uff0cDataFrame\u7684\u5217\u95f4\u64cd\u4f5c\u6216\u4e24\u4e2aSeriese\u4e4b\u95f4\u7684\u64cd\u4f5c\uff0c\u4f8b\u5982\u5b9e\u73b0\u5206\u7ec4\u52a0\u6743\u5e73\u5747\u3002\\ \u4e0b\u9762\u4f8b\u5b50\uff0c\u4f7f\u7528\u4e00\u4e2a\u5305\u542b\u5206\u7ec4\u952e\u548c\u6743\u91cd\u503c\u7684\u6570\u636e\u96c6\uff1a dt = np.random.randn(8) wt = np.random.randn(8) df = pd.DataFrame( { 'category': ['a', 'a', 'a', 'a', 'b', 'b', 'b', 'b'], 'data': dt, 'weight': wt } ) print(df) # category data weight # 0 a -0.250764 -0.085285 # 1 a 0.167155 -1.361254 # 2 a 0.399306 1.755542 # 3 a -0.514477 0.270124 # 4 b -0.005558 0.886514 # 5 b 0.607596 -1.384315 # 6 b -1.029627 -0.845340 # 7 b -0.294204 1.253965 \u901a\u8fc7category\u8fdb\u884c\u5206\u7ec4\u52a0\u6743\u5e73\u5747\u5982\u4e0b\uff1a grouped = df.groupby('category') get_wavg = lambda g: np.average(g['data'], weights=g['weight']) result = grouped.apply(get_wavg) print(result) # category # a 0.614499 # b 3.863947 # dtype: float64 \u53e6\u4e00\u4e2a\u4f8b\u5b50\uff0c\u4e00\u4e2a\u4ece\u96c5\u864e\u8d22\u7ecf\u4e0a\u83b7\u5f97\u7684\u6570\u636e\u96c6\uff0c\u8be5\u6570\u636e\u96c6\u5305\u542b\u4e00\u4e9b\u6807\u666e500 \uff08SPX\u7b26\u53f7\uff09\u548c\u80a1\u7968\u7684\u6536\u76d8\u4ef7\uff1a close_px = pd.read_csv('../examples/stock_px_2.csv', parse_dates=True, index_col=0) print(close_px.info()) # <class 'pandas.core.frame.DataFrame'> # DatetimeIndex: 2214 entries, 2003-01-02 to 2011-10-14 # Data columns (total 4 columns): # # Column Non-Null Count Dtype # --- ------ -------------- ----- # 0 AAPL 2214 non-null float64 # 1 MSFT 2214 non-null float64 # 2 XOM 2214 non-null float64 # 3 SPX 2214 non-null float64 # dtypes: float64(4) # memory usage: 86.5 KB # None print(close_px[-4:]) # AAPL MSFT XOM SPX # 2011-10-11 400.29 27.00 76.27 1195.54 # 2011-10-12 402.19 26.96 77.16 1207.25 # 2011-10-13 408.43 27.18 76.37 1203.66 # 2011-10-14 422.00 27.27 78.11 1224.58 \u76ee\u6807\u4efb\u52a1\uff1a\u8ba1\u7b97\u4e00\u4e2aDataFrame\uff0c\u5b83\u5305\u542b\u6807\u666e\u6307\u6570\uff08SPX\uff09\u6bcf\u65e5\u6536\u76ca\u7684\u5e74\u5ea6\u76f8\u5173\u6027\uff08\u901a\u8fc7\u767e\u5206\u6bd4\u53d8\u5316\u8ba1\u7b97\uff09\u3002 \u9996\u5148\u521b\u5efa\u4e00\u4e2a\u8ba1\u7b97\u6bcf\u5217\u4e0e\u2019SPX\u2019\u5217\u6210\u5bf9\u5173\u8054\u7684\u51fd\u6570\uff1a spx_corr = lambda x: x.corrwith(x['SPX']) \u4e4b\u540e\uff0c\u4f7f\u7528pct_change\u8ba1\u7b97close-px\u767e\u5206\u6bd4\u7684\u53d8\u5316\uff1a rets = close_px.pct_change().dropna() # Percentage change between the current and a prior element. print(rets) # AAPL MSFT XOM SPX # 2003-01-03 0.006757 0.001421 0.000684 -0.000484 # 2003-01-06 0.000000 0.017975 0.024624 0.022474 # ... ... ... ... ... # 2011-10-14 0.033225 0.003311 0.022784 0.017380 # [2213 rows x 4 columns] \u6700\u540e\uff0c\u6309\u5e74\u5bf9\u767e\u5206\u6bd4\u53d8\u5316\u8fdb\u884c\u5206\u7ec4\uff0c\u53ef\u4ee5\u4f7f\u7528\u5355\u884c\u51fd\u6570\u4ece\u6bcf\u4e2a\u884c\u6807\u7b7e\u4e2d\u63d0\u53d6\u6bcf\u4e2adatetime\u6807\u7b7e\u7684year\u5c5e\u6027\uff1a get_year = lambda x: x.year by_year = rets.groupby(get_year) result = by_year.apply(spx_corr) print(result) # AAPL MSFT XOM SPX # 2003 0.541124 0.745174 0.661265 1.0 # 2004 0.374283 0.588531 0.557742 1.0 # 2005 0.467540 0.562374 0.631010 1.0 # 2006 0.428267 0.406126 0.518514 1.0 # 2007 0.508118 0.658770 0.786264 1.0 # 2008 0.681434 0.804626 0.828303 1.0 # 2009 0.707103 0.654902 0.797921 1.0 # 2010 0.710105 0.730118 0.839057 1.0 # 2011 0.691931 0.800996 0.859975 1.0 \u53ef\u4ee5\u8ba1\u7b97\u5185\u90e8\u5217\u76f8\u5173\u6027\u3002\u8fd9\u91cc\u8ba1\u7b97\u4e86\u82f9\u679c\u548c\u5fae\u8f6f\u7684\u5e74\u5ea6\u76f8\u5173\u6027\uff1a result = by_year.apply(lambda g: g['AAPL'].corr(g['MSFT'])) print(result) # 2003 0.480868 # 2004 0.259024 # 2005 0.300093 # 2006 0.161735 # 2007 0.417738 # 2008 0.611901 # 2009 0.432738 # 2010 0.571946 # 2011 0.581987 # dtype: float64 \u793a\u4f8b\uff1a\u9010\u7ec4\u7ebf\u6027\u56de\u5f52 \u5b9a\u4e49\u4ee5\u4e0bregress\uff08\u56de\u5f52\uff09\u51fd\u6570\uff08\u4f7f\u7528statsmodels\u8ba1\u91cf\u7ecf\u6d4e\u5b66\u5e93\uff09\uff0c\u8be5\u51fd\u6570\u5bf9\u6bcf\u4e2a\u6570\u636e\u5757\u6267\u884c\u666e\u901a\u6700\u5c0f\u4e8c\u4e58\uff08OLS\uff09\u56de\u5f52\uff1a def regress(data, yvar, xvars): Y = data[yvar] X = data[xvars] X['intercept'] = 1. result = sm.OLS(Y, X).fit() return result.params \u73b0\u5728\u8981\u8ba1\u7b97AAPL\u5728SPX\u56de\u62a5\u4e0a\u7684\u5e74\u5ea6\u7ebf\u6027\u56de\u5f52\uff1a result = by_year.apply(regress, 'AAPL', ['SPX']) print(result) # SPX intercept # 2003 1.195406 0.000710 # 2004 1.363463 0.004201 # 2005 1.766415 0.003246 # 2006 1.645496 0.000080 # 2007 1.198761 0.003438 # 2008 0.968016 -0.001110 # 2009 0.879103 0.002954 # 2010 1.052608 0.001261 # 2011 0.806605 0.001514 \u6570\u636e\u900f\u89c6\u8868\u4e0e\u4ea4\u53c9\u8868 \u6570\u636e\u900f\u89c6\u8868 \u6570\u636e\u900f\u89c6\u8868\u662f\u7535\u5b50\u8868\u683c\u7a0b\u5e8f\u548c\u5176\u4ed6\u6570\u636e\u5206\u6790\u8f6f\u4ef6\u4e2d\u5e38\u89c1\u7684\u6570\u636e\u6c47\u603b\u5de5\u5177\u3002\\ \u5b83\u6839\u636e\u4e00\u4e2a\u6216\u591a\u4e2a\u952e\u805a\u5408\u4e00\u5f20\u8868\u7684\u6570\u636e\uff0c\u5c06\u6570\u636e\u5728\u77e9\u5f62\u683c\u5f0f\u4e2d\u6392\u5217\uff0c\u5176\u4e2d\u4e00\u4e9b\u5206\u7ec4\u952e\u662f\u6cbf\u7740\u884c\u7684\uff0c\u53e6\u4e00\u4e9b\u662f\u6cbf\u7740\u5217\u7684\u3002 Python\u4e2d\u7684pandas\u900f\u89c6\u8868\u662f\u901a\u8fc7\u672c\u7ae0\u6240\u4ecb\u7ecd\u7684groupby\u5de5\u5177\u4ee5\u53ca\u4f7f\u7528\u5206\u5c42\u7d22\u5f15\u7684\u91cd\u5851\u64cd\u4f5c\u5b9e\u73b0\u7684\u3002\\ DataFrame\u62e5\u6709\u4e00\u4e2apivot_table\u65b9\u6cd5\uff0c\u5e76\u4e14\u8fd8\u6709\u8fd8\u4e00\u4e2a\u9876\u5c42\u7684pandas.pivot_table\u51fd\u6570\u3002\\ \u9664\u4e86\u4e3agroupby\u63d0\u4f9b\u4e00\u4e2a\u65b9\u4fbf\u63a5\u53e3\uff0cpivot_table\u8fd8\u53ef\u4ee5\u6dfb\u52a0\u90e8\u5206\u603b\u8ba1\uff0c\u4e5f\u79f0\u4f5c\u8fb9\u8ddd\u3002 import pandas as pd import numpy as np \u6839\u636e\u4e0b\u9762\u7684\u5c0f\u8d39\u6570\u636e\u96c6\uff0c\u8ba1\u7b97\u4e00\u5f20\u5728\u884c\u65b9\u5411\u4e0a\u6309day\u548csmoker\u6392\u5217\u7684\u5206\u7ec4\u5e73\u5747\u503c\uff08\u9ed8\u8ba4\u7684pivot_table\u805a\u5408\u7c7b\u578b\uff09\u7684\u8868\u3002 pivot_table\u9009\u9879\uff1a * values: \u9700\u8981\u805a\u5408\u7684\u5217\u540d\uff0c\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u805a\u5408\u6240\u6709\u6570\u503c\u578b\u7684\u5217\u3002 * index: \u5728\u7ed3\u679c\u900f\u89c6\u8868\u7684\u884c\u4e0a\u8fdb\u884c\u5206\u7ec4\u7684\u5217\u540d\u6216\u8005\u5176\u4ed6\u5206\u7ec4\u952e\u3002 tips = pd.read_csv('../examples/tips.csv') tips['tip_pct'] = tips['tip'] / (tips['total_bill'] - tips['tip']) \u6837\u672c\u6570\u636e print(tips.head(5)) # total_bill tip smoker day time size tip_pct # 0 16.99 1.01 No Sun Dinner 2 0.063204 # 1 10.34 1.66 No Sun Dinner 3 0.191244 # 2 21.01 3.50 No Sun Dinner 3 0.199886 # 3 23.68 3.31 No Sun Dinner 2 0.162494 # 4 24.59 3.61 No Sun Dinner 4 0.172069 \u8ba1\u7b97\u5728\u884c\u65b9\u5411\u4e0a\u6309day\u548csmoker\u6392\u5217\u7684\u5206\u7ec4\u5e73\u5747\u503c\u3002\u4e5f\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528groupby\u5b9e\u73b0 result = tips.pivot_table(index=['day', 'smoker']) print(result) # size tip tip_pct total_bill # day smoker # Fri No 2.250000 2.812500 0.179740 18.420000 # Yes 2.066667 2.714000 0.216293 16.813333 # Sat No 2.555556 3.102889 0.190412 19.661778 # Yes 2.476190 2.875476 0.179833 21.276667 # Sun No 2.929825 3.167895 0.193617 20.506667 # Yes 2.578947 3.516842 0.322021 24.120000 # Thur No 2.488889 2.673778 0.193424 17.113111 # Yes 2.352941 3.030000 0.198508 19.190588 \u5728tip_pct\u548csize\u4e0a\u8fdb\u884c\u805a\u5408\uff0c\u5e76\u6839\u636etime\u5206\u7ec4\u3002\u6211\u5c06\u628asmoker\u653e\u5165\u8868\u7684\u5217\uff0c\u800c\u5c06day\u653e\u5165\u8868\u7684\u884c\uff1a result = tips.pivot_table( ['tip_pct', 'size'], index=['time', 'day'], columns='smoker' ) print(result) # size tip_pct # smoker No Yes No Yes # time day # Dinner Fri 2.000000 2.222222 0.162612 0.202545 # Sat 2.555556 2.476190 0.190412 0.179833 # Sun 2.929825 2.578947 0.193617 0.322021 # Thur 2.000000 NaN 0.190114 NaN # Lunch Fri 3.000000 1.833333 0.231125 0.236915 # Thur 2.500000 2.352941 0.193499 0.198508 \u901a\u8fc7\u4f20\u9012margins=True\u6765\u6269\u5145\u8fd9\u4e2a\u8868\u6765\u5305\u542b\u90e8\u5206\u603b\u8ba1\u3002\\ \u8fd9\u4f1a\u6dfb\u52a0All\u884c\u548c\u5217\u6807\u7b7e\uff0c\u5176\u4e2d\u76f8\u5e94\u7684\u503c\u662f\u5355\u5c42\u4e2d\u6240\u6709\u6570\u636e\u7684\u5206\u7ec4\u7edf\u8ba1\u503c\uff1a\\ \u8fd9\u91ccAll\u7684\u503c\u662f\u5747\u503c\uff0c\u4e14\u8be5\u5747\u503c\u662f\u4e0d\u8003\u8651\u5438\u70df\u8005\u4e0e\u975e\u5438\u70df\u8005\uff08All\u5217\uff09\u6216\u884c\u5206\u7ec4\u4e2d\u4efb\u4f55\u4e24\u7ea7\u7684\uff08All\u884c\uff09\u3002 result = tips.pivot_table( ['tip_pct', 'size'], index=['time', 'day'], columns='smoker', margins=True ) print(result) # size tip_pct # smoker No Yes All No Yes All # time day # Dinner Fri 2.000000 2.222222 2.166667 0.162612 0.202545 0.192562 # Sat 2.555556 2.476190 2.517241 0.190412 0.179833 0.185305 # Sun 2.929825 2.578947 2.842105 0.193617 0.322021 0.225718 # Thur 2.000000 NaN 2.000000 0.190114 NaN 0.190114 # Lunch Fri 3.000000 1.833333 2.000000 0.231125 0.236915 0.236088 # Thur 2.500000 2.352941 2.459016 0.193499 0.198508 0.194895 # All 2.668874 2.408602 2.569672 0.192237 0.218176 0.202123 \u8981\u4f7f\u7528\u4e0d\u540c\u7684\u805a\u5408\u51fd\u6570\u65f6\uff0c\u5c06\u51fd\u6570\u4f20\u9012\u7ed9aggfunc\u3002\\ \u4f8b\u5982\uff0c'count\u2019\u6216\u8005len\u5c06\u7ed9\u51fa\u4e00\u5f20\u5206\u7ec4\u5927\u5c0f\u7684\u4ea4\u53c9\u8868\uff08\u8ba1\u6570\u6216\u51fa\u73b0\u9891\u7387\uff09\uff1a result = tips.pivot_table( ['tip_pct', 'size'], index=['time', 'day'], columns='smoker', aggfunc=len, margins=True ) print(result) # size tip_pct # smoker No Yes All No Yes All # time day # Dinner Fri 3.0 9.0 12 3.0 9.0 12 # Sat 45.0 42.0 87 45.0 42.0 87 # Sun 57.0 19.0 76 57.0 19.0 76 # Thur 1.0 NaN 1 1.0 NaN 1 # Lunch Fri 1.0 6.0 7 1.0 6.0 7 # Thur 44.0 17.0 61 44.0 17.0 61 # All 151.0 93.0 244 151.0 93.0 244 \u5bf9\u4e8e\u7a7a\u503cNA\uff0c\u4f20\u9012\u4e00\u4e2afill_value result = tips.pivot_table( ['tip_pct', 'size'], index=['time', 'day'], columns='smoker', aggfunc='mean', fill_value=0, margins=True ) print(result) # size tip_pct # smoker No Yes All No Yes All # time day # Dinner Fri 2.000000 2.222222 2.166667 0.162612 0.202545 0.192562 # Sat 2.555556 2.476190 2.517241 0.190412 0.179833 0.185305 # Sun 2.929825 2.578947 2.842105 0.193617 0.322021 0.225718 # Thur 2.000000 0.000000 2.000000 0.190114 0.000000 0.190114 # Lunch Fri 3.000000 1.833333 2.000000 0.231125 0.236915 0.236088 # Thur 2.500000 2.352941 2.459016 0.193499 0.198508 0.194895 # All 2.668874 2.408602 2.569672 0.192237 0.218176 0.202123 \u4ea4\u53c9\u8868\uff1acrosstab \u4ea4\u53c9\u8868\uff08\u7b80\u5199\u4e3acrosstab\uff09\u662f\u6570\u636e\u900f\u89c6\u8868\u7684\u4e00\u4e2a\u7279\u6b8a\u60c5\u51b5\uff0c\u8ba1\u7b97\u7684\u662f\u5206\u7ec4\u4e2d\u7684\u9891\u7387\u3002\\ crosstab\u7684\u524d\u4e24\u4e2a\u53c2\u6570\u53ef\u662f\u6570\u7ec4\u3001Series\u6216\u6570\u7ec4\u7684\u5217\u8868\u3002 sample = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] nationality = ['USA', 'Japan', 'USA', 'Japan', 'Japan', 'Japan', 'USA', 'USA', 'Japan', 'USA'] handedness = ['Right-handed', 'Left-handed', 'Right-handed', 'Right-handed', 'Left-handed', 'Right-handed', 'Right-handed', 'Left-handed', 'Right-handed', 'Right-handed'] df = pd.DataFrame( { 'sample': sample, 'nationality': nationality, 'handedness': handedness } ) print(df) # sample nationality handedness # 0 1 USA Right-handed # 1 2 Japan Left-handed # 2 3 USA Right-handed # 3 4 Japan Right-handed # 4 5 Japan Left-handed # 5 6 Japan Right-handed # 6 7 USA Right-handed # 7 8 USA Left-handed # 8 9 Japan Right-handed # 9 10 USA Right-handed \u6309\u7167\u56fd\u7c4d\u548c\u60ef\u7528\u6027\u6765\u603b\u7ed3\u8fd9\u4e9b\u6570\u636e\uff0c\u53ef\u4ee5\u4f7f\u7528pivot_table\u6765\u5b9e\u73b0\u8fd9\u4e2a\u529f\u80fd\uff0c\u4f46\u662fpandas.crosstable\u51fd\u6570\u66f4\u4e3a\u65b9\u4fbf\uff1a result = pd.crosstab(df.nationality, df.handedness, margins=True) print(result) # handedness Left-handed Right-handed All # nationality # Japan 2 3 5 # USA 1 4 5 # All 3 7 10 \u5728\u5c0f\u8d39\u6570\u636e\u4e2d\u53ef\u4ee5\u8fd9\u4e48\u505a\uff1a result = pd.crosstab(['tips.time', tips.day], tips.smoker, margins=True) print(result) # smoker No Yes All # row_0 day # tips.time Fri 4 15 19 # Sat 45 42 87 # Sun 57 19 76 # Thur 45 17 62 # All 151 93 244","title":"Ch07"},{"location":"python/DataAnalysis/ch07/#groupby","text":"import pandas as pd import numpy as np","title":"GroupBy\u673a\u5236"},{"location":"python/DataAnalysis/ch07/#_1","text":"\u5206\u7ec4\u64cd\u4f5c\u7b2c\u4e00\u6b65\uff0c\u6570\u636e\u5305\u542b\u5728pandas\u5bf9\u8c61\u4e2d\uff0c\u53ef\u4ee5\u662fSeries\u3001DataFrame\u6216\u5176\u4ed6\u6570\u636e\u7ed3\u6784\u3002\\ \u4e4b\u540e\u6839\u636e\u4f60\u63d0\u4f9b\u7684\u4e00\u4e2a\u6216\u591a\u4e2a\u952e\u5206\u79bb\u5230\u5404\u4e2a\u7ec4\u4e2d\u3002\u5206\u7ec4\u952e\u53ef\u662f\u591a\u79cd\u5f62\u5f0f\u7684\uff0c\u5e76\u4e14\u952e\u4e0d\u4e00\u5b9a\u662f\u5b8c\u5168\u76f8\u540c\u7684\u7c7b\u578b(\u6ce8\u610f\u540e\u9762\u4ecb\u7ecd\u7684\u4e09\u4e2a\u65b9\u6cd5\u662f\u53ef\u4ee5\u4ea7\u751f\u7528\u4e8e\u5206\u9694\u5bf9\u8c61\u7684\u503c\u6570\u7ec4\u7684\u5feb\u6377\u65b9\u5f0f)\uff1a * \u4e0e\u9700\u8981\u5206\u7ec4\u7684\u8f74\u5411\u957f\u5ea6\u4e00\u81f4\u7684\u503c\u5217\u8868\u6216\u503c\u6570\u7ec4\u3002\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0cgroupby\u5728axis=0\u7684\u8f74\u5411\u4e0a\u5206\u7ec4\u3002 * DataFrame\u7684\u5217\u540d\u7684\u503c\u3002 * \u53ef\u4ee5\u5c06\u5206\u7ec4\u8f74\u5411\u4e0a\u7684\u503c\u548c\u5206\u7ec4\u540d\u79f0\u76f8\u5339\u914d\u7684\u5b57\u5178\u6216Series\u3002 * \u53ef\u4ee5\u5728\u8f74\u7d22\u5f15\u6216\u7d22\u5f15\u4e2d\u7684\u5355\u4e2a\u6807\u7b7e\u4e0a\u8c03\u7528\u7684\u51fd\u6570\u3002 \u8bf7\u6ce8\u610f\uff0c\u5206\u7ec4\u952e\u4e2d\u7684\u4efb\u4f55\u7f3a\u5931\u503c\u5c06\u88ab\u6392\u9664\u5728\u7ed3\u679c\u4e4b\u5916\u3002\\ \u5206\u79bb\u64cd\u4f5c\u662f\u5728\u6570\u636e\u5bf9\u8c61\u7684\u7279\u5b9a\u8f74\u5411\u4e0a\u8fdb\u884c\u7684\u3002\u4f8b\u5982\uff0cDataFrame\u53ef\u4ee5\u5728\u5b83\u7684\u884c\u65b9\u5411\uff08axis=0\uff09\u6216\u5217\u65b9\u5411\uff08axis=1\uff09\u8fdb\u884c\u5206\u7ec4\u3002\\ \u5206\u7ec4\u64cd\u4f5c\u540e\uff0c\u4e00\u4e2a\u51fd\u6570\u5c31\u53ef\u4ee5\u5e94\u7528\u5230\u5404\u4e2a\u7ec4\u4e2d\uff0c\u4ea7\u751f\u65b0\u7684\u503c\u3002\\ \u6700\u7ec8\uff0c\u6240\u6709\u51fd\u6570\u7684\u5e94\u7528\u7ed3\u679c\u4f1a\u8054\u5408\u4e3a\u4e00\u4e2a\u7ed3\u679c\u5bf9\u8c61\u3002 df = pd.DataFrame( { 'key1': ['a', 'a', 'b', 'b', 'a'], 'key2': ['one', 'two', 'one', 'two', 'one'], 'data1': [1, 3, 5, 7, 9], 'data2': [2, 4, 6, 8, 10] } ) \u6839\u636ekey1\u6807\u7b7e\u8ba1\u7b97data1\u5217\u7684\u5747\u503c\uff0c\u65b9\u6cd5\u4e00\uff0c\u8bbf\u95eedata1\u5e76\u4f7f\u7528key1\u5217\uff08\u5b83\u662f\u4e00\u4e2aSeries\uff09\u8c03\u7528groupby\u65b9\u6cd5\uff1a grouped = df['data1'].groupby(df['key1']) print(grouped) # <pandas.core.groupby.generic.SeriesGroupBy object at 0x7fdd2cb01430> grouped\u53d8\u91cf\u73b0\u5728\u662f\u4e00\u4e2aGroupBy\u5bf9\u8c61\uff0c\u5b83\u5b9e\u9645\u4e0a\u8fd8\u6ca1\u6709\u8fdb\u884c\u4efb\u4f55\u8ba1\u7b97\uff0c\u62e5\u6709\u4e00\u4e9b\u5173\u4e8e\u5206\u7ec4\u952edf['key1']\u7684\u4e00\u4e9b\u4e2d\u95f4\u6570\u636e\u7684\u4fe1\u606f \u4e0b\u9762\u5bf9grouped\u5bf9\u8c61\u505a\u4e00\u4e9b\u64cd\u4f5c\uff1a result = grouped.mean() # \u8ba1\u7b97\u5e73\u5747\u503c print(result) # key1 # a 4.333333 # b 6.000000 # Name: data1, dtype: float64 grouped_means = df['data1'].groupby([df['key1'], df['key2']]).mean() print(grouped_means) # key1 key2 # a one 5.0 # two 3.0 # b one 5.0 # two 7.0 # Name: data1, dtype: float64 \u4e0a\u9762\u4f8b\u5b50\u4f7f\u7528\u4e86\u4e24\u4e2a\u952e\u5bf9\u6570\u636e\u8fdb\u884c\u5206\u7ec4\uff0c\u5e76\u4e14\u7ed3\u679cSeries\u73b0\u5728\u62e5\u6709\u4e00\u4e2a\u5305\u542b\u552f\u4e00\u952e\u5bf9\u7684\u591a\u5c42\u7d22\u5f15 \u4e0b\u9762\u5bf9\u8ba1\u7b97\u7684\u5e73\u5747\u503c\uff08mean\uff09\u8fdb\u884c\u91cd\u5851\uff08unstack\uff09 print(grouped_means.unstack()) # key2 one two # key1 # a 5.0 3.0 # b 5.0 7.0 \u5206\u7ec4\u4fe1\u606f\u901a\u5e38\u5305\u542b\u5728\u540c\u4e00\u4e2aDataFrame\u4e2d\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u53ef\u4ee5\u4f20\u9012\u5217\u540d\uff08\u65e0\u8bba\u90a3\u4e9b\u5217\u540d\u662f\u5b57\u7b26\u4e32\u3001\u6570\u5b57\u6216\u5176\u4ed6Python\u5bf9\u8c61\uff09\u4f5c\u4e3a\u5206\u7ec4\u952e\uff1a \u4e0b\u9762\u4f8b\u5b50\u4e2ddf.groupby('key1').mean()\u7684\u7ed3\u679c\u91cc\u5e76\u6ca1\u6709key2\u5217\u3002\u8fd9\u662f\u56e0\u4e3adf['key2']\u5e76\u4e0d\u662f\u6570\u503c\u6570\u636e\uff0c\u5373df['key2']\u662f\u4e00\u4e2a\u5197\u4f59\u5217\uff0c\u56e0\u6b64\u88ab\u6392\u9664\u5728\u7ed3\u679c\u4e4b\u5916 result = df.groupby('key1').mean() print(result) # data1 data2 # key1 # a 4.333333 5.333333 # b 6.000000 7.000000 result = df.groupby(['key1', 'key2']).mean() print(result) # data1 data2 # key1 key2 # a one 5.0 6.0 # two 3.0 4.0 # b one 5.0 6.0 # two 7.0 8.0 result = df.groupby(['key1', 'key2']).size() print(result) # key1 key2https://zhuanlan.zhihu.com/p/126206923 # a one 2 # two 1 # b one 1 # two 1 # dtype: int64","title":"\u5206\u7ec4\u673a\u5236"},{"location":"python/DataAnalysis/ch07/#_2","text":"GroupBy\u5bf9\u8c61\u652f\u6301\u8fed\u4ee3\uff0c\u4f1a\u751f\u6210\u4e00\u4e2a\u5305\u542b\u7ec4\u540d\u548c\u6570\u636e\u5757\u76842\u7ef4\u5143\u7ec4\u5e8f\u5217\u3002 df = pd.DataFrame( { 'key1': ['a', 'a', 'b', 'b', 'a'], 'key2': ['one', 'two', 'one', 'two', 'one'], 'data1': [1, 3, 5, 7, 9], 'data2': [2, 4, 6, 8, 10] } ) \u5355\u4e2a\u5206\u7ec4\u952e\u7684\u60c5\u51b5: for name, group in df.groupby('key1'): print(name) print(group) # a # key1 key2 data1 data2 # 0 a one 1 2 # 1 a two 3 4 # 4 a one 9 10 # b # key1 key2 data1 data2 # 2 b one 5 6 # 3 b two 7 8 \u591a\u4e2a\u5206\u7ec4\u952e\u7684\u60c5\u51b5: \u5143\u7ec4\u4e2d\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\u662f\u952e\u503c\u7684\u5143\u7ec4 for (k1, k2), group in df.groupby(['key1', 'key2']): print((k1, k2)) print(group) # ('a', 'one') # key1 key2 data1 data2 # 0 a one 1 2 # 4 a one 9 10 # ('a', 'two') # key1 key2 data1 data2 # 1 a two 3 4 # ('b', 'one') # key1 key2 data1 data2 # 2 b one 5 6 # ('b', 'two') # key1 key2 data1 data2 # 3 b two 7 8 result = dict(list(df.groupby('key1'))) print(result) # df.groupby('key1')\u7684\u7ed3\u679c\u662f\u4e00\u4e2a\u5bf9\u8c61 # <pandas.core.groupby.generic.DataFrameGroupBy object at 0x7f240fe058b0> # list(df.groupby('key1'))\u7684\u7ed3\u679c\u662f\u5305\u542bFrameData\u7684\u7ed3\u6784\u7684\u5217\u8868list: # [ # ('a', key1 key2 data1 data2 # 0 a one 1 2 # 1 a two 3 4 # 4 a one 9 10), # ('b', key1 key2 data1 data2 # 2 b one 5 6 # 3 b two 7 8) # ] # dict(list(df.groupby('key1')))\u7684\u7ed3\u679c\u662f\u5305\u542bFrameData\u7684\u7ed3\u6784\u7684\u5b57\u5178dict # { # 'a': key1 key2 data1 data2 # 0 a one 1 2 # 1 a two 3 4 # 4 a one 9 10, # 'b': key1 key2 data1 data2 # 2 b one 5 6 # 3 b two 7 8 # } print(result['b']) # key1 key2 data1 data2 # 2 b one 5 6 # 3 b two 7 8 \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0cgroupby\u5728axis=0\u7684\u8f74\u5411\u4e0a\u5206\u7ec4\uff0c\u4e5f\u53ef\u4ee5\u5728\u5176\u4ed6\u4efb\u610f\u8f74\u5411\u4e0a\u8fdb\u884c\u5206\u7ec4\u3002 print(df.dtypes) # key1 object # key2 object # data1 int64 # data2 int64 # dtype: object grouped = df.groupby(df.dtypes, axis=1) print(grouped) # <pandas.core.groupby.generic.DataFrameGroupBy object at 0x7f4f6636df70> print(list(grouped)) # [ # (dtype('int64'), data1 data2 # 0 1 2 # 1 3 4 # 2 5 6 # 3 7 8 # 4 9 10), # (dtype('O'), key1 key2 # 0 a one # 1 a two # 2 b one # 3 b two # 4 a one) # ] \u6253\u5370\u5404\u5206\u7ec4\u5982\u4e0b\uff1a for dtype, group in grouped: print(dtype) print(group) # int64 # data1 data2 # 0 1 2 # 1 3 4 # 2 5 6 # 3 7 8 # 4 9 10 # object # key1 key2 # 0 a one # 1 a two # 2 b one # 3 b two # 4 a one","title":"\u904d\u5386\u5404\u5206\u7ec4"},{"location":"python/DataAnalysis/ch07/#_3","text":"\u5bf9\u4e8e\u4eceDataFrame\u521b\u5efa\u7684GroupBy\u5bf9\u8c61\uff0c\u7528\u5217\u540d\u79f0\u6216\u5217\u540d\u79f0\u6570\u7ec4\u8fdb\u884c\u7d22\u5f15\u65f6\uff0c\u4f1a\u4ea7\u751f\u7528\u4e8e\u805a\u5408\u7684\u5217\u5b50\u96c6\u7684\u6548\u679c\\ \u5982\u679c\u4f20\u9012\u7684\u662f\u5217\u8868\u6216\u6570\u7ec4\uff0c\u5219\u6b64\u7d22\u5f15\u64cd\u4f5c\u8fd4\u56de\u7684\u5bf9\u8c61\u662f\u5206\u7ec4\u7684DataFrame\uff1b\\ \u5982\u679c\u53ea\u6709\u5355\u4e2a\u5217\u540d\u4f5c\u4e3a\u6807\u91cf\u4f20\u9012\uff0c\u5219\u4e3a\u5206\u7ec4\u7684Series\uff1b \u5bf9\u6bd4\u4e0b\u97624\u53e5\uff1a result = df.groupby('key1')['data1'] # \u5355\u4e2a\u5217\u540d print(result) # <pandas.core.groupby.generic.SeriesGroupBy object at 0x7fa988609040> for key, data in result: print(key) print(data) result = df['data1'].groupby(df['key1']) # \u5355\u4e2a\u5217\u540d print(result) # <pandas.core.groupby.generic.SeriesGroupBy object at 0x7fa988609910> for key, data in result: print(key) print(data) # a # 0 1 # 1 3 # 4 9 # Name: data1, dtype: int64 # b # 2 5 # 3 7 # Name: data1, dtype: int64 result = df.groupby('key1')[['data1']] # \u5217\u8868\u6216\u6570\u7ec4 print(result) # <pandas.core.groupby.generic.DataFrameGroupBy object at 0x7f32666176a0> for key, data in result: print(key) print(data) # a # key1 key2 data1 data2 # 0 a one 1 2 # 1 a two 3 4 # 4 a one 9 10 # b # key1 key2 data1 data2 # 2 b one 5 6 # 3 b two 7 8 result = df[['data1']].groupby(df['key1']) # \u5217\u8868\u6216\u6570\u7ec4 print(result) # <pandas.core.groupby.generic.DataFrameGroupBy object at 0x7f32666171f0> for key, data in result: print(key) print(data) # a # data1 # 0 1 # 1 3 # 4 9 # b # data1 # 2 5 # 3 7","title":"\u9009\u62e9\u4e00\u5217\u6216\u6240\u6709\u5217\u7684\u5b50\u96c6"},{"location":"python/DataAnalysis/ch07/#series","text":"\u5206\u7ec4\u4fe1\u606f\u53ef\u80fd\u4f1a\u4ee5\u975e\u6570\u7ec4\u5f62\u5f0f\u5b58\u5728\u3002 \u751f\u6210\u4e00\u4e2a\u793a\u4f8bDataFrame people = pd.DataFrame( [[1, 3, 5, 7, 9], [0, 2, 4, 6, 8], [0, 2, 4, 6, 8], [1, 3, 5, 7, 9], [1, 2, 3, 4, 5]], columns=['a', 'b', 'c', 'd', 'e'], index=['Joe', 'Steve', 'Wes', 'Jim', 'Travis'] ) \u6dfb\u52a0\u4e00\u4e9bNA\u503c people.iloc[2:3, [1, 2]] = np.nan print(people) # a b c d e # Joe 1 3.0 5.0 7 9 # Steve 0 2.0 4.0 6 8 # Wes 0 NaN NaN 6 8 # Jim 1 3.0 5.0 7 9 # Travis 1 2.0 3.0 4 5 \u5047\u8bbe\u6709\u5982\u4e0b\u5404\u5217\u7684\u5206\u7ec4\u5bf9\u5e94\u5173\u7cfb\uff0c\u5e76\u4e14\u60f3\u628a\u5404\u5217\u6309\u7ec4\u7d2f\u52a0\uff1a mapping = { 'a': 'red', 'b': 'red', 'c': 'blue', 'd': 'blue', 'e': 'red', 'f': 'orange' # \u6ce8\u610f\uff1a\u5065f\u867d\u7136\u6ca1\u6709\u88ab\u7528\u5230\uff0c\u4f46\u4e0d\u5f71\u54cd\u5728\u8fd9\u91cc\u5b9a\u4e49\u3002 } \u628amapping\u8fd9\u4e2a\u5b57\u5178\u4f20\u7ed9groupby() by_column = people.groupby(mapping, axis=1) print(by_column.sum()) # blue red # Joe 12.0 13.0 # Steve 10.0 10.0 # Wes 6.0 8.0 # Jim 12.0 13.0 # Travis 7.0 8.0 Series\u4e5f\u6709\u76f8\u540c\u7684\u529f\u80fd\uff0c\u53ef\u4ee5\u89c6\u4e3a\u56fa\u5b9a\u5927\u5c0f\u7684\u6620\u5c04\uff1a map_services = pd.Series(mapping) print(map_services) # a red # b red # c blue # d blue # e red # f orange # dtype: object result = people.groupby(map_services, axis=1).count() print(result) # blue red # Joe 2 3 # Steve 2 3 # Wes 1 2 # Jim 2 3 # Travis 2 3","title":"\u4f7f\u7528\u5b57\u5178\u548cSeries\u5206\u7ec4"},{"location":"python/DataAnalysis/ch07/#_4","text":"\u4e0e\u4f7f\u7528\u5b57\u5178\u6216Series\u5206\u7ec4\u76f8\u6bd4\uff0c\u4f7f\u7528Python\u51fd\u6570\u662f\u5b9a\u4e49\u5206\u7ec4\u5173\u7cfb\u7684\u4e00\u79cd\u66f4\u4e3a\u901a\u7528\u7684\u65b9\u5f0f\u3002\\ \u4f5c\u4e3a\u5206\u7ec4\u952e\u4f20\u9012\u7684\u51fd\u6570\u5c06\u4f1a\u6309\u7167\u6bcf\u4e2a\u7d22\u5f15\u503c\u8c03\u7528\u4e00\u6b21\uff0c\u540c\u65f6\u8fd4\u56de\u503c\u4f1a\u88ab\u7528\u4f5c\u5206\u7ec4\u540d\u79f0\u3002\u6ce8\u610f\uff1a\u51fd\u6570\u662f\u4f5c\u7528\u5728\u7d22\u5f15\u4e0a\u3002 result = people.groupby(len).sum() # \u4eba\u7684\u540d\u5b57\u662f\u7d22\u5f15\u503c\uff0c\u6839\u636e\u540d\u5b57\u7684\u957f\u5ea6\u6765\u8fdb\u884c\u5206\u7ec4 print(result) # a b c d e # 3 2 6.0 10.0 20 26 # 5 0 2.0 4.0 6 8 # 6 1 2.0 3.0 4 5 \u53ef\u4ee5\u5c06\u51fd\u6570\u4e0e\u6570\u7ec4\u3001\u5b57\u5178\u6216Series\u8fdb\u884c\u6df7\u5408\uff0c\u6240\u6709\u7684\u5bf9\u8c61\u90fd\u4f1a\u5728\u5185\u90e8\u8f6c\u6362\u4e3a\u6570\u7ec4 key_list = ['one', 'one', 'one', 'two', 'two'] result = people.groupby([len, key_list]).min() print(result) # a b c d e # 3 one 0 3.0 5.0 6 8 # two 1 3.0 5.0 7 9 # 5 one 0 2.0 4.0 6 8 # 6 two 1 2.0 3.0 4 5","title":"\u4f7f\u7528\u51fd\u6570\u5206\u7ec4"},{"location":"python/DataAnalysis/ch07/#_5","text":"\u6839\u636e\u5c42\u7ea7\u5206\u7ec4\u65f6\uff0c\u5c06\u5c42\u7ea7\u6570\u503c\u6216\u5c42\u7ea7\u540d\u79f0\u4f20\u9012\u7ed9level\u5173\u952e\u5b57\uff1a columns = pd.MultiIndex.from_arrays( [['US', 'US', 'US', 'JP', 'JP'], [1, 3, 5, 1, 3]], names=['cty', 'tenor'] ) hier_df = pd.DataFrame( [[1, 3, 5, 7, 9], [0, 2, 4, 6, 8], [1, 3, 5, 7, 9], [1, 2, 3, 4, 5]], columns=columns ) print(hier_df) # cty US JP # tenor 1 3 5 1 3 # 0 1 3 5 7 9 # 1 0 2 4 6 8 # 2 1 3 5 7 9 # 3 1 2 3 4 5 result = hier_df.groupby(level='cty', axis=1).count() print(result) # cty JP US # 0 2 3 # 1 2 3 # 2 2 3 # 3 2 3","title":"\u6839\u636e\u7d22\u5f15\u5c42\u7ea7\u5206\u7ec4"},{"location":"python/DataAnalysis/ch07/#_6","text":"\u805a\u5408\u662f\u6307\u6240\u6709\u6839\u636e\u6570\u7ec4\u4ea7\u751f\u6807\u91cf\u503c\u7684\u6570\u636e\u8f6c\u6362\u8fc7\u7a0b\uff0c\u6bd4\u5982\uff1amean\u3001count\u3001min\u548csum\u7b49\u4e00\u4e9b\u805a\u5408\u64cd\u4f5c\u3002 import pandas as pd import numpy as np \u9884\u5907\u77e5\u8bc6\uff1a\\ \u5206\u4f4d\u6570\uff08Quantile\uff09\uff0c\u4e5f\u79f0\u5206\u4f4d\u70b9\uff0c\u662f\u6307\u5c06\u4e00\u4e2a\u968f\u673a\u53d8\u91cf\u7684\u6982\u7387\u5206\u5e03\u8303\u56f4\u5206\u4e3a\u51e0\u4e2a\u7b49\u4efd\u7684\u6570\u503c\u70b9\uff0c\u5206\u6790\u5176\u6570\u636e\u53d8\u91cf\u7684\u8d8b\u52bf\u3002\\ \u5e38\u7528\u7684\u5206\u4f4d\u6570\u6709 \u4e2d\u4f4d\u6570\u3001\u56db\u5206\u4f4d\u6570\u3001\u767e\u5206\u4f4d\u6570\u7b49\u3002\\ \u4e2d\u4f4d\u6570\uff08Medians\uff09\u662f\u4e00\u4e2a\u7edf\u8ba1\u5b66\u7684\u4e13\u6709\u540d\u8bcd\uff0c\u4ee3\u8868\u4e00\u4e2a\u6837\u672c\u3001\u79cd\u7fa4\u6216\u6982\u7387\u5206\u5e03\u4e2d\u7684\u4e00\u4e2a\u6570\u503c\uff0c\u53ef\u4ee5\u5c06\u6570\u503c\u96c6\u5408\u5212\u5206\u4e3a\u76f8\u7b49\u7684\u4e24\u90e8\u5206\u3002\\ \u5229\u7528pandas\u5e93\u8ba1\u7b97data = [6, 47, 49, 15, 42, 41, 7, 39, 43, 40, 36]\u7684\u5206\u4f4d\u6570\u3002\\ \u786e\u5b9ap\u5206\u4f4d\u6570\u4f4d\u7f6e\u7684\u4e24\u79cd\u65b9\u6cd5(n\u4e3a\u6570\u636e\u7684\u603b\u4e2a\u6570\uff0cp\u4e3a0-1\u4e4b\u95f4\u7684\u503c)\u3002\u5728python\u4e2d\u8ba1\u7b97\u5206\u4f4d\u6570\u4f4d\u7f6e\u7684\u65b9\u6848\u91c7\u7528position=1+(n-1) p\\ * position = (n+1) p * position = 1 + (n-1)*p \u6848\u4f8b1 data = pd.Series(np.array([6, 47, 49, 15, 42, 41, 7, 39, 43, 40, 36])) print(\"\u6570\u636e\u683c\u5f0f\uff1a\") print(np.sort(data)) # \u5fc5\u987b\u8981\u6392\u5e8f print('Q1:', data.quantile(.25)) print('Q2:', data.quantile(.5)) print('Q3:', data.quantile(.75)) # \u6570\u636e\u683c\u5f0f\uff1a # [ 6 7 15 36 39 40 41 42 43 47 49] # Q1: 25.5 # Q2: 40.0 # Q3: 42.5 # \u624b\u7b97\u8ba1\u7b97\u7ed3\u679c\uff1a # Q1\u7684p\u5206\u4f4d\u6570(0.25)\u4f4d\u7f6eposition = 1+(11-1)*0.25 = 3.5(\u53d6\u7b2c3\u4f4d) (p=0.25) Q1=15+(36-15)*0.5=25.5 (\u7b2c3\u30014\u4f4d\u7684\u5dee\u4e58\u4ee5\u4f59\u65700.5) # Q2\u7684p\u5206\u4f4d\u6570(0.5)\u4f4d\u7f6eposition = 1+(11-1)*0.5 = 6 (p=0.5) Q2=40 # Q3\u7684p\u5206\u4f4d\u6570(0.75)\u4f4d\u7f6eposition = 1+(11-1)*0.75 = 9 (p=0.75) Q3=42+(43-42)*0.5=42.5 # IQR = Q3 - Q1 = 17 \u6848\u4f8b2 df = pd.DataFrame(np.array([[1, 1], [2, 10], [3, 100], [4, 100]]), columns=['a', 'b']) print(\"\u6570\u636e\u539f\u59cb\u683c\u5f0f\uff1a\") print(df) print(\"\u8ba1\u7b97p=0.1\u65f6\uff0ca\u5217\u548cb\u5217\u7684\u5206\u4f4d\u6570\") print(df.quantile(.1)) # \u6570\u636e\u539f\u59cb\u683c\u5f0f\uff1a # a b # 0 1 1 # 1 2 10 # 2 3 100 # 3 4 100 # \u8ba1\u7b97p=0.1\u65f6\uff0ca\u5217\u548cb\u5217\u7684\u5206\u4f4d\u6570 # a 1.3 # b 3.7 # Name: 0.1, dtype: float64 # \u624b\u7b97\u8ba1\u7b97\u7ed3\u679c\uff1a # \u8ba1\u7b97a\u5217 # position=1+(4-1)*0.1=1.3 (\u53d6\u7b2c1\u4f4d) # Q1=1+(2-1)*0.3=1.3 (\u7b2c1\u30012\u4f4d\u7684\u5dee\u4e58\u4ee5\u4f59\u65700.3) # \u8ba1\u7b97b\u5217 # position=1+(4-1)*0.1=1.3 (\u53d6\u7b2c1\u4f4d) # Q1=1+(10-1)*0.3=3.7 (\u7b2c1\u30012\u4f4d\u7684\u5dee\u4e58\u4ee5\u4f59\u65700.3) \u4f18\u5316\u7684groupby\u65b9\u6cd5\uff1a * count: \u5206\u7ec4\u4e2d\u975eNA\u503c\u7684\u6570\u91cf * sum: \u975eNA\u503c\u7684\u7d2f\u52a0\u548c * mean: \u975eNA\u503c\u7684\u5e73\u5747\u503c * median: \u975eNA\u503c\u7684\u7b97\u672f\u4e2d\u4f4d\u6570 * std, var: \u65e0\u504f\u7684(n-1\u5206\u6bcd)\u6807\u51c6\u5dee\u548c\u65b9\u5dee * min, max: \u975eNA\u503c\u7684\u6700\u5c0f\u503c\u3001\u6700\u5927\u503c * prod: \u975eNA\u503c\u7684\u4e58\u79ef * first, last: \u975eNA\u503c\u7684\u7b2c\u4e00\u4e2a\u3001\u6700\u540e\u4e00\u4e2a\u503c df = pd.DataFrame( { 'key1': ['a', 'a', 'b', 'b', 'a'], 'key2': ['one', 'two', 'one', 'two', 'one'], 'data1': [1, 3, 5, 7, 9], 'data2': [2, 4, 6, 8, 10] } ) print(df) # key1 key2 data1 data2 # 0 a one 1 2 # 1 a two 3 4 # 2 b one 5 6 # 3 b two 7 8 # 4 a one 9 10 grouped = df.groupby('key1') result = grouped['data1'] for i in result: print(i) # ('a', 0 1 # 1 3 # 4 9 # Name: data1, dtype: int64) # ('b', 2 5 # 3 7 # Name: data1, dtype: int64) result = grouped['data1'].quantile(0.9) # quantile\u5206\u4f4d\u6570 print(result) # key1 # a 7.8 # b 6.8 # Name: data1, dtype: float64 # \u624b\u7b97\u8ba1\u7b97\u7ed3\u679c\uff1a # \u8ba1\u7b97a\u5217 # position=1+(3-1)*0.9=2.8 # Q1=3+(9-3)*0.8=7.8 # \u8ba1\u7b97b\u5217 # position=1+(2-1)*0.9=1.9 # Q1=5+(7-5)*0.9=6.8 \u4f7f\u7528\u81ea\u884c\u5236\u5b9a\u7684\u805a\u5408\uff0c\u5e76\u518d\u8c03\u7528\u5df2\u7ecf\u5728\u5206\u7ec4\u5bf9\u8c61\u4e0a\u5b9a\u4e49\u597d\u7684\u65b9\u6cd5\u3002 def peak_to_peak(arr): return arr.max() - arr.min() result = grouped.agg(peak_to_peak) print(result) # data1 data2 # key1 # a 8 8 # b 2 2 result = grouped.describe() print(result) # data1 ... data2 # count mean std min 25% ... min 25% 50% 75% max # key1 ... # a 3.0 4.333333 4.163332 1.0 2.0 ... 2.0 3.0 4.0 7.0 10.0 # b 2.0 6.000000 1.414214 5.0 5.5 ... 6.0 6.5 7.0 7.5 8.0","title":"\u6570\u636e\u805a\u5408"},{"location":"python/DataAnalysis/ch07/#_7","text":"tips = pd.read_csv('../examples/tips.csv') tips['tip_pct'] = tips['tip'] / (tips['total_bill'] - tips['tip']) print(tips.head(5)) # total_bill tip smoker day time size tip_pct # 0 16.99 1.01 No Sun Dinner 2 0.063204 # 1 10.34 1.66 No Sun Dinner 3 0.191244 # 2 21.01 3.50 No Sun Dinner 3 0.199886 # 3 23.68 3.31 No Sun Dinner 2 0.162494 # 4 24.59 3.61 No Sun Dinner 4 0.172069 \u6839\u636e\u5404\u5217\u540c\u65f6\u4f7f\u7528\u591a\u4e2a\u51fd\u6570\u8fdb\u884c\u805a\u5408 grouped = tips.groupby(['day', 'smoker']) # for i in grouped: # print(i) # (('Fri', 'No'), total_bill tip smoker day time size tip_pct # 91 22.49 3.50 No Fri Dinner 2 0.184308 # ...... # 223 15.98 3.00 No Fri Lunch 3 0.231125) # (('Fri', 'Yes'), total_bill tip smoker day time size tip_pct # 90 28.97 3.00 Yes Fri Dinner 2 0.115518 # ...... # 226 10.09 2.00 Yes Fri Lunch 2 0.247219) # ...... grouped_pct = grouped['tip_pct'] for i in grouped_pct: print(i) # (('Fri', 'No'), 91 0.184308 # 94 0.166667 # ...... # Name: tip_pct, dtype: float64) # (('Fri', 'Yes'), 90 0.115518 # 92 0.210526 # ...... # Name: tip_pct, dtype: float64) # ...... \u5c06\u51fd\u6570\u540d\u4ee5\u5b57\u7b26\u4e32\u5f62\u5f0f\u4f20\u9012 result = grouped_pct.agg('mean') print(result) # day smoker # Fri No 0.179740 # Yes 0.216293 # Sat No 0.190412 # Yes 0.179833 # Sun No 0.193617 # Yes 0.322021 # Thur No 0.193424 # Yes 0.198508 # Name: tip_pct, dtype: float64 \u5982\u679c\u4f20\u9012\u7684\u662f\u51fd\u6570\u6216\u8005\u51fd\u6570\u540d\u7684\u5217\u8868\uff0c\u4f1a\u5f97\u5230\u4e00\u4e2a\u5217\u540d\u662f\u8fd9\u4e9b\u51fd\u6570\u540d\u7684DataFrame\u3002 \u4e0b\u9762\u4f20\u9012\u4e86\u805a\u5408\u51fd\u6570\u7684\u5217\u8868\u7ed9agg\u65b9\u6cd5\uff0c\u8fd9\u4e9b\u51fd\u6570\u4f1a\u5404\u81ea\u8fd0\u7528\u4e8e\u6570\u636e\u5206\u7ec4\u3002 result = grouped_pct.agg(['mean', 'std', peak_to_peak]) print(result) # mean std peak_to_peak # day smoker # Fri No 0.179740 0.039458 0.094263 # Yes 0.216293 0.077530 0.242219 # Sat No 0.190412 0.058626 0.352192 # Yes 0.179833 0.089496 0.446137 # Sun No 0.193617 0.060302 0.274897 # Yes 0.322021 0.538061 2.382107 # Thur No 0.193424 0.056065 0.284273 # Yes 0.198508 0.057170 0.219047 \u5982\u679c\u4f20\u9012\u7684\u662f(name, function)\u5143\u7ec4\u7684\u5217\u8868\uff0c\u6bcf\u4e2a\u5143\u7ec4\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\u5c06\u4f5c\u4e3aDataFrame\u7684\u5217\u540d\uff08\u53ef\u4ee5\u8ba4\u4e3a\u4e8c\u5143\u5143\u7ec4\u7684\u5217\u8868\u662f\u4e00\u79cd\u6709\u5e8f\u7684\u5bf9\u5e94\u5173\u7cfb\uff09\uff1a result = grouped_pct.agg([('foo', 'mean'), ('bar', np.std)]) # foo\u662fmean\u503c\u7684\u5217\u540d print(result) # foo bar # day smoker # Fri No 0.179740 0.039458 # Yes 0.216293 0.077530 # Sat No 0.190412 0.058626 # Yes 0.179833 0.089496 # Sun No 0.193617 0.060302 # Yes 0.322021 0.538061 # Thur No 0.193424 0.056065 # Yes 0.198508 0.057170 \u53ef\u4ee5\u6307\u5b9a\u5e94\u7528\u5230\u6240\u6709\u5217\u4e0a\u7684\u51fd\u6570\u5217\u8868\u6216\u6bcf\u4e00\u5217\u4e0a\u8981\u5e94\u7528\u7684\u4e0d\u540c\u51fd\u6570\u3002\\ \u4e0b\u9762\u4ea7\u751f\u7684DataFrame\u62e5\u6709\u5206\u5c42\u5217\uff0c\u4e0e\u5206\u522b\u805a\u5408\u6bcf\u4e00\u5217\uff0c\u518d\u4ee5\u5217\u540d\u4f5c\u4e3akeys\u53c2\u6570\u4f7f\u7528concat\u5c06\u7ed3\u679c\u62fc\u63a5\u5728\u4e00\u8d77\u7684\u7ed3\u679c\u76f8\u540c\u3002 functions = ['count', 'mean', 'max'] result = grouped[['tip_pct', 'total_bill']].agg(functions) print(result) # tip_pct total_bill # count mean max count mean max # day smoker # Fri No 4 0.179740 0.231125 4 18.420000 22.75 # Yes 15 0.216293 0.357737 15 16.813333 40.17 # Sat No 45 0.190412 0.412409 45 19.661778 48.33 # Yes 42 0.179833 0.483092 42 21.276667 50.81 # Sun No 57 0.193617 0.338101 57 20.506667 48.17 # Yes 19 0.322021 2.452381 19 24.120000 45.35 # Thur No 45 0.193424 0.362976 45 17.113111 41.19 # Yes 17 0.198508 0.317965 17 19.190588 43.11 # \u628a['tip_pct', 'total_bill']\u6539\u6210[['tip_pct', 'total_bill']]\uff0c\u5c31\u53ef\u4ee5\u907f\u514d\u62a5\u9519 # FutureWarning: Indexing with multiple keys (implicitly converted to a tuple of keys) will be deprecated, use a list instead. # result = grouped['tip_pct', 'total_bill'].agg(functions) print(result['tip_pct']) # count mean max # day smoker # Fri No 4 0.179740 0.231125 # Yes 15 0.216293 0.357737 # Sat No 45 0.190412 0.412409 # Yes 42 0.179833 0.483092 # Sun No 57 0.193617 0.338101 # Yes 19 0.322021 2.452381 # Thur No 45 0.193424 0.362976 # Yes 17 0.198508 0.317965 \u4e5f\u540c\u6837\u53ef\u4ee5\u4f20\u9012\u5177\u6709\u81ea\u5b9a\u4e49\u540d\u79f0\u7684\u5143\u7ec4\u5217\u8868\uff1a ftuples = [('Durchschnitt', 'mean'), ('Abweichung', np.var)] result = grouped[['tip_pct', 'total_bill']].agg(ftuples) print(result) # tip_pct total_bill # Durchschnitt Abweichung Durchschnitt Abweichung # day smoker # Fri No 0.179740 0.001557 18.420000 25.596333 # Yes 0.216293 0.006011 16.813333 82.562438 # Sat No 0.190412 0.003437 19.661778 79.908965 # Yes 0.179833 0.008010 21.276667 101.387535 # Sun No 0.193617 0.003636 20.506667 66.099980 # Yes 0.322021 0.289509 24.120000 109.046044 # Thur No 0.193424 0.003143 17.113111 59.625081 # Yes 0.198508 0.003268 19.190588 69.808518 \u8981\u5c06\u4e0d\u540c\u7684\u51fd\u6570\u5e94\u7528\u5230\u4e00\u4e2a\u6216\u591a\u4e2a\u5217\u4e0a\uff0c\u9700\u8981\u5c06\u542b\u6709\u5217\u540d\u4e0e\u51fd\u6570\u5bf9\u5e94\u5173\u7cfb\u7684\u5b57\u5178\u4f20\u9012\u7ed9agg\uff1a result = grouped.agg({'tip': np.max, 'size': 'sum'}) print(result) # tip size # day smoker # Fri No 3.50 9 # Yes 4.73 31 # Sat No 9.00 115 # Yes 10.00 104 # Sun No 6.00 167 # Yes 6.50 49 # Thur No 6.70 112 # Yes 5.00 40 result = grouped.agg({'tip_pct': ['min', 'max', 'mean', 'std']}) print(result) # tip_pct # min max mean std # day smoker # Fri No 0.136861 0.231125 0.179740 0.039458 # Yes 0.115518 0.357737 0.216293 0.077530 # Sat No 0.060217 0.412409 0.190412 0.058626 # Yes 0.036955 0.483092 0.179833 0.089496 # Sun No 0.063204 0.338101 0.193617 0.060302 # Yes 0.070274 2.452381 0.322021 0.538061 # Thur No 0.078704 0.362976 0.193424 0.056065 # Yes 0.098918 0.317965 0.198508 0.057170 \u53ea\u6709\u591a\u4e2a\u51fd\u6570\u5e94\u7528\u4e8e\u81f3\u5c11\u4e00\u4e2a\u5217\u65f6\uff0cDataFrame\u624d\u5177\u6709\u5206\u5c42\u5217\u3002","title":"\u9010\u5217\u53ca\u591a\u51fd\u6570\u5e94\u7528"},{"location":"python/DataAnalysis/ch07/#_8","text":"\u5728\u524d\u9762\u6240\u6709\u7684\u4f8b\u5b50\u4e2d\uff0c\u805a\u5408\u6570\u636e\u8fd4\u56de\u65f6\u90fd\u662f\u5e26\u6709\u7d22\u5f15\u7684\uff0c\u6709\u65f6\u7d22\u5f15\u662f\u5206\u5c42\u7684\uff0c\u7531\u552f\u4e00\u7684\u5206\u7ec4\u952e\u8054\u5408\u5f62\u6210\u3002\\ \u56e0\u4e3a\u4e0d\u662f\u6240\u6709\u7684\u60c5\u51b5\u4e0b\u90fd\u9700\u8981\u7d22\u5f15\uff0c\u6240\u4ee5\u5728\u5927\u591a\u6570\u60c5\u51b5\u4e0b\u53ef\u4ee5\u901a\u8fc7\u5411groupby\u4f20\u9012as_index=False\u6765\u7981\u7528\u5206\u7ec4\u952e\u4f5c\u4e3a\u7d22\u5f15\u7684\u884c\u4e3a\uff1a result = tips.groupby(['day', 'smoker'], as_index=False).mean() print(result) # day smoker total_bill tip size tip_pct # 0 Fri No 18.420000 2.812500 2.250000 0.179740 # 1 Fri Yes 16.813333 2.714000 2.066667 0.216293 # 2 Sat No 19.661778 3.102889 2.555556 0.190412 # 3 Sat Yes 21.276667 2.875476 2.476190 0.179833 # 4 Sun No 20.506667 3.167895 2.929825 0.193617 # 5 Sun Yes 24.120000 3.516842 2.578947 0.322021 # 6 Thur No 17.113111 2.673778 2.488889 0.193424 # 7 Thur Yes 19.190588 3.030000 2.352941 0.198508 \u901a\u8fc7\u5728\u7ed3\u679c\u4e0a\u8c03\u7528reset_index\u4e5f\u53ef\u4ee5\u83b7\u5f97\u540c\u6837\u7684\u7ed3\u679c\u3002\u4f7f\u7528as_index=False\u53ef\u4ee5\u907f\u514d\u4e00\u4e9b\u4e0d\u5fc5\u8981\u7684\u8ba1\u7b97\u3002 result = tips.groupby(['day', 'smoker']).mean() print(result.reset_index()) # day smoker total_bill tip size tip_pct # 0 Fri No 18.420000 2.812500 2.250000 0.179740 # 1 Fri Yes 16.813333 2.714000 2.066667 0.216293 # 2 Sat No 19.661778 3.102889 2.555556 0.190412 # 3 Sat Yes 21.276667 2.875476 2.476190 0.179833 # 4 Sun No 20.506667 3.167895 2.929825 0.193617 # 5 Sun Yes 24.120000 3.516842 2.578947 0.322021 # 6 Thur No 17.113111 2.673778 2.488889 0.193424 # 7 Thur Yes 19.190588 3.030000 2.352941 0.198508 print(result) # total_bill tip size tip_pct # day smoker # Fri No 18.420000 2.812500 2.250000 0.179740 # Yes 16.813333 2.714000 2.066667 0.216293 # Sat No 19.661778 3.102889 2.555556 0.190412 # Yes 21.276667 2.875476 2.476190 0.179833 # Sun No 20.506667 3.167895 2.929825 0.193617 # Yes 24.120000 3.516842 2.578947 0.322021 # Thur No 17.113111 2.673778 2.488889 0.193424 # Yes 19.190588 3.030000 2.352941 0.198508","title":"\u8fd4\u56de\u4e0d\u542b\u884c\u7d22\u5f15\u7684\u805a\u5408\u6570\u636e"},{"location":"python/DataAnalysis/ch07/#-","text":"import pandas as pd import numpy as np import statsmodels.api as sm GroupBy\u65b9\u6cd5\u6700\u5e38\u89c1\u7684\u76ee\u7684\u662fapply\uff08\u5e94\u7528\uff09\u3002apply\u5c06\u5bf9\u8c61\u62c6\u5206\u6210\u591a\u5757\uff0c\u7136\u540e\u5728\u6bcf\u4e00\u5757\u4e0a\u8c03\u7528\u4f20\u9012\u7684\u51fd\u6570\uff0c\u4e4b\u540e\u5c1d\u8bd5\u5c06\u6bcf\u4e00\u5757\u62fc\u63a5\u5230\u4e00\u8d77\u3002 \u6839\u636e\u4e0b\u9762\u7684\u5c0f\u8d39\u6570\u636e\u96c6\uff0c\u6309\u7ec4\u9009\u51fa\u5c0f\u8d39\u767e\u5206\u6bd4\uff08tip-pct\uff09\u6700\u9ad8\u7684\u4e94\u7ec4\u3002 tips = pd.read_csv('../examples/tips.csv') tips['tip_pct'] = tips['tip'] / (tips['total_bill'] - tips['tip']) \u6837\u672c\u6570\u636e print(tips.head(5)) # total_bill tip smoker day time size tip_pct # 0 16.99 1.01 No Sun Dinner 2 0.063204 # 1 10.34 1.66 No Sun Dinner 3 0.191244 # 2 21.01 3.50 No Sun Dinner 3 0.199886 # 3 23.68 3.31 No Sun Dinner 2 0.162494 # 4 24.59 3.61 No Sun Dinner 4 0.172069 \u9996\u5148\uff0c\u5199\u4e00\u4e2a\u53ef\u4ee5\u5728\u7279\u5b9a\u5217\u4e2d\u9009\u51fa\u6700\u5927\u503c\u6240\u5728\u884c\u7684\u51fd\u6570\uff1a\\ \u6dfb\u52a0\u4e86\u5347\u5e8f\uff0c\u7ed3\u679c\u8f93\u51fa\u6700\u540e5\u884c\uff08\u6700\u540e\u76845\u884c\u4e5f\u662f\u6700\u5927\u76845\u4e2atip_tcp\u8bb0\u5f55\uff09 def top(df, n=5, column='tip_pct'): return df.sort_values(by=column, ascending=True)[-n:] result = top(tips, n=6) print(result) # \u7b49\u4ef7\u65b9\u5f0f\uff1a # result = tips.sort_values('tip_pct')[-6:] # print(result) # total_bill tip smoker day time size tip_pct # 109 14.31 4.00 Yes Sat Dinner 2 0.387973 # 183 23.17 6.50 Yes Sun Dinner 4 0.389922 # 232 11.61 3.39 No Sat Dinner 2 0.412409 # 67 3.07 1.00 Yes Sat Dinner 1 0.483092 # 178 9.60 4.00 Yes Sun Dinner 2 0.714286 # 172 7.25 5.15 Yes Sun Dinner 2 2.452381 \u5982\u679c\u6309\u7167smoker\u8fdb\u884c\u5206\u7ec4\uff0c\u4e4b\u540e\u8c03\u7528apply\uff0c\u4f1a\u5f97\u5230\u4ee5\u4e0b\u7ed3\u679c\uff1a\\ top\u51fd\u6570\u5728DataFrame\u7684\u6bcf\u4e00\u884c\u5206\u7ec4\u4e0a\u88ab\u8c03\u7528\uff0c\u4e4b\u540e\u4f7f\u7528pandas.concat\u5c06\u51fd\u6570\u7ed3\u679c\u7c98\u8d34\u5728\u4e00\u8d77\uff0c\u5e76\u4f7f\u7528\u5206\u7ec4\u540d\u4f5c\u4e3a\u5404\u7ec4\u7684\u6807\u7b7e\u3002\\ \u56e0\u6b64\u7ed3\u679c\u5305\u542b\u4e00\u4e2a\u5206\u5c42\u7d22\u5f15\uff0c\u8be5\u5206\u5c42\u7d22\u5f15\u7684\u5185\u90e8\u5c42\u7ea7\u5305\u542b\u539fDataFrame\u7684\u7d22\u5f15\u503c\u3002 result = tips.groupby('smoker').apply(top) print(result) # total_bill tip smoker day time size tip_pct # smoker # No 88 24.71 5.85 No Thur Lunch 2 0.310180 # 185 20.69 5.00 No Sun Dinner 5 0.318674 # 51 10.29 2.60 No Sun Dinner 2 0.338101 # 149 7.51 2.00 No Thur Lunch 2 0.362976 # 232 11.61 3.39 No Sat Dinner 2 0.412409 # Yes 109 14.31 4.00 Yes Sat Dinner 2 0.387973 # 183 23.17 6.50 Yes Sun Dinner 4 0.389922 # 67 3.07 1.00 Yes Sat Dinner 1 0.483092 # 178 9.60 4.00 Yes Sun Dinner 2 0.714286 # 172 7.25 5.15 Yes Sun Dinner 2 2.452381 \u5982\u679c\u9664\u4e86\u5411apply\u4f20\u9012\u51fd\u6570\uff0c\u8fd8\u4f20\u9012\u5176\u4ed6\u53c2\u6570\u6216\u5173\u952e\u5b57\u7684\u8bdd\uff0c\u4f60\u53ef\u4ee5\u628a\u8fd9\u4e9b\u653e\u5728\u51fd\u6570\u540e\u8fdb\u884c\u4f20\u9012 result = tips.groupby('smoker').apply(top, n=1, column='total_bill') print(result) # \u8fd92\u884c\u90fd\u662fsmoker\u662fyes\u548cno\u65f6\u6700\u5927total_bill\u503c\u6240\u5728\u884c\u3002 # total_bill tip smoker day time size tip_pct # smoker # No 212 48.33 9.0 No Sat Dinner 4 0.228833 # Yes 170 50.81 10.0 Yes Sat Dinner 3 0.245038 \u5728GroupBy\u5bf9\u8c61\u4e0a\u8c03\u7528describe\u65b9\u6cd5 result = tips.groupby('smoker')['tip_pct'].describe() print(result) # count mean std ... 50% 75% max # smoker ... # No 151.0 0.192237 0.057665 ... 0.184308 0.227015 0.412409 # Yes 93.0 0.218176 0.254295 ... 0.181818 0.242326 2.452381 # [2 rows x 8 columns] print(result.unstack('smoker')) # \u7c7b\u4f3c\u4e8e\u8f6c\u7f6e # smoker # count No 151.000000 # Yes 93.000000 # mean No 0.192237 # Yes 0.218176 # std No 0.057665 # Yes 0.254295 # min No 0.060217 # Yes 0.036955 # 25% No 0.158622 # Yes 0.119534 # 50% No 0.184308 # Yes 0.181818 # 75% No 0.227015 # Yes 0.242326 # max No 0.412409 # Yes 2.452381 # dtype: float64 \u5728GroupBy\u5bf9\u8c61\u7684\u5185\u90e8\uff0c\u5f53\u8c03\u7528\u50cfdescribe\u8fd9\u6837\u7684\u65b9\u6cd5\u65f6\uff0c\u5b9e\u9645\u4e0a\u662f\u4ee5\u4e0b\u4ee3\u7801\u7684\u7b80\u5199\uff1a grouped = tips.groupby(['smoker']) f = lambda x: x.describe() result = grouped.apply(f) print(result) # total_bill tip size tip_pct # smoker # No count 151.000000 151.000000 151.000000 151.000000 # mean 19.188278 2.991854 2.668874 0.192237 # std 8.255582 1.377190 1.017984 0.057665 # min 7.250000 1.000000 1.000000 0.060217 # 25% 13.325000 2.000000 2.000000 0.158622 # 50% 17.590000 2.740000 2.000000 0.184308 # 75% 22.755000 3.505000 3.000000 0.227015 # max 48.330000 9.000000 6.000000 0.412409 # Yes count 93.000000 93.000000 93.000000 93.000000 # mean 20.756344 3.008710 2.408602 0.218176 # std 9.832154 1.401468 0.810751 0.254295 # min 3.070000 1.000000 1.000000 0.036955 # 25% 13.420000 2.000000 2.000000 0.119534 # 50% 17.920000 3.000000 2.000000 0.181818 # 75% 26.860000 3.680000 3.000000 0.242326 # max 50.810000 10.000000 5.000000 2.452381","title":"\u5e94\u7528\uff1a\u901a\u7528\u62c6\u5206-\u5e94\u7528-\u8054\u5408"},{"location":"python/DataAnalysis/ch07/#_9","text":"\u5728\u524d\u9762\u7684\u4f8b\u5b50\u4e2d\u6240\u5f97\u5230\u7684\u5bf9\u8c61\uff0c\u90fd\u5177\u6709\u5206\u7ec4\u952e\u6240\u5f62\u6210\u7684\u5206\u5c42\u7d22\u5f15\u4ee5\u53ca\u6bcf\u4e2a\u539f\u59cb\u5bf9\u8c61\u7684\u7d22\u5f15\u3002\\ \u4e5f\u53ef\u4ee5\u901a\u8fc7\u5411groupby\u4f20\u9012group_keys=False\u6765\u7981\u7528\u8fd9\u4e2a\u529f\u80fd\u3002 result = tips.groupby('smoker', group_keys=True).apply(top) print(result) # total_bill tip smoker day time size tip_pct # smoker # No 88 24.71 5.85 No Thur Lunch 2 0.310180 # 185 20.69 5.00 No Sun Dinner 5 0.318674 # 51 10.29 2.60 No Sun Dinner 2 0.338101 # 149 7.51 2.00 No Thur Lunch 2 0.362976 # 232 11.61 3.39 No Sat Dinner 2 0.412409 # Yes 109 14.31 4.00 Yes Sat Dinner 2 0.387973 # 183 23.17 6.50 Yes Sun Dinner 4 0.389922 # 67 3.07 1.00 Yes Sat Dinner 1 0.483092 # 178 9.60 4.00 Yes Sun Dinner 2 0.714286 # 172 7.25 5.15 Yes Sun Dinner 2 2.452381 result = tips.groupby('smoker', group_keys=False).apply(top) print(result) # total_bill tip smoker day time size tip_pct # 88 24.71 5.85 No Thur Lunch 2 0.310180 # 185 20.69 5.00 No Sun Dinner 5 0.318674 # 51 10.29 2.60 No Sun Dinner 2 0.338101 # 149 7.51 2.00 No Thur Lunch 2 0.362976 # 232 11.61 3.39 No Sat Dinner 2 0.412409 # 109 14.31 4.00 Yes Sat Dinner 2 0.387973 # 183 23.17 6.50 Yes Sun Dinner 4 0.389922 # 67 3.07 1.00 Yes Sat Dinner 1 0.483092 # 178 9.60 4.00 Yes Sun Dinner 2 0.714286 # 172 7.25 5.15 Yes Sun Dinner 2 2.452381","title":"\u538b\u7f29\u5206\u7ec4\u952e"},{"location":"python/DataAnalysis/ch07/#_10","text":"\u7b2c8\u7ae0\u4e2d\uff0cpandas\u6709\u4e00\u4e9b\u5de5\u5177\uff0c\u5c24\u5176\u662fcut\u548cqcut\uff0c\u7528\u4e8e\u5c06\u6570\u636e\u6309\u7167\u4f60\u9009\u62e9\u7684\u7bb1\u4f4d\u6216\u6837\u672c\u5206\u4f4d\u6570\u8fdb\u884c\u5206\u6876\u3002\\ \u4e0egroupby\u65b9\u6cd5\u4e00\u8d77\u4f7f\u7528\u8fd9\u4e9b\u51fd\u6570\u53ef\u4ee5\u5bf9\u6570\u636e\u96c6\u66f4\u65b9\u4fbf\u5730\u8fdb\u884c\u5206\u6876\u6216\u5206\u4f4d\u5206\u6790\u3002 \u590d\u4e60\uff1a\\ \u673a\u68b0\u5b66\u4e60\u4e2d\u7684\u5206\u7bb1\u5904\u7406\\ \u5728\u673a\u68b0\u5b66\u4e60\u4e2d\u7ecf\u5e38\u4f1a\u5bf9\u6570\u636e\u8fdb\u884c\u5206\u7bb1\u5904\u7406\u7684\u64cd\u4f5c\uff0c \u4e5f\u5c31\u662f\u628a\u4e00\u6bb5\u8fde\u7eed\u7684\u503c\u5207\u5206\u6210\u82e5\u5e72\u6bb5\uff0c\u6bcf\u4e00\u6bb5\u7684\u503c\u770b\u6210\u4e00\u4e2a\u5206\u7c7b\u3002\u8fd9\u4e2a\u628a\u8fde\u7eed\u503c\u8f6c\u6362\u6210\u79bb\u6563\u503c\u7684\u8fc7\u7a0b\uff0c\u6211\u4eec\u53eb\u505a\u5206\u7bb1\u5904\u7406\u3002\\ \u6bd4\u5982\uff0c\u628a\u5e74\u9f84\u630915\u5c81\u5212\u5206\u6210\u4e00\u7ec4\uff0c0-15\u5c81\u53eb\u505a\u5c11\u5e74\uff0c16-30\u5c81\u53eb\u505a\u9752\u5e74\uff0c31-45\u5c81\u53eb\u505a\u58ee\u5e74\u3002\u5728\u8fd9\u4e2a\u8fc7\u7a0b\u4e2d\uff0c\u6211\u4eec\u628a\u8fde\u7eed\u7684\u5e74\u9f84\u5206\u6210\u4e86\u4e09\u4e2a\u7c7b\u522b\uff0c\u201c\u5c11\u5e74\u201d\uff0c\u201c\u9752\u5e74\u201d\u548c\u201c\u58ee\u5e74\u201d\u5c31\u662f\u5404\u4e2a\u7c7b\u522b\u7684\u540d\u79f0\uff0c\u6216\u8005\u53eb\u505a\u6807\u7b7e\u3002\\ \u5728pandas\u4e2d\uff0ccut\u548cqcut\u51fd\u6570\u90fd\u53ef\u4ee5\u8fdb\u884c\u5206\u7bb1\u5904\u7406\u64cd\u4f5c\u3002 * cut()\u6309\u7167\u53d8\u91cf\u7684\u503c\u5bf9\u53d8\u91cf\u8fdb\u884c\u5206\u5272\uff0c\u6bcf\u4e2a\u5206\u7ec4\u91cc\u6570\u636e\u7684\u4e2a\u6570\u5e76\u4e0d\u4e00\u6837\u3002 * qcut()\u662f\u6309\u53d8\u91cf\u7684\u6570\u91cf\u6765\u5bf9\u53d8\u91cf\u8fdb\u884c\u5206\u5272\uff0c\u5e76\u4e14\u5c3d\u91cf\u4fdd\u8bc1\u6bcf\u4e2a\u5206\u7ec4\u91cc\u53d8\u91cf\u7684\u4e2a\u6570\u76f8\u540c\u3002 \u8003\u8651\u4e0b\u9762\u4e00\u4e2a\u7b80\u5355\u7684\u968f\u673a\u6570\u636e\u96c6\u548c\u4e00\u4e2a\u4f7f\u7528cut\u7684\u7b49\u957f\u6876\u5206\u7c7b\uff1a df = pd.DataFrame( { 'data1': np.random.randn(1000), 'data2': np.random.randn(1000) } ) quartiles = pd.cut(df.data1, 4) # \u6309\u7167data1\u503c\u7531\u5c0f\u5230\u5927\u7684\u987a\u5e8f\u5c06\u6570\u636e\u5206\u62104\u4efd\uff0c\u5e76\u4e14\u4f7f\u6bcf\u7ec4\u503c\u7684\u8303\u56f4\u5927\u81f4\u76f8\u7b49\u3002 print(quartiles[:10]) # 0 (-0.0743, 1.729] # 1 (-0.0743, 1.729] # 2 (-0.0743, 1.729] # 3 (-0.0743, 1.729] # 4 (-1.877, -0.0743] # 5 (-0.0743, 1.729] # 6 (-0.0743, 1.729] # 7 (-0.0743, 1.729] # 8 (-1.877, -0.0743] # 9 (-0.0743, 1.729] # Name: data1, dtype: category # Categories ( # 4, # interval[float64, right]): [ # (-3.687, -1.877] < (-1.877, -0.0743] < (-0.0743, 1.729] < (1.729, 3.531] # ] \u4e0a\u9762cut\u8fd4\u56de\u7684Categorical\u5bf9\u8c61\u53ef\u4ee5\u76f4\u63a5\u4f20\u9012\u7ed9groupby\u3002\u5229\u7528\u5b83\u8ba1\u7b97\u51fadata2\u5217\u7684\u4e00\u4e2a\u7edf\u8ba1\u503c\u96c6\u5408\uff0c\u5982\u4e0b\uff1a def get_stats(group): return { 'min': group.min(), 'max': group.max(), 'count': group.count(), 'mean': group.mean() } grouped = df.data2.groupby(quartiles) for i in grouped: print(i) result = grouped.apply(get_stats).unstack() print(result) # min max count mean # data1 # (-3.145, -1.424] -1.759377 2.484321 77.0 -0.127900 # (-1.424, 0.29] -3.142344 2.830654 524.0 -0.081931 # (0.29, 2.005] -3.557136 3.261635 376.0 0.015715 # (2.005, 3.719] -2.829458 1.766352 23.0 -0.198780 \u4f7f\u7528qcut\uff0c\u6839\u636e\u6837\u672c\u5206\u4f4d\u6570\u8ba1\u7b97\u51fa\u7b49\u5927\u5c0f\u7684\u6876\uff0c\u5c31\u662f\u7b49\u957f\u6876\u3002\u901a\u8fc7\u4f20\u9012labels=False\u6765\u83b7\u5f97\u5206\u4f4d\u6570\u6570\u503c\u3002 grouping = pd.qcut(df.data1, 10, labels=False) grouped = df.data2.groupby(grouping) result = grouped.apply(get_stats).unstack() print(result) # min max count mean # data1 # 0 -3.678934 3.022862 100.0 0.029658 # 1 -2.319813 2.646502 100.0 0.094035 # 2 -2.873727 2.470840 100.0 0.023866 # 3 -2.196701 2.042251 100.0 0.021232 # 4 -2.154161 2.020809 100.0 0.110834 # 5 -2.723061 2.415626 100.0 0.057365 # 6 -2.291470 2.536159 100.0 0.020866 # 7 -2.064083 1.799356 100.0 -0.081025 # 8 -3.405679 1.792581 100.0 -0.009705 # 9 -2.469285 2.600849 100.0 -0.061721","title":"\u5206\u4f4d\u6570\u4e0e\u6876\u5206\u6790"},{"location":"python/DataAnalysis/ch07/#_11","text":"\u5728\u6e05\u9664\u7f3a\u5931\u503c\u65f6\uff0c\u6709\u65f6\u4f1a\u4f7f\u7528dropna\u6765\u53bb\u9664\u7f3a\u5931\u503c\uff0c\u6709\u65f6\u4f7f\u7528\u4fee\u6b63\u503c\u6216\u6765\u81ea\u4e8e\u5176\u4ed6\u6570\u636e\u7684\u503c\u6765\u8f93\u5165\uff08\u586b\u5145\uff09\u5230null\u503c\uff08NA\uff09\u3002\\ fillna\u662f\u4e00\u4e2a\u53ef\u4ee5\u4f7f\u7528\u7684\u6b63\u786e\u5de5\u5177\u3002\\ \u4f8b\u5982\u4e0b\u9762\u4f8b\u5b50\u4e2d\u4f7f\u7528\u4f7f\u7528\u5e73\u5747\u503c\u6765\u586b\u5145NA\u503c\uff1a data = (100, 110, 120, 130, 140, 150) s = pd.Series(data) print(s) # 0 100 # 1 110 # 2 120 # 3 130 # 4 140 # 5 150 # dtype: float64 \u5c06\u6570\u636e\u4e2d\u7684\u4e00\u4e9b\u503c\u8bbe\u7f6e\u4e3a\u7f3a\u5931\u503c\uff1a s[::2] = np.nan print(s) # 0 NaN # 1 110.0 # 2 NaN # 3 130.0 # 4 NaN # 5 150.0 # dtype: float64 result = s.fillna(s.mean()) # 110, 130, 150\u7684\u5e73\u5747\u503c\u662f130 print(result) # 0 130.0 # 1 110.0 # 2 130.0 # 3 130.0 # 4 130.0 # 5 150.0 # dtype: float64 \u4e0b\u9762\u7684\u4f8b\u5b50\u662f\u6309\u7ec4\u586b\u5145NA\u503c * \u65b9\u6cd51,\u5bf9\u6570\u636e\u5206\u7ec4\u540e\u4f7f\u7528apply\u3002 * \u65b9\u6cd52,\u5728\u6bcf\u4e2a\u6570\u636e\u5757\u4e0a\u90fd\u8c03\u7528fillna\u7684\u51fd\u6570\u3002 data = (100, 110, 120, 130, 140, 150, 160, 170) states = ['Ohio', 'New York', 'Vermont', 'Florida', 'Oregon', 'Nevada', 'California', 'Idaho'] group_key = ['East'] * 4 + ['West'] * 4 # 4\u4e2aEast\u548c4\u4e2aWest\u62fc\u63a5\u7684\u5217\u8868list s = pd.Series(data, index=states) print(s) # Ohio 100 # New York 110 # Vermont 120 # Florida 130 # Oregon 140 # Nevada 150 # California 160 # Idaho 170 # dtype: int64 \u5c06\u6570\u636e\u4e2d\u7684\u4e00\u4e9b\u503c\u8bbe\u7f6e\u4e3a\u7f3a\u5931\u503c\uff1a s[['Vermont', 'Nevada', 'Idaho']] = np.nan print(s) # Ohio 100.0 # New York 110.0 # Vermont NaN # Florida 130.0 # Oregon 140.0 # Nevada NaN # California 160.0 # Idaho NaN # dtype: float64 result = s.groupby(group_key).mean() print(result) # East 113.333333 # West 150.000000 # dtype: float64 \u7528\u4e0a\u9762\u5f97\u51fa\u7684\u5206\u7ec4\u5e73\u5747\u503c\u6765\u586b\u5145NA fill_mean = lambda g: g.fillna(g.mean()) result = s.groupby(group_key).apply(fill_mean) print(result) # Ohio 100.000000 # New York 110.000000 # Vermont 113.333333 # Florida 130.000000 # Oregon 140.000000 # Nevada 150.000000 # California 160.000000 # Idaho 150.000000 # dtype: float64 \u5982\u679c\u5df2\u7ecf\u5728\u4ee3\u7801\u4e2d\u4e3a\u6bcf\u4e2a\u5206\u7ec4\u9884\u5b9a\u4e49\u4e86\u586b\u5145\u503c\uff0c\u53ef\u4ee5\u5229\u7528\u6bcf\u4e2a\u5206\u7ec4\u90fd\u6709\u7684\u5185\u7f6e\u7684name\u5c5e\u6027\uff0c\u5b9e\u73b0\u586b\u5145NA\u3002 fill_value = {'East': 0.5, 'West': -1} fill_func = lambda g: g.fillna(fill_value[g.name]) result = s.groupby(group_key).apply(fill_func) print(result) # Ohio 100.0 # New York 110.0 # Vermont 0.5 # Florida 130.0 # Oregon 140.0 # Nevada -1.0 # California 160.0 # Idaho -1.0 # dtype: float64","title":"\u793a\u4f8b\uff1a\u4f7f\u7528\u6307\u5b9a\u5206\u7ec4\u503c\u586b\u5145\u7f3a\u5931\u503c"},{"location":"python/DataAnalysis/ch07/#_12","text":"\u5047\u8bbe\u60f3\u4ece\u5927\u6570\u636e\u96c6\u4e2d\u62bd\u53d6\u968f\u673a\u6837\u672c\uff08\u6709\u6216\u6ca1\u6709\u66ff\u6362\uff09\u4ee5\u7528\u4e8e\u8499\u7279\u5361\u7f57\u6a21\u62df\u76ee\u7684\u6216\u67d0\u4e9b\u5176\u4ed6\u5e94\u7528\u7a0b\u5e8f\u3002\\ \u6709\u5f88\u591a\u65b9\u6cd5\u6765\u6267\u884c\u201c\u62bd\u53d6\u201d\uff0c\u8fd9\u91cc\u4f7f\u7528Series\u7684sample\u65b9\u6cd5\u3002\\ \u4e3a\u4e86\u6f14\u793a\uff0c\u8fd9\u91cc\u4ecb\u7ecd\u4e00\u79cd\u6784\u9020\u4e00\u526f\u82f1\u5f0f\u6251\u514b\u724c\u7684\u65b9\u6cd5\uff1a # \u6885\u82b1clubs\u3001\u65b9\u5757diamonds\u3001\u7ea2\u6843hearts\u3001\u9ed1\u6843spades\u3002 suits = ['H', 'S', 'C', 'D'] card_val = (list(range(1, 11)) + [10] * 3) * 4 # card_val [ # 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 10, # 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 10, # 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 10, # 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 10 # ] base_names = ['A'] + list(range(2, 11)) + ['J', 'K', 'Q'] # base_names\uff1a ['A', 2, 3, 4, 5, 6, 7, 8, 9, 10, 'J', 'K', 'Q'] \u751f\u6210\u4e86\u4e00\u4e2a\u957f\u5ea6\u4e3a52\u7684Series, Series\u7684\u7d22\u5f15\u5305\u542b\u4e86\u724c\u540d\uff0cSeries\u7684\u503c\u53ef\u4ee5\u7528\u6e38\u620f\uff08\u4e3a\u4e86\u4fdd\u6301\u7b80\u5355\uff0c\u8ba9\u2019A\u2019\u4e3a1 \uff09\uff1a cards = [] for suit in ['H', 'S', 'C', 'D']: cards.extend(str(num) + suit for num in base_names) deck = pd.Series(card_val, index=cards) print(deck) # AH 1 # 2H 2 # 3H 3 # 4H 4 # 5H 5 # 6H 6 # 7H 7 # 8H 8 # 9H 9 # 10H 10 # JH 10 # KH 10 # QH 10 # AS 1 # 2S 2 # 3S 3 # 4S 4 # 5S 5 # 6S 6 # 7S 7 # 8S 8 # 9S 9 # 10S 10 # JS 10 # KS 10 # QS 10 # AC 1 # 2C 2 # 3C 3 # 4C 4 # 5C 5 # 6C 6 # 7C 7 # 8C 8 # 9C 9 # 10C 10 # JC 10 # KC 10 # QC 10 # AD 1 # 2D 2 # 3D 3 # 4D 4 # 5D 5 # 6D 6 # 7D 7 # 8D 8 # 9D 9 # 10D 10 # JD 10 # KD 10 # QD 10 # dtype: int64 \u4ece\u8fd9\u526f\u724c\u4e2d\u62ff\u51fa\u4e94\u5f20\u724c\u53ef\u4ee5\u5199\u6210\uff1a def draw(_deck, n=5): return _deck.sample(n) print(draw(deck)) # KD 10 # 2S 2 # 5C 5 # 6C 6 # QD 10 # dtype: int64 \u5047\u8bbe\u8981\u4ece\u6bcf\u4e2a\u82b1\u8272\u4e2d\u968f\u673a\u62bd\u53d6\u4e24\u5f20\u724c\u3002\u7531\u4e8e\u82b1\u8272\u662f\u724c\u540d\u7684\u6700\u540e\u4e24\u4e2a\u5b57\u7b26\uff0c\u53ef\u4ee5\u57fa\u4e8e\u8fd9\u70b9\u8fdb\u884c\u5206\u7ec4\uff0c\u5e76\u4f7f\u7528apply\uff1a get_suit = lambda card: card[-1] # \u6700\u540e\u4e00\u4e2a\u5b57\u6bcd\u662f\u82b1\u8272 result = deck.groupby(get_suit).apply(draw, n=2) print(result) # C 10C 10 # 3C 3 # D KD 10 # AD 1 # H 5H 5 # 7H 7 # S 3S 3 # 5S 5 # dtype: int64 \u6216\u8005\u4e5f\u53ef\u4ee5\u5199\u6210\uff1a result = deck.groupby(get_suit, group_keys=False).apply(draw, n=2) print(result) # JC 10 # 8C 8 # QD 10 # 4D 4 # 10H 10 # 6H 6 # 7S 7 # KS 10 # dtype: int64","title":"\u793a\u4f8b\uff1a\u968f\u673a\u91c7\u6837\u4e0e\u6392\u5217"},{"location":"python/DataAnalysis/ch07/#_13","text":"\u5728groupby\u7684\u62c6\u5206-\u5e94\u7528-\u8054\u5408\u7684\u8303\u5f0f\u4e0b\uff0cDataFrame\u7684\u5217\u95f4\u64cd\u4f5c\u6216\u4e24\u4e2aSeriese\u4e4b\u95f4\u7684\u64cd\u4f5c\uff0c\u4f8b\u5982\u5b9e\u73b0\u5206\u7ec4\u52a0\u6743\u5e73\u5747\u3002\\ \u4e0b\u9762\u4f8b\u5b50\uff0c\u4f7f\u7528\u4e00\u4e2a\u5305\u542b\u5206\u7ec4\u952e\u548c\u6743\u91cd\u503c\u7684\u6570\u636e\u96c6\uff1a dt = np.random.randn(8) wt = np.random.randn(8) df = pd.DataFrame( { 'category': ['a', 'a', 'a', 'a', 'b', 'b', 'b', 'b'], 'data': dt, 'weight': wt } ) print(df) # category data weight # 0 a -0.250764 -0.085285 # 1 a 0.167155 -1.361254 # 2 a 0.399306 1.755542 # 3 a -0.514477 0.270124 # 4 b -0.005558 0.886514 # 5 b 0.607596 -1.384315 # 6 b -1.029627 -0.845340 # 7 b -0.294204 1.253965 \u901a\u8fc7category\u8fdb\u884c\u5206\u7ec4\u52a0\u6743\u5e73\u5747\u5982\u4e0b\uff1a grouped = df.groupby('category') get_wavg = lambda g: np.average(g['data'], weights=g['weight']) result = grouped.apply(get_wavg) print(result) # category # a 0.614499 # b 3.863947 # dtype: float64 \u53e6\u4e00\u4e2a\u4f8b\u5b50\uff0c\u4e00\u4e2a\u4ece\u96c5\u864e\u8d22\u7ecf\u4e0a\u83b7\u5f97\u7684\u6570\u636e\u96c6\uff0c\u8be5\u6570\u636e\u96c6\u5305\u542b\u4e00\u4e9b\u6807\u666e500 \uff08SPX\u7b26\u53f7\uff09\u548c\u80a1\u7968\u7684\u6536\u76d8\u4ef7\uff1a close_px = pd.read_csv('../examples/stock_px_2.csv', parse_dates=True, index_col=0) print(close_px.info()) # <class 'pandas.core.frame.DataFrame'> # DatetimeIndex: 2214 entries, 2003-01-02 to 2011-10-14 # Data columns (total 4 columns): # # Column Non-Null Count Dtype # --- ------ -------------- ----- # 0 AAPL 2214 non-null float64 # 1 MSFT 2214 non-null float64 # 2 XOM 2214 non-null float64 # 3 SPX 2214 non-null float64 # dtypes: float64(4) # memory usage: 86.5 KB # None print(close_px[-4:]) # AAPL MSFT XOM SPX # 2011-10-11 400.29 27.00 76.27 1195.54 # 2011-10-12 402.19 26.96 77.16 1207.25 # 2011-10-13 408.43 27.18 76.37 1203.66 # 2011-10-14 422.00 27.27 78.11 1224.58 \u76ee\u6807\u4efb\u52a1\uff1a\u8ba1\u7b97\u4e00\u4e2aDataFrame\uff0c\u5b83\u5305\u542b\u6807\u666e\u6307\u6570\uff08SPX\uff09\u6bcf\u65e5\u6536\u76ca\u7684\u5e74\u5ea6\u76f8\u5173\u6027\uff08\u901a\u8fc7\u767e\u5206\u6bd4\u53d8\u5316\u8ba1\u7b97\uff09\u3002 \u9996\u5148\u521b\u5efa\u4e00\u4e2a\u8ba1\u7b97\u6bcf\u5217\u4e0e\u2019SPX\u2019\u5217\u6210\u5bf9\u5173\u8054\u7684\u51fd\u6570\uff1a spx_corr = lambda x: x.corrwith(x['SPX']) \u4e4b\u540e\uff0c\u4f7f\u7528pct_change\u8ba1\u7b97close-px\u767e\u5206\u6bd4\u7684\u53d8\u5316\uff1a rets = close_px.pct_change().dropna() # Percentage change between the current and a prior element. print(rets) # AAPL MSFT XOM SPX # 2003-01-03 0.006757 0.001421 0.000684 -0.000484 # 2003-01-06 0.000000 0.017975 0.024624 0.022474 # ... ... ... ... ... # 2011-10-14 0.033225 0.003311 0.022784 0.017380 # [2213 rows x 4 columns] \u6700\u540e\uff0c\u6309\u5e74\u5bf9\u767e\u5206\u6bd4\u53d8\u5316\u8fdb\u884c\u5206\u7ec4\uff0c\u53ef\u4ee5\u4f7f\u7528\u5355\u884c\u51fd\u6570\u4ece\u6bcf\u4e2a\u884c\u6807\u7b7e\u4e2d\u63d0\u53d6\u6bcf\u4e2adatetime\u6807\u7b7e\u7684year\u5c5e\u6027\uff1a get_year = lambda x: x.year by_year = rets.groupby(get_year) result = by_year.apply(spx_corr) print(result) # AAPL MSFT XOM SPX # 2003 0.541124 0.745174 0.661265 1.0 # 2004 0.374283 0.588531 0.557742 1.0 # 2005 0.467540 0.562374 0.631010 1.0 # 2006 0.428267 0.406126 0.518514 1.0 # 2007 0.508118 0.658770 0.786264 1.0 # 2008 0.681434 0.804626 0.828303 1.0 # 2009 0.707103 0.654902 0.797921 1.0 # 2010 0.710105 0.730118 0.839057 1.0 # 2011 0.691931 0.800996 0.859975 1.0 \u53ef\u4ee5\u8ba1\u7b97\u5185\u90e8\u5217\u76f8\u5173\u6027\u3002\u8fd9\u91cc\u8ba1\u7b97\u4e86\u82f9\u679c\u548c\u5fae\u8f6f\u7684\u5e74\u5ea6\u76f8\u5173\u6027\uff1a result = by_year.apply(lambda g: g['AAPL'].corr(g['MSFT'])) print(result) # 2003 0.480868 # 2004 0.259024 # 2005 0.300093 # 2006 0.161735 # 2007 0.417738 # 2008 0.611901 # 2009 0.432738 # 2010 0.571946 # 2011 0.581987 # dtype: float64","title":"\u793a\u4f8b\uff1a\u5206\u7ec4\u52a0\u6743\u5e73\u5747\u548c\u76f8\u5173\u6027"},{"location":"python/DataAnalysis/ch07/#_14","text":"\u5b9a\u4e49\u4ee5\u4e0bregress\uff08\u56de\u5f52\uff09\u51fd\u6570\uff08\u4f7f\u7528statsmodels\u8ba1\u91cf\u7ecf\u6d4e\u5b66\u5e93\uff09\uff0c\u8be5\u51fd\u6570\u5bf9\u6bcf\u4e2a\u6570\u636e\u5757\u6267\u884c\u666e\u901a\u6700\u5c0f\u4e8c\u4e58\uff08OLS\uff09\u56de\u5f52\uff1a def regress(data, yvar, xvars): Y = data[yvar] X = data[xvars] X['intercept'] = 1. result = sm.OLS(Y, X).fit() return result.params \u73b0\u5728\u8981\u8ba1\u7b97AAPL\u5728SPX\u56de\u62a5\u4e0a\u7684\u5e74\u5ea6\u7ebf\u6027\u56de\u5f52\uff1a result = by_year.apply(regress, 'AAPL', ['SPX']) print(result) # SPX intercept # 2003 1.195406 0.000710 # 2004 1.363463 0.004201 # 2005 1.766415 0.003246 # 2006 1.645496 0.000080 # 2007 1.198761 0.003438 # 2008 0.968016 -0.001110 # 2009 0.879103 0.002954 # 2010 1.052608 0.001261 # 2011 0.806605 0.001514","title":"\u793a\u4f8b\uff1a\u9010\u7ec4\u7ebf\u6027\u56de\u5f52"},{"location":"python/DataAnalysis/ch07/#_15","text":"","title":"\u6570\u636e\u900f\u89c6\u8868\u4e0e\u4ea4\u53c9\u8868"},{"location":"python/DataAnalysis/ch07/#_16","text":"\u6570\u636e\u900f\u89c6\u8868\u662f\u7535\u5b50\u8868\u683c\u7a0b\u5e8f\u548c\u5176\u4ed6\u6570\u636e\u5206\u6790\u8f6f\u4ef6\u4e2d\u5e38\u89c1\u7684\u6570\u636e\u6c47\u603b\u5de5\u5177\u3002\\ \u5b83\u6839\u636e\u4e00\u4e2a\u6216\u591a\u4e2a\u952e\u805a\u5408\u4e00\u5f20\u8868\u7684\u6570\u636e\uff0c\u5c06\u6570\u636e\u5728\u77e9\u5f62\u683c\u5f0f\u4e2d\u6392\u5217\uff0c\u5176\u4e2d\u4e00\u4e9b\u5206\u7ec4\u952e\u662f\u6cbf\u7740\u884c\u7684\uff0c\u53e6\u4e00\u4e9b\u662f\u6cbf\u7740\u5217\u7684\u3002 Python\u4e2d\u7684pandas\u900f\u89c6\u8868\u662f\u901a\u8fc7\u672c\u7ae0\u6240\u4ecb\u7ecd\u7684groupby\u5de5\u5177\u4ee5\u53ca\u4f7f\u7528\u5206\u5c42\u7d22\u5f15\u7684\u91cd\u5851\u64cd\u4f5c\u5b9e\u73b0\u7684\u3002\\ DataFrame\u62e5\u6709\u4e00\u4e2apivot_table\u65b9\u6cd5\uff0c\u5e76\u4e14\u8fd8\u6709\u8fd8\u4e00\u4e2a\u9876\u5c42\u7684pandas.pivot_table\u51fd\u6570\u3002\\ \u9664\u4e86\u4e3agroupby\u63d0\u4f9b\u4e00\u4e2a\u65b9\u4fbf\u63a5\u53e3\uff0cpivot_table\u8fd8\u53ef\u4ee5\u6dfb\u52a0\u90e8\u5206\u603b\u8ba1\uff0c\u4e5f\u79f0\u4f5c\u8fb9\u8ddd\u3002 import pandas as pd import numpy as np \u6839\u636e\u4e0b\u9762\u7684\u5c0f\u8d39\u6570\u636e\u96c6\uff0c\u8ba1\u7b97\u4e00\u5f20\u5728\u884c\u65b9\u5411\u4e0a\u6309day\u548csmoker\u6392\u5217\u7684\u5206\u7ec4\u5e73\u5747\u503c\uff08\u9ed8\u8ba4\u7684pivot_table\u805a\u5408\u7c7b\u578b\uff09\u7684\u8868\u3002 pivot_table\u9009\u9879\uff1a * values: \u9700\u8981\u805a\u5408\u7684\u5217\u540d\uff0c\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u805a\u5408\u6240\u6709\u6570\u503c\u578b\u7684\u5217\u3002 * index: \u5728\u7ed3\u679c\u900f\u89c6\u8868\u7684\u884c\u4e0a\u8fdb\u884c\u5206\u7ec4\u7684\u5217\u540d\u6216\u8005\u5176\u4ed6\u5206\u7ec4\u952e\u3002 tips = pd.read_csv('../examples/tips.csv') tips['tip_pct'] = tips['tip'] / (tips['total_bill'] - tips['tip']) \u6837\u672c\u6570\u636e print(tips.head(5)) # total_bill tip smoker day time size tip_pct # 0 16.99 1.01 No Sun Dinner 2 0.063204 # 1 10.34 1.66 No Sun Dinner 3 0.191244 # 2 21.01 3.50 No Sun Dinner 3 0.199886 # 3 23.68 3.31 No Sun Dinner 2 0.162494 # 4 24.59 3.61 No Sun Dinner 4 0.172069 \u8ba1\u7b97\u5728\u884c\u65b9\u5411\u4e0a\u6309day\u548csmoker\u6392\u5217\u7684\u5206\u7ec4\u5e73\u5747\u503c\u3002\u4e5f\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528groupby\u5b9e\u73b0 result = tips.pivot_table(index=['day', 'smoker']) print(result) # size tip tip_pct total_bill # day smoker # Fri No 2.250000 2.812500 0.179740 18.420000 # Yes 2.066667 2.714000 0.216293 16.813333 # Sat No 2.555556 3.102889 0.190412 19.661778 # Yes 2.476190 2.875476 0.179833 21.276667 # Sun No 2.929825 3.167895 0.193617 20.506667 # Yes 2.578947 3.516842 0.322021 24.120000 # Thur No 2.488889 2.673778 0.193424 17.113111 # Yes 2.352941 3.030000 0.198508 19.190588 \u5728tip_pct\u548csize\u4e0a\u8fdb\u884c\u805a\u5408\uff0c\u5e76\u6839\u636etime\u5206\u7ec4\u3002\u6211\u5c06\u628asmoker\u653e\u5165\u8868\u7684\u5217\uff0c\u800c\u5c06day\u653e\u5165\u8868\u7684\u884c\uff1a result = tips.pivot_table( ['tip_pct', 'size'], index=['time', 'day'], columns='smoker' ) print(result) # size tip_pct # smoker No Yes No Yes # time day # Dinner Fri 2.000000 2.222222 0.162612 0.202545 # Sat 2.555556 2.476190 0.190412 0.179833 # Sun 2.929825 2.578947 0.193617 0.322021 # Thur 2.000000 NaN 0.190114 NaN # Lunch Fri 3.000000 1.833333 0.231125 0.236915 # Thur 2.500000 2.352941 0.193499 0.198508 \u901a\u8fc7\u4f20\u9012margins=True\u6765\u6269\u5145\u8fd9\u4e2a\u8868\u6765\u5305\u542b\u90e8\u5206\u603b\u8ba1\u3002\\ \u8fd9\u4f1a\u6dfb\u52a0All\u884c\u548c\u5217\u6807\u7b7e\uff0c\u5176\u4e2d\u76f8\u5e94\u7684\u503c\u662f\u5355\u5c42\u4e2d\u6240\u6709\u6570\u636e\u7684\u5206\u7ec4\u7edf\u8ba1\u503c\uff1a\\ \u8fd9\u91ccAll\u7684\u503c\u662f\u5747\u503c\uff0c\u4e14\u8be5\u5747\u503c\u662f\u4e0d\u8003\u8651\u5438\u70df\u8005\u4e0e\u975e\u5438\u70df\u8005\uff08All\u5217\uff09\u6216\u884c\u5206\u7ec4\u4e2d\u4efb\u4f55\u4e24\u7ea7\u7684\uff08All\u884c\uff09\u3002 result = tips.pivot_table( ['tip_pct', 'size'], index=['time', 'day'], columns='smoker', margins=True ) print(result) # size tip_pct # smoker No Yes All No Yes All # time day # Dinner Fri 2.000000 2.222222 2.166667 0.162612 0.202545 0.192562 # Sat 2.555556 2.476190 2.517241 0.190412 0.179833 0.185305 # Sun 2.929825 2.578947 2.842105 0.193617 0.322021 0.225718 # Thur 2.000000 NaN 2.000000 0.190114 NaN 0.190114 # Lunch Fri 3.000000 1.833333 2.000000 0.231125 0.236915 0.236088 # Thur 2.500000 2.352941 2.459016 0.193499 0.198508 0.194895 # All 2.668874 2.408602 2.569672 0.192237 0.218176 0.202123 \u8981\u4f7f\u7528\u4e0d\u540c\u7684\u805a\u5408\u51fd\u6570\u65f6\uff0c\u5c06\u51fd\u6570\u4f20\u9012\u7ed9aggfunc\u3002\\ \u4f8b\u5982\uff0c'count\u2019\u6216\u8005len\u5c06\u7ed9\u51fa\u4e00\u5f20\u5206\u7ec4\u5927\u5c0f\u7684\u4ea4\u53c9\u8868\uff08\u8ba1\u6570\u6216\u51fa\u73b0\u9891\u7387\uff09\uff1a result = tips.pivot_table( ['tip_pct', 'size'], index=['time', 'day'], columns='smoker', aggfunc=len, margins=True ) print(result) # size tip_pct # smoker No Yes All No Yes All # time day # Dinner Fri 3.0 9.0 12 3.0 9.0 12 # Sat 45.0 42.0 87 45.0 42.0 87 # Sun 57.0 19.0 76 57.0 19.0 76 # Thur 1.0 NaN 1 1.0 NaN 1 # Lunch Fri 1.0 6.0 7 1.0 6.0 7 # Thur 44.0 17.0 61 44.0 17.0 61 # All 151.0 93.0 244 151.0 93.0 244 \u5bf9\u4e8e\u7a7a\u503cNA\uff0c\u4f20\u9012\u4e00\u4e2afill_value result = tips.pivot_table( ['tip_pct', 'size'], index=['time', 'day'], columns='smoker', aggfunc='mean', fill_value=0, margins=True ) print(result) # size tip_pct # smoker No Yes All No Yes All # time day # Dinner Fri 2.000000 2.222222 2.166667 0.162612 0.202545 0.192562 # Sat 2.555556 2.476190 2.517241 0.190412 0.179833 0.185305 # Sun 2.929825 2.578947 2.842105 0.193617 0.322021 0.225718 # Thur 2.000000 0.000000 2.000000 0.190114 0.000000 0.190114 # Lunch Fri 3.000000 1.833333 2.000000 0.231125 0.236915 0.236088 # Thur 2.500000 2.352941 2.459016 0.193499 0.198508 0.194895 # All 2.668874 2.408602 2.569672 0.192237 0.218176 0.202123","title":"\u6570\u636e\u900f\u89c6\u8868"},{"location":"python/DataAnalysis/ch07/#crosstab","text":"\u4ea4\u53c9\u8868\uff08\u7b80\u5199\u4e3acrosstab\uff09\u662f\u6570\u636e\u900f\u89c6\u8868\u7684\u4e00\u4e2a\u7279\u6b8a\u60c5\u51b5\uff0c\u8ba1\u7b97\u7684\u662f\u5206\u7ec4\u4e2d\u7684\u9891\u7387\u3002\\ crosstab\u7684\u524d\u4e24\u4e2a\u53c2\u6570\u53ef\u662f\u6570\u7ec4\u3001Series\u6216\u6570\u7ec4\u7684\u5217\u8868\u3002 sample = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] nationality = ['USA', 'Japan', 'USA', 'Japan', 'Japan', 'Japan', 'USA', 'USA', 'Japan', 'USA'] handedness = ['Right-handed', 'Left-handed', 'Right-handed', 'Right-handed', 'Left-handed', 'Right-handed', 'Right-handed', 'Left-handed', 'Right-handed', 'Right-handed'] df = pd.DataFrame( { 'sample': sample, 'nationality': nationality, 'handedness': handedness } ) print(df) # sample nationality handedness # 0 1 USA Right-handed # 1 2 Japan Left-handed # 2 3 USA Right-handed # 3 4 Japan Right-handed # 4 5 Japan Left-handed # 5 6 Japan Right-handed # 6 7 USA Right-handed # 7 8 USA Left-handed # 8 9 Japan Right-handed # 9 10 USA Right-handed \u6309\u7167\u56fd\u7c4d\u548c\u60ef\u7528\u6027\u6765\u603b\u7ed3\u8fd9\u4e9b\u6570\u636e\uff0c\u53ef\u4ee5\u4f7f\u7528pivot_table\u6765\u5b9e\u73b0\u8fd9\u4e2a\u529f\u80fd\uff0c\u4f46\u662fpandas.crosstable\u51fd\u6570\u66f4\u4e3a\u65b9\u4fbf\uff1a result = pd.crosstab(df.nationality, df.handedness, margins=True) print(result) # handedness Left-handed Right-handed All # nationality # Japan 2 3 5 # USA 1 4 5 # All 3 7 10 \u5728\u5c0f\u8d39\u6570\u636e\u4e2d\u53ef\u4ee5\u8fd9\u4e48\u505a\uff1a result = pd.crosstab(['tips.time', tips.day], tips.smoker, margins=True) print(result) # smoker No Yes All # row_0 day # tips.time Fri 4 15 19 # Sat 45 42 87 # Sun 57 19 76 # Thur 45 17 62 # All 151 93 244","title":"\u4ea4\u53c9\u8868\uff1acrosstab"},{"location":"python/DataAnalysis/ch08/","text":"\u65e5\u671f\u548c\u65f6\u95f4\u6570\u636e\u7684\u7c7b\u578b\u53ca\u5de5\u5177 \u65f6\u95f4\u5e8f\u5217\u6570\u636e\u5728\u5f88\u591a\u9886\u57df\u90fd\u662f\u91cd\u8981\u7684\u7ed3\u6784\u5316\u6570\u636e\u5f62\u5f0f\u3002\u5728\u591a\u4e2a\u65f6\u95f4\u70b9\u89c2\u6d4b\u6216\u6d4b\u91cf\u7684\u6570\u636e\u5f62\u6210\u4e86\u65f6\u95f4\u5e8f\u5217\u3002\\ \u8bb8\u591a\u65f6\u95f4\u5e8f\u5217\u662f\u56fa\u5b9a\u9891\u7387\u7684\uff0c\u4e5f\u5c31\u662f\u8bf4\u6570\u636e\u662f\u6839\u636e\u76f8\u540c\u7684\u89c4\u5219\u5b9a\u671f\u51fa\u73b0\u7684\uff0c\u4f8b\u5982\u6bcf15\u79d2\u3001\u6bcf5\u5206\u949f\u6216\u6bcf\u67081\u6b21\u3002\\ \u65f6\u95f4\u5e8f\u5217\u4e5f\u53ef\u4ee5\u662f\u4e0d\u89c4\u5219\u7684\uff0c\u6ca1\u6709\u56fa\u5b9a\u7684\u65f6\u95f4\u5355\u4f4d\u6216\u5355\u4f4d\u95f4\u7684\u504f\u79fb\u91cf\u3002\\ \u5982\u4f55\u6807\u8bb0\u548c\u5f15\u7528\u65f6\u95f4\u5e8f\u5217\u6570\u636e\u53d6\u51b3\u4e8e\u5e94\u7528\u7a0b\u5e8f\uff0c\u65f6\u95f4\u5e8f\u5217\u5305\u62ec\uff1a * \u65f6\u95f4\u6233\uff0c\u5177\u4f53\u7684\u65f6\u523b\u3002 * \u56fa\u5b9a\u7684\u65f6\u95f4\u533a\u95f4\uff0c\u4f8b\u59822007\u76841\u6708\u6216\u6574\u4e2a2010\u5e74\u3002 * \u65f6\u95f4\u95f4\u9694\uff0c\u7531\u5f00\u59cb\u548c\u7ed3\u675f\u65f6\u95f4\u6233\u8868\u793a\u3002\u65f6\u95f4\u533a\u95f4\u53ef\u4ee5\u88ab\u8ba4\u4e3a\u662f\u95f4\u9694\u7684\u7279\u6b8a\u60c5\u51b5\u3002 * \u5b9e\u9a8c\u65f6\u95f4\u6216\u6d88\u8017\u65f6\u95f4\u3002\u6bcf\u4e2a\u65f6\u95f4\u6233\u662f\u76f8\u5bf9\u4e8e\u7279\u5b9a\u5f00\u59cb\u65f6\u95f4\u7684\u65f6\u95f4\u7684\u91cf\u5ea6\uff08\u4f8b\u5982\uff0c\u81ea\u4ece\u88ab\u653e\u7f6e\u5728\u70e4\u7bb1\u4e2d\u6bcf\u79d2\u70d8\u70e4\u7684\u997c\u5e72\u7684\u76f4\u5f84\uff09\u3002 \u76ee\u524d\u4e3b\u8981\u5173\u6ce8\u524d\u4e09\u7c7b\u4e2d\u7684\u65f6\u95f4\u5e8f\u5217\u3002 from datetime import datetime, timedelta import datetime as dt from dateutil.parser import parse import pandas as pd datetime datetime\u683c\u5f0f\u7b26 * %a \u661f\u671f\u7684\u82f1\u6587\u5355\u8bcd\u7684\u7f29\u5199\uff1a\u5982\u661f\u671f\u4e00\uff0c \u5219\u8fd4\u56de Mon * %A \u661f\u671f\u7684\u82f1\u6587\u5355\u8bcd\u7684\u5168\u62fc\uff1a\u5982\u661f\u671f\u4e00\uff0c\u8fd4\u56de Monday * %b \u6708\u4efd\u7684\u82f1\u6587\u5355\u8bcd\u7684\u7f29\u5199\uff1a\u5982\u4e00\u6708\uff0c \u5219\u8fd4\u56de Jan * %B \u6708\u4efd\u7684\u5f15\u6587\u5355\u8bcd\u7684\u7f29\u5199\uff1a\u5982\u4e00\u6708\uff0c \u5219\u8fd4\u56de January * %c \u8fd4\u56dedatetime\u7684\u5b57\u7b26\u4e32\u8868\u793a\uff0c\u598203/08/15 23:01:26 * %d \u8fd4\u56de\u7684\u662f\u5f53\u524d\u65f6\u95f4\u662f\u5f53\u524d\u6708\u7684\u7b2c\u51e0\u5929 * %f \u5fae\u79d2\u7684\u8868\u793a\uff1a \u8303\u56f4: [0,999999] * %H \u4ee524\u5c0f\u65f6\u5236\u8868\u793a\u5f53\u524d\u5c0f\u65f6 * %I \u4ee512\u5c0f\u65f6\u5236\u8868\u793a\u5f53\u524d\u5c0f\u65f6 * %m \u8fd4\u56de\u6708\u4efd \u8303\u56f4[0,12] * %M \u8fd4\u56de\u5206\u949f\u6570 \u8303\u56f4 [0,59] * %P \u8fd4\u56de\u662f\u4e0a\u5348\u8fd8\u662f\u4e0b\u5348\u2013AM or PM * %S \u8fd4\u56de\u79d2\u6570 \u8303\u56f4 [0,61]\u3002\u3002\u3002\u624b\u518c\u8bf4\u660e\u7684 * %U \u8fd4\u56de\u5f53\u5468\u662f\u5f53\u5e74\u7684\u7b2c\u51e0\u5468 \u4ee5\u5468\u65e5\u4e3a\u7b2c\u4e00\u5929 * %W \u8fd4\u56de\u5f53\u5468\u662f\u5f53\u5e74\u7684\u7b2c\u51e0\u5468 \u4ee5\u5468\u4e00\u4e3a\u7b2c\u4e00\u5929 * %w \u5f53\u5929\u5728\u5f53\u5468\u7684\u5929\u6570\uff0c\u8303\u56f4\u4e3a[0, 6]\uff0c6\u8868\u793a\u661f\u671f\u5929 * %x \u65e5\u671f\u7684\u5b57\u7b26\u4e32\u8868\u793a \uff1a03/08/15 * %X \u65f6\u95f4\u7684\u5b57\u7b26\u4e32\u8868\u793a \uff1a23:22:08 * %y \u4e24\u4e2a\u6570\u5b57\u8868\u793a\u7684\u5e74\u4efd 15 * %Y \u56db\u4e2a\u6570\u5b57\u8868\u793a\u7684\u5e74\u4efd 2015 * %z \u4e0eutc\u65f6\u95f4\u7684\u95f4\u9694 \uff08\u5982\u679c\u662f\u672c\u5730\u65f6\u95f4\uff0c\u8fd4\u56de\u7a7a\u5b57\u7b26\u4e32\uff09 * %Z \u65f6\u533a\u540d\u79f0\uff08\u5982\u679c\u662f\u672c\u5730\u65f6\u95f4\uff0c\u8fd4\u56de\u7a7a\u5b57\u7b26\u4e32\uff09 datestrs = ['2020/5/6', '2021/10/1'] # \u6ce8\u610f\u533a\u5206datetime\u6a21\u5757\u548cdatetime\u7c7b\uff0c\u540d\u5b57\u76f8\u540c\uff0c\u5bb9\u6613\u5f15\u8d77\u9519\u8bef\u3002 # \u6bd4\u5982datetime.datetime\u5c31\u62a5\u9519type object 'datetime.datetime' has no attribute 'datetime' print(datetime) # <class 'datetime.datetime'> print(dt) # <module 'datetime' from '/opt/Python-3.9.6/Lib/datetime.py'> Python\u6807\u51c6\u5e93\u5305\u542b\u4e86\u65e5\u671f\u548c\u65f6\u95f4\u6570\u636e\u7684\u7c7b\u578b\u3002datetime\u3001time\u548ccalendar\u6a21\u5757\u662f\u5f00\u59cb\u5904\u7406\u65f6\u95f4\u6570\u636e\u7684\u4e3b\u8981\u5185\u5bb9\u3002\\ datetime.datetime\u7c7b\u578b\uff0c\u6216\u7b80\u5199\u4e3adatetime\uff0c\u662f\u5e7f\u6cdb\u4f7f\u7528\u7684\u3002 now = datetime.now() print(now) # 2021-10-07 20:24:43.834293 result = dt.datetime(2021, 10, 7, 20, 26, 00, 72973) print(result) # 2021-10-07 20:26:00.072973 datetime\u65e2\u5b58\u50a8\u4e86\u65e5\u671f\uff0c\u4e5f\u5b58\u50a8\u4e86\u7ec6\u5316\u5230\u5fae\u79d2\u7684\u65f6\u95f4\u3002\\ timedelta\u8868\u793a\u4e24\u4e2adatetime\u5bf9\u8c61\u7684\u65f6\u95f4\u5dee\u3002 delta = datetime(2021, 10, 7) - datetime(2021, 9, 7) print(delta) # 30 days, 0:00:00 print(delta.days) # 30 print(delta.seconds) # 0 result = dt.timedelta(926, 56700) print(result) # 926 days, 15:45:00 \u53ef\u4ee5\u4e3a\u4e00\u4e2adatetime\u5bf9\u8c61\u52a0\u4e0a\uff08\u6216\u51cf\u53bb\uff09\u4e00\u4e2atimedelta\u6216\u5176\u6574\u6570\u500d\u6765\u4ea7\u751f\u4e00\u4e2a\u65b0\u7684datetime\u5bf9\u8c61 start = datetime(2021, 10, 7) result = start + timedelta(12) print(result) # 2021-10-19 00:00:00 result = start - 2 * timedelta(5) print(result) # 2021-09-27 00:00:00 \u5b57\u7b26\u4e32\u4e0edatetime\u4e92\u76f8\u8f6c\u6362 \u4f7f\u7528str\u65b9\u6cd5\u6216\u4f20\u9012\u4e00\u4e2a\u6307\u5b9a\u7684\u683c\u5f0f\u7ed9strftime\u65b9\u6cd5\u6765\u5bf9datetime\u5bf9\u8c61\u548cpandas\u7684Timestamp\u5bf9\u8c61\u8fdb\u884c\u683c\u5f0f\u5316 stamp = datetime(2021, 10, 7) result = str(stamp) print(result) # 2021-10-07 00:00:00 \u4f7f\u7528datetime.srtptime\u548cdatetime\u683c\u5f0f\u7b26\uff0c\u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u65e5\u671f\u3002\\ datetime.strptime\u662f\u5728\u5df2\u77e5\u683c\u5f0f\u7684\u60c5\u51b5\u4e0b\u8f6c\u6362\u65e5\u671f\u7684\u597d\u65b9\u5f0f\u3002 value = '2021-10-7' result = datetime.strptime(value, '%Y-%m-%d') print(result) # 2021-10-07 00:00:00 datestrs = ['2020/5/6', '2021/10/1'] result = [datetime.strptime(x, '%Y/%m/%d') for x in datestrs] print(result) # [datetime.datetime(2020, 5, 6, 0, 0), datetime.datetime(2021, 10, 1, 0, 0)] dateutil\u89e3\u6790\u901a\u7528\u65e5\u671f\u683c\u5f0f\uff1a print(parse('2020/5/6')) # 2020-05-06 00:00:00 print(parse('Jan 31, 2021 10:25 AM')) # 2021-01-31 10:25:00 print(parse('5/6/2021', dayfirst=True)) # \u65e5\u671f\u51fa\u73b0\u5728\u6708\u4efd\u4e4b\u524d # 2021-06-05 00:00:00 pandas\u4e3b\u8981\u662f\u9762\u5411\u5904\u7406\u65e5\u671f\u6570\u7ec4\u7684\uff0c\u65e0\u8bba\u662f\u7528\u4f5c\u8f74\u7d22\u5f15\u8fd8\u662f\u7528\u4f5cDataFrame\u4e2d\u7684\u5217\u3002\\ to_datetime\u65b9\u6cd5\u53ef\u4ee5\u8f6c\u6362\u5f88\u591a\u4e0d\u540c\u7684\u65e5\u671f\u8868\u793a\u683c\u5f0f\u3002\\ to_datetime\u65b9\u6cd5\u8fd8\u53ef\u4ee5\u5904\u7406\u90a3\u4e9b\u88ab\u8ba4\u4e3a\u662f\u7f3a\u5931\u503c\u7684\u503c\uff08None\u3001\u7a7a\u5b57\u7b26\u4e32\u7b49\uff09\u3002\\ NaT\uff08Not a time\uff09\u662fpandas\u4e2d\u65f6\u95f4\u6233\u6570\u636e\u7684\u662fnull\u503c\u3002 datestrs = ['2020/5/6 12:00:00', '2021/10/1 09:00:00'] result = pd.to_datetime(datestrs) print(result) # DatetimeIndex(['2020-05-06 12:00:00', '2021-10-01 09:00:00'], dtype='datetime64[ns]', freq=None) idx = pd.to_datetime(datestrs + [None]) print(idx) # DatetimeIndex(['2020-05-06 12:00:00', '2021-10-01 09:00:00', 'NaT'], dtype='datetime64[ns]', freq=None) print(idx[2]) # NaT print(pd.isnull(idx)) # [False False True] \u65f6\u95f4\u5e8f\u5217\u57fa\u7840 from datetime import datetime import pandas as pd import numpy as np DatetimeIndex pandas\u4e2d\u7684\u57fa\u7840\u65f6\u95f4\u5e8f\u5217\u79cd\u7c7b\u662f\u7531\u65f6\u95f4\u6233\u7d22\u5f15\u7684Series\uff0c\u5728pandas\u5916\u90e8\u5219\u901a\u5e38\u8868\u793a\u4e3aPython\u5b57\u7b26\u4e32\u6216datetime\u5bf9\u8c61\u3002\\ \u6240\u6709\u4f7f\u7528datetime\u5bf9\u8c61\u7684\u5730\u65b9\u90fd\u53ef\u4ee5\u7528Timestamp\u3002 dates = [ datetime(2021, 10, 1), datetime(2021, 10, 3), datetime(2021, 10, 5), datetime(2021, 10, 7), datetime(2021, 10, 9), datetime(2021, 10, 11) ] data = np.random.rand(6) ts = pd.Series(data, index=dates) print(ts) # 2021-10-01 0.678297 # 2021-10-03 0.538631 # 2021-10-05 0.934413 # 2021-10-07 0.018534 # 2021-10-09 0.938441 # 2021-10-11 0.173329 # dtype: float64 \u8fd9\u4e9bdatetime\u5bf9\u8c61\u88ab\u653e\u5165DatetimeIndex\u4e2d print(ts.index) # DatetimeIndex(['2021-10-01', '2021-10-03', '2021-10-05', '2021-10-07', # '2021-10-09', '2021-10-11'], # dtype='datetime64[ns]', freq=None) DatetimeIndex\u4e2d\u7684\u6807\u91cf\u503c\u662fpandas\u7684Timestamp\u5bf9\u8c61\uff1a stamp = ts.index[0] print(stamp) # 2021-10-01 00:00:00 \u548c\u5176\u4ed6Series\u7c7b\u4f3c\uff0c\u4e0d\u540c\u7d22\u5f15\u7684\u65f6\u95f4\u5e8f\u5217\u4e4b\u95f4\u7684\u7b97\u672f\u8fd0\u7b97\u5728\u65e5\u671f\u4e0a\u81ea\u52a8\u5bf9\u9f50\uff1a print(ts + ts[::2]) # ts[::2]\u4f1a\u5c06ts\u4e2d\u6bcf\u9694\u4e00\u4e2a\u7684\u5143\u7d20\u9009\u62e9\u51fa # 2021-10-01 1.356595 # 2021-10-03 NaN # 2021-10-05 1.868825 # 2021-10-07 NaN # 2021-10-09 1.876883 # 2021-10-11 NaN # dtype: float64 pandas\u4f7f\u7528NumPy\u7684datetime64\u6570\u636e\u7c7b\u578b\u5728\u7eb3\u79d2\u7ea7\u7684\u5206\u8fa8\u7387\u4e0b\u5b58\u50a8\u65f6\u95f4\u6233 print(ts.index.dtype) # datetime64[ns] \u7d22\u5f15\u3001\u9009\u62e9\u3001\u5b50\u96c6 \u5f53\u57fa\u4e8e\u6807\u7b7e\u8fdb\u884c\u7d22\u5f15\u548c\u9009\u62e9\u65f6\uff0c\u65f6\u95f4\u5e8f\u5217\u7684\u884c\u4e3a\u548c\u5176\u4ed6\u7684pandas.Series\u7c7b\u4f3c\uff1a stamp = ts.index[2] print(ts[stamp]) # 0.9344125159374457 \u5bf9\u5e942021-10-05 \u4e5f\u53ef\u4ee5\u4f20\u9012\u4e00\u4e2a\u80fd\u89e3\u91ca\u4e3a\u65e5\u671f\u7684\u5b57\u7b26\u4e32\uff1a print(ts['10/9/2021']) print(ts['20211003']) \u5bf9\u4e00\u4e2a\u957f\u7684\u65f6\u95f4\u5e8f\u5217\uff0c\u53ef\u4ee5\u4f20\u9012\u4e00\u4e2a\u5e74\u4efd\u6216\u4e00\u4e2a\u5e74\u4efd\u548c\u6708\u4efd\u6765\u9009\u62e9\u6570\u636e\u5207\u7247\uff1a data = np.random.randn(1000) longer_ts = pd.Series( data, index=pd.date_range('1/1/2021', periods=1000) ) print(longer_ts) # 2021-01-01 -0.009192 # 2021-01-02 -1.079068 # 2021-01-03 -1.851176 # 2021-01-04 1.347109 # 2021-01-05 -0.236394 # ... # 2023-09-23 -1.317943 # 2023-09-24 0.201741 # 2023-09-25 0.442282 # 2023-09-26 0.176137 # 2023-09-27 1.146437 # Freq: D, Length: 1000, dtype: float64 \u5b57\u7b26\u4e32\u20192001\u2019\u88ab\u89e3\u91ca\u4e3a\u4e00\u4e2a\u5e74\u4efd\uff0c\u5e76\u9009\u62e9\u4e86\u76f8\u5e94\u7684\u65f6\u95f4\u533a\u95f4 print(longer_ts['2021']) # 2021-01-01 2.170411 # 2021-01-02 1.186933 # 2021-01-03 0.399262 # 2021-01-04 -1.042606 # 2021-01-05 2.082112 # ... # 2021-12-27 -0.988282 # 2021-12-28 0.598683 # 2021-12-29 2.770580 # 2021-12-30 -1.463262 # 2021-12-31 -1.642846 # Freq: D, Length: 365, dtype: float64 \u6307\u5b9a\u4e86\u5e74\u4efd\u548c\u6708\u4efd\u4e5f\u662f\u6709\u6548\u7684 print(longer_ts['2021-10']) # 2021-10-01 0.712265 # 2021-10-02 1.195221 # 2021-10-03 -1.930220 # 2021-10-04 -0.720816 # 2021-10-05 0.081777 # 2021-10-06 -0.037466 # 2021-10-07 3.737303 # 2021-10-08 1.620383 # 2021-10-09 0.990797 # 2021-10-10 0.507850 # 2021-10-11 0.846935 # 2021-10-12 0.996947 # 2021-10-13 -1.078558 # 2021-10-14 0.871832 # 2021-10-15 -0.591698 # 2021-10-16 -0.805463 # 2021-10-17 0.160528 # 2021-10-18 -0.028474 # 2021-10-19 2.305579 # 2021-10-20 -1.132288 # 2021-10-21 0.649980 # 2021-10-22 0.615327 # 2021-10-23 0.185108 # 2021-10-24 0.857199 # 2021-10-25 -1.473752 # 2021-10-26 -0.895161 # 2021-10-27 -0.432717 # 2021-10-28 0.734504 # 2021-10-29 1.892493 # 2021-10-30 0.456619 # 2021-10-31 -0.255288 # Freq: D, dtype: float64 \u4f7f\u7528datetime\u5bf9\u8c61\u8fdb\u884c\u5207\u7247\u4e5f\u662f\u53ef\u4ee5\u7684\uff1a print(longer_ts[datetime(2023, 1, 6):]) # 2023-01-06 0.952591 # 2023-01-07 -0.900259 # 2023-01-08 0.925332 # 2023-01-09 0.173215 # 2023-01-10 -0.507791 # ... # 2023-09-23 -0.319989 # 2023-09-24 -1.105417 # 2023-09-25 -2.118769 # 2023-09-26 0.009420 # 2023-09-27 -0.310281 # Freq: D, Length: 265, dtype: float64 \u56e0\u4e3a\u5927\u90e8\u5206\u7684\u65f6\u95f4\u5e8f\u5217\u6570\u636e\u662f\u6309\u65f6\u95f4\u987a\u5e8f\u6392\u5e8f\u7684\uff0c\u53ef\u4ee5\u4f7f\u7528\u4e0d\u5305\u542b\u5728\u65f6\u95f4\u5e8f\u5217\u4e2d\u7684\u65f6\u95f4\u6233\u8fdb\u884c\u5207\u7247\uff0c\u4ee5\u6267\u884c\u8303\u56f4\u67e5\u8be2\uff1a print(longer_ts['2021/10/1':'2021/10/5']) # 2021-10-01 -0.591853 # 2021-10-02 -1.554564 # 2021-10-03 -0.712585 # 2021-10-04 -0.326657 # 2021-10-05 1.044887 # Freq: D, dtype: float64 \u4f7f\u7528truncate\u5728\u4e24\u4e2a\u65e5\u671f\u95f4\u5bf9Series\u8fdb\u884c\u5207\u7247\uff1a print(longer_ts.truncate(after='2021/10/1')) # 2021-01-01 -0.906685 # 2021-01-02 -0.470732 # 2021-01-03 -0.041316 # 2021-01-04 -0.287356 # 2021-01-05 0.104268 # ... # 2021-09-27 -0.669198 # 2021-09-28 -2.222169 # 2021-09-29 -0.653814 # 2021-09-30 -0.625868 # 2021-10-01 0.872684 # Freq: D, Length: 274, dtype: float64 \u4e0a\u9762\u8fd9\u4e9b\u64cd\u4f5c\u4e5f\u90fd\u9002\u7528\u4e8eDataFrame\uff0c\u5e76\u5728\u5176\u884c\u4e0a\u8fdb\u884c\u7d22\u5f15\uff1a dates = pd.date_range('10/1/2020', periods=100, freq='W-WED') data = np.random.randn(100, 4) long_df = pd.DataFrame( data, index=dates, columns=['Colorado', 'Texas', 'New York', 'Ohio'] ) print(long_df) # Colorado Texas New York Ohio # 2020-10-07 -1.186789 2.020634 0.300076 -0.955234 # 2020-10-14 1.502838 0.965368 -0.797539 -0.292833 # ... ... ... ... ... # 2022-08-24 -0.253116 -0.263307 0.602425 0.370599 # 2022-08-31 0.907918 0.091939 0.789694 2.781535 # [100 rows x 4 columns] print(long_df.loc['10-2020']) # Colorado Texas New York Ohio # 2020-10-07 1.031616 -1.812038 -0.446577 0.395656 # 2020-10-14 -0.673167 0.198804 -0.439141 0.086004 # 2020-10-21 -1.139786 0.716820 0.006516 -0.284335 # 2020-10-28 -0.637939 1.647810 -0.750786 0.140637 \u542b\u6709\u91cd\u590d\u7d22\u5f15\u7684\u65f6\u95f4\u5e8f\u5217 \u5728\u67d0\u4e9b\u5e94\u7528\u4e2d\uff0c\u53ef\u80fd\u4f1a\u6709\u591a\u4e2a\u6570\u636e\u89c2\u5bdf\u503c\u843d\u5728\u7279\u5b9a\u7684\u65f6\u95f4\u6233\u4e0a\u3002\u4e0b\u9762\u662f\u4e2a\u4f8b\u5b50\uff1a dates = pd.DatetimeIndex( ['2021/1/1', '2021/1/2', '2021/1/2', '2021/1/2', '2021/1/3'] ) dup_ts = pd.Series( np.arange(5), index=dates ) print(dup_ts) # 2021-01-01 0 # 2021-01-02 1 # 2021-01-02 2 # 2021-01-02 3 # 2021-01-03 4 # dtype: int64 \u901a\u8fc7\u68c0\u67e5\u7d22\u5f15\u7684is_unique\u5c5e\u6027\uff0c\u53ef\u4ee5\u770b\u51fa\u7d22\u5f15\u5e76\u4e0d\u662f\u552f\u4e00\u7684\uff1a print(dup_ts.index.is_unique) # False \u5bf9\u4e0a\u9762\u7684Series\u8fdb\u884c\u7d22\u5f15\uff0c\u7ed3\u679c\u662f\u6807\u91cf\u503c\u8fd8\u662fSeries\u5207\u7247\u53d6\u51b3\u4e8e\u662f\u5426\u6709\u65f6\u95f4\u6233\u662f\u91cd\u590d\u7684\uff1a result = dup_ts['2021/1/3'] print(result) # 4 result = dup_ts['2021/1/2'] print(result) # 2021-01-02 1 # 2021-01-02 2 # 2021-01-02 3 # dtype: int64 \u5047\u8bbe\u60f3\u8981\u805a\u5408\u542b\u6709\u975e\u552f\u4e00\u65f6\u95f4\u6233\u7684\u6570\u636e\u3002\u4e00\u79cd\u65b9\u5f0f\u5c31\u662f\u4f7f\u7528groupby\u5e76\u4f20\u9012level=0\uff1a grouped = dup_ts.groupby(level=0) result = grouped.mean() print(result) # 2021-01-01 0.0 # 2021-01-02 2.0 # 2021-01-03 4.0 # dtype: float64 result = grouped.count() print(result) # 2021-01-01 1 # 2021-01-02 3 # 2021-01-03 1 # dtype: int64 \u65e5\u671f\u8303\u56f4\u3001\u9891\u7387\u548c\u79fb\u4f4d from datetime import datetime, timedelta import pandas as pd import numpy as np from pandas.tseries.offsets import Hour, Minute, Day, MonthEnd pandas\u7684\u901a\u7528\u65f6\u95f4\u5e8f\u5217\u662f\u4e0d\u89c4\u5219\u7684\uff0c\u5373\u65f6\u95f4\u5e8f\u5217\u7684\u9891\u7387\u4e0d\u662f\u56fa\u5b9a\u7684\u3002\\ \u4f46\u6709\u65f6\u9700\u8981\u5904\u7406\u56fa\u5b9a\u9891\u7387\u7684\u573a\u666f\uff0c\u4f8b\u5982\u6bcf\u65e5\u7684\u3001\u6bcf\u6708\u7684\u6216\u6bcf15\u5206\u949f\u7684\u65f6\u95f4\u5e8f\u5217\u6570\u636e\u3002\\ \u53ef\u4ee5\u901a\u8fc7\u8c03\u7528resample\u65b9\u6cd5\u5c06\u6837\u672c\u65f6\u95f4\u5e8f\u5217\u8f6c\u6362\u4e3a\u56fa\u5b9a\u7684\u6bcf\u65e5\u9891\u7387\u6570\u636e\u3002\\ \u5728\u9891\u7387\u95f4\u8f6c\u6362\uff0c\u53c8\u79f0\u4e3a\u91cd\u65b0\u91c7\u6837 dates = [ datetime(2021, 10, 1), datetime(2021, 10, 3), datetime(2021, 10, 5), datetime(2021, 10, 7), datetime(2021, 10, 9), datetime(2021, 10, 11) ] data = np.random.rand(6) ts = pd.Series(data, index=dates) print(ts) # 2021-10-01 0.956685 # 2021-10-03 0.817168 # 2021-10-05 0.275543 # 2021-10-07 0.614226 # 2021-10-09 0.061377 # 2021-10-11 0.357080 # dtype: float64 resampler = ts.resample('D') # \u5b57\u7b26\u4e32\u2019D\u2019\u88ab\u89e3\u91ca\u4e3a\u6bcf\u65e5\u9891\u7387 print(resampler) # DatetimeIndexResampler [freq=<Day>, axis=0, closed=left, label=left, convention=start, origin=start_day] \u751f\u6210\u65e5\u671f\u8303\u56f4 pandas.date_range\u662f\u7528\u4e8e\u6839\u636e\u7279\u5b9a\u9891\u7387\u751f\u6210\u6307\u5b9a\u957f\u5ea6\u7684DatetimeIndex\u3002\\ \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0cdate_range\u751f\u6210\u7684\u662f\u6bcf\u65e5\u7684\u65f6\u95f4\u6233\u3002\u5982\u679c\u53ea\u4f20\u9012\u4e00\u4e2a\u8d77\u59cb\u6216\u7ed3\u5c3e\u65e5\u671f\uff0c\u4f60\u5fc5\u987b\u4f20\u9012\u4e00\u4e2a\u7528\u4e8e\u751f\u6210\u8303\u56f4\u7684\u6570\u5b57\u3002\\ \u5f00\u59cb\u65e5\u671f\u548c\u7ed3\u675f\u65e5\u671f\u4e25\u683c\u5b9a\u4e49\u4e86\u751f\u6210\u65e5\u671f\u7d22\u5f15\u7684\u8fb9\u754c\u3002 index = pd.date_range('2021/1/1', '2021/1/30') print(index) index = pd.date_range(start='2021/1/1', periods=30) print(index) index = pd.date_range(end='2021/1/30', periods=30) print(index) # DatetimeIndex(['2021-01-01', '2021-01-02', '2021-01-03', '2021-01-04', # '2021-01-05', '2021-01-06', '2021-01-07', '2021-01-08', # '2021-01-09', '2021-01-10', '2021-01-11', '2021-01-12', # '2021-01-13', '2021-01-14', '2021-01-15', '2021-01-16', # '2021-01-17', '2021-01-18', '2021-01-19', '2021-01-20', # '2021-01-21', '2021-01-22', '2021-01-23', '2021-01-24', # '2021-01-25', '2021-01-26', '2021-01-27', '2021-01-28', # '2021-01-29', '2021-01-30'], # dtype='datetime64[ns]', freq='D') \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0cdate_range\u4fdd\u7559\u5f00\u59cb\u6216\u7ed3\u675f\u65f6\u95f4\u6233\u7684\u65f6\u95f4\uff08\u5982\u679c\u6709\u7684\u8bdd\uff09\u3002\\ normalize\u9009\u9879\u53ef\u4ee5\u5b9e\u73b0\u751f\u6210\u7684\u662f\u6807\u51c6\u5316\u4e3a\u96f6\u70b9\u7684\u65f6\u95f4\u6233\u3002 index = pd.date_range('2021/1/1 12:56:30', periods=5) print(index) # DatetimeIndex(['2021-01-01 12:56:30', '2021-01-02 12:56:30', # '2021-01-03 12:56:30', '2021-01-04 12:56:30', # '2021-01-05 12:56:30'], # dtype='datetime64[ns]', freq='D') index = pd.date_range('2021/1/1 12:56:30', periods=5, normalize=True) print(index) # DatetimeIndex(['2021-01-01', '2021-01-02', '2021-01-03', '2021-01-04', # '2021-01-05'], # dtype='datetime64[ns]', freq='D') Pandas\u65f6\u95f4\u5e8f\u5217\uff1a\u9891\u7387\u548c\u65e5\u671f\u504f\u79fb\u91cf pandas\u4e2d\u7684\u9891\u7387\u662f\u7531\u4e00\u4e2a\u57fa\u7840\u9891\u7387(\u4f8b\u5982\u201c\u65e5\u201d\u3001\u201c\u6708\u201d)\u548c\u4e00\u4e2a\u4e58\u6570\u7ec4\u6210\u3002\\ \u57fa\u7840\u9891\u7387\u901a\u5e38\u4ee5\u4e00\u4e2a\u5b57\u7b26\u4e32\u522b\u540d\u8868\u793a\uff0c\u6bd4\u5982\u201cD\u201d\u8868\u793a\u65e5\uff0c\u201cM\u201d\u8868\u793a\u6708\u3002\\ \u5bf9\u4e8e\u6bcf\u4e2a\u57fa\u7840\u9891\u7387\uff0c\u90fd\u6709\u4e00\u4e2a\u88ab\u79f0\u4e3a\u65e5\u671f\u504f\u79fb\u91cf(dateoffset)\u7684\u5bf9\u8c61\u4e0e\u4e4b\u5bf9\u5e94\uff0c\u6bd4\u5982\u65e5\u671f\u504f\u79fb\u91cfHour\u5bf9\u5e94\u7684\u9891\u7387\u662fH\u3002 \u5e38\u7528\u9891\u7387\u4e0e\u65e5\u671f\u504f\u79fb\u91cf \u9891\u7387 \u65e5\u671f\u504f\u79fb\u91cf \u8bf4\u660e D Day \u65e5\u5386\u65e5 B BusinessDay \u5de5\u4f5c\u65e5 H Hour \u5c0f\u65f6 T/min Minute \u5206 S Second \u79d2 L/ms Milli \u6beb\u79d2 U Micro \u5fae\u79d2 M MonthEnd \u6bcf\u6708\u6700\u540e\u4e00\u4e2a\u65e5\u5386\u65e5 BM BusinessMonthEnd \u6bcf\u6708\u6700\u540e\u4e00\u4e2a\u5de5\u4f5c\u65e5 MS MonthBegin \u6bcf\u6708\u7b2c\u4e00\u4e2a\u65e5\u5386\u65e5 BMS BussinessMonthBegin \u6bcf\u6708\u7b2c\u4e00\u4e2a\u5de5\u4f5c\u65e5 W-MON, W-TUE, ... Week \u6307\u5b9a\u661f\u671f\u51e0(MON,TUE,WED,THU,FRI,SAT,SUN) WOM-1MON,WOM-2MON, ... WeekOfMonth \u4ea7\u751f\u6bcf\u6708\u7b2c\u4e00,\u7b2c\u4e8c,\u7b2c\u4e09\u6216\u7b2c\u56db\u5468\u7684\u661f\u671f\u51e0\u3002\u4f8b\u5982WOM-3FRI\u8868\u793a\u6bcf\u6708\u7b2c3\u4e2a\u661f\u671f\u4e94 Q-JAN,Q-FEB, ... QuarterEnd \u4ee5\u6307\u5b9a\u6708\u4efd\u7ed3\u675f\u7684\u5e74\u5ea6\uff0c\u6bcf\u5b63\u5ea6\u6700\u540e\u4e00\u4e2a\u6708\u7684\u6700\u540e\u4e00\u4e2a\u65e5\u5386\u65e5 BQ-JAN,BQ-FEB, ... BusinessQuarterEnd \u4ee5\u6307\u5b9a\u6708\u4efd\u7ed3\u675f\u7684\u5e74\u5ea6\uff0c\u6bcf\u5b63\u5ea6\u6700\u540e\u4e00\u4e2a\u6708\u7684\u6700\u540e\u4e00\u4e2a\u5de5\u4f5c\u65e5 QS-JAN,QS-FEB, ... QuarterBegin \u4ee5\u6307\u5b9a\u6708\u4efd\u7ed3\u675f\u7684\u5e74\u5ea6\uff0c\u6bcf\u5b63\u5ea6\u6700\u540e\u4e00\u4e2a\u6708\u7684\u7b2c\u4e00\u4e2a\u65e5\u5386\u65e5 BQS-JAN,BQS-FEB, ... BusinessQuarterBegin \u4ee5\u6307\u5b9a\u6708\u4efd\u7ed3\u675f\u7684\u5e74\u5ea6\uff0c\u6bcf\u5b63\u5ea6\u6700\u540e\u4e00\u4e2a\u6708\u7684\u7b2c\u4e00\u4e2a\u5de5\u4f5c\u65e5 A-JAN,A-FEB, ... YearEnd \u6bcf\u5e74\u6307\u5b9a\u6708\u4efd\u7684\u6700\u540e\u4e00\u4e2a\u65e5\u5386\u65e5 BA-JAN,BA-FEB, ... BusinessYearEnd \u6bcf\u5e74\u6307\u5b9a\u6708\u4efd\u7684\u6700\u540e\u4e00\u4e2a\u5de5\u4f5c\u65e5 AS-JAN,AS-FEB, ... YearBegin \u6bcf\u5e74\u6307\u5b9a\u6708\u4efd\u7684\u7b2c\u4e00\u4e2a\u65e5\u5386\u65e5 BAS-JAN,BAS-FEB, ... BusinessYearBegin \u6bcf\u5e74\u6307\u5b9a\u6708\u4efd\u7684\u7b2c\u4e00\u4e2a\u5de5\u4f5c\u65e5 \u9891\u7387\u548c\u65e5\u671f\u504f\u7f6e pandas\u4e2d\u7684\u9891\u7387\u662f\u7531\u57fa\u7840\u9891\u7387\u548c\u500d\u6570\u7ec4\u6210\u7684\u3002\\ \u57fa\u7840\u9891\u7387\u901a\u5e38\u4f1a\u6709\u5b57\u7b26\u4e32\u522b\u540d\uff0c\u4f8b\u5982\u2019M'\u4ee3\u8868\u6bcf\u6708\uff0c'H\u2019\u4ee3\u8868\u6bcf\u5c0f\u65f6\u3002\\ \u5bf9\u4e8e\u6bcf\u4e2a\u57fa\u7840\u9891\u7387\uff0c\u90fd\u6709\u4e00\u4e2a\u5bf9\u8c61\u53ef\u4ee5\u88ab\u7528\u4e8e\u5b9a\u4e49\u65e5\u671f\u504f\u7f6e\u3002 \u4f8b\u5982\uff0c\u6bcf\u5c0f\u65f6\u7684\u9891\u7387\u53ef\u4ee5\u4f7f\u7528Hour\u7c7b\u6765\u8868\u793a\uff1a ```hour = Hour() print(hour) \u53ef\u4ee5\u4f20\u9012\u4e00\u4e2a\u6574\u6570\u6765\u5b9a\u4e49\u504f\u7f6e\u91cf\u7684\u500d\u6570\uff1a four_hours = Hour(4) print(four_hours) <4 * Hours> \u5728\u5927\u591a\u6570\u5e94\u7528\u4e2d\uff0c\u4e0d\u9700\u8981\u663e\u5f0f\u5730\u521b\u5efa\u8fd9\u4e9b\u5bf9\u8c61\uff0c\u800c\u662f\u4f7f\u7528\u5b57\u7b26\u4e32\u522b\u540d\uff0c\u5982\u2019H'\u6216\u20194H'\u3002\u5728\u57fa\u7840\u9891\u7387\u524d\u653e\u4e00\u4e2a\u6574\u6570\u5c31\u53ef\u4ee5\u751f\u6210\u500d\u6570\uff1a ts = pd.date_range('2021/1/1', '2021/1/2 23:59', freq='4h') print(ts) DatetimeIndex(['2021-01-01 00:00:00', '2021-01-01 04:00:00', '2021-01-01 08:00:00', '2021-01-01 12:00:00', '2021-01-01 16:00:00', '2021-01-01 20:00:00', '2021-01-02 00:00:00', '2021-01-02 04:00:00', '2021-01-02 08:00:00', '2021-01-02 12:00:00', '2021-01-02 16:00:00', '2021-01-02 20:00:00'], dtype='datetime64[ns]', freq='4H') \u591a\u4e2a\u504f\u7f6e\u53ef\u4ee5\u901a\u8fc7\u52a0\u6cd5\u8fdb\u884c\u8054\u5408\uff1a print(Hour(2) + Minute(30)) <150 * Minutes> \u7c7b\u4f3c\u5730\uff0c\u53ef\u4ee5\u4f20\u9012\u9891\u7387\u5b57\u7b26\u4e32\uff1a ts = pd.date_range('2021/1/1', '2021/1/1 23:59', freq='4h30min') print(ts) DatetimeIndex(['2021-01-01 00:00:00', '2021-01-01 04:30:00', '2021-01-01 09:00:00', '2021-01-01 13:30:00', '2021-01-01 18:00:00', '2021-01-01 22:30:00'], dtype='datetime64[ns]', freq='270T') \u6709\u4e9b\u9891\u7387\u63cf\u8ff0\u70b9\u7684\u65f6\u95f4\u5e76\u4e0d\u662f\u5747\u5300\u5206\u9694\u7684\u3002\u4f8b\u5982\uff0c'M'\uff08\u65e5\u5386\u6708\u672b\uff09\u548c\u2019BM'\uff08\u6708\u5185\u6700\u540e\u5de5\u4f5c\u65e5\uff09\u53d6\u51b3\u4e8e\u5f53\u6708\u5929\u6570\uff0c\u6708\u672b\u662f\u5426\u662f\u5468\u672b\u3002\u6211\u4eec\u5c06\u8fd9\u4e9b\u65e5\u671f\u79f0\u4e3a\u951a\u5b9a\u504f\u7f6e\u91cf\u3002 ##### \u6708\u4e2d\u67d0\u661f\u671f\u7684\u65e5\u671f \"\u6708\u4e2d\u67d0\u661f\u671f\"\uff08week of month \uff09\u7684\u65e5\u671f\u662f\u4e00\u4e2a\u6709\u7528\u7684\u9891\u7387\u7c7b\uff0c\u4ee5'WOM'\u5f00\u59cb\u3002 rng = pd.date_range('2021-1-1', '2021-9-1', freq='WOM-3FRI') # \u6bcf\u6708\u7b2c\u4e09\u4e2a\u661f\u671f\u4e94 print(rng) DatetimeIndex(['2021-01-15', '2021-02-19', '2021-03-19', '2021-04-16', '2021-05-21', '2021-06-18', '2021-07-16', '2021-08-20'], dtype='datetime64[ns]', freq='WOM-3FRI') #### \u79fb\u4f4d\uff08\u524d\u5411\u548c\u540e\u5411\uff09\u65e5\u671f \"\u79fb\u4f4d\"\u662f\u6307\u5c06\u65e5\u671f\u6309\u65f6\u95f4\u5411\u524d\u79fb\u52a8\u6216\u5411\u540e\u79fb\u52a8\u3002\\ Series\u548cDataFrame\u90fd\u6709\u4e00\u4e2ashift\u65b9\u6cd5\u7528\u4e8e\u8fdb\u884c\u7b80\u5355\u7684\u524d\u5411\u6216\u540e\u5411\u79fb\u4f4d\uff0c\u800c\u4e0d\u6539\u53d8\u7d22\u5f15\u3002\\ \u8fdb\u884c\u79fb\u4f4d\u65f6\uff0c\u4f1a\u5728\u65f6\u95f4\u5e8f\u5217\u7684\u8d77\u59cb\u4f4d\u6216\u7ed3\u675f\u4f4d\u5f15\u5165\u7f3a\u5931\u503c\u3002 data = [0.882972, 1.363282, -0.687750, -0.048117] ts = pd.Series(data, index=pd.date_range('2021-1-1', periods=4, freq='M')) print(ts) 2021-01-31 0.882972 2021-02-28 1.363282 2021-03-31 -0.687750 2021-04-30 -0.048117 Freq: M, dtype: float64 print(ts.shift(2)) 2021-01-31 NaN 2021-02-28 NaN 2021-03-31 0.882972 2021-04-30 1.363282 Freq: M, dtype: float64 print(ts.shift(-2)) 2021-01-31 -0.687750 2021-02-28 -0.048117 2021-03-31 NaN 2021-04-30 NaN Freq: M, dtype: float64 shift\u5e38\u7528\u4e8e\u8ba1\u7b97\u65f6\u95f4\u5e8f\u5217\u6216DataFrame\u591a\u5217\u65f6\u95f4\u5e8f\u5217\u7684\u767e\u5206\u6bd4\u53d8\u5316\uff1a print(ts/ts.shift(1)) 2021-01-31 NaN 2021-02-28 1.543970 2021-03-31 -0.504481 2021-04-30 0.069963 Freq: M, dtype: float64 print(ts/ts.shift(1) - 1) 2021-01-31 NaN 2021-02-28 0.543970 2021-03-31 -1.504481 2021-04-30 -0.930037 Freq: M, dtype: float64 \u5982\u679c\u9891\u7387\u662f\u5df2\u77e5\u7684\uff0c\u5219\u53ef\u4ee5\u5c06\u9891\u7387\u4f20\u9012\u7ed9shift\u6765\u63a8\u79fb\u65f6\u95f4\u6233\uff1a print(ts.shift(2, freq='M')) # \u539f\u59cb\u6570\u636e\u7684\u201c\u6708\u201c\u589e\u52a0\u4e86\u504f\u79fb\u503c 2021-03-31 0.882972 2022021-10-31 00:00:001-04-30 1.363282 2021-05-31 -0.687750 2021-06-30 -0.048117 Freq: M, dtype: float64 print(ts.shift(2, freq='D')) # \u539f\u59cb\u6570\u636e\u7684\u201c\u65e5\u201c\u589e\u52a0\u4e86\u504f\u79fb\u503c 2021-02-02 0.882972 2021-03-02 1.363282 2021-04-02 -0.687750 2021-05-02 -0.048117 dtype: float64 print(ts.shift(2, freq='90T')) # \u539f\u59cb\u6570\u636e\u7684\u201c\u5c0f\u65f6\u201c\u589e\u52a0\u4e86\u504f\u79fb\u503c 2021-01-31 03:00:00 0.882972 2021-02-28 03:00:00 1.363282 2021-03-31 03:00:00 -0.687750 2021-04-30 03:00:00 -0.048117 dtype: float64 ##### \u4f7f\u7528\u504f\u7f6e\u8fdb\u884c\u79fb\u4f4d\u65e5\u671f pandas\u65e5\u671f\u504f\u7f6e\u4e5f\u53ef\u4ee5\u4f7f\u7528datetime\u6216Timestamp\u5bf9\u8c61\u5b8c\u6210\uff1a now = datetime(2021, 10, 9) print(now) 2021-10-09 00:00:00 print(now + 3 * Day()) 2021-10-12 00:00:00 \u951a\u5b9a\u504f\u7f6e\u53ef\u4ee5\u4f7f\u7528rollforward\u548crollback\u5206\u522b\u663e\u5f0f\u5730\u5c06\u65e5\u671f\u5411\u524d\u6216\u5411\u540e\"\u6eda\u52a8\"\\ \u5982\u679c\u6dfb\u52a0\u4e86\u4e00\u4e2a\u951a\u5b9a\u504f\u7f6e\u91cf\uff0c\u6bd4\u5982MonthEnd\uff0c\u6839\u636e\u9891\u7387\u89c4\u5219\uff0c\u7b2c\u4e00\u4e2a\u589e\u91cf\u4f1a\u5c06\u65e5\u671f\u201c\u524d\u6eda\u201d\u5230\u4e0b\u4e00\u4e2a\u65e5\u671f\uff1a print(now + MonthEnd()) # \u201c\u524d\u6eda\u201d\u5230\u5f53\u524d\u6708\u7684\u6708\u5e95 2021-10-31 00:00:00 print(now + MonthEnd(2)) # \u6ce8\u610f\u8fd9\u91cc\u7684\u5e8f\u5217\u53f7\uff0c\u5f53\u524d\u6708\u662f1,\u4e0b\u4e2a\u6708\u662f2 2021-11-30 00:00:00 offset = MonthEnd() print(offset.rollback(now)) 2021-09-30 00:00:00 print(offset.rollforward(now)) 2021-10-31 00:00:00 \u5c06\u79fb\u4f4d\u65b9\u6cd5\u4e0egroupby\u4e00\u8d77\u4f7f\u7528\u662f\u65e5\u671f\u504f\u7f6e\u7684\u4e00\u79cd\u521b\u9020\u6027\u7528\u6cd5\uff1a ts = pd.Series( np.random.randn(20), index=pd.date_range('2021/1/1', periods=20, freq='4d') ) print(ts) 2021-01-01 0.674348 2021-01-05 -1.437803 2021-01-09 -0.079218 2021-01-13 -1.444890 2021-01-17 0.643279 2021-01-21 1.089965 2021-01-25 0.021876 2021-01-29 0.692138 2021-02-02 0.833496 2021-02-06 1.082616 2021-02-10 -0.729415 2021-02-14 0.271186 2021-02-18 -1.416218 2021-02-22 -0.780402 2021-02-26 -0.113773 2021-03-02 2.095338 2021-03-06 -0.302612 2021-03-10 1.113632 2021-03-14 -1.314581 2021-03-18 0.947746 Freq: 4D, dtype: float64 print(ts.groupby(offset.rollforward).mean()) # \u524d\u6eda\u81f3\u5f53\u6708\u6708\u5e95\uff0c\u8ba1\u7b97\u5f53\u6708\u5e73\u5747\u503c 2021-01-31 0.019962 2021-02-28 -0.121787 2021-03-31 0.507905 dtype: float64 \u4f7f\u7528resample\u662f\u66f4\u7b80\u5355\u66f4\u5feb\u6377\u7684\u65b9\u6cd5 print(ts.resample('M').mean()) 2021-01-31 0.019962 2021-02-28 -0.121787 2021-03-31 0.507905 Freq: M, dtype: float64 ### \u65f6\u533a\u5904\u7406 \u65f6\u533a\u901a\u5e38\u88ab\u8868\u793a\u4e3aUTC\u7684\u504f\u7f6e\\ \u5728Python\u8bed\u8a00\u4e2d\uff0c\u65f6\u533a\u4fe1\u606f\u6765\u6e90\u4e8e\u7b2c\u4e09\u65b9\u5e93pytz\uff08\u53ef\u4ee5\u4f7f\u7528pip\u6216conda\u5b89\u88c5\uff09\uff0c\u5176\u4e2d\u516c\u5f00\u4e86Olson\u6570\u636e\u5e93\uff0c\u8fd9\u662f\u4e16\u754c\u65f6\u533a\u4fe1\u606f\u7684\u6c47\u7f16\u3002\\ pandas\u5c01\u88c5\u4e86pytz\u7684\u529f\u80fd from datetime import datetime, timedelta import pandas as pd import numpy as np from pandas.tseries.offsets import Hour, Minute, Day, MonthEnd import pytz ##### common_timezones tz = pytz.common_timezones[-5:] # \u8bfb\u53d6common_timezones\u8fd9\u4e2a\u5217\u8868\u7684\u6700\u540e5\u4e2a\u5143\u7d20 print(tz) ['US/Eastern', 'US/Hawaii', 'US/Mountain', 'US/Pacific', 'UTC'] \u8981\u83b7\u5f97pytz\u7684\u65f6\u533a\u5bf9\u8c61\uff0c\u53ef\u4f7f\u7528pytz.timezone\uff1a tz = pytz.timezone('Asia/Shanghai') print(tz) ##### \u65f6\u533a\u7684\u672c\u5730\u5316\u548c\u8f6c\u6362 \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0cpandas\u4e2d\u7684\u65f6\u95f4\u5e8f\u5217\u662f\u65f6\u533a\u7b80\u5355\u578b\u7684\u3002 rng = pd.date_range('2021/1/1 9:30', periods=6, freq='D') ts = pd.Series(np.random.randn(len(rng)), index=rng) print(rng) DatetimeIndex(['2021-01-01 09:30:00', '2021-01-02 09:30:00', '2021-01-03 09:30:00', '2021-01-04 09:30:00', '2021-01-05 09:30:00', '2021-01-06 09:30:00'], dtype='datetime64[ns]', freq='D') print(ts) 2021-01-01 09:30:00 0.339822 2021-01-02 09:30:00 1.356382 2021-01-03 09:30:00 0.475429 2021-01-04 09:30:00 1.826654 2021-01-05 09:30:00 -0.245510 2021-01-06 09:30:00 0.705274 Freq: D, dtype: float64 print(ts.index.tz) # \u7d22\u5f15\u7684tz\u5c5e\u6027\u662fNone None \u65e5\u671f\u8303\u56f4\u53ef\u4ee5\u901a\u8fc7\u65f6\u533a\u96c6\u5408\u6765\u751f\u6210\uff1a rng = pd.date_range('2021/3/1', periods=10, freq='D', tz='UTC') print(rng) DatetimeIndex(['2021-03-01 00:00:00+00:00', '2021-03-02 00:00:00+00:00', '2021-03-03 00:00:00+00:00', '2021-03-04 00:00:00+00:00', '2021-03-05 00:00:00+00:00', '2021-03-06 00:00:00+00:00', '2021-03-07 00:00:00+00:00', '2021-03-08 00:00:00+00:00', '2021-03-09 00:00:00+00:00', '2021-03-10 00:00:00+00:00'], dtype='datetime64[ns, UTC]', freq='D') \u4f7f\u7528tz_localize\u65b9\u6cd5\u53ef\u4ee5\u4ece\u7b80\u5355\u65f6\u533a\u8f6c\u6362\u5230\u672c\u5730\u5316\u65f6\u533a\uff1a print(ts) 2021-01-01 09:30:00 0.294647 2021-01-02 09:30:00 0.958414 2021-01-03 09:30:00 0.424235 2021-01-04 09:30:00 -1.714333 2021-01-05 09:30:00 -0.030319 2021-01-06 09:30:00 -0.744940 Freq: D, dtype: float64 print(ts.tz_localize('UTC')) 2021-01-01 09:30:00+00:00 0.294647 2021-01-02 09:30:00+00:00 0.958414 2021-01-03 09:30:00+00:00 0.424235 2021-01-04 09:30:00+00:00 -1.714333 2021-01-05 09:30:00+00:00 -0.030319 2021-01-06 09:30:00+00:00 -0.744940 Freq: D, dtype: float64 print(ts.tz_localize('Asia/Shanghai')) 2021-01-01 09:30:00+08:00 0.052521 2021-01-02 09:30:00+08:00 -0.305417 2021-01-03 09:30:00+08:00 0.150215 2021-01-04 09:30:00+08:00 -0.953715 2021-01-05 09:30:00+08:00 0.543622 2021-01-06 09:30:00+08:00 0.222422 dtype: float64 print(ts.tz_localize('Asia/Shanghai').index) DatetimeIndex(['2021-01-01 09:30:00+08:00', '2021-01-02 09:30:00+08:00', '2021-01-03 09:30:00+08:00', '2021-01-04 09:30:00+08:00', '2021-01-05 09:30:00+08:00', '2021-01-06 09:30:00+08:00'], dtype='datetime64[ns, Asia/Shanghai]', freq=None) \u4e00\u65e6\u65f6\u95f4\u5e8f\u5217\u88ab\u672c\u5730\u5316\u4e3a\u67d0\u4e2a\u7279\u5b9a\u7684\u65f6\u533a\uff0c\u5219\u53ef\u4ee5\u901a\u8fc7tz_convert\u5c06\u5176\u8f6c\u6362\u4e3a\u53e6\u4e00\u4e2a\u65f6\u533a\uff1a tz_sha = ts.tz_localize('Asia/Shanghai') tz_utc = tz_sha.tz_convert('UTC') print(tz_sha) 2021-01-01 09:30:00+08:00 0.095689 2021-01-02 09:30:00+08:00 -0.392730 2021-01-03 09:30:00+08:00 0.151468 2021-01-04 09:30:00+08:00 0.027467 2021-01-05 09:30:00+08:00 0.393709 2021-01-06 09:30:00+08:00 0.872914 dtype: float64 print(tz_utc) 2021-01-01 01:30:00+00:00 0.095689 2021-01-02 01:30:00+00:00 -0.392730 2021-01-03 01:30:00+00:00 0.151468 2021-01-04 01:30:00+00:00 0.027467 2021-01-05 01:30:00+00:00 0.393709 2021-01-06 01:30:00+00:00 0.872914 dtype: float64 tz_localize\u548ctz_convert\u4e5f\u662fDatetimeIndex\u7684\u5b9e\u4f8b\u65b9\u6cd5\uff1a print(ts.index.tz_localize('Asia/Shanghai')) DatetimeIndex(['2021-01-01 09:30:00+08:00', '2021-01-02 09:30:00+08:00', '2021-01-03 09:30:00+08:00', '2021-01-04 09:30:00+08:00', '2021-01-05 09:30:00+08:00', '2021-01-06 09:30:00+08:00'], dtype='datetime64[ns, Asia/Shanghai]', freq=None) #### \u65f6\u533a\u611f\u77e5\u65f6\u95f4\u6233\u5bf9\u8c61\u7684\u64cd\u4f5c \u4e0e\u65f6\u95f4\u5e8f\u5217\u548c\u65e5\u671f\u8303\u56f4\u7c7b\u4f3c\uff0c\u5355\u72ec\u7684Timestamp\u5bf9\u8c61\u4e5f\u53ef\u4ee5\u4ece\u7b80\u5355\u65f6\u95f4\u6233\u672c\u5730\u5316\u4e3a\u65f6\u533a\u611f\u77e5\u65f6\u95f4\u6233\uff0c\u5e76\u4ece\u4e00\u4e2a\u65f6\u533a\u8f6c\u6362\u4e3a\u53e6\u4e00\u4e2a\u65f6\u533a\uff1a stamp = pd.Timestamp('2021-5-1 05:30') print(stamp) 2021-05-01 05:30:00 stamp_utc = stamp.tz_localize('utc') print(stamp_utc) 2021-05-01 05:30:00+00:00 stamp_sha = stamp_utc.tz_convert('Asia/Shanghai') print(stamp_sha) 2021-05-01 13:30:00+08:00 \u4e5f\u53ef\u4ee5\u5728\u521b\u5efaTimestamp\u7684\u65f6\u5019\u4f20\u9012\u4e00\u4e2a\u65f6\u533a\uff1a stamp_sha = pd.Timestamp('2021-5-1 05:30', tz='Asia/Shanghai') print(stamp_sha) 2021-05-01 05:30:00+08:00 Timestamp\u5bf9\u8c61\u5185\u90e8\u5b58\u50a8\u4e86\u4e00\u4e2aUnix\u7eaa\u5143(1970\u5e741\u67081\u65e5)\u81f3\u4eca\u7684\u7eb3\u79d2\u6570\u91cfUTC\u65f6\u95f4\u6233\u6570\u503c\uff0c\u8be5\u6570\u503c\u5728\u65f6\u533a\u8f6c\u6362\u4e2d\u662f\u4e0d\u53d8\u7684\uff1a print(stamp_utc.value) 1619847000000000000 print(stamp_utc.tz_convert('Asia/Shanghai').value) 1619847000000000000 \u5728\u4f7f\u7528pandas\u7684DateOffset\u8fdb\u884c\u65f6\u95f4\u7b97\u672f\u65f6\uff0cpandas\u5c3d\u53ef\u80fd\u9075\u4ece\u590f\u65f6\u5236\u3002 \u9996\u5148\uff0c\u6784\u9020\u8f6c\u6362\u5230DST\u4e4b\u524d\u768430\u5206\u949f\u7684\u65f6\u95f4\uff1a stamp = pd.Timestamp('2012-3-12 1:30', tz='US/Eastern') print(stamp) 2012-03-12 01:30:00-04:00 print(stamp + Hour()) 2012-03-12 02:30:00-04:00 \u4e4b\u540e\uff0c\u6784\u5efa\u4eceDST\u8fdb\u884c\u8f6c\u6362\u524d\u768490\u5206\u949f\uff1a stamp = pd.Timestamp('2012-11-04 0:30-04:00', tz='US/Eastern') print(stamp) 2012-11-04 00:30:00-04:00 print(stamp + 2 * Hour()) # \u53ea\u589e\u52a0\u4e86\u4e00\u5c0f\u65f6 2012-11-04 01:30:00-05:00 #### \u4e0d\u540c\u65f6\u533a\u95f4\u7684\u64cd\u4f5c \u5982\u679c\u4e24\u4e2a\u65f6\u533a\u4e0d\u540c\u7684\u65f6\u95f4\u5e8f\u5217\u9700\u8981\u8054\u5408\uff0c\u90a3\u4e48\u7ed3\u679c\u5c06\u662fUTC\u65f6\u95f4\u7684\uff0c\u56e0\u4e3a\u65f6\u95f4\u6233\u4ee5UTC\u683c\u5f0f\u5b58\u50a8\u3002 rng = pd.date_range('2021/1/1 9:30', periods=9, freq='B') ts = pd.Series(np.random.randn(len(rng)), index=rng) print(ts) 2021-01-01 09:30:00 0.715681 2021-01-04 09:30:00 0.524563 2021-01-05 09:30:00 -0.482199 2021-01-06 09:30:00 -0.661303 2021-01-07 09:30:00 1.750010 2021-01-08 09:30:00 0.251478 2021-01-11 09:30:00 -1.487268 2021-01-12 09:30:00 -0.224024 2021-01-13 09:30:00 -1.621853 Freq: B, dtype: float64 ts1 = ts[:7].tz_localize('Europe/London') ts2 = ts1[2:].tz_convert('Europe/Moscow') result = ts1 + ts2 print(ts1) 2021-01-01 09:30:00+00:00 -1.393445 2021-01-04 09:30:00+00:00 -1.179614 2021-01-05 09:30:00+00:00 0.716669 2021-01-06 09:30:00+00:00 -0.485656 2021-01-07 09:30:00+00:00 0.433000 2021-01-08 09:30:00+00:00 1.540745 2021-01-11 09:30:00+00:00 0.343751 dtype: float64 print(ts2) 2021-01-05 12:30:00+03:00 0.716669 2021-01-06 12:30:00+03:00 -0.485656 2021-01-07 12:30:00+03:00 0.433000 2021-01-08 12:30:00+03:00 1.540745 2021-01-11 12:30:00+03:00 0.343751 dtype: float64 print(result) 2021-01-01 09:30:00+00:00 NaN 2021-01-04 09:30:00+00:00 NaN 2021-01-05 09:30:00+00:00 1.433337 2021-01-06 09:30:00+00:00 -0.971312 2021-01-07 09:30:00+00:00 0.866000 2021-01-08 09:30:00+00:00 3.081489 2021-01-11 09:30:00+00:00 0.687502 dtype: float64 ### \u65f6\u95f4\u533a\u95f4\u548c\u533a\u95f4\u7b97\u672f from datetime import datetime, timedelta import pandas as pd import numpy as np from pandas.tseries.offsets import Hour, Minute, Day, MonthEnd import pytz \u65f6\u95f4\u533a\u95f4\u8868\u793a\u7684\u662f\u65f6\u95f4\u8303\u56f4\u901a\u8fc7\u539f\u7d22\u5f151~202\uff0c\u628ayear\u548cquarter\u8054\u5408\u8d77\u6765\uff0c\u751f\u6210\u65b0\u7d22\u5f15\uff0c\u5e76\u66ff\u6362\u539f\u7d22\u5f15\uff0c\u6bd4\u5982\u4e00\u4e9b\u5929\u3001\u4e00\u4e9b\u6708\u3001\u4e00\u4e9b\u5b63\u5ea6\u6216\u8005\u662f\u4e00\u4e9b\u5e74\u3002\\ Period\u7c7b\u8868\u793a\u7684\u6b63\u662f\u8fd9\u79cd\u6570\u636e\u7c7b\u578b\uff0c\u9700\u8981\u4e00\u4e2a\u5b57\u7b26\u4e32\u6216\u6570\u5b57\u4ee5\u53ca\u9891\u7387\u3002\\ \u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0cPeriod\u5bf9\u8c61\u8868\u793a\u7684\u662f\u4ece2007\u5e741\u67081\u65e5\u52302007\u5e7412\u670831\u65e5\uff08\u5305\u542b\u5728\u5185\uff09\u7684\u65f6\u95f4\u6bb5\u3002\\ \u5728\u65f6\u95f4\u6bb5\u4e0a\u589e\u52a0\u6216\u51cf\u53bb\u6574\u6570\u53ef\u4ee5\u65b9\u4fbf\u5730\u6839\u636e\u5b83\u4eec\u7684\u9891\u7387\u8fdb\u884c\u79fb\u4f4d\u3002 p = pd.Period(2020, freq='A-DEC') print(p) 2020 print(p + 5) 2025 print(p - 5) 2015 \u5982\u679c\u4e24\u4e2a\u533a\u95f4\u62e5\u6709\u76f8\u540c\u7684\u9891\u7387\uff0c\u5219\u5b83\u4eec\u7684\u5dee\u662f\u5b83\u4eec\u4e4b\u95f4\u7684\u5355\u4f4d\u6570\u3002 p1 = pd.Period(2020, freq='A-DEC') p2 = pd.Period(2010, freq='A-DEC') print(p1 - p2) <10 * YearEnds: month=12> p1 = pd.Period(2020, freq='Q-DEC') p2 = pd.Period(2010, freq='Q-DEC') print(p1 - p2) <40 * QuarterEnds: startingMonth=12> \u4f7f\u7528period_range\u51fd\u6570\u53ef\u4ee5\u6784\u9020\u89c4\u5219\u533a\u95f4\u5e8f\u5217\u3002\\ PeriodIndex\u7c7b\u5b58\u50a8\u7684\u662f\u533a\u95f4\u7684\u5e8f\u5217\uff0c\u53ef\u4ee5\u4f5c\u4e3a\u4efb\u610fpandas\u6570\u636e\u7ed3\u6784\u7684\u8f74\u7d22\u5f15\u3002 data = np.random.randn(6) strings = ['2021Q1', '2021Q2', '2021Q3', '2021Q4', '2022Q1', '2022Q2'] rng = pd.period_range('2001-1-1', '2001-6-30', freq='M') ts = pd.Series(data, index=rng) print(ts) 2001-01 -0.481408 2001-02 -0.297590 2001-03 -0.860354 2001-04 1.281540 2001-05 1.036551 2001-06 -0.522592 Freq: M, dtype: float64 rng = pd.PeriodIndex(strings, freq='Q-DEC') # \u5b57\u7b26\u4e32\u6570\u7ec4\u4e5f\u53ef\u4ee5\u4f7f\u7528PeriodIndex\u7c7b ts = pd.Series(data, index=rng) print(ts) 2021Q1 -2.077200 2021Q2 -0.948796 2021Q3 -1.104737 2021Q4 0.090281 2022Q1 0.431517 2022Q2 1.537045 Freq: Q-DEC, dtype: float64 #### \u533a\u95f4\u9891\u7387\u8f6c\u6362 \u4f7f\u7528asfreq\u53ef\u4ee5\u5c06\u533a\u95f4\u548cPeriodIndex\u5bf9\u8c61\u8f6c\u6362\u4e3a\u5176\u4ed6\u7684\u9891\u7387\u3002\\ \u4f8b\u5982\uff0c\u5047\u8bbe\u6211\u4eec\u6709\u4e00\u4e2a\u5e74\u5ea6\u533a\u95f4\uff0c\u5e76\u4e14\u60f3\u8981\u5728\u4e00\u5e74\u7684\u5f00\u59cb\u6216\u7ed3\u675f\u65f6\u5c06\u5176\u8f6c\u6362\u4e3a\u6708\u5ea6\u533a\u95f4\u3002\\ \u53ef\u4ee5\u5c06Period('2020', 'A-DEC')\u770b\u4f5c\u4e00\u6bb5\u65f6\u95f4\u4e2d\u7684\u4e00\u79cd\u6e38\u6807\uff0c\u5c06\u65f6\u95f4\u6309\u6708\u4efd\u5212\u5206\u3002 p = pd.Period(2020, freq='A-DEC') print(p.asfreq('M', how='start')) 2020-01 print(p.asfreq('M', how='end')) 2020-12 \u5982\u679c\u8d22\u5e74\u7ed3\u675f\u4e0d\u572812\u6708\uff0c\u5219\u6bcf\u6708\u5206\u671f\u4f1a\u81ea\u52a8\u8c03\u6574\u3002\\ \u6309\u5f53\u5e74\u8d22\u5e74\u7ed3\u675f\u8ba1\u7b97\uff0c\u8d77\u59cb\u5e74\u4efd\u5c31\u662f\u4e0a\u4e00\u5e74\u4e86\u3002 p = pd.Period(2020, freq='A-JUN') print(p.asfreq('M', how='start')) 2019-07 print(p.asfreq('M', how='end')) 2020-06 \u5f53\u4ece\u9ad8\u9891\u7387\u5411\u4f4e\u9891\u7387\u8f6c\u6362\u65f6\uff0cpandas\u6839\u636e\u5b50\u533a\u95f4\u7684\"\u6240\u5c5e\"\u6765\u51b3\u5b9a\u7236\u533a\u95f4\u3002\\ \u4f8b\u5982\uff0c\u5728A-JUN\u9891\u7387\u4e2d\uff0cAug-2020\u662f2020\u533a\u95f4\u7684\u4e00\u90e8\u5206\uff1a print(p.asfreq('A-JUN')) 2020\u901a\u8fc7\u539f\u7d22\u5f151~202\uff0c\u628ayear\u548cquarter\u8054\u5408\u8d77\u6765\uff0c\u751f\u6210\u65b0\u7d22\u5f15\uff0c\u5e76\u66ff\u6362\u539f\u7d22\u5f15 \u5b8c\u6574\u7684PeriodIndex\u5bf9\u8c61\u6216\u65f6\u95f4\u5e8f\u5217\u53ef\u4ee5\u6309\u7167\u76f8\u540c\u7684\u8bed\u4e49\u8fdb\u884c\u8f6c\u6362\uff1a rng = pd.period_range('2018', '2021', freq='A-DEC') data = np.random.randn(len(rng)) ts = pd.Series(data, index=rng) print(ts) 2018 0.221634 2019 -0.392724 2020 -0.355022 2021 0.114000 Freq: A-DEC, dtype: float64 \u4e0b\u9762\u5e74\u5ea6\u533a\u95f4\u5c06\u901a\u8fc7asfreq\u88ab\u66ff\u6362\u4e3a\u5bf9\u5e94\u4e8e\u6bcf\u4e2a\u5e74\u5ea6\u533a\u95f4\u5185\u7684\u7b2c\u4e00\u4e2a\u6708\u7684\u6708\u5ea6\u533a\u95f4\u3002 print(ts.asfreq('M', how='start')) 2018-01 0.681874 2019-01 -1.006585 2020-01 -0.619142 2021-01 1.445820 Freq: M, dtype: float64 \u5982\u679c\u6211\u4eec\u60f3\u8981\u6bcf\u5e74\u6700\u540e\u4e00\u4e2a\u5de5\u4f5c\u65e5\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u2019B\u2019\u9891\u7387\u6765\u8868\u793a\u6211\u4eec\u60f3\u8981\u7684\u662f\u533a\u95f4\u7684\u672b\u7aef\u3002 print(ts.asfreq('B', how='end')) 2018-12-31 -1.520316 2019-12-31 -0.425544 2020-12-31 -0.658073 2021-12-31 1.206881 Freq: B, dtype: float64 #### \u5b63\u5ea6\u533a\u95f4\u9891\u7387 \u5b63\u5ea6\u6570\u636e\u662f\u4f1a\u8ba1\u3001\u91d1\u878d\u548c\u5176\u4ed6\u9886\u57df\u7684\u6807\u51c6\u3002\\ \u5f88\u591a\u5b63\u5ea6\u6570\u636e\u662f\u5728\u8d22\u5e74\u7ed3\u5c3e\u62a5\u544a\u7684\uff0c\u901a\u5e38\u662f\u4e00\u5e7412\u4e2a\u6708\u4e2d\u7684\u6700\u540e\u4e00\u4e2a\u65e5\u5386\u65e5\u6216\u5de5\u4f5c\u65e5\u3002\\ pandas\u652f\u6301\u6240\u6709\u7684\u53ef\u80fd\u768412\u4e2a\u5b63\u5ea6\u9891\u7387\u4eceQ-JAN\u5230Q-DEC\uff1a \u4e0b\u4f8b\u4e2d\uff0c\u8d22\u5e74\u7ed3\u675f\u4e8e1\u6708\uff0c2020Q4\u884c\u65f6\u95f4\u4e3a\u4e0a\u4e00\u5e7411\u6708\u81f3\u5f53\u5e741\u6708\u3002\u53ef\u4ee5\u901a\u8fc7\u8f6c\u6362\u4e3a\u6bcf\u65e5\u9891\u7387\uff08asfreq\uff09\u8fdb\u884c\u68c0\u67e5\u3002 p = pd.Period('2020Q4', freq='Q-JAN') print(p) 2020Q4 print(p.asfreq('D', 'start')) 2019-11-01 print(p.asfreq('D', 'end')) 2020-01-31 \u5047\u5982\u8d22\u5e74\u7ed3\u675f\u4e8e2\u6708\uff0c2020Q4\u884c\u65f6\u95f4\u4e3a\u4e0a\u4e00\u5e7412\u6708\u81f3\u5f53\u5e742\u6708\u3002 p = pd.Period('2020Q4', freq='Q-FEB') print(p) 2020Q4 print(p.asfreq('D', 'start')) 2019-11-01 print(p.asfreq('D', 'end')) 2020-01-31 \u5047\u5982\u8d22\u5e74\u7ed3\u675f\u4e8e4\u6708\uff0c2020Q4\u884c\u65f6\u95f4\u4e3a\u4e0a\u4e00\u5e7412\u6708\u81f3\u5f53\u5e742\u6708\u3002 p = pd.Period('2020Q4', freq='Q-APR') print(p) 2020Q4 print(p.asfreq('D', 'start')) 2020-02-01 print(p.asfreq('D', 'end')) 2020-04-30 \u53ef\u4ee5\u5bf9\u533a\u95f4\u6570\u636e\u505a\u7b97\u672f\u64cd\u4f5c\u3002\u4f8b\u5982\uff0c\u8981\u83b7\u53d6\u5728\u5b63\u5ea6\u5012\u6570\u7b2c\u4e8c\u4e2a\u5de5\u4f5c\u65e5\u4e0b\u53484\u70b9\u7684\u65f6\u95f4\u6233\uff0c\u53ef\u4ee5\u8fd9\u4e48\u505a\uff1a \u7591\u95ee\uff1a\u8fd9\u91cc\u7684\u53c2\u6570e\u4ee3\u8868\u4ec0\u4e48 ??? p4pm = (p.asfreq('B', 'e') - 1).asfreq('T', 's') + 16 * 60 print(p4pm) 2020-04-29 16:00 print(p4pm.to_timestamp()) 2020-04-29 16:00:00 \u53ef\u4ee5\u4f7f\u7528peroid_range\u751f\u6210\u5b63\u5ea6\u5e8f\u5217\u3002\u5b83\u7684\u7b97\u672f\u4e5f\u662f\u4e00\u6837\u7684\uff1a rng = pd.period_range('2000Q3', '2001Q4', freq='Q-JAN') ts = pd.Series(np.arange(len(rng)), index=rng) print(ts) 2000Q3 0 2000Q4 1 2001Q1 2 2001Q2 3 2001Q3 4 2001Q4 5 Freq: Q-JAN, dtype: int64 new_rng = (rng.asfreq('B', 'e') - 1).asfreq('T', 's') + 16 * 60 ts.index = new_rng.to_timestamp() print(ts) 1999-10-28 16:00:00 0 2000-01-28 16:00:00 1 2000-04-27 16:00:00 2 2000-07-28 16:00:00 3 2000-10-30 16:00:00 4 2001-01-30 16:00:00 5 dtype: int64 #### \u5c06\u65f6\u95f4\u6233\u8f6c\u6362\u4e3a\u533a\u95f4\uff08\u4ee5\u53ca\u9006\u8f6c\u6362\uff09 \u901a\u8fc7\u65f6\u95f4\u6233\u7d22\u5f15\u7684Series\u548cDataFrame\u53ef\u4ee5\u88abto_period\u65b9\u6cd5\u8f6c\u6362\u4e3a\u533a\u95f4\uff1a rng = pd.date_range('2020-01-01', periods=3, freq='M') ts = pd.Series(np.random.randn(3), index=rng) print(ts) 2020-01-31 -0.567097 2020-02-29 0.63452\u901a\u8fc7\u539f\u7d22\u5f151~202\uff0c\u628ayear\u548cquarter\u8054\u5408\u8d77\u6765\uff0c\u751f\u6210\u65b0\u7d22\u5f15\uff0c\u5e76\u66ff\u6362\u539f\u7d22\u5f152 2020-03-31 0.297777 Freq: M, dtype: float64 pts = ts.to_period() print(pts) 2020-01 -0.567097 2020-02 0.634522 2020-03 0.297777 Freq: M, dtype: float64 \u7531\u4e8e\u533a\u95f4\u662f\u975e\u91cd\u53e0\u65f6\u95f4\u8303\u56f4\uff0c\u4e00\u4e2a\u65f6\u95f4\u6233\u53ea\u80fd\u5c5e\u4e8e\u7ed9\u5b9a\u9891\u7387\u7684\u5355\u4e2a\u533a\u95f4\u3002\\ \u5c3d\u7ba1\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u6839\u636e\u65f6\u95f4\u6233\u63a8\u65ad\u51fa\u65b0PeriodIndex\u7684\u9891\u7387\uff0c\u4f46\u53ef\u4ee5\u6307\u5b9a\u4efb\u4f55\u60f3\u8981\u7684\u9891\u7387\u3002\\ \u5728\u7ed3\u679c\u4e2d\u5305\u542b\u91cd\u590d\u7684\u533a\u95f4\u4e5f\u662f\u6ca1\u6709\u95ee\u9898\u7684\u3002 rng = pd.date_range('2020-01-01', periods=6, freq='D') ts = pd.Series(np.random.randn(6), index=rng) print(ts) 2020-01-01 -0.111287 2020-01-02 1.442234 2020-01-03 -0.767553 2020-01-04 -0.265064 2020-01-05 1.200312 2020-01-06 -1.782557 Freq: D, dtype: float64 ts_m = ts.to_period('M') # \u6307\u5b9aperiod\u7684\u9891\u7387\uff08M\uff09,\u8f93\u51fa\u7ed3\u679c\u5305\u542b\u91cd\u590dperiod print(ts_m) 2020-01 -0.111287 2020-01 1.442234 2020-01 -0.767553 2020-01 -0.265064 2020-01 1.200312 2020-01 -1.782557 Freq: M, dtype: float64 \u4f7f\u7528to_timestamp\u53ef\u4ee5\u5c06\u533a\u95f4\u518d\u8f6c\u6362\u4e3a\u65f6\u95f4\u6233\uff1a print(ts_m.to_timestamp(how='end')) 2020-01-31 23:59:59.999999999 -0.111287 2020-01-31 23:59:59.999999999 1.442234 2020-01-31 23:59:59.999999999 -0.767553 2020-01-31 23:59:59.999999999 -0.265064 2020-01-31 23:59:59.999999999 1.200312 2020-01-31 23:59:59.999999999 -1.782557 dtype: float64 print(ts_m.to_timestamp(how='start')) 2020-01-01 -0.111287 2020-01-01 1.442234 2020-01-01 -0.767553 2020-01-01 -0.265064 2020-01-01 1.200312 2020-01-01 -1.782557 dtype: float64 #### \u4ece\u6570\u7ec4\u751f\u6210PeriodIndex \u56fa\u5b9a\u9891\u7387\u6570\u636e\u96c6\u6709\u65f6\u5b58\u50a8\u5728\u8de8\u8d8a\u591a\u5217\u7684\u65f6\u95f4\u8303\u56f4\u4fe1\u606f\u4e2d\u3002\\ \u4f8b\u5982\uff0c\u5728\u8fd9\u4e2a\u5b8f\u89c2\u7ecf\u6d4e\u6570\u636e\u96c6\u4e2d\uff0c\u5e74\u4efd\u548c\u5b63\u5ea6\u5728\u4e0d\u540c\u5217\u4e2d\uff1a data = pd.read_csv('../examples/macrodata.csv') print(data.head(5)) year quarter realgdp realcons ... unemp pop infl realint 0 1959.0 1.0 2710.349 1707.4 ... 5.8 177.146 0.00 0.00 1 1959.0 2.0 2778.801 1733.7 ... 5.1 177.830 2.34 0.74 2 1959.0 3.0 2775.488 1751.8 ... 5.3 178.657 2.74 1.09 3 1959.0 4.0 2785.204 1753.7 ... 5.6 179.386 0.27 4.06 4 1960.0 1.0 2847.699 1770.5 ... 5.2 180.007 2.31 1.19 print(data.year) 0 1959.0 1 1959.0 2 1959.0 3 1959.0 4 1960.0 ... 198 2008.0 199 2008.0 200 2009.0 201 2009.0 202 2009.0 Name: year, Length: 203, dtype: float64 print(data.quarter) 0 1.0 1 2.0 2 3.0 3 4.0 4 1.0 ... 198 3.0 199 4.0 200 1.0 201 2.0 202 3.0 Name: quarter, Length: 203, dtype: float64 \u901a\u8fc7\u5c06\u8fd9\u4e9b\u6570\u7ec4\u548c\u9891\u7387\u4f20\u9012\u7ed9PeriodIndex\uff0c\u53ef\u4ee5\u8054\u5408\u5f62\u6210DataFrame\u7684\u7d22\u5f15 index = pd.PeriodIndex(year=data.year, quarter=data.quarter, freq='Q-DEC') print(index) PeriodIndex(['1959Q1', '1959Q2', '1959Q3', '1959Q4', '1960Q1', '1960Q2', '1960Q3', '1960Q4', '1961Q1', '1961Q2', ... '2007Q2', '2007Q3', '2007Q4', '2008Q1', '2008Q2', '2008Q3', '2008Q4', '2009Q1', '2009Q2', '2009Q3'], dtype='period[Q-DEC]', length=203) data.index = index # \u901a\u8fc7\u539f\u7d22\u5f151~202\uff0c\u628ayear\u548cquarter\u8054\u5408\u8d77\u6765\uff0c\u751f\u6210\u65b0\u7d22\u5f15\uff0c\u5e76\u66ff\u6362\u539f\u7d22\u5f15 print(data.infl) 1959Q1 0.00 1959Q2 2.34 1959Q3 2.74 1959Q4 0.27 1960Q1 2.31 ... 2008Q3 -3.16 2008Q4 -8.79 2009Q1 0.94 2009Q2 3.37 2009Q3 3.56 Freq: Q-DEC, Name: infl, Length: 203, dtype: float64 ### \u91cd\u65b0\u91c7\u6837\u9891\u7387\u8f6c\u6362 import pandas as pd import numpy as np from pandas.tseries.frequencies import to_offset \u91cd\u65b0\u91c7\u6837\u662f\u6307\u5c06\u65f6\u95f4\u5e8f\u5217\u4ece\u4e00\u4e2a\u9891\u7387\u8f6c\u6362\u4e3a\u53e6\u4e00\u4e2a\u9891\u7387\u7684\u8fc7\u7a0b\u3002\\ \u5c06\u66f4\u9ad8\u9891\u7387\u7684\u6570\u636e\u805a\u5408\u5230\u4f4e\u9891\u7387\u88ab\u79f0\u4e3a\u5411\u4e0b\u91c7\u6837\uff0c\u800c\u4ece\u4f4e\u9891\u7387\u8f6c\u6362\u5230\u9ad8\u9891\u7387\u79f0\u4e3a\u5411\u4e0a\u91c7\u6837\u3002\\ \u5e76\u4e0d\u662f\u6240\u6709\u7684\u91cd\u65b0\u91c7\u6837\u90fd\u5c5e\u4e8e\u4e0a\u9762\u8bf4\u7684\u4e24\u7c7b\uff1b# \u4f8b\u5982\uff0c\u5c06W-WED\uff08weekly on Wednesday\uff0c\u6bcf\u5468\u4e09\uff09\u8f6c\u6362\u5230W-FRI\uff08\u6bcf\u5468\u4e94\uff09\u65e2\u4e0d\u662f\u5411\u4e0a\u91c7\u6837\u4e5f\u4e0d\u662f\u5411\u4e0b\u91c7\u6837\u3002 pandas\u5bf9\u8c61\u90fd\u914d\u6709resample\u65b9\u6cd5\uff0c\u8be5\u65b9\u6cd5\u662f\u6240\u6709\u9891\u7387\u8f6c\u6362\u7684\u5de5\u5177\u51fd\u6570\u3002\\ resample\u62e5\u6709\u7c7b\u4f3c\u4e8egroupby\u7684API\uff1b\\ \u8c03\u7528resample\u5bf9\u6570\u636e\u5206\u7ec4\uff0c\u4e4b\u540e\u518d\u8c03\u7528\u805a\u5408\u51fd\u6570\uff1a #### resample\u65b9\u6cd5\u53c2\u6570 * freq: \u8868\u793a\u91cd\u91c7\u6837\u9891\u7387\uff0c\u4f8b\u5982\u2018M'\u3001\u20185min'\uff0cSecond(15) * how='mean': \u7528\u4e8e\u4ea7\u751f\u805a\u5408\u503c\u7684\u51fd\u6570\u540d\u6216\u6570\u7ec4\u51fd\u6570\uff0c\u4f8b\u5982\u2018mean'\u3001\u2018ohlc'\u3001np.max\u7b49\uff0c\u9ed8\u8ba4\u662f\u2018mean'\uff0c\u5176\u4ed6\u5e38\u7528\u7684\u503c\u7531\uff1a\u2018first'\u3001\u2018last'\u3001\u2018median'\u3001\u2018max'\u3001\u2018min' * axis=0: \u9ed8\u8ba4\u662f\u7eb5\u8f74\uff0c\u6a2a\u8f74\u8bbe\u7f6eaxis=1 * fill_method = None: \u5347\u91c7\u6837\u65f6\u5982\u4f55\u63d2\u503c\uff0c\u6bd4\u5982\u2018ffill'\u3001\u2018bfill'\u7b49 * closed = \u2018right': \u5728\u964d\u91c7\u6837\u65f6\uff0c\u5404\u65f6\u95f4\u6bb5\u7684\u54ea\u4e00\u6bb5\u662f\u95ed\u5408\u7684\uff0c\u2018right'\u6216\u2018left'\uff0c\u9ed8\u8ba4\u2018right' * label= \u2018right': \u5728\u964d\u91c7\u6837\u65f6\uff0c\u5982\u4f55\u8bbe\u7f6e\u805a\u5408\u503c\u7684\u6807\u7b7e\uff0c\u4f8b\u5982\uff0c9\uff1a30-9\uff1a35\u4f1a\u88ab\u6807\u8bb0\u62109\uff1a30\u8fd8\u662f9\uff1a35,\u9ed8\u8ba49\uff1a35 * loffset = None: \u9762\u5143\u6807\u7b7e\u7684\u65f6\u95f4\u6821\u6b63\u503c\uff0c\u6bd4\u5982\u2018-1s'\u6216Second(-1)\u7528\u4e8e\u5c06\u805a\u5408\u6807\u7b7e\u8c03\u65e91\u79d2 * limit=None: \u5728\u5411\u524d\u6216\u5411\u540e\u586b\u5145\u65f6\uff0c\u5141\u8bb8\u586b\u5145\u7684\u6700\u5927\u65f6\u671f\u6570 * kind = None: \u805a\u5408\u5230\u65f6\u671f\uff08\u2018period'\uff09\u6216\u65f6\u95f4\u6233\uff08\u2018timestamp'\uff09\uff0c\u9ed8\u8ba4\u805a\u5408\u5230\u65f6\u95f4\u5e8f\u5217\u7684\u7d22\u5f15\u7c7b\u578b * convention = None: \u5f53\u91cd\u91c7\u6837\u65f6\u671f\u65f6\uff0c\u5c06\u4f4e\u9891\u7387\u8f6c\u6362\u5230\u9ad8\u9891\u7387\u6240\u91c7\u7528\u7684\u7ea6\u5b9a\uff08start\u6216end\uff09\u3002\u9ed8\u8ba4\u2018end' rng = pd.date_range('2020-1-1', periods=100, freq='D') ts = pd.Series(np.random.randn(len(rng)), index=rng) print(ts) 2020-01-01 0.802409 2020-01-02 -1.147130 2020-01-03 -1.076115 2020-01-04 -2.097443 2020-01-05 0.577671 ... 2020-04-05 -0.110747 2020-04-06 0.132867 2020-04-07 -0.294061 2020-04-08 -0.246155 2020-04-09 0.927194 Freq: D, Length: 100, dtype: float64 print(ts.resample('M')) DatetimeIndexResampler [freq= , axis=0, closed=right, label=right, convention=start, origin=start_day] print(ts.resample('M').mean()) # \u628a100\u5929\u7684\u6570\u636e\u6309\u6708groupby\uff0c\u5e76\u8f93\u51fa\u6708\u672b\u6700\u540e\u4e00\u5929\uff0c\u8ba1\u7b97\u5e73\u5747\u503c 2020-01-31 -0.311714 2020-02-29 0.121526 2020-03-31 -0.051131 2020-04-30 -0.273113 Freq: M, dtype: float64 print(ts.resample('M', kind='period').mean()) # # \u628a100\u5929\u7684\u6570\u636e\u6309\u6708groupby\uff0c\u5e76\u8f93\u51fa\u6708\u4efd\uff08\u53c2\u6570period\uff09\uff0c\u8ba1\u7b97\u5e73\u5747\u503c 2020-01 -0.311714 2020-02 0.121526 2020-03 -0.051131 2020-04 -0.273113 Freq: M, dtype: float64 #### \u5411\u4e0b\u91c7\u6837 \u5c06\u6570\u636e\u805a\u5408\u5230\u4e00\u4e2a\u89c4\u5219\u7684\u4f4e\u9891\u7387\u4e0a\u662f\u4e00\u4e2a\u5e38\u89c1\u7684\u65f6\u95f4\u5e8f\u5217\u4efb\u52a1\u3002\\ \u8981\u805a\u5408\u7684\u6570\u636e\u4e0d\u5fc5\u662f\u56fa\u5b9a\u9891\u7387\u7684\u3002\\ \u671f\u671b\u7684\u9891\u7387\u5b9a\u4e49\u4e86\u7528\u4e8e\u5bf9\u65f6\u95f4\u5e8f\u5217\u5207\u7247\u4ee5\u805a\u5408\u7684\u7bb1\u4f53\u8fb9\u754c\u3002\u4f8b\u5982\uff0c\u8981\u5c06\u65f6\u95f4\u8f6c\u6362\u4e3a\u6bcf\u6708\uff0c'M\u2019\u6216\u2019BM'\uff0c\u5219\u9700\u8981\u5c06\u6570\u636e\u5206\u6210\u4e00\u4e2a\u6708\u7684\u65f6\u95f4\u95f4\u9694\u3002\\ \u6bcf\u4e2a\u95f4\u9694\u662f\u534a\u95ed\u5408\u7684\uff0c\u4e00\u4e2a\u6570\u636e\u70b9\u53ea\u80fd\u5c5e\u4e8e\u4e00\u4e2a\u65f6\u95f4\u95f4\u9694\uff0c\u65f6\u95f4\u95f4\u9694\u7684\u5e76\u96c6\u5fc5\u987b\u662f\u6574\u4e2a\u65f6\u95f4\u5e27\u3002\\ \u5728\u4f7f\u7528resample\u8fdb\u884c\u5411\u4e0b\u91c7\u6837\u6570\u636e\u65f6\u6709\u4e9b\u4e8b\u60c5\u9700\u8981\u8003\u8651\uff1a * \u6bcf\u6bb5\u95f4\u9694\u7684\u54ea\u4e00\u8fb9\u662f\u95ed\u5408\u7684\u3002 * \u5982\u4f55\u5728\u95f4\u9694\u7684\u8d77\u59cb\u6216\u7ed3\u675f\u4f4d\u7f6e\u6807\u8bb0\u6bcf\u4e2a\u5df2\u805a\u5408\u7684\u7bb1\u4f53\u3002 rng = pd.date_range('2020-1-1', periods=12, freq='T') ts = pd.Series(np.arange(12), index=rng) print(ts) 2020-01-01 00:00:00 0 2020-01-01 00:01:00 1 2020-01-01 00:02:00 2 2020-01-01 00:03:00 3 2020-01-01 00:04:00 4 2020-01-01 00:05:00 5 2020-01-01 00:06:00 6 2020-01-01 00:07:00 7 2020-01-01 00:08:00 8 2020-01-01 00:09:00 9 2020-01-01 00:10:00 10 2020-01-01 00:11:00 11 Freq: T, dtype: int64 \u6309\u4e94\u5206\u949f\u9891\u7387\u805a\u5408\u5206\u7ec4\uff0c\u8ba1\u7b97\u6bcf\u4e00\u7ec4\u7684\u52a0\u548c\u3002\u9891\u7387\u6309\u4e94\u5206\u949f\u7684\u589e\u91cf\u5b9a\u4e49\u4e86\u7bb1\u4f53\u8fb9\u754c\u3002\\ \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u5de6\u7bb1\u4f53\u8fb9\u754c\u662f\u5305\u542b\u7684\uff0c\u56e0\u6b6400:00\u7684\u503c\u662f\u5305\u542b\u572800:00\u523000:05\u95f4\u9694\u5185\u7684\u3002\\ \u4f20\u9012closed='right\u2019\u5c06\u95f4\u9694\u7684\u95ed\u5408\u7aef\u6539\u4e3a\u4e86\u53f3\u8fb9\uff1a\\ \u5206\u7ec4 * left: [00:00,00:01,00:02,00:03,00:04],[00:05,00:06,00:07,00:08,00:09],[00:10,00:11] * right:[00:00],[00:01,00:02,00:03,00:04,00:05],[00:06,00:07,00:08,00:09,00:10],[00:11] result = ts.resample('5min', closed='right').sum() print(result) 2019-12-31 23:55:00 0 2020-01-01 00:00:00 15 2020-01-01 00:05:00 40 2020-01-01 00:10:00 11 Freq: 5T, dtype: int64 result = ts.resample('5min', closed='left').sum() print(result) 2020-01-01 00:00:00 10 2020-01-01 00:05:00 35 2020-01-01 00:10:00 21 Freq: 5T, dtype: int64 \u6700\u540e\uff0c\u5c06\u7ed3\u679c\u7d22\u5f15\u79fb\u52a8\u4e00\u5b9a\u7684\u6570\u91cf\uff0c\u4f8b\u5982\u4ece\u53f3\u8fb9\u7f18\u51cf\u53bb\u4e00\u79d2\uff0c\u4ee5\u4f7f\u5176\u66f4\u6e05\u695a\u5730\u8868\u660e\u65f6\u95f4\u6233\u6240\u6307\u7684\u95f4\u9694\u3002\\ \u8981\u5b9e\u73b0\u8fd9\u4e2a\u529f\u80fd\uff0c\u5411loffset\u4f20\u9012\u5b57\u7b26\u4e32\u6216\u65e5\u671f\u504f\u7f6e\uff1a result = ts.resample('5min', closed='right', label='right', loffset='-1s').sum() print(result) 2019-12-31 23:59:59 0 2020-01-01 00:04:59 15 2020-01-01 00:09:59 40 2020-01-01 00:14:59 11 Freq: 5T, dtype: int64 FutureWarning: 'loffset' in .resample() and in Grouper() is deprecated. >>> df.resample(freq=\"3s\", loffset=\"8H\") becomes: >>> from pandas.tseries.frequencies import to_offset >>> df = df.resample(freq=\"3s\").mean() >>> df.index = df.index.to_timestamp() + to_offset(\"8H\") ##### \u5f00\u7aef-\u5cf0\u503c-\u8c37\u503c-\u7ed3\u675f\uff08OHLC\uff09\u91cd\u65b0\u91c7\u6837 \u5728\u91d1\u878d\u4e2d\uff0c\u4e3a\u6bcf\u4e2a\u6570\u636e\u6876\u8ba1\u7b97\u56db\u4e2a\u503c\u662f\u4e00\u79cd\u6d41\u884c\u7684\u65f6\u95f4\u5e8f\u5217\u805a\u5408\u65b9\u6cd5\uff1a\u7b2c\u4e00\u4e2a\u503c\uff08\u5f00\u7aef\uff09\u3001\u6700\u540e\u4e00\u4e2a\u503c\uff08\u7ed3\u675f\uff09\u3001\u6700\u5927\u503c\uff08\u5cf0\u503c\uff09\u548c\u6700\u5c0f\u503c\uff08\u8c37\u503c\uff09\u3002 \u901a\u8fc7\u4f7f\u7528ohlc\u805a\u5408\u51fd\u6570\u53d6\u5f97\u5305\u542b\u56db\u79cd\u805a\u5408\u503c\u5217\u7684DataFrame\uff0c\u8fd9\u4e9b\u503c\u5728\u6570\u636e\u7684\u5355\u6b21\u626b\u63cf\u4e2d\u88ab\u9ad8\u6548\u8ba1\u7b97\uff1a result = ts.resample('5min').ohlc() print(result) open high low close 2020-01-01 00:00:00 0 4 0 4 2020-01-01 00:05:00 5 9 5 9 2020-01-01 00:10:00 10 11 10 11 #### \u5411\u4e0a\u91c7\u6837\u4e0e\u63d2\u503c \u5f53\u4ece\u4f4e\u9891\u7387\u8f6c\u6362\u4e3a\u9ad8\u9891\u7387\u65f6\uff0c\u5e76\u4e0d\u9700\u8981\u4efb\u4f55\u805a\u5408\u3002 df = pd.DataFrame( np.random.randn(2, 4), index=pd.date_range('2020/1/1', periods=2, freq='W-WED'), columns=['Colorado', 'Texas', 'New York', 'Ohio'] ) print(df) Colorado Texas New York Ohio 2020-01-01 -0.228758 -0.758718 -0.025410 -1.001819 2020-01-08 -0.704541 -0.261414 -0.863335 0.267101 df_daily = df.resample('W-WED').sum() print(df_daily) Colorado Texas New York Ohio 2020-01-01 -0.228758 -0.758718 -0.025410 -1.001819 2020-01-08 -0.704541 -0.261414 -0.863335 0.267101 df_daily = df.resample('D').sum() print(df_daily) Colorado Texas New York Ohio 2020-01-01 -0.228758 -0.758718 -0.025410 -1.001819 2020-01-02 0.000000 0.000000 0.000000 0.000000 2020-01-03 0.000000 0.000000 0.000000 0.000000 2020-01-04 0.000000 0.000000 0.000000 0.000000 2020-01-05 0.000000 0.000000 0.000000 0.000000 2020-01-06 0.000000 0.000000 0.000000 0.000000 2020-01-07 0.000000 0.000000 0.000000 0.000000 2020-01-08 -0.704541 -0.261414 -0.863335 0.267101 \u5f53\u5bf9\u8fd9\u4e9b\u6570\u636e\u4f7f\u7528\u805a\u5408\u51fd\u6570\u65f6\uff0c\u6bcf\u4e00\u7ec4\u53ea\u6709\u4e00\u4e2a\u503c\uff0c\u5e76\u4e14\u4f1a\u5728\u95f4\u9699\u4e2d\u4ea7\u751f\u7f3a\u5931\u503c\u3002\\ \u4f7f\u7528asfreq\u65b9\u6cd5\u5728\u4e0d\u805a\u5408\u7684\u60c5\u51b5\u4e0b\u8f6c\u6362\u5230\u9ad8\u9891\u7387\uff1a df_daily = df.resample('D').asfreq() print(df_daily) Colorado Texas New York Ohio 2020-01-01 -0.228758 -0.758718 -0.025410 -1.001819 2020-01-02 NaN NaN NaN NaN 2020-01-03 NaN NaN NaN NaN 2020-01-04 NaN NaN NaN NaN 2020-01-05 NaN NaN NaN NaN 2020-01-06 NaN NaN NaN NaN 2020-01-07 NaN NaN NaN NaN 2020-01-08 -0.704541 -0.261414 -0.863335 0.267101 \u5728\u975e\u661f\u671f\u4e09\u7684\u65e5\u671f\u4e0a\u5411\u524d\u586b\u5145\u6bcf\u5468\u6570\u503c\u3002fillna\u548creindex\u65b9\u6cd5\u4e2d\u53ef\u7528\u7684\u586b\u5145\u6216\u63d2\u503c\u65b9\u6cd5\u53ef\u7528\u4e8e\u91cd\u91c7\u6837\uff1a df_daily = df.resample('D').ffill() print(df_daily) Colorado Texas New York Ohio 2020-01-01 -0.228758 -0.758718 -0.025410 -1.001819 2020-01-02 -0.228758 -0.758718 -0.025410 -1.001819 2020-01-03 -0.228758 -0.758718 -0.025410 -1.001819 2020-01-04 -0.228758 -0.758718 -0.025410 -1.001819 2020-01-05 -0.228758 -0.758718 -0.025410 -1.001819 2020-01-06 -0.228758 -0.758718 -0.025410 -1.001819 2020-01-07 -0.228758 -0.758718 -0.025410 -1.001819 2020-01-08 -0.704541 -0.261414 -0.863335 0.267101 \u53ef\u4ee5\u540c\u6837\u9009\u62e9\u4ec5\u5411\u524d\u586b\u5145\u4e00\u5b9a\u6570\u91cf\u7684\u533a\u95f4\uff0c\u4ee5\u9650\u5236\u7ee7\u7eed\u4f7f\u7528\u89c2\u6d4b\u503c\u7684\u65f6\u8ddd\uff1a df_daily = df.resample('D').ffill(limit=2) print(df_daily) Colorado Texas New York Ohio 2020-01-01 -0.228758 -0.758718 -0.025410 -1.001819 2020-01-02 -0.228758 -0.758718 -0.025410 -1.001819 2020-01-03 -0.228758 -0.758718 -0.025410 -1.001819 2020-01-04 NaN NaN NaN NaN 2020-01-05 NaN NaN NaN NaN 2020-01-06 NaN NaN NaN NaN 2020-01-07 NaN NaN NaN NaN 2020-01-08 -0.704541 -0.261414 -0.863335 0.267101 \u6ce8\u610f\uff0c\u65b0\u7684\u65e5\u671f\u7d22\u5f15\u4e0d\u9700\u8981\u4e0e\u65e7\u7684\u7d22\u5f15\u91cd\u53e0\uff0c\u548c\u539f\u6765df\u7684\u503c\u4e00\u6837\uff0c\u53ea\u662f\u65e5\u671f\u7d22\u5f15\u53d8\u4e86 df_new = df.resample('W-THU').ffill() print(df_new) Colorado Texas New York Ohio 2020-01-02 -0.228758 -0.758718 -0.025410 -1.001819 2020-01-09 -0.704541 -0.261414 -0.863335 0.267101 #### \u4f7f\u7528\u533a\u95f4\u8fdb\u884c\u91cd\u65b0\u91c7\u6837 \u5bf9\u4ee5\u533a\u95f4\u4e3a\u7d22\u5f15\u7684\u6570\u636e\u8fdb\u884c\u91c7\u6837\u4e0e\u65f6\u95f4\u6233\u7684\u60c5\u51b5\u7c7b\u4f3c\uff1a df = pd.DataFrame( np.random.randn(24, 4), index=pd.period_range('2020-1', periods=24, freq='M'), columns=['Colorado', 'Texas', 'New York', 'Ohio'] ) print(df) 2020-01 0.721395 -1.492674 0.707410 1.641890 2020-02 -0.894880 0.032823 -0.676158 0.029203 2020-03 2.147365 -0.176796 0.562695 -0.747656 2020-04 1.496037 -0.797119 -0.495601 0.774147 2020-05 -0.309839 0.502563 0.237244 0.910624 2020-06 1.231869 -0.105227 1.315759 0.217701 2020-07 1.447419 0.263876 -0.342045 -0.768907 2020-08 -2.567162 -1.008827 0.391085 1.259560 2020-09 -0.772501 1.183532 0.450374 0.450714 2020-10 0.228974 0.461224 1.393178 0.175243 2020-11 -0.725193 -1.544131 1.372029 -0.659224 2020-12 0.718195 0.862024 -0.166460 -0.940191 2021-01 -0.617054 -0.887312 0.338451 -1.392838 2021-02 -0.081140 0.634730 -0.868051 -1.277167 2021-03 -0.999642 -1.959715 -0.930662 0.748687 2021-04 1.851453 1.561669 -0.688822 -0.371255 2021-05 -0.540777 -0.890403 -1.204188 0.243480 2021-06 1.318905 1.247457 0.518969 0.799793 2021-07 0.223238 0.747177 -0.410889 0.904593 2021-08 -0.652551 -0.254351 -0.464604 -0.676923 2021-09 0.562312 0.182099 0.018617 0.573331 2021-10 0.429490 -0.045959 -0.356292 -0.295776 2021-11 2.552155 0.801299 1.378421 1.232792 2021-12 1.102288 0.850280 -0.767015 -0.519840 df_annual = df.resample('A-DEC').mean() print(df_annual) Colorado Texas New York Ohio 2020 0.226807 -0.151561 0.395793 0.195259 2021 0.429056 0.165581 -0.286339 -0.002594 \u5411\u4e0a\u91c7\u6837\u66f4\u4e3a\u7ec6\u81f4\uff0c\u56e0\u4e3a\u5fc5\u987b\u5728\u91cd\u65b0\u91c7\u6837\u524d\u51b3\u5b9a\u65b0\u9891\u7387\u4e2d\u5728\u65f6\u95f4\u6bb5\u7684\u54ea\u4e00\u7aef\u653e\u7f6e\u6570\u503c\uff0c\u5c31\u50cfasfreq\u65b9\u6cd5\u4e00\u6837\u3002\\ convention\u53c2\u6570\u9ed8\u8ba4\u503c\u662f\u2019start'\uff0c\u4f46\u4e5f\u53ef\u4ee5\u662f'end'\uff1a result = df_annual.resample('Q-DEC').ffill() print(result) Colorado Texas New York Ohio 2020Q1 0.226807 -0.151561 0.395793 0.195259 2020Q2 0.226807 -0.151561 0.395793 0.195259 2020Q3 0.226807 -0.151561 0.395793 0.195259 2020Q4 0.226807 -0.151561 0.395793 0.195259 2021Q1 0.429056 0.165581 -0.286339 -0.002594 2021Q2 0.429056 0.165581 -0.286339 -0.002594 2021Q3 0.429056 0.165581 -0.286339 -0.002594 2021Q4 0.429056 0.165581 -0.286339 -0.002594 result = df_annual.resample('Q-DEC', convention='end').ffill() print(result) Colorado Texas New York Ohio 2020Q4 0.226807 -0.151561 0.395793 0.195259 2021Q1 0.226807 -0.151561 0.395793 0.195259 2021Q2 0.226807 -0.151561 0.395793 0.195259 2021Q3 0.226807 -0.151561 0.395793 0.195259 2021Q4 0.429056 0.165581 -0.286339 -0.002594 \u7531\u4e8e\u533a\u95f4\u6d89\u53ca\u65f6\u95f4\u8303\u56f4\uff0c\u5411\u4e0a\u91c7\u6837\u548c\u5411\u4e0b\u91c7\u6837\u5c31\u66f4\u4e3a\u4e25\u683c\uff1a * \u5728\u5411\u4e0b\u91c7\u6837\u4e2d\uff0c\u76ee\u6807\u9891\u7387\u5fc5\u987b\u662f\u539f\u9891\u7387\u7684\u5b50\u533a\u95f4\u3002 * \u5728\u5411\u4e0a\u91c7\u6837\u4e2d\uff0c\u76ee\u6807\u9891\u7387\u5fc5\u987b\u662f\u539f\u9891\u7387\u7684\u7236\u533a\u95f4\u3002 \u5982\u679c\u4e0d\u6ee1\u8db3\u8fd9\u4e9b\u89c4\u5219\uff0c\u5c06\u4f1a\u5f15\u8d77\u5f02\u5e38\u3002\u8fd9\u4e3b\u8981\u4f1a\u5f71\u54cd\u6bcf\u5b63\u5ea6\u3001\u6bcf\u5e74\u548c\u6bcf\u5468\u7684\u9891\u7387\u3002 \u4f8b\u5982\uff0c\u6839\u636eQ-MAR\u5b9a\u4e49\u7684\u65f6\u95f4\u8303\u56f4\u5c06\u53ea\u548cA-MAR\u3001A-JUN\u3001A-SEP\u548cA-DEC\u4fdd\u6301\u4e00\u81f4\uff1a result = df_annual.resample('Q-MAR').ffill() print(result) Colorado Texas New York Ohio 2020Q4 0.226807 -0.151561 0.395793 0.195259 2021Q1 0.226807 -0.151561 0.395793 0.195259 2021Q2 0.226807 -0.151561 0.395793 0.195259 2021Q3 0.226807 -0.151561 0.395793 0.195259 2021Q4 0.429056 0.165581 -0.286339 -0.002594 2022Q1 0.429056 0.165581 -0.286339 -0.002594 2022Q2 0.429056 0.165581 -0.286339 -0.002594 2022Q3 0.429056 0.165581 -0.286339 -0.002594 ### \u79fb\u52a8\u7a97\u53e3\u51fd\u6570 \u7edf\u8ba1\u90a3\u4e9b\u901a\u8fc7\u79fb\u52a8\u7a97\u53e3\u6216\u6307\u6570\u8870\u51cf\u800c\u8fd0\u884c\u7684\u51fd\u6570\uff0c\u662f\u7528\u4e8e\u65f6\u95f4\u5e8f\u5217\u64cd\u4f5c\u7684\u6570\u7ec4\u53d8\u6362\u7684\u4e00\u4e2a\u91cd\u8981\u7c7b\u522b\u3002\\ \u8fd9\u5bf9\u5e73\u6ed1\u566a\u58f0\u6216\u7c97\u7cd9\u7684\u6570\u636e\u975e\u5e38\u6709\u7528\u3002\u79f0\u8fd9\u4e9b\u51fd\u6570\u4e3a\u79fb\u52a8\u7a97\u53e3\u51fd\u6570\uff0c\u5c3d\u7ba1\u5b83\u4e5f\u5305\u542b\u4e86\u4e00\u4e9b\u6ca1\u6709\u56fa\u5b9a\u957f\u5ea6\u7a97\u53e3\u7684\u51fd\u6570\uff0c\u6bd4\u5982\u6307\u6570\u52a0\u6743\u79fb\u52a8\u5e73\u5747\u3002\\ \u4e0e\u5176\u4ed6\u7684\u7edf\u8ba1\u51fd\u6570\u7c7b\u4f3c\uff0c\u8fd9\u4e9b\u51fd\u6570\u4f1a\u81ea\u52a8\u6392\u9664\u7f3a\u5931\u6570\u636e\u3002 import matplotlib.pyplot as plt import pandas as pd from scipy.stats import percentileofscore import numpy as np from pandas.tseries.offsets import Hour, Minute, Day, MonthEnd import pytz \u5728\u6df1\u5165\u4e86\u89e3\u4e4b\u524d\uff0c\u6211\u4eec\u53ef\u4ee5\u5148\u8f7d\u5165\u4e00\u4e9b\u65f6\u95f4\u5e8f\u5217\u6570\u636e\u5e76\u6309\u7167\u5de5\u4f5c\u65e5\u9891\u7387\u8fdb\u884c\u91cd\u65b0\u91c7\u6837\uff1a close_px_all = pd.read_csv( '../examples/stock_px_2.csv', parse_dates = True, index_col=0 ) print(close_px_all.head(5)) AAPL MSFT XOM SPX 2003-01-02 7.40 21.11 29.22 909.03 2003-01-03 7.45 21.14 29.24 908.59 2003-01-06 7.45 21.52 29.96 929.01 2003-01-07 7.43 21.93 28.95 922.93 2003-01-08 7.28 21.31 28.83 909.93 close_px = close_px_all[ ['AAPL', 'MSFT', 'XOM'] ] close_px = close_px.resample('B').ffill() print(close_px) AAPL MSFT XOM 2003-01-02 7.40 21.11 29.22 2003-01-03 7.45 21.14 29.24 ... ... ... ... 2011-10-13 408.43 27.18 76.37 2011-10-14 422.00 27.27 78.11 [2292 rows x 3 columns] rolling\u7b97\u5b50\\ \u5b83\u7684\u884c\u4e3a\u4e0eresample\u548cgroupby\u7c7b\u4f3c\u3002\\ rolling\u53ef\u4ee5\u5728Series\u6216DataFrame\u4e0a\u901a\u8fc7\u4e00\u4e2awindow\uff08\u4ee5\u4e00\u4e2a\u533a\u95f4\u7684\u6570\u5b57\u6765\u8868\u793a\uff09\u8fdb\u884c\u8c03\u7528\u3002 close_px.AAPL.plot() \u8868\u8fbe\u5f0frolling(250)\u4e0egroupby\u7684\u884c\u4e3a\u7c7b\u4f3c\uff0c\u4f46\u662f\u5b83\u521b\u5efa\u7684\u5bf9\u8c61\u662f\u6839\u636e250\u65e5\u6ed1\u52a8\u7a97\u53e3\u5206\u7ec4\u7684\u800c\u4e0d\u662f\u76f4\u63a5\u5206\u7ec4\u3002\\ \u56e0\u6b64\u8fd9\u91cc\u6211\u4eec\u83b7\u5f97\u4e86\u82f9\u679c\u516c\u53f8\u80a1\u7968\u4ef7\u683c\u7684250\u65e5\u79fb\u52a8\u7a97\u53e3\u5e73\u5747\u503c\u3002 close_px.AAPL.rolling(250).mean().plot() plt.show() \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u6eda\u52a8\u51fd\u6570\u9700\u8981\u7a97\u53e3\u4e2d\u6240\u6709\u7684\u503c\u5fc5\u987b\u662f\u975eNA\u503c\u3002\\ \u7531\u4e8e\u5b58\u5728\u7f3a\u5931\u503c\u8fd9\u79cd\u884c\u4e3a\u4f1a\u53d1\u751f\u6539\u53d8\uff0c\u5c24\u5176\u662f\u5728\u65f6\u95f4\u5e8f\u5217\u7684\u8d77\u59cb\u4f4d\u7f6e\u4f60\u62e5\u6709\u7684\u6570\u636e\u662f\u5c11\u4e8e\u7a97\u53e3\u533a\u95f4\u7684 apple_std250 = close_px.AAPL.rolling(250, min_periods=10).std() # \u82f9\u679c\u516c\u53f8250\u65e5\u6bcf\u65e5\u8fd4\u56de\u6807\u51c6\u5dee print(apple_std250[5:12]) 2003-01-09 NaN 2003-01-10 NaN 2003-01-13 NaN 2003-01-14 NaN 2003-01-15 0.077496 2003-01-16 0.074760 2003-01-17 0.112368 Freq: B, Name: AAPL, dtype: float64 apple_std250.plot() plt.show() expanding_mean = apple_std250.expanding().mean() print(expanding_mean[5:12]) 2003-01-09 NaN 2003-01-10 NaN 2003-01-13 NaN 2003-01-14 NaN 2003-01-15 0.077496 2003-01-16 0.076128 2003-01-17 0.088208 Freq: B, Name: AAPL, dtype: float64 expanding_mean.plot() plt.show() \u5728DataFrame\u4e0a\u8c03\u7528\u4e00\u4e2a\u79fb\u52a8\u7a97\u53e3\u51fd\u6570\u4f1a\u5c06\u53d8\u6362\u5e94\u7528\u5230\u6bcf\u4e00\u5217\u4e0a: close_px.rolling(60).mean().plot(logy=True) # \u80a1\u7968\u4ef7\u683c60\u65e5MA\uff08Y\u8f74\u53d6\u5bf9\u6570\uff09 plt.show() rolling\u51fd\u6570\u4e5f\u63a5\u6536\u8868\u793a\u56fa\u5b9a\u5927\u5c0f\u7684\u65f6\u95f4\u504f\u7f6e\u5b57\u7b26\u4e32\uff0c\u800c\u4e0d\u53ea\u662f\u4e00\u4e2a\u533a\u95f4\u7684\u96c6\u5408\u6570\u5b57\u3002\\ \u5bf9\u4e0d\u89c4\u5219\u65f6\u95f4\u5e8f\u5217\u4f7f\u7528\u6ce8\u91ca\u975e\u5e38\u6709\u7528\u3002\\ \u8fd9\u4e9b\u5b57\u7b26\u4e32\u53ef\u4ee5\u4f20\u9012\u7ed9resample\u3002\u4f8b\u5982\uff0c\u6211\u4eec\u53ef\u4ee5\u50cf\u8fd9\u6837\u8ba1\u7b9720\u5929\u7684\u6eda\u52a8\u5e73\u5747\u503c\uff1a result = close_px.rolling('20D').mean() print(result) AAPL MSFT XOM 2003-01-02 7.400000 21.110000 29.220000 ... ... ... ... 2011-10-14 391.038000 26.048667 74.185333 [2292 rows x 3 columns] result.plot() plt.show() #### \u6307\u6570\u52a0\u6743\u51fd\u6570 \u6307\u5b9a\u4e00\u4e2a\u5e38\u6570\u8870\u51cf\u56e0\u5b50\u4ee5\u5411\u66f4\u591a\u8fd1\u671f\u89c2\u6d4b\u503c\u63d0\u4f9b\u66f4\u591a\u6743\u91cd\uff0c\u53ef\u4ee5\u66ff\u4ee3\u4f7f\u7528\u5177\u6709\u76f8\u7b49\u52a0\u6743\u89c2\u5bdf\u503c\u7684\u9759\u6001\u7a97\u53e3\u5c3a\u5bf8\u7684\u65b9\u6cd5\u3002\\ \u6709\u591a\u79cd\u65b9\u5f0f\u53ef\u4ee5\u6307\u5b9a\u8870\u51cf\u56e0\u5b50\u3002\u5176\u4e2d\u4e00\u79cd\u6d41\u884c\u7684\u65b9\u5f0f\u662f\u4f7f\u7528\u4e00\u4e2aspan\uff08\u8de8\u5ea6\uff09\uff0c\u8fd9\u4f7f\u5f97\u7ed3\u679c\u4e0e\u7a97\u53e3\u5927\u5c0f\u7b49\u4e8e\u8de8\u5ea6\u7684\u7b80\u5355\u79fb\u52a8\u7a97\u53e3\u51fd\u6570\u3002\\ \u7531\u4e8e\u6307\u6570\u52a0\u6743\u7edf\u8ba1\u503c\u7ed9\u66f4\u8fd1\u671f\u7684\u89c2\u6d4b\u503c\u4ee5\u66f4\u591a\u7684\u6743\u91cd\uff0c\u4e0e\u7b49\u6743\u91cd\u7684\u7248\u672c\u76f8\u6bd4\uff0c\u5b83\u5bf9\u53d8\u5316\u201c\u9002\u5e94\u201d\u5f97\u66f4\u5feb\u3002\\ pandas\u62e5\u6709ewm\u7b97\u5b50\uff0c\u540crolling\u3001expanding\u7b97\u5b50\u4e00\u8d77\u4f7f\u7528\u3002 \u4ee5\u4e0b\u662f\u5c06\u82f9\u679c\u516c\u53f8\u80a1\u7968\u4ef7\u683c\u768460\u65e5\u5747\u7ebf\u4e0espan=60\u7684EW\u79fb\u52a8\u5e73\u5747\u7ebf\u8fdb\u884c\u6bd4\u8f83\u7684\u4f8b\u5b50\uff1a aapl_ex = close_px.AAPL['2006':'2007'] ma60 = aapl_ex.rolling(30, min_periods=20).mean() ewma60 = aapl_ex.ewm(span=30).mean() ma60.plot(style='k--', label='Simple MA') ewma60.plot(style='k-', label='EWMA') plt.legend() plt.show() #### \u4e8c\u5143\u79fb\u52a8\u7a97\u53e3\u51fd\u6570 \u4e00\u4e9b\u7edf\u8ba1\u7b97\u5b50\uff0c\u4f8b\u5982\u76f8\u5173\u5ea6\u548c\u534f\u65b9\u5dee\uff0c\u9700\u8981\u64cd\u4f5c\u4e24\u4e2a\u65f6\u95f4\u5e8f\u5217\u3002\\ \u4f8b\u5982\uff0c\u91d1\u878d\u5206\u6790\u5e08\u7ecf\u5e38\u5bf9\u80a1\u7968\u4e0e\u57fa\u51c6\u6307\u6570\uff08\u5982\u6807\u666e500\uff09\u7684\u5173\u8054\u6027\u611f\u5174\u8da3\u3002\\ \u6211\u4eec\u9996\u5148\u8ba1\u7b97\u6240\u6709\u6211\u4eec\u611f\u5174\u8da3\u7684\u65f6\u95f4\u5e8f\u5217\u7684\u767e\u5206\u6bd4\u53d8\u5316\uff1a spx_px = close_px_all['SPX'] spx_rets = spx_px.pct_change() returns = close_px.pct_change() \u5728\u8c03\u7528rolling\u540e\uff0ccorr\u805a\u5408\u51fd\u6570\u53ef\u4ee5\u6839\u636espx_rets\u8ba1\u7b97\u6eda\u52a8\u76f8\u5173\u6027\uff1a corr = returns.AAPL.rolling(125, min_periods=100).corr(spx_rets) # \u82f9\u679c\u516c\u53f8\u4e0e\u6807\u666e500\u7684\u516d\u4e2a\u6708\u7684\u6536\u76ca\u76f8\u5173\u6027 corr.plot() plt.show() corr = returns.rolling(125, min_periods=100).corr(spx_rets) # \u591a\u53ea\u80a1\u7968\u4e0e\u6807\u666e500\u7684\u516d\u4e2a\u6708\u6536\u76ca\u76f8\u5173\u6027 corr.plot() plt.show() #### \u7528\u6237\u81ea\u5b9a\u4e49\u7684\u79fb\u52a8\u7a97\u53e3\u51fd\u6570 \u5728rolling\u53ca\u5176\u76f8\u5173\u65b9\u6cd5\u4e0a\u4f7f\u7528apply\u65b9\u6cd5\u63d0\u4f9b\u4e86\u4e00\u79cd\u5728\u79fb\u52a8\u7a97\u53e3\u4e2d\u5e94\u7528\u4f60\u81ea\u5df1\u8bbe\u8ba1\u7684\u6570\u7ec4\u51fd\u6570\u7684\u65b9\u6cd5\u3002\\ \u552f\u4e00\u7684\u8981\u6c42\u662f\u8be5\u51fd\u6570\u4ece\u6bcf\u4e2a\u6570\u7ec4\u4e2d\u4ea7\u751f\u4e00\u4e2a\u5355\u503c\uff08\u7f29\u805a\uff09\u3002\\ \u4f8b\u5982\uff0c\u5c3d\u7ba1\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528rolling(...).quantile(q)\u8ba1\u7b97\u6837\u672c\u7684\u5206\u4f4d\u6570\uff0c\u4f46\u6211\u4eec\u53ef\u80fd\u4f1a\u5bf9\u6837\u672c\u4e2d\u7279\u5b9a\u503c\u7684\u767e\u5206\u4f4d\u6570\u611f\u5174\u8da3\u3002\\ scipy.stats.percentileofscore \u51fd\u6570\u5c31\u662f\u5b9e\u73b0\u8fd9\u4e2a\u529f\u80fd\u7684\uff1a score_at_2percent = lambda x: percentileofscore(x, 0.02) result = returns.AAPL.rolling(250).apply(score_at_2percent) # \u4e00\u5e74\u7a97\u53e3\u4e0b\u82f9\u679c\u516c\u53f8\u80a1\u4ef72%\u6536\u76ca\u7684\u767e\u5206\u4f4d\u7b49\u7ea7 result.plot() plt.show() result = returns.rolling(250).apply(score_at_2percent) # \u4e00\u5e74\u7a97\u53e3\u4e0b\u6240\u6709\u516c\u53f8\u80a1\u4ef72%\u6536\u76ca\u7684\u767e\u5206\u4f4d\u7b49\u7ea7 result.plot() plt.show() ```","title":"Ch08"},{"location":"python/DataAnalysis/ch08/#_1","text":"\u65f6\u95f4\u5e8f\u5217\u6570\u636e\u5728\u5f88\u591a\u9886\u57df\u90fd\u662f\u91cd\u8981\u7684\u7ed3\u6784\u5316\u6570\u636e\u5f62\u5f0f\u3002\u5728\u591a\u4e2a\u65f6\u95f4\u70b9\u89c2\u6d4b\u6216\u6d4b\u91cf\u7684\u6570\u636e\u5f62\u6210\u4e86\u65f6\u95f4\u5e8f\u5217\u3002\\ \u8bb8\u591a\u65f6\u95f4\u5e8f\u5217\u662f\u56fa\u5b9a\u9891\u7387\u7684\uff0c\u4e5f\u5c31\u662f\u8bf4\u6570\u636e\u662f\u6839\u636e\u76f8\u540c\u7684\u89c4\u5219\u5b9a\u671f\u51fa\u73b0\u7684\uff0c\u4f8b\u5982\u6bcf15\u79d2\u3001\u6bcf5\u5206\u949f\u6216\u6bcf\u67081\u6b21\u3002\\ \u65f6\u95f4\u5e8f\u5217\u4e5f\u53ef\u4ee5\u662f\u4e0d\u89c4\u5219\u7684\uff0c\u6ca1\u6709\u56fa\u5b9a\u7684\u65f6\u95f4\u5355\u4f4d\u6216\u5355\u4f4d\u95f4\u7684\u504f\u79fb\u91cf\u3002\\ \u5982\u4f55\u6807\u8bb0\u548c\u5f15\u7528\u65f6\u95f4\u5e8f\u5217\u6570\u636e\u53d6\u51b3\u4e8e\u5e94\u7528\u7a0b\u5e8f\uff0c\u65f6\u95f4\u5e8f\u5217\u5305\u62ec\uff1a * \u65f6\u95f4\u6233\uff0c\u5177\u4f53\u7684\u65f6\u523b\u3002 * \u56fa\u5b9a\u7684\u65f6\u95f4\u533a\u95f4\uff0c\u4f8b\u59822007\u76841\u6708\u6216\u6574\u4e2a2010\u5e74\u3002 * \u65f6\u95f4\u95f4\u9694\uff0c\u7531\u5f00\u59cb\u548c\u7ed3\u675f\u65f6\u95f4\u6233\u8868\u793a\u3002\u65f6\u95f4\u533a\u95f4\u53ef\u4ee5\u88ab\u8ba4\u4e3a\u662f\u95f4\u9694\u7684\u7279\u6b8a\u60c5\u51b5\u3002 * \u5b9e\u9a8c\u65f6\u95f4\u6216\u6d88\u8017\u65f6\u95f4\u3002\u6bcf\u4e2a\u65f6\u95f4\u6233\u662f\u76f8\u5bf9\u4e8e\u7279\u5b9a\u5f00\u59cb\u65f6\u95f4\u7684\u65f6\u95f4\u7684\u91cf\u5ea6\uff08\u4f8b\u5982\uff0c\u81ea\u4ece\u88ab\u653e\u7f6e\u5728\u70e4\u7bb1\u4e2d\u6bcf\u79d2\u70d8\u70e4\u7684\u997c\u5e72\u7684\u76f4\u5f84\uff09\u3002 \u76ee\u524d\u4e3b\u8981\u5173\u6ce8\u524d\u4e09\u7c7b\u4e2d\u7684\u65f6\u95f4\u5e8f\u5217\u3002 from datetime import datetime, timedelta import datetime as dt from dateutil.parser import parse import pandas as pd","title":"\u65e5\u671f\u548c\u65f6\u95f4\u6570\u636e\u7684\u7c7b\u578b\u53ca\u5de5\u5177"},{"location":"python/DataAnalysis/ch08/#datetime","text":"datetime\u683c\u5f0f\u7b26 * %a \u661f\u671f\u7684\u82f1\u6587\u5355\u8bcd\u7684\u7f29\u5199\uff1a\u5982\u661f\u671f\u4e00\uff0c \u5219\u8fd4\u56de Mon * %A \u661f\u671f\u7684\u82f1\u6587\u5355\u8bcd\u7684\u5168\u62fc\uff1a\u5982\u661f\u671f\u4e00\uff0c\u8fd4\u56de Monday * %b \u6708\u4efd\u7684\u82f1\u6587\u5355\u8bcd\u7684\u7f29\u5199\uff1a\u5982\u4e00\u6708\uff0c \u5219\u8fd4\u56de Jan * %B \u6708\u4efd\u7684\u5f15\u6587\u5355\u8bcd\u7684\u7f29\u5199\uff1a\u5982\u4e00\u6708\uff0c \u5219\u8fd4\u56de January * %c \u8fd4\u56dedatetime\u7684\u5b57\u7b26\u4e32\u8868\u793a\uff0c\u598203/08/15 23:01:26 * %d \u8fd4\u56de\u7684\u662f\u5f53\u524d\u65f6\u95f4\u662f\u5f53\u524d\u6708\u7684\u7b2c\u51e0\u5929 * %f \u5fae\u79d2\u7684\u8868\u793a\uff1a \u8303\u56f4: [0,999999] * %H \u4ee524\u5c0f\u65f6\u5236\u8868\u793a\u5f53\u524d\u5c0f\u65f6 * %I \u4ee512\u5c0f\u65f6\u5236\u8868\u793a\u5f53\u524d\u5c0f\u65f6 * %m \u8fd4\u56de\u6708\u4efd \u8303\u56f4[0,12] * %M \u8fd4\u56de\u5206\u949f\u6570 \u8303\u56f4 [0,59] * %P \u8fd4\u56de\u662f\u4e0a\u5348\u8fd8\u662f\u4e0b\u5348\u2013AM or PM * %S \u8fd4\u56de\u79d2\u6570 \u8303\u56f4 [0,61]\u3002\u3002\u3002\u624b\u518c\u8bf4\u660e\u7684 * %U \u8fd4\u56de\u5f53\u5468\u662f\u5f53\u5e74\u7684\u7b2c\u51e0\u5468 \u4ee5\u5468\u65e5\u4e3a\u7b2c\u4e00\u5929 * %W \u8fd4\u56de\u5f53\u5468\u662f\u5f53\u5e74\u7684\u7b2c\u51e0\u5468 \u4ee5\u5468\u4e00\u4e3a\u7b2c\u4e00\u5929 * %w \u5f53\u5929\u5728\u5f53\u5468\u7684\u5929\u6570\uff0c\u8303\u56f4\u4e3a[0, 6]\uff0c6\u8868\u793a\u661f\u671f\u5929 * %x \u65e5\u671f\u7684\u5b57\u7b26\u4e32\u8868\u793a \uff1a03/08/15 * %X \u65f6\u95f4\u7684\u5b57\u7b26\u4e32\u8868\u793a \uff1a23:22:08 * %y \u4e24\u4e2a\u6570\u5b57\u8868\u793a\u7684\u5e74\u4efd 15 * %Y \u56db\u4e2a\u6570\u5b57\u8868\u793a\u7684\u5e74\u4efd 2015 * %z \u4e0eutc\u65f6\u95f4\u7684\u95f4\u9694 \uff08\u5982\u679c\u662f\u672c\u5730\u65f6\u95f4\uff0c\u8fd4\u56de\u7a7a\u5b57\u7b26\u4e32\uff09 * %Z \u65f6\u533a\u540d\u79f0\uff08\u5982\u679c\u662f\u672c\u5730\u65f6\u95f4\uff0c\u8fd4\u56de\u7a7a\u5b57\u7b26\u4e32\uff09 datestrs = ['2020/5/6', '2021/10/1'] # \u6ce8\u610f\u533a\u5206datetime\u6a21\u5757\u548cdatetime\u7c7b\uff0c\u540d\u5b57\u76f8\u540c\uff0c\u5bb9\u6613\u5f15\u8d77\u9519\u8bef\u3002 # \u6bd4\u5982datetime.datetime\u5c31\u62a5\u9519type object 'datetime.datetime' has no attribute 'datetime' print(datetime) # <class 'datetime.datetime'> print(dt) # <module 'datetime' from '/opt/Python-3.9.6/Lib/datetime.py'> Python\u6807\u51c6\u5e93\u5305\u542b\u4e86\u65e5\u671f\u548c\u65f6\u95f4\u6570\u636e\u7684\u7c7b\u578b\u3002datetime\u3001time\u548ccalendar\u6a21\u5757\u662f\u5f00\u59cb\u5904\u7406\u65f6\u95f4\u6570\u636e\u7684\u4e3b\u8981\u5185\u5bb9\u3002\\ datetime.datetime\u7c7b\u578b\uff0c\u6216\u7b80\u5199\u4e3adatetime\uff0c\u662f\u5e7f\u6cdb\u4f7f\u7528\u7684\u3002 now = datetime.now() print(now) # 2021-10-07 20:24:43.834293 result = dt.datetime(2021, 10, 7, 20, 26, 00, 72973) print(result) # 2021-10-07 20:26:00.072973 datetime\u65e2\u5b58\u50a8\u4e86\u65e5\u671f\uff0c\u4e5f\u5b58\u50a8\u4e86\u7ec6\u5316\u5230\u5fae\u79d2\u7684\u65f6\u95f4\u3002\\ timedelta\u8868\u793a\u4e24\u4e2adatetime\u5bf9\u8c61\u7684\u65f6\u95f4\u5dee\u3002 delta = datetime(2021, 10, 7) - datetime(2021, 9, 7) print(delta) # 30 days, 0:00:00 print(delta.days) # 30 print(delta.seconds) # 0 result = dt.timedelta(926, 56700) print(result) # 926 days, 15:45:00 \u53ef\u4ee5\u4e3a\u4e00\u4e2adatetime\u5bf9\u8c61\u52a0\u4e0a\uff08\u6216\u51cf\u53bb\uff09\u4e00\u4e2atimedelta\u6216\u5176\u6574\u6570\u500d\u6765\u4ea7\u751f\u4e00\u4e2a\u65b0\u7684datetime\u5bf9\u8c61 start = datetime(2021, 10, 7) result = start + timedelta(12) print(result) # 2021-10-19 00:00:00 result = start - 2 * timedelta(5) print(result) # 2021-09-27 00:00:00","title":"datetime"},{"location":"python/DataAnalysis/ch08/#datetime_1","text":"\u4f7f\u7528str\u65b9\u6cd5\u6216\u4f20\u9012\u4e00\u4e2a\u6307\u5b9a\u7684\u683c\u5f0f\u7ed9strftime\u65b9\u6cd5\u6765\u5bf9datetime\u5bf9\u8c61\u548cpandas\u7684Timestamp\u5bf9\u8c61\u8fdb\u884c\u683c\u5f0f\u5316 stamp = datetime(2021, 10, 7) result = str(stamp) print(result) # 2021-10-07 00:00:00 \u4f7f\u7528datetime.srtptime\u548cdatetime\u683c\u5f0f\u7b26\uff0c\u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u65e5\u671f\u3002\\ datetime.strptime\u662f\u5728\u5df2\u77e5\u683c\u5f0f\u7684\u60c5\u51b5\u4e0b\u8f6c\u6362\u65e5\u671f\u7684\u597d\u65b9\u5f0f\u3002 value = '2021-10-7' result = datetime.strptime(value, '%Y-%m-%d') print(result) # 2021-10-07 00:00:00 datestrs = ['2020/5/6', '2021/10/1'] result = [datetime.strptime(x, '%Y/%m/%d') for x in datestrs] print(result) # [datetime.datetime(2020, 5, 6, 0, 0), datetime.datetime(2021, 10, 1, 0, 0)] dateutil\u89e3\u6790\u901a\u7528\u65e5\u671f\u683c\u5f0f\uff1a print(parse('2020/5/6')) # 2020-05-06 00:00:00 print(parse('Jan 31, 2021 10:25 AM')) # 2021-01-31 10:25:00 print(parse('5/6/2021', dayfirst=True)) # \u65e5\u671f\u51fa\u73b0\u5728\u6708\u4efd\u4e4b\u524d # 2021-06-05 00:00:00 pandas\u4e3b\u8981\u662f\u9762\u5411\u5904\u7406\u65e5\u671f\u6570\u7ec4\u7684\uff0c\u65e0\u8bba\u662f\u7528\u4f5c\u8f74\u7d22\u5f15\u8fd8\u662f\u7528\u4f5cDataFrame\u4e2d\u7684\u5217\u3002\\ to_datetime\u65b9\u6cd5\u53ef\u4ee5\u8f6c\u6362\u5f88\u591a\u4e0d\u540c\u7684\u65e5\u671f\u8868\u793a\u683c\u5f0f\u3002\\ to_datetime\u65b9\u6cd5\u8fd8\u53ef\u4ee5\u5904\u7406\u90a3\u4e9b\u88ab\u8ba4\u4e3a\u662f\u7f3a\u5931\u503c\u7684\u503c\uff08None\u3001\u7a7a\u5b57\u7b26\u4e32\u7b49\uff09\u3002\\ NaT\uff08Not a time\uff09\u662fpandas\u4e2d\u65f6\u95f4\u6233\u6570\u636e\u7684\u662fnull\u503c\u3002 datestrs = ['2020/5/6 12:00:00', '2021/10/1 09:00:00'] result = pd.to_datetime(datestrs) print(result) # DatetimeIndex(['2020-05-06 12:00:00', '2021-10-01 09:00:00'], dtype='datetime64[ns]', freq=None) idx = pd.to_datetime(datestrs + [None]) print(idx) # DatetimeIndex(['2020-05-06 12:00:00', '2021-10-01 09:00:00', 'NaT'], dtype='datetime64[ns]', freq=None) print(idx[2]) # NaT print(pd.isnull(idx)) # [False False True]","title":"\u5b57\u7b26\u4e32\u4e0edatetime\u4e92\u76f8\u8f6c\u6362"},{"location":"python/DataAnalysis/ch08/#_2","text":"from datetime import datetime import pandas as pd import numpy as np","title":"\u65f6\u95f4\u5e8f\u5217\u57fa\u7840"},{"location":"python/DataAnalysis/ch08/#datetimeindex","text":"pandas\u4e2d\u7684\u57fa\u7840\u65f6\u95f4\u5e8f\u5217\u79cd\u7c7b\u662f\u7531\u65f6\u95f4\u6233\u7d22\u5f15\u7684Series\uff0c\u5728pandas\u5916\u90e8\u5219\u901a\u5e38\u8868\u793a\u4e3aPython\u5b57\u7b26\u4e32\u6216datetime\u5bf9\u8c61\u3002\\ \u6240\u6709\u4f7f\u7528datetime\u5bf9\u8c61\u7684\u5730\u65b9\u90fd\u53ef\u4ee5\u7528Timestamp\u3002 dates = [ datetime(2021, 10, 1), datetime(2021, 10, 3), datetime(2021, 10, 5), datetime(2021, 10, 7), datetime(2021, 10, 9), datetime(2021, 10, 11) ] data = np.random.rand(6) ts = pd.Series(data, index=dates) print(ts) # 2021-10-01 0.678297 # 2021-10-03 0.538631 # 2021-10-05 0.934413 # 2021-10-07 0.018534 # 2021-10-09 0.938441 # 2021-10-11 0.173329 # dtype: float64 \u8fd9\u4e9bdatetime\u5bf9\u8c61\u88ab\u653e\u5165DatetimeIndex\u4e2d print(ts.index) # DatetimeIndex(['2021-10-01', '2021-10-03', '2021-10-05', '2021-10-07', # '2021-10-09', '2021-10-11'], # dtype='datetime64[ns]', freq=None)","title":"DatetimeIndex"},{"location":"python/DataAnalysis/ch08/#datetimeindexpandastimestamp","text":"stamp = ts.index[0] print(stamp) # 2021-10-01 00:00:00 \u548c\u5176\u4ed6Series\u7c7b\u4f3c\uff0c\u4e0d\u540c\u7d22\u5f15\u7684\u65f6\u95f4\u5e8f\u5217\u4e4b\u95f4\u7684\u7b97\u672f\u8fd0\u7b97\u5728\u65e5\u671f\u4e0a\u81ea\u52a8\u5bf9\u9f50\uff1a print(ts + ts[::2]) # ts[::2]\u4f1a\u5c06ts\u4e2d\u6bcf\u9694\u4e00\u4e2a\u7684\u5143\u7d20\u9009\u62e9\u51fa # 2021-10-01 1.356595 # 2021-10-03 NaN # 2021-10-05 1.868825 # 2021-10-07 NaN # 2021-10-09 1.876883 # 2021-10-11 NaN # dtype: float64","title":"DatetimeIndex\u4e2d\u7684\u6807\u91cf\u503c\u662fpandas\u7684Timestamp\u5bf9\u8c61\uff1a"},{"location":"python/DataAnalysis/ch08/#pandasnumpydatetime64","text":"print(ts.index.dtype) # datetime64[ns]","title":"pandas\u4f7f\u7528NumPy\u7684datetime64\u6570\u636e\u7c7b\u578b\u5728\u7eb3\u79d2\u7ea7\u7684\u5206\u8fa8\u7387\u4e0b\u5b58\u50a8\u65f6\u95f4\u6233"},{"location":"python/DataAnalysis/ch08/#_3","text":"\u5f53\u57fa\u4e8e\u6807\u7b7e\u8fdb\u884c\u7d22\u5f15\u548c\u9009\u62e9\u65f6\uff0c\u65f6\u95f4\u5e8f\u5217\u7684\u884c\u4e3a\u548c\u5176\u4ed6\u7684pandas.Series\u7c7b\u4f3c\uff1a stamp = ts.index[2] print(ts[stamp]) # 0.9344125159374457 \u5bf9\u5e942021-10-05 \u4e5f\u53ef\u4ee5\u4f20\u9012\u4e00\u4e2a\u80fd\u89e3\u91ca\u4e3a\u65e5\u671f\u7684\u5b57\u7b26\u4e32\uff1a print(ts['10/9/2021']) print(ts['20211003']) \u5bf9\u4e00\u4e2a\u957f\u7684\u65f6\u95f4\u5e8f\u5217\uff0c\u53ef\u4ee5\u4f20\u9012\u4e00\u4e2a\u5e74\u4efd\u6216\u4e00\u4e2a\u5e74\u4efd\u548c\u6708\u4efd\u6765\u9009\u62e9\u6570\u636e\u5207\u7247\uff1a data = np.random.randn(1000) longer_ts = pd.Series( data, index=pd.date_range('1/1/2021', periods=1000) ) print(longer_ts) # 2021-01-01 -0.009192 # 2021-01-02 -1.079068 # 2021-01-03 -1.851176 # 2021-01-04 1.347109 # 2021-01-05 -0.236394 # ... # 2023-09-23 -1.317943 # 2023-09-24 0.201741 # 2023-09-25 0.442282 # 2023-09-26 0.176137 # 2023-09-27 1.146437 # Freq: D, Length: 1000, dtype: float64 \u5b57\u7b26\u4e32\u20192001\u2019\u88ab\u89e3\u91ca\u4e3a\u4e00\u4e2a\u5e74\u4efd\uff0c\u5e76\u9009\u62e9\u4e86\u76f8\u5e94\u7684\u65f6\u95f4\u533a\u95f4 print(longer_ts['2021']) # 2021-01-01 2.170411 # 2021-01-02 1.186933 # 2021-01-03 0.399262 # 2021-01-04 -1.042606 # 2021-01-05 2.082112 # ... # 2021-12-27 -0.988282 # 2021-12-28 0.598683 # 2021-12-29 2.770580 # 2021-12-30 -1.463262 # 2021-12-31 -1.642846 # Freq: D, Length: 365, dtype: float64 \u6307\u5b9a\u4e86\u5e74\u4efd\u548c\u6708\u4efd\u4e5f\u662f\u6709\u6548\u7684 print(longer_ts['2021-10']) # 2021-10-01 0.712265 # 2021-10-02 1.195221 # 2021-10-03 -1.930220 # 2021-10-04 -0.720816 # 2021-10-05 0.081777 # 2021-10-06 -0.037466 # 2021-10-07 3.737303 # 2021-10-08 1.620383 # 2021-10-09 0.990797 # 2021-10-10 0.507850 # 2021-10-11 0.846935 # 2021-10-12 0.996947 # 2021-10-13 -1.078558 # 2021-10-14 0.871832 # 2021-10-15 -0.591698 # 2021-10-16 -0.805463 # 2021-10-17 0.160528 # 2021-10-18 -0.028474 # 2021-10-19 2.305579 # 2021-10-20 -1.132288 # 2021-10-21 0.649980 # 2021-10-22 0.615327 # 2021-10-23 0.185108 # 2021-10-24 0.857199 # 2021-10-25 -1.473752 # 2021-10-26 -0.895161 # 2021-10-27 -0.432717 # 2021-10-28 0.734504 # 2021-10-29 1.892493 # 2021-10-30 0.456619 # 2021-10-31 -0.255288 # Freq: D, dtype: float64 \u4f7f\u7528datetime\u5bf9\u8c61\u8fdb\u884c\u5207\u7247\u4e5f\u662f\u53ef\u4ee5\u7684\uff1a print(longer_ts[datetime(2023, 1, 6):]) # 2023-01-06 0.952591 # 2023-01-07 -0.900259 # 2023-01-08 0.925332 # 2023-01-09 0.173215 # 2023-01-10 -0.507791 # ... # 2023-09-23 -0.319989 # 2023-09-24 -1.105417 # 2023-09-25 -2.118769 # 2023-09-26 0.009420 # 2023-09-27 -0.310281 # Freq: D, Length: 265, dtype: float64 \u56e0\u4e3a\u5927\u90e8\u5206\u7684\u65f6\u95f4\u5e8f\u5217\u6570\u636e\u662f\u6309\u65f6\u95f4\u987a\u5e8f\u6392\u5e8f\u7684\uff0c\u53ef\u4ee5\u4f7f\u7528\u4e0d\u5305\u542b\u5728\u65f6\u95f4\u5e8f\u5217\u4e2d\u7684\u65f6\u95f4\u6233\u8fdb\u884c\u5207\u7247\uff0c\u4ee5\u6267\u884c\u8303\u56f4\u67e5\u8be2\uff1a print(longer_ts['2021/10/1':'2021/10/5']) # 2021-10-01 -0.591853 # 2021-10-02 -1.554564 # 2021-10-03 -0.712585 # 2021-10-04 -0.326657 # 2021-10-05 1.044887 # Freq: D, dtype: float64 \u4f7f\u7528truncate\u5728\u4e24\u4e2a\u65e5\u671f\u95f4\u5bf9Series\u8fdb\u884c\u5207\u7247\uff1a print(longer_ts.truncate(after='2021/10/1')) # 2021-01-01 -0.906685 # 2021-01-02 -0.470732 # 2021-01-03 -0.041316 # 2021-01-04 -0.287356 # 2021-01-05 0.104268 # ... # 2021-09-27 -0.669198 # 2021-09-28 -2.222169 # 2021-09-29 -0.653814 # 2021-09-30 -0.625868 # 2021-10-01 0.872684 # Freq: D, Length: 274, dtype: float64 \u4e0a\u9762\u8fd9\u4e9b\u64cd\u4f5c\u4e5f\u90fd\u9002\u7528\u4e8eDataFrame\uff0c\u5e76\u5728\u5176\u884c\u4e0a\u8fdb\u884c\u7d22\u5f15\uff1a dates = pd.date_range('10/1/2020', periods=100, freq='W-WED') data = np.random.randn(100, 4) long_df = pd.DataFrame( data, index=dates, columns=['Colorado', 'Texas', 'New York', 'Ohio'] ) print(long_df) # Colorado Texas New York Ohio # 2020-10-07 -1.186789 2.020634 0.300076 -0.955234 # 2020-10-14 1.502838 0.965368 -0.797539 -0.292833 # ... ... ... ... ... # 2022-08-24 -0.253116 -0.263307 0.602425 0.370599 # 2022-08-31 0.907918 0.091939 0.789694 2.781535 # [100 rows x 4 columns] print(long_df.loc['10-2020']) # Colorado Texas New York Ohio # 2020-10-07 1.031616 -1.812038 -0.446577 0.395656 # 2020-10-14 -0.673167 0.198804 -0.439141 0.086004 # 2020-10-21 -1.139786 0.716820 0.006516 -0.284335 # 2020-10-28 -0.637939 1.647810 -0.750786 0.140637","title":"\u7d22\u5f15\u3001\u9009\u62e9\u3001\u5b50\u96c6"},{"location":"python/DataAnalysis/ch08/#_4","text":"\u5728\u67d0\u4e9b\u5e94\u7528\u4e2d\uff0c\u53ef\u80fd\u4f1a\u6709\u591a\u4e2a\u6570\u636e\u89c2\u5bdf\u503c\u843d\u5728\u7279\u5b9a\u7684\u65f6\u95f4\u6233\u4e0a\u3002\u4e0b\u9762\u662f\u4e2a\u4f8b\u5b50\uff1a dates = pd.DatetimeIndex( ['2021/1/1', '2021/1/2', '2021/1/2', '2021/1/2', '2021/1/3'] ) dup_ts = pd.Series( np.arange(5), index=dates ) print(dup_ts) # 2021-01-01 0 # 2021-01-02 1 # 2021-01-02 2 # 2021-01-02 3 # 2021-01-03 4 # dtype: int64 \u901a\u8fc7\u68c0\u67e5\u7d22\u5f15\u7684is_unique\u5c5e\u6027\uff0c\u53ef\u4ee5\u770b\u51fa\u7d22\u5f15\u5e76\u4e0d\u662f\u552f\u4e00\u7684\uff1a print(dup_ts.index.is_unique) # False \u5bf9\u4e0a\u9762\u7684Series\u8fdb\u884c\u7d22\u5f15\uff0c\u7ed3\u679c\u662f\u6807\u91cf\u503c\u8fd8\u662fSeries\u5207\u7247\u53d6\u51b3\u4e8e\u662f\u5426\u6709\u65f6\u95f4\u6233\u662f\u91cd\u590d\u7684\uff1a result = dup_ts['2021/1/3'] print(result) # 4 result = dup_ts['2021/1/2'] print(result) # 2021-01-02 1 # 2021-01-02 2 # 2021-01-02 3 # dtype: int64 \u5047\u8bbe\u60f3\u8981\u805a\u5408\u542b\u6709\u975e\u552f\u4e00\u65f6\u95f4\u6233\u7684\u6570\u636e\u3002\u4e00\u79cd\u65b9\u5f0f\u5c31\u662f\u4f7f\u7528groupby\u5e76\u4f20\u9012level=0\uff1a grouped = dup_ts.groupby(level=0) result = grouped.mean() print(result) # 2021-01-01 0.0 # 2021-01-02 2.0 # 2021-01-03 4.0 # dtype: float64 result = grouped.count() print(result) # 2021-01-01 1 # 2021-01-02 3 # 2021-01-03 1 # dtype: int64","title":"\u542b\u6709\u91cd\u590d\u7d22\u5f15\u7684\u65f6\u95f4\u5e8f\u5217"},{"location":"python/DataAnalysis/ch08/#_5","text":"from datetime import datetime, timedelta import pandas as pd import numpy as np from pandas.tseries.offsets import Hour, Minute, Day, MonthEnd pandas\u7684\u901a\u7528\u65f6\u95f4\u5e8f\u5217\u662f\u4e0d\u89c4\u5219\u7684\uff0c\u5373\u65f6\u95f4\u5e8f\u5217\u7684\u9891\u7387\u4e0d\u662f\u56fa\u5b9a\u7684\u3002\\ \u4f46\u6709\u65f6\u9700\u8981\u5904\u7406\u56fa\u5b9a\u9891\u7387\u7684\u573a\u666f\uff0c\u4f8b\u5982\u6bcf\u65e5\u7684\u3001\u6bcf\u6708\u7684\u6216\u6bcf15\u5206\u949f\u7684\u65f6\u95f4\u5e8f\u5217\u6570\u636e\u3002\\ \u53ef\u4ee5\u901a\u8fc7\u8c03\u7528resample\u65b9\u6cd5\u5c06\u6837\u672c\u65f6\u95f4\u5e8f\u5217\u8f6c\u6362\u4e3a\u56fa\u5b9a\u7684\u6bcf\u65e5\u9891\u7387\u6570\u636e\u3002\\ \u5728\u9891\u7387\u95f4\u8f6c\u6362\uff0c\u53c8\u79f0\u4e3a\u91cd\u65b0\u91c7\u6837 dates = [ datetime(2021, 10, 1), datetime(2021, 10, 3), datetime(2021, 10, 5), datetime(2021, 10, 7), datetime(2021, 10, 9), datetime(2021, 10, 11) ] data = np.random.rand(6) ts = pd.Series(data, index=dates) print(ts) # 2021-10-01 0.956685 # 2021-10-03 0.817168 # 2021-10-05 0.275543 # 2021-10-07 0.614226 # 2021-10-09 0.061377 # 2021-10-11 0.357080 # dtype: float64 resampler = ts.resample('D') # \u5b57\u7b26\u4e32\u2019D\u2019\u88ab\u89e3\u91ca\u4e3a\u6bcf\u65e5\u9891\u7387 print(resampler) # DatetimeIndexResampler [freq=<Day>, axis=0, closed=left, label=left, convention=start, origin=start_day]","title":"\u65e5\u671f\u8303\u56f4\u3001\u9891\u7387\u548c\u79fb\u4f4d"},{"location":"python/DataAnalysis/ch08/#_6","text":"pandas.date_range\u662f\u7528\u4e8e\u6839\u636e\u7279\u5b9a\u9891\u7387\u751f\u6210\u6307\u5b9a\u957f\u5ea6\u7684DatetimeIndex\u3002\\ \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0cdate_range\u751f\u6210\u7684\u662f\u6bcf\u65e5\u7684\u65f6\u95f4\u6233\u3002\u5982\u679c\u53ea\u4f20\u9012\u4e00\u4e2a\u8d77\u59cb\u6216\u7ed3\u5c3e\u65e5\u671f\uff0c\u4f60\u5fc5\u987b\u4f20\u9012\u4e00\u4e2a\u7528\u4e8e\u751f\u6210\u8303\u56f4\u7684\u6570\u5b57\u3002\\ \u5f00\u59cb\u65e5\u671f\u548c\u7ed3\u675f\u65e5\u671f\u4e25\u683c\u5b9a\u4e49\u4e86\u751f\u6210\u65e5\u671f\u7d22\u5f15\u7684\u8fb9\u754c\u3002 index = pd.date_range('2021/1/1', '2021/1/30') print(index) index = pd.date_range(start='2021/1/1', periods=30) print(index) index = pd.date_range(end='2021/1/30', periods=30) print(index) # DatetimeIndex(['2021-01-01', '2021-01-02', '2021-01-03', '2021-01-04', # '2021-01-05', '2021-01-06', '2021-01-07', '2021-01-08', # '2021-01-09', '2021-01-10', '2021-01-11', '2021-01-12', # '2021-01-13', '2021-01-14', '2021-01-15', '2021-01-16', # '2021-01-17', '2021-01-18', '2021-01-19', '2021-01-20', # '2021-01-21', '2021-01-22', '2021-01-23', '2021-01-24', # '2021-01-25', '2021-01-26', '2021-01-27', '2021-01-28', # '2021-01-29', '2021-01-30'], # dtype='datetime64[ns]', freq='D') \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0cdate_range\u4fdd\u7559\u5f00\u59cb\u6216\u7ed3\u675f\u65f6\u95f4\u6233\u7684\u65f6\u95f4\uff08\u5982\u679c\u6709\u7684\u8bdd\uff09\u3002\\ normalize\u9009\u9879\u53ef\u4ee5\u5b9e\u73b0\u751f\u6210\u7684\u662f\u6807\u51c6\u5316\u4e3a\u96f6\u70b9\u7684\u65f6\u95f4\u6233\u3002 index = pd.date_range('2021/1/1 12:56:30', periods=5) print(index) # DatetimeIndex(['2021-01-01 12:56:30', '2021-01-02 12:56:30', # '2021-01-03 12:56:30', '2021-01-04 12:56:30', # '2021-01-05 12:56:30'], # dtype='datetime64[ns]', freq='D') index = pd.date_range('2021/1/1 12:56:30', periods=5, normalize=True) print(index) # DatetimeIndex(['2021-01-01', '2021-01-02', '2021-01-03', '2021-01-04', # '2021-01-05'], # dtype='datetime64[ns]', freq='D') Pandas\u65f6\u95f4\u5e8f\u5217\uff1a\u9891\u7387\u548c\u65e5\u671f\u504f\u79fb\u91cf pandas\u4e2d\u7684\u9891\u7387\u662f\u7531\u4e00\u4e2a\u57fa\u7840\u9891\u7387(\u4f8b\u5982\u201c\u65e5\u201d\u3001\u201c\u6708\u201d)\u548c\u4e00\u4e2a\u4e58\u6570\u7ec4\u6210\u3002\\ \u57fa\u7840\u9891\u7387\u901a\u5e38\u4ee5\u4e00\u4e2a\u5b57\u7b26\u4e32\u522b\u540d\u8868\u793a\uff0c\u6bd4\u5982\u201cD\u201d\u8868\u793a\u65e5\uff0c\u201cM\u201d\u8868\u793a\u6708\u3002\\ \u5bf9\u4e8e\u6bcf\u4e2a\u57fa\u7840\u9891\u7387\uff0c\u90fd\u6709\u4e00\u4e2a\u88ab\u79f0\u4e3a\u65e5\u671f\u504f\u79fb\u91cf(dateoffset)\u7684\u5bf9\u8c61\u4e0e\u4e4b\u5bf9\u5e94\uff0c\u6bd4\u5982\u65e5\u671f\u504f\u79fb\u91cfHour\u5bf9\u5e94\u7684\u9891\u7387\u662fH\u3002 \u5e38\u7528\u9891\u7387\u4e0e\u65e5\u671f\u504f\u79fb\u91cf \u9891\u7387 \u65e5\u671f\u504f\u79fb\u91cf \u8bf4\u660e D Day \u65e5\u5386\u65e5 B BusinessDay \u5de5\u4f5c\u65e5 H Hour \u5c0f\u65f6 T/min Minute \u5206 S Second \u79d2 L/ms Milli \u6beb\u79d2 U Micro \u5fae\u79d2 M MonthEnd \u6bcf\u6708\u6700\u540e\u4e00\u4e2a\u65e5\u5386\u65e5 BM BusinessMonthEnd \u6bcf\u6708\u6700\u540e\u4e00\u4e2a\u5de5\u4f5c\u65e5 MS MonthBegin \u6bcf\u6708\u7b2c\u4e00\u4e2a\u65e5\u5386\u65e5 BMS BussinessMonthBegin \u6bcf\u6708\u7b2c\u4e00\u4e2a\u5de5\u4f5c\u65e5 W-MON, W-TUE, ... Week \u6307\u5b9a\u661f\u671f\u51e0(MON,TUE,WED,THU,FRI,SAT,SUN) WOM-1MON,WOM-2MON, ... WeekOfMonth \u4ea7\u751f\u6bcf\u6708\u7b2c\u4e00,\u7b2c\u4e8c,\u7b2c\u4e09\u6216\u7b2c\u56db\u5468\u7684\u661f\u671f\u51e0\u3002\u4f8b\u5982WOM-3FRI\u8868\u793a\u6bcf\u6708\u7b2c3\u4e2a\u661f\u671f\u4e94 Q-JAN,Q-FEB, ... QuarterEnd \u4ee5\u6307\u5b9a\u6708\u4efd\u7ed3\u675f\u7684\u5e74\u5ea6\uff0c\u6bcf\u5b63\u5ea6\u6700\u540e\u4e00\u4e2a\u6708\u7684\u6700\u540e\u4e00\u4e2a\u65e5\u5386\u65e5 BQ-JAN,BQ-FEB, ... BusinessQuarterEnd \u4ee5\u6307\u5b9a\u6708\u4efd\u7ed3\u675f\u7684\u5e74\u5ea6\uff0c\u6bcf\u5b63\u5ea6\u6700\u540e\u4e00\u4e2a\u6708\u7684\u6700\u540e\u4e00\u4e2a\u5de5\u4f5c\u65e5 QS-JAN,QS-FEB, ... QuarterBegin \u4ee5\u6307\u5b9a\u6708\u4efd\u7ed3\u675f\u7684\u5e74\u5ea6\uff0c\u6bcf\u5b63\u5ea6\u6700\u540e\u4e00\u4e2a\u6708\u7684\u7b2c\u4e00\u4e2a\u65e5\u5386\u65e5 BQS-JAN,BQS-FEB, ... BusinessQuarterBegin \u4ee5\u6307\u5b9a\u6708\u4efd\u7ed3\u675f\u7684\u5e74\u5ea6\uff0c\u6bcf\u5b63\u5ea6\u6700\u540e\u4e00\u4e2a\u6708\u7684\u7b2c\u4e00\u4e2a\u5de5\u4f5c\u65e5 A-JAN,A-FEB, ... YearEnd \u6bcf\u5e74\u6307\u5b9a\u6708\u4efd\u7684\u6700\u540e\u4e00\u4e2a\u65e5\u5386\u65e5 BA-JAN,BA-FEB, ... BusinessYearEnd \u6bcf\u5e74\u6307\u5b9a\u6708\u4efd\u7684\u6700\u540e\u4e00\u4e2a\u5de5\u4f5c\u65e5 AS-JAN,AS-FEB, ... YearBegin \u6bcf\u5e74\u6307\u5b9a\u6708\u4efd\u7684\u7b2c\u4e00\u4e2a\u65e5\u5386\u65e5 BAS-JAN,BAS-FEB, ... BusinessYearBegin \u6bcf\u5e74\u6307\u5b9a\u6708\u4efd\u7684\u7b2c\u4e00\u4e2a\u5de5\u4f5c\u65e5","title":"\u751f\u6210\u65e5\u671f\u8303\u56f4"},{"location":"python/DataAnalysis/ch08/#_7","text":"pandas\u4e2d\u7684\u9891\u7387\u662f\u7531\u57fa\u7840\u9891\u7387\u548c\u500d\u6570\u7ec4\u6210\u7684\u3002\\ \u57fa\u7840\u9891\u7387\u901a\u5e38\u4f1a\u6709\u5b57\u7b26\u4e32\u522b\u540d\uff0c\u4f8b\u5982\u2019M'\u4ee3\u8868\u6bcf\u6708\uff0c'H\u2019\u4ee3\u8868\u6bcf\u5c0f\u65f6\u3002\\ \u5bf9\u4e8e\u6bcf\u4e2a\u57fa\u7840\u9891\u7387\uff0c\u90fd\u6709\u4e00\u4e2a\u5bf9\u8c61\u53ef\u4ee5\u88ab\u7528\u4e8e\u5b9a\u4e49\u65e5\u671f\u504f\u7f6e\u3002 \u4f8b\u5982\uff0c\u6bcf\u5c0f\u65f6\u7684\u9891\u7387\u53ef\u4ee5\u4f7f\u7528Hour\u7c7b\u6765\u8868\u793a\uff1a ```hour = Hour() print(hour)","title":"\u9891\u7387\u548c\u65e5\u671f\u504f\u7f6e"},{"location":"python/DataAnalysis/ch08/#_8","text":"\u53ef\u4ee5\u4f20\u9012\u4e00\u4e2a\u6574\u6570\u6765\u5b9a\u4e49\u504f\u7f6e\u91cf\u7684\u500d\u6570\uff1a four_hours = Hour(4) print(four_hours)","title":""},{"location":"python/DataAnalysis/ch08/#4-hours","text":"\u5728\u5927\u591a\u6570\u5e94\u7528\u4e2d\uff0c\u4e0d\u9700\u8981\u663e\u5f0f\u5730\u521b\u5efa\u8fd9\u4e9b\u5bf9\u8c61\uff0c\u800c\u662f\u4f7f\u7528\u5b57\u7b26\u4e32\u522b\u540d\uff0c\u5982\u2019H'\u6216\u20194H'\u3002\u5728\u57fa\u7840\u9891\u7387\u524d\u653e\u4e00\u4e2a\u6574\u6570\u5c31\u53ef\u4ee5\u751f\u6210\u500d\u6570\uff1a ts = pd.date_range('2021/1/1', '2021/1/2 23:59', freq='4h') print(ts)","title":"&lt;4 * Hours&gt;"},{"location":"python/DataAnalysis/ch08/#datetimeindex2021-01-01-000000-2021-01-01-040000","text":"","title":"DatetimeIndex(['2021-01-01 00:00:00', '2021-01-01 04:00:00',"},{"location":"python/DataAnalysis/ch08/#2021-01-01-080000-2021-01-01-120000","text":"","title":"'2021-01-01 08:00:00', '2021-01-01 12:00:00',"},{"location":"python/DataAnalysis/ch08/#2021-01-01-160000-2021-01-01-200000","text":"","title":"'2021-01-01 16:00:00', '2021-01-01 20:00:00',"},{"location":"python/DataAnalysis/ch08/#2021-01-02-000000-2021-01-02-040000","text":"","title":"'2021-01-02 00:00:00', '2021-01-02 04:00:00',"},{"location":"python/DataAnalysis/ch08/#2021-01-02-080000-2021-01-02-120000","text":"","title":"'2021-01-02 08:00:00', '2021-01-02 12:00:00',"},{"location":"python/DataAnalysis/ch08/#2021-01-02-160000-2021-01-02-200000","text":"","title":"'2021-01-02 16:00:00', '2021-01-02 20:00:00'],"},{"location":"python/DataAnalysis/ch08/#dtypedatetime64ns-freq4h","text":"\u591a\u4e2a\u504f\u7f6e\u53ef\u4ee5\u901a\u8fc7\u52a0\u6cd5\u8fdb\u884c\u8054\u5408\uff1a print(Hour(2) + Minute(30))","title":"dtype='datetime64[ns]', freq='4H')"},{"location":"python/DataAnalysis/ch08/#150-minutes","text":"\u7c7b\u4f3c\u5730\uff0c\u53ef\u4ee5\u4f20\u9012\u9891\u7387\u5b57\u7b26\u4e32\uff1a ts = pd.date_range('2021/1/1', '2021/1/1 23:59', freq='4h30min') print(ts)","title":"&lt;150 * Minutes&gt;"},{"location":"python/DataAnalysis/ch08/#datetimeindex2021-01-01-000000-2021-01-01-043000","text":"","title":"DatetimeIndex(['2021-01-01 00:00:00', '2021-01-01 04:30:00',"},{"location":"python/DataAnalysis/ch08/#2021-01-01-090000-2021-01-01-133000","text":"","title":"'2021-01-01 09:00:00', '2021-01-01 13:30:00',"},{"location":"python/DataAnalysis/ch08/#2021-01-01-180000-2021-01-01-223000","text":"","title":"'2021-01-01 18:00:00', '2021-01-01 22:30:00'],"},{"location":"python/DataAnalysis/ch08/#dtypedatetime64ns-freq270t","text":"\u6709\u4e9b\u9891\u7387\u63cf\u8ff0\u70b9\u7684\u65f6\u95f4\u5e76\u4e0d\u662f\u5747\u5300\u5206\u9694\u7684\u3002\u4f8b\u5982\uff0c'M'\uff08\u65e5\u5386\u6708\u672b\uff09\u548c\u2019BM'\uff08\u6708\u5185\u6700\u540e\u5de5\u4f5c\u65e5\uff09\u53d6\u51b3\u4e8e\u5f53\u6708\u5929\u6570\uff0c\u6708\u672b\u662f\u5426\u662f\u5468\u672b\u3002\u6211\u4eec\u5c06\u8fd9\u4e9b\u65e5\u671f\u79f0\u4e3a\u951a\u5b9a\u504f\u7f6e\u91cf\u3002 ##### \u6708\u4e2d\u67d0\u661f\u671f\u7684\u65e5\u671f \"\u6708\u4e2d\u67d0\u661f\u671f\"\uff08week of month \uff09\u7684\u65e5\u671f\u662f\u4e00\u4e2a\u6709\u7528\u7684\u9891\u7387\u7c7b\uff0c\u4ee5'WOM'\u5f00\u59cb\u3002 rng = pd.date_range('2021-1-1', '2021-9-1', freq='WOM-3FRI') # \u6bcf\u6708\u7b2c\u4e09\u4e2a\u661f\u671f\u4e94 print(rng)","title":"dtype='datetime64[ns]', freq='270T')"},{"location":"python/DataAnalysis/ch08/#datetimeindex2021-01-15-2021-02-19-2021-03-19-2021-04-16","text":"","title":"DatetimeIndex(['2021-01-15', '2021-02-19', '2021-03-19', '2021-04-16',"},{"location":"python/DataAnalysis/ch08/#2021-05-21-2021-06-18-2021-07-16-2021-08-20","text":"","title":"'2021-05-21', '2021-06-18', '2021-07-16', '2021-08-20'],"},{"location":"python/DataAnalysis/ch08/#dtypedatetime64ns-freqwom-3fri","text":"#### \u79fb\u4f4d\uff08\u524d\u5411\u548c\u540e\u5411\uff09\u65e5\u671f \"\u79fb\u4f4d\"\u662f\u6307\u5c06\u65e5\u671f\u6309\u65f6\u95f4\u5411\u524d\u79fb\u52a8\u6216\u5411\u540e\u79fb\u52a8\u3002\\ Series\u548cDataFrame\u90fd\u6709\u4e00\u4e2ashift\u65b9\u6cd5\u7528\u4e8e\u8fdb\u884c\u7b80\u5355\u7684\u524d\u5411\u6216\u540e\u5411\u79fb\u4f4d\uff0c\u800c\u4e0d\u6539\u53d8\u7d22\u5f15\u3002\\ \u8fdb\u884c\u79fb\u4f4d\u65f6\uff0c\u4f1a\u5728\u65f6\u95f4\u5e8f\u5217\u7684\u8d77\u59cb\u4f4d\u6216\u7ed3\u675f\u4f4d\u5f15\u5165\u7f3a\u5931\u503c\u3002 data = [0.882972, 1.363282, -0.687750, -0.048117] ts = pd.Series(data, index=pd.date_range('2021-1-1', periods=4, freq='M')) print(ts)","title":"dtype='datetime64[ns]', freq='WOM-3FRI')"},{"location":"python/DataAnalysis/ch08/#2021-01-31-0882972","text":"","title":"2021-01-31    0.882972"},{"location":"python/DataAnalysis/ch08/#2021-02-28-1363282","text":"","title":"2021-02-28    1.363282"},{"location":"python/DataAnalysis/ch08/#2021-03-31-0687750","text":"","title":"2021-03-31   -0.687750"},{"location":"python/DataAnalysis/ch08/#2021-04-30-0048117","text":"","title":"2021-04-30   -0.048117"},{"location":"python/DataAnalysis/ch08/#freq-m-dtype-float64","text":"print(ts.shift(2))","title":"Freq: M, dtype: float64"},{"location":"python/DataAnalysis/ch08/#2021-01-31-nan","text":"","title":"2021-01-31         NaN"},{"location":"python/DataAnalysis/ch08/#2021-02-28-nan","text":"","title":"2021-02-28         NaN"},{"location":"python/DataAnalysis/ch08/#2021-03-31-0882972","text":"","title":"2021-03-31    0.882972"},{"location":"python/DataAnalysis/ch08/#2021-04-30-1363282","text":"","title":"2021-04-30    1.363282"},{"location":"python/DataAnalysis/ch08/#freq-m-dtype-float64_1","text":"print(ts.shift(-2))","title":"Freq: M, dtype: float64"},{"location":"python/DataAnalysis/ch08/#2021-01-31-0687750","text":"","title":"2021-01-31   -0.687750"},{"location":"python/DataAnalysis/ch08/#2021-02-28-0048117","text":"","title":"2021-02-28   -0.048117"},{"location":"python/DataAnalysis/ch08/#2021-03-31-nan","text":"","title":"2021-03-31         NaN"},{"location":"python/DataAnalysis/ch08/#2021-04-30-nan","text":"","title":"2021-04-30         NaN"},{"location":"python/DataAnalysis/ch08/#freq-m-dtype-float64_2","text":"shift\u5e38\u7528\u4e8e\u8ba1\u7b97\u65f6\u95f4\u5e8f\u5217\u6216DataFrame\u591a\u5217\u65f6\u95f4\u5e8f\u5217\u7684\u767e\u5206\u6bd4\u53d8\u5316\uff1a print(ts/ts.shift(1))","title":"Freq: M, dtype: float64"},{"location":"python/DataAnalysis/ch08/#2021-01-31-nan_1","text":"","title":"2021-01-31         NaN"},{"location":"python/DataAnalysis/ch08/#2021-02-28-1543970","text":"","title":"2021-02-28    1.543970"},{"location":"python/DataAnalysis/ch08/#2021-03-31-0504481","text":"","title":"2021-03-31   -0.504481"},{"location":"python/DataAnalysis/ch08/#2021-04-30-0069963","text":"","title":"2021-04-30    0.069963"},{"location":"python/DataAnalysis/ch08/#freq-m-dtype-float64_3","text":"print(ts/ts.shift(1) - 1)","title":"Freq: M, dtype: float64"},{"location":"python/DataAnalysis/ch08/#2021-01-31-nan_2","text":"","title":"2021-01-31         NaN"},{"location":"python/DataAnalysis/ch08/#2021-02-28-0543970","text":"","title":"2021-02-28    0.543970"},{"location":"python/DataAnalysis/ch08/#2021-03-31-1504481","text":"","title":"2021-03-31   -1.504481"},{"location":"python/DataAnalysis/ch08/#2021-04-30-0930037","text":"","title":"2021-04-30   -0.930037"},{"location":"python/DataAnalysis/ch08/#freq-m-dtype-float64_4","text":"\u5982\u679c\u9891\u7387\u662f\u5df2\u77e5\u7684\uff0c\u5219\u53ef\u4ee5\u5c06\u9891\u7387\u4f20\u9012\u7ed9shift\u6765\u63a8\u79fb\u65f6\u95f4\u6233\uff1a print(ts.shift(2, freq='M')) # \u539f\u59cb\u6570\u636e\u7684\u201c\u6708\u201c\u589e\u52a0\u4e86\u504f\u79fb\u503c","title":"Freq: M, dtype: float64"},{"location":"python/DataAnalysis/ch08/#2021-03-31-0882972_1","text":"","title":"2021-03-31    0.882972"},{"location":"python/DataAnalysis/ch08/#2022021-10-31-0000001-04-30-1363282","text":"","title":"2022021-10-31 00:00:001-04-30    1.363282"},{"location":"python/DataAnalysis/ch08/#2021-05-31-0687750","text":"","title":"2021-05-31   -0.687750"},{"location":"python/DataAnalysis/ch08/#2021-06-30-0048117","text":"","title":"2021-06-30   -0.048117"},{"location":"python/DataAnalysis/ch08/#freq-m-dtype-float64_5","text":"print(ts.shift(2, freq='D')) # \u539f\u59cb\u6570\u636e\u7684\u201c\u65e5\u201c\u589e\u52a0\u4e86\u504f\u79fb\u503c","title":"Freq: M, dtype: float64"},{"location":"python/DataAnalysis/ch08/#2021-02-02-0882972","text":"","title":"2021-02-02    0.882972"},{"location":"python/DataAnalysis/ch08/#2021-03-02-1363282","text":"","title":"2021-03-02    1.363282"},{"location":"python/DataAnalysis/ch08/#2021-04-02-0687750","text":"","title":"2021-04-02   -0.687750"},{"location":"python/DataAnalysis/ch08/#2021-05-02-0048117","text":"","title":"2021-05-02   -0.048117"},{"location":"python/DataAnalysis/ch08/#dtype-float64","text":"print(ts.shift(2, freq='90T')) # \u539f\u59cb\u6570\u636e\u7684\u201c\u5c0f\u65f6\u201c\u589e\u52a0\u4e86\u504f\u79fb\u503c","title":"dtype: float64"},{"location":"python/DataAnalysis/ch08/#2021-01-31-030000-0882972","text":"","title":"2021-01-31 03:00:00    0.882972"},{"location":"python/DataAnalysis/ch08/#2021-02-28-030000-1363282","text":"","title":"2021-02-28 03:00:00    1.363282"},{"location":"python/DataAnalysis/ch08/#2021-03-31-030000-0687750","text":"","title":"2021-03-31 03:00:00   -0.687750"},{"location":"python/DataAnalysis/ch08/#2021-04-30-030000-0048117","text":"","title":"2021-04-30 03:00:00   -0.048117"},{"location":"python/DataAnalysis/ch08/#dtype-float64_1","text":"##### \u4f7f\u7528\u504f\u7f6e\u8fdb\u884c\u79fb\u4f4d\u65e5\u671f pandas\u65e5\u671f\u504f\u7f6e\u4e5f\u53ef\u4ee5\u4f7f\u7528datetime\u6216Timestamp\u5bf9\u8c61\u5b8c\u6210\uff1a now = datetime(2021, 10, 9) print(now)","title":"dtype: float64"},{"location":"python/DataAnalysis/ch08/#2021-10-09-000000","text":"print(now + 3 * Day())","title":"2021-10-09 00:00:00"},{"location":"python/DataAnalysis/ch08/#2021-10-12-000000","text":"\u951a\u5b9a\u504f\u7f6e\u53ef\u4ee5\u4f7f\u7528rollforward\u548crollback\u5206\u522b\u663e\u5f0f\u5730\u5c06\u65e5\u671f\u5411\u524d\u6216\u5411\u540e\"\u6eda\u52a8\"\\ \u5982\u679c\u6dfb\u52a0\u4e86\u4e00\u4e2a\u951a\u5b9a\u504f\u7f6e\u91cf\uff0c\u6bd4\u5982MonthEnd\uff0c\u6839\u636e\u9891\u7387\u89c4\u5219\uff0c\u7b2c\u4e00\u4e2a\u589e\u91cf\u4f1a\u5c06\u65e5\u671f\u201c\u524d\u6eda\u201d\u5230\u4e0b\u4e00\u4e2a\u65e5\u671f\uff1a print(now + MonthEnd()) # \u201c\u524d\u6eda\u201d\u5230\u5f53\u524d\u6708\u7684\u6708\u5e95","title":"2021-10-12 00:00:00"},{"location":"python/DataAnalysis/ch08/#2021-10-31-000000","text":"print(now + MonthEnd(2)) # \u6ce8\u610f\u8fd9\u91cc\u7684\u5e8f\u5217\u53f7\uff0c\u5f53\u524d\u6708\u662f1,\u4e0b\u4e2a\u6708\u662f2","title":"2021-10-31 00:00:00"},{"location":"python/DataAnalysis/ch08/#2021-11-30-000000","text":"offset = MonthEnd() print(offset.rollback(now))","title":"2021-11-30 00:00:00"},{"location":"python/DataAnalysis/ch08/#2021-09-30-000000","text":"print(offset.rollforward(now))","title":"2021-09-30 00:00:00"},{"location":"python/DataAnalysis/ch08/#2021-10-31-000000_1","text":"\u5c06\u79fb\u4f4d\u65b9\u6cd5\u4e0egroupby\u4e00\u8d77\u4f7f\u7528\u662f\u65e5\u671f\u504f\u7f6e\u7684\u4e00\u79cd\u521b\u9020\u6027\u7528\u6cd5\uff1a ts = pd.Series( np.random.randn(20), index=pd.date_range('2021/1/1', periods=20, freq='4d') ) print(ts)","title":"2021-10-31 00:00:00"},{"location":"python/DataAnalysis/ch08/#2021-01-01-0674348","text":"","title":"2021-01-01    0.674348"},{"location":"python/DataAnalysis/ch08/#2021-01-05-1437803","text":"","title":"2021-01-05   -1.437803"},{"location":"python/DataAnalysis/ch08/#2021-01-09-0079218","text":"","title":"2021-01-09   -0.079218"},{"location":"python/DataAnalysis/ch08/#2021-01-13-1444890","text":"","title":"2021-01-13   -1.444890"},{"location":"python/DataAnalysis/ch08/#2021-01-17-0643279","text":"","title":"2021-01-17    0.643279"},{"location":"python/DataAnalysis/ch08/#2021-01-21-1089965","text":"","title":"2021-01-21    1.089965"},{"location":"python/DataAnalysis/ch08/#2021-01-25-0021876","text":"","title":"2021-01-25    0.021876"},{"location":"python/DataAnalysis/ch08/#2021-01-29-0692138","text":"","title":"2021-01-29    0.692138"},{"location":"python/DataAnalysis/ch08/#2021-02-02-0833496","text":"","title":"2021-02-02    0.833496"},{"location":"python/DataAnalysis/ch08/#2021-02-06-1082616","text":"","title":"2021-02-06    1.082616"},{"location":"python/DataAnalysis/ch08/#2021-02-10-0729415","text":"","title":"2021-02-10   -0.729415"},{"location":"python/DataAnalysis/ch08/#2021-02-14-0271186","text":"","title":"2021-02-14    0.271186"},{"location":"python/DataAnalysis/ch08/#2021-02-18-1416218","text":"","title":"2021-02-18   -1.416218"},{"location":"python/DataAnalysis/ch08/#2021-02-22-0780402","text":"","title":"2021-02-22   -0.780402"},{"location":"python/DataAnalysis/ch08/#2021-02-26-0113773","text":"","title":"2021-02-26   -0.113773"},{"location":"python/DataAnalysis/ch08/#2021-03-02-2095338","text":"","title":"2021-03-02    2.095338"},{"location":"python/DataAnalysis/ch08/#2021-03-06-0302612","text":"","title":"2021-03-06   -0.302612"},{"location":"python/DataAnalysis/ch08/#2021-03-10-1113632","text":"","title":"2021-03-10    1.113632"},{"location":"python/DataAnalysis/ch08/#2021-03-14-1314581","text":"","title":"2021-03-14   -1.314581"},{"location":"python/DataAnalysis/ch08/#2021-03-18-0947746","text":"","title":"2021-03-18    0.947746"},{"location":"python/DataAnalysis/ch08/#freq-4d-dtype-float64","text":"print(ts.groupby(offset.rollforward).mean()) # \u524d\u6eda\u81f3\u5f53\u6708\u6708\u5e95\uff0c\u8ba1\u7b97\u5f53\u6708\u5e73\u5747\u503c","title":"Freq: 4D, dtype: float64"},{"location":"python/DataAnalysis/ch08/#2021-01-31-0019962","text":"","title":"2021-01-31    0.019962"},{"location":"python/DataAnalysis/ch08/#2021-02-28-0121787","text":"","title":"2021-02-28   -0.121787"},{"location":"python/DataAnalysis/ch08/#2021-03-31-0507905","text":"","title":"2021-03-31    0.507905"},{"location":"python/DataAnalysis/ch08/#dtype-float64_2","text":"","title":"dtype: float64"},{"location":"python/DataAnalysis/ch08/#resample","text":"print(ts.resample('M').mean())","title":"\u4f7f\u7528resample\u662f\u66f4\u7b80\u5355\u66f4\u5feb\u6377\u7684\u65b9\u6cd5"},{"location":"python/DataAnalysis/ch08/#2021-01-31-0019962_1","text":"","title":"2021-01-31    0.019962"},{"location":"python/DataAnalysis/ch08/#2021-02-28-0121787_1","text":"","title":"2021-02-28   -0.121787"},{"location":"python/DataAnalysis/ch08/#2021-03-31-0507905_1","text":"","title":"2021-03-31    0.507905"},{"location":"python/DataAnalysis/ch08/#freq-m-dtype-float64_6","text":"### \u65f6\u533a\u5904\u7406 \u65f6\u533a\u901a\u5e38\u88ab\u8868\u793a\u4e3aUTC\u7684\u504f\u7f6e\\ \u5728Python\u8bed\u8a00\u4e2d\uff0c\u65f6\u533a\u4fe1\u606f\u6765\u6e90\u4e8e\u7b2c\u4e09\u65b9\u5e93pytz\uff08\u53ef\u4ee5\u4f7f\u7528pip\u6216conda\u5b89\u88c5\uff09\uff0c\u5176\u4e2d\u516c\u5f00\u4e86Olson\u6570\u636e\u5e93\uff0c\u8fd9\u662f\u4e16\u754c\u65f6\u533a\u4fe1\u606f\u7684\u6c47\u7f16\u3002\\ pandas\u5c01\u88c5\u4e86pytz\u7684\u529f\u80fd from datetime import datetime, timedelta import pandas as pd import numpy as np from pandas.tseries.offsets import Hour, Minute, Day, MonthEnd import pytz ##### common_timezones tz = pytz.common_timezones[-5:] # \u8bfb\u53d6common_timezones\u8fd9\u4e2a\u5217\u8868\u7684\u6700\u540e5\u4e2a\u5143\u7d20 print(tz)","title":"Freq: M, dtype: float64"},{"location":"python/DataAnalysis/ch08/#useastern-ushawaii-usmountain-uspacific-utc","text":"\u8981\u83b7\u5f97pytz\u7684\u65f6\u533a\u5bf9\u8c61\uff0c\u53ef\u4f7f\u7528pytz.timezone\uff1a tz = pytz.timezone('Asia/Shanghai') print(tz) ##### \u65f6\u533a\u7684\u672c\u5730\u5316\u548c\u8f6c\u6362 \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0cpandas\u4e2d\u7684\u65f6\u95f4\u5e8f\u5217\u662f\u65f6\u533a\u7b80\u5355\u578b\u7684\u3002 rng = pd.date_range('2021/1/1 9:30', periods=6, freq='D') ts = pd.Series(np.random.randn(len(rng)), index=rng) print(rng)","title":"['US/Eastern', 'US/Hawaii', 'US/Mountain', 'US/Pacific', 'UTC']"},{"location":"python/DataAnalysis/ch08/#datetimeindex2021-01-01-093000-2021-01-02-093000","text":"","title":"DatetimeIndex(['2021-01-01 09:30:00', '2021-01-02 09:30:00',"},{"location":"python/DataAnalysis/ch08/#2021-01-03-093000-2021-01-04-093000","text":"","title":"'2021-01-03 09:30:00', '2021-01-04 09:30:00',"},{"location":"python/DataAnalysis/ch08/#2021-01-05-093000-2021-01-06-093000","text":"","title":"'2021-01-05 09:30:00', '2021-01-06 09:30:00'],"},{"location":"python/DataAnalysis/ch08/#dtypedatetime64ns-freqd","text":"print(ts)","title":"dtype='datetime64[ns]', freq='D')"},{"location":"python/DataAnalysis/ch08/#2021-01-01-093000-0339822","text":"","title":"2021-01-01 09:30:00    0.339822"},{"location":"python/DataAnalysis/ch08/#2021-01-02-093000-1356382","text":"","title":"2021-01-02 09:30:00    1.356382"},{"location":"python/DataAnalysis/ch08/#2021-01-03-093000-0475429","text":"","title":"2021-01-03 09:30:00    0.475429"},{"location":"python/DataAnalysis/ch08/#2021-01-04-093000-1826654","text":"","title":"2021-01-04 09:30:00    1.826654"},{"location":"python/DataAnalysis/ch08/#2021-01-05-093000-0245510","text":"","title":"2021-01-05 09:30:00   -0.245510"},{"location":"python/DataAnalysis/ch08/#2021-01-06-093000-0705274","text":"","title":"2021-01-06 09:30:00    0.705274"},{"location":"python/DataAnalysis/ch08/#freq-d-dtype-float64","text":"print(ts.index.tz) # \u7d22\u5f15\u7684tz\u5c5e\u6027\u662fNone","title":"Freq: D, dtype: float64"},{"location":"python/DataAnalysis/ch08/#none","text":"\u65e5\u671f\u8303\u56f4\u53ef\u4ee5\u901a\u8fc7\u65f6\u533a\u96c6\u5408\u6765\u751f\u6210\uff1a rng = pd.date_range('2021/3/1', periods=10, freq='D', tz='UTC') print(rng)","title":"None"},{"location":"python/DataAnalysis/ch08/#datetimeindex2021-03-01-0000000000-2021-03-02-0000000000","text":"","title":"DatetimeIndex(['2021-03-01 00:00:00+00:00', '2021-03-02 00:00:00+00:00',"},{"location":"python/DataAnalysis/ch08/#2021-03-03-0000000000-2021-03-04-0000000000","text":"","title":"'2021-03-03 00:00:00+00:00', '2021-03-04 00:00:00+00:00',"},{"location":"python/DataAnalysis/ch08/#2021-03-05-0000000000-2021-03-06-0000000000","text":"","title":"'2021-03-05 00:00:00+00:00', '2021-03-06 00:00:00+00:00',"},{"location":"python/DataAnalysis/ch08/#2021-03-07-0000000000-2021-03-08-0000000000","text":"","title":"'2021-03-07 00:00:00+00:00', '2021-03-08 00:00:00+00:00',"},{"location":"python/DataAnalysis/ch08/#2021-03-09-0000000000-2021-03-10-0000000000","text":"","title":"'2021-03-09 00:00:00+00:00', '2021-03-10 00:00:00+00:00'],"},{"location":"python/DataAnalysis/ch08/#dtypedatetime64ns-utc-freqd","text":"\u4f7f\u7528tz_localize\u65b9\u6cd5\u53ef\u4ee5\u4ece\u7b80\u5355\u65f6\u533a\u8f6c\u6362\u5230\u672c\u5730\u5316\u65f6\u533a\uff1a print(ts)","title":"dtype='datetime64[ns, UTC]', freq='D')"},{"location":"python/DataAnalysis/ch08/#2021-01-01-093000-0294647","text":"","title":"2021-01-01 09:30:00    0.294647"},{"location":"python/DataAnalysis/ch08/#2021-01-02-093000-0958414","text":"","title":"2021-01-02 09:30:00    0.958414"},{"location":"python/DataAnalysis/ch08/#2021-01-03-093000-0424235","text":"","title":"2021-01-03 09:30:00    0.424235"},{"location":"python/DataAnalysis/ch08/#2021-01-04-093000-1714333","text":"","title":"2021-01-04 09:30:00   -1.714333"},{"location":"python/DataAnalysis/ch08/#2021-01-05-093000-0030319","text":"","title":"2021-01-05 09:30:00   -0.030319"},{"location":"python/DataAnalysis/ch08/#2021-01-06-093000-0744940","text":"","title":"2021-01-06 09:30:00   -0.744940"},{"location":"python/DataAnalysis/ch08/#freq-d-dtype-float64_1","text":"print(ts.tz_localize('UTC'))","title":"Freq: D, dtype: float64"},{"location":"python/DataAnalysis/ch08/#2021-01-01-0930000000-0294647","text":"","title":"2021-01-01 09:30:00+00:00    0.294647"},{"location":"python/DataAnalysis/ch08/#2021-01-02-0930000000-0958414","text":"","title":"2021-01-02 09:30:00+00:00    0.958414"},{"location":"python/DataAnalysis/ch08/#2021-01-03-0930000000-0424235","text":"","title":"2021-01-03 09:30:00+00:00    0.424235"},{"location":"python/DataAnalysis/ch08/#2021-01-04-0930000000-1714333","text":"","title":"2021-01-04 09:30:00+00:00   -1.714333"},{"location":"python/DataAnalysis/ch08/#2021-01-05-0930000000-0030319","text":"","title":"2021-01-05 09:30:00+00:00   -0.030319"},{"location":"python/DataAnalysis/ch08/#2021-01-06-0930000000-0744940","text":"","title":"2021-01-06 09:30:00+00:00   -0.744940"},{"location":"python/DataAnalysis/ch08/#freq-d-dtype-float64_2","text":"print(ts.tz_localize('Asia/Shanghai'))","title":"Freq: D, dtype: float64"},{"location":"python/DataAnalysis/ch08/#2021-01-01-0930000800-0052521","text":"","title":"2021-01-01 09:30:00+08:00    0.052521"},{"location":"python/DataAnalysis/ch08/#2021-01-02-0930000800-0305417","text":"","title":"2021-01-02 09:30:00+08:00   -0.305417"},{"location":"python/DataAnalysis/ch08/#2021-01-03-0930000800-0150215","text":"","title":"2021-01-03 09:30:00+08:00    0.150215"},{"location":"python/DataAnalysis/ch08/#2021-01-04-0930000800-0953715","text":"","title":"2021-01-04 09:30:00+08:00   -0.953715"},{"location":"python/DataAnalysis/ch08/#2021-01-05-0930000800-0543622","text":"","title":"2021-01-05 09:30:00+08:00    0.543622"},{"location":"python/DataAnalysis/ch08/#2021-01-06-0930000800-0222422","text":"","title":"2021-01-06 09:30:00+08:00    0.222422"},{"location":"python/DataAnalysis/ch08/#dtype-float64_3","text":"print(ts.tz_localize('Asia/Shanghai').index)","title":"dtype: float64"},{"location":"python/DataAnalysis/ch08/#datetimeindex2021-01-01-0930000800-2021-01-02-0930000800","text":"","title":"DatetimeIndex(['2021-01-01 09:30:00+08:00', '2021-01-02 09:30:00+08:00',"},{"location":"python/DataAnalysis/ch08/#2021-01-03-0930000800-2021-01-04-0930000800","text":"","title":"'2021-01-03 09:30:00+08:00', '2021-01-04 09:30:00+08:00',"},{"location":"python/DataAnalysis/ch08/#2021-01-05-0930000800-2021-01-06-0930000800","text":"","title":"'2021-01-05 09:30:00+08:00', '2021-01-06 09:30:00+08:00'],"},{"location":"python/DataAnalysis/ch08/#dtypedatetime64ns-asiashanghai-freqnone","text":"\u4e00\u65e6\u65f6\u95f4\u5e8f\u5217\u88ab\u672c\u5730\u5316\u4e3a\u67d0\u4e2a\u7279\u5b9a\u7684\u65f6\u533a\uff0c\u5219\u53ef\u4ee5\u901a\u8fc7tz_convert\u5c06\u5176\u8f6c\u6362\u4e3a\u53e6\u4e00\u4e2a\u65f6\u533a\uff1a tz_sha = ts.tz_localize('Asia/Shanghai') tz_utc = tz_sha.tz_convert('UTC') print(tz_sha)","title":"dtype='datetime64[ns, Asia/Shanghai]', freq=None)"},{"location":"python/DataAnalysis/ch08/#2021-01-01-0930000800-0095689","text":"","title":"2021-01-01 09:30:00+08:00    0.095689"},{"location":"python/DataAnalysis/ch08/#2021-01-02-0930000800-0392730","text":"","title":"2021-01-02 09:30:00+08:00   -0.392730"},{"location":"python/DataAnalysis/ch08/#2021-01-03-0930000800-0151468","text":"","title":"2021-01-03 09:30:00+08:00    0.151468"},{"location":"python/DataAnalysis/ch08/#2021-01-04-0930000800-0027467","text":"","title":"2021-01-04 09:30:00+08:00    0.027467"},{"location":"python/DataAnalysis/ch08/#2021-01-05-0930000800-0393709","text":"","title":"2021-01-05 09:30:00+08:00    0.393709"},{"location":"python/DataAnalysis/ch08/#2021-01-06-0930000800-0872914","text":"","title":"2021-01-06 09:30:00+08:00    0.872914"},{"location":"python/DataAnalysis/ch08/#dtype-float64_4","text":"print(tz_utc)","title":"dtype: float64"},{"location":"python/DataAnalysis/ch08/#2021-01-01-0130000000-0095689","text":"","title":"2021-01-01 01:30:00+00:00    0.095689"},{"location":"python/DataAnalysis/ch08/#2021-01-02-0130000000-0392730","text":"","title":"2021-01-02 01:30:00+00:00   -0.392730"},{"location":"python/DataAnalysis/ch08/#2021-01-03-0130000000-0151468","text":"","title":"2021-01-03 01:30:00+00:00    0.151468"},{"location":"python/DataAnalysis/ch08/#2021-01-04-0130000000-0027467","text":"","title":"2021-01-04 01:30:00+00:00    0.027467"},{"location":"python/DataAnalysis/ch08/#2021-01-05-0130000000-0393709","text":"","title":"2021-01-05 01:30:00+00:00    0.393709"},{"location":"python/DataAnalysis/ch08/#2021-01-06-0130000000-0872914","text":"","title":"2021-01-06 01:30:00+00:00    0.872914"},{"location":"python/DataAnalysis/ch08/#dtype-float64_5","text":"","title":"dtype: float64"},{"location":"python/DataAnalysis/ch08/#tz_localizetz_convertdatetimeindex","text":"print(ts.index.tz_localize('Asia/Shanghai'))","title":"tz_localize\u548ctz_convert\u4e5f\u662fDatetimeIndex\u7684\u5b9e\u4f8b\u65b9\u6cd5\uff1a"},{"location":"python/DataAnalysis/ch08/#datetimeindex2021-01-01-0930000800-2021-01-02-0930000800_1","text":"","title":"DatetimeIndex(['2021-01-01 09:30:00+08:00', '2021-01-02 09:30:00+08:00',"},{"location":"python/DataAnalysis/ch08/#2021-01-03-0930000800-2021-01-04-0930000800_1","text":"","title":"'2021-01-03 09:30:00+08:00', '2021-01-04 09:30:00+08:00',"},{"location":"python/DataAnalysis/ch08/#2021-01-05-0930000800-2021-01-06-0930000800_1","text":"","title":"'2021-01-05 09:30:00+08:00', '2021-01-06 09:30:00+08:00'],"},{"location":"python/DataAnalysis/ch08/#dtypedatetime64ns-asiashanghai-freqnone_1","text":"#### \u65f6\u533a\u611f\u77e5\u65f6\u95f4\u6233\u5bf9\u8c61\u7684\u64cd\u4f5c \u4e0e\u65f6\u95f4\u5e8f\u5217\u548c\u65e5\u671f\u8303\u56f4\u7c7b\u4f3c\uff0c\u5355\u72ec\u7684Timestamp\u5bf9\u8c61\u4e5f\u53ef\u4ee5\u4ece\u7b80\u5355\u65f6\u95f4\u6233\u672c\u5730\u5316\u4e3a\u65f6\u533a\u611f\u77e5\u65f6\u95f4\u6233\uff0c\u5e76\u4ece\u4e00\u4e2a\u65f6\u533a\u8f6c\u6362\u4e3a\u53e6\u4e00\u4e2a\u65f6\u533a\uff1a stamp = pd.Timestamp('2021-5-1 05:30') print(stamp)","title":"dtype='datetime64[ns, Asia/Shanghai]', freq=None)"},{"location":"python/DataAnalysis/ch08/#2021-05-01-053000","text":"stamp_utc = stamp.tz_localize('utc') print(stamp_utc)","title":"2021-05-01 05:30:00"},{"location":"python/DataAnalysis/ch08/#2021-05-01-0530000000","text":"stamp_sha = stamp_utc.tz_convert('Asia/Shanghai') print(stamp_sha)","title":"2021-05-01 05:30:00+00:00"},{"location":"python/DataAnalysis/ch08/#2021-05-01-1330000800","text":"\u4e5f\u53ef\u4ee5\u5728\u521b\u5efaTimestamp\u7684\u65f6\u5019\u4f20\u9012\u4e00\u4e2a\u65f6\u533a\uff1a stamp_sha = pd.Timestamp('2021-5-1 05:30', tz='Asia/Shanghai') print(stamp_sha)","title":"2021-05-01 13:30:00+08:00"},{"location":"python/DataAnalysis/ch08/#2021-05-01-0530000800","text":"Timestamp\u5bf9\u8c61\u5185\u90e8\u5b58\u50a8\u4e86\u4e00\u4e2aUnix\u7eaa\u5143(1970\u5e741\u67081\u65e5)\u81f3\u4eca\u7684\u7eb3\u79d2\u6570\u91cfUTC\u65f6\u95f4\u6233\u6570\u503c\uff0c\u8be5\u6570\u503c\u5728\u65f6\u533a\u8f6c\u6362\u4e2d\u662f\u4e0d\u53d8\u7684\uff1a print(stamp_utc.value)","title":"2021-05-01 05:30:00+08:00"},{"location":"python/DataAnalysis/ch08/#1619847000000000000","text":"print(stamp_utc.tz_convert('Asia/Shanghai').value)","title":"1619847000000000000"},{"location":"python/DataAnalysis/ch08/#1619847000000000000_1","text":"\u5728\u4f7f\u7528pandas\u7684DateOffset\u8fdb\u884c\u65f6\u95f4\u7b97\u672f\u65f6\uff0cpandas\u5c3d\u53ef\u80fd\u9075\u4ece\u590f\u65f6\u5236\u3002 \u9996\u5148\uff0c\u6784\u9020\u8f6c\u6362\u5230DST\u4e4b\u524d\u768430\u5206\u949f\u7684\u65f6\u95f4\uff1a stamp = pd.Timestamp('2012-3-12 1:30', tz='US/Eastern') print(stamp)","title":"1619847000000000000"},{"location":"python/DataAnalysis/ch08/#2012-03-12-013000-0400","text":"print(stamp + Hour())","title":"2012-03-12 01:30:00-04:00"},{"location":"python/DataAnalysis/ch08/#2012-03-12-023000-0400","text":"\u4e4b\u540e\uff0c\u6784\u5efa\u4eceDST\u8fdb\u884c\u8f6c\u6362\u524d\u768490\u5206\u949f\uff1a stamp = pd.Timestamp('2012-11-04 0:30-04:00', tz='US/Eastern') print(stamp)","title":"2012-03-12 02:30:00-04:00"},{"location":"python/DataAnalysis/ch08/#2012-11-04-003000-0400","text":"print(stamp + 2 * Hour()) # \u53ea\u589e\u52a0\u4e86\u4e00\u5c0f\u65f6","title":"2012-11-04 00:30:00-04:00"},{"location":"python/DataAnalysis/ch08/#2012-11-04-013000-0500","text":"#### \u4e0d\u540c\u65f6\u533a\u95f4\u7684\u64cd\u4f5c \u5982\u679c\u4e24\u4e2a\u65f6\u533a\u4e0d\u540c\u7684\u65f6\u95f4\u5e8f\u5217\u9700\u8981\u8054\u5408\uff0c\u90a3\u4e48\u7ed3\u679c\u5c06\u662fUTC\u65f6\u95f4\u7684\uff0c\u56e0\u4e3a\u65f6\u95f4\u6233\u4ee5UTC\u683c\u5f0f\u5b58\u50a8\u3002 rng = pd.date_range('2021/1/1 9:30', periods=9, freq='B') ts = pd.Series(np.random.randn(len(rng)), index=rng) print(ts)","title":"2012-11-04 01:30:00-05:00"},{"location":"python/DataAnalysis/ch08/#2021-01-01-093000-0715681","text":"","title":"2021-01-01 09:30:00    0.715681"},{"location":"python/DataAnalysis/ch08/#2021-01-04-093000-0524563","text":"","title":"2021-01-04 09:30:00    0.524563"},{"location":"python/DataAnalysis/ch08/#2021-01-05-093000-0482199","text":"","title":"2021-01-05 09:30:00   -0.482199"},{"location":"python/DataAnalysis/ch08/#2021-01-06-093000-0661303","text":"","title":"2021-01-06 09:30:00   -0.661303"},{"location":"python/DataAnalysis/ch08/#2021-01-07-093000-1750010","text":"","title":"2021-01-07 09:30:00    1.750010"},{"location":"python/DataAnalysis/ch08/#2021-01-08-093000-0251478","text":"","title":"2021-01-08 09:30:00    0.251478"},{"location":"python/DataAnalysis/ch08/#2021-01-11-093000-1487268","text":"","title":"2021-01-11 09:30:00   -1.487268"},{"location":"python/DataAnalysis/ch08/#2021-01-12-093000-0224024","text":"","title":"2021-01-12 09:30:00   -0.224024"},{"location":"python/DataAnalysis/ch08/#2021-01-13-093000-1621853","text":"","title":"2021-01-13 09:30:00   -1.621853"},{"location":"python/DataAnalysis/ch08/#freq-b-dtype-float64","text":"ts1 = ts[:7].tz_localize('Europe/London') ts2 = ts1[2:].tz_convert('Europe/Moscow') result = ts1 + ts2 print(ts1)","title":"Freq: B, dtype: float64"},{"location":"python/DataAnalysis/ch08/#2021-01-01-0930000000-1393445","text":"","title":"2021-01-01 09:30:00+00:00   -1.393445"},{"location":"python/DataAnalysis/ch08/#2021-01-04-0930000000-1179614","text":"","title":"2021-01-04 09:30:00+00:00   -1.179614"},{"location":"python/DataAnalysis/ch08/#2021-01-05-0930000000-0716669","text":"","title":"2021-01-05 09:30:00+00:00    0.716669"},{"location":"python/DataAnalysis/ch08/#2021-01-06-0930000000-0485656","text":"","title":"2021-01-06 09:30:00+00:00   -0.485656"},{"location":"python/DataAnalysis/ch08/#2021-01-07-0930000000-0433000","text":"","title":"2021-01-07 09:30:00+00:00    0.433000"},{"location":"python/DataAnalysis/ch08/#2021-01-08-0930000000-1540745","text":"","title":"2021-01-08 09:30:00+00:00    1.540745"},{"location":"python/DataAnalysis/ch08/#2021-01-11-0930000000-0343751","text":"","title":"2021-01-11 09:30:00+00:00    0.343751"},{"location":"python/DataAnalysis/ch08/#dtype-float64_6","text":"print(ts2)","title":"dtype: float64"},{"location":"python/DataAnalysis/ch08/#2021-01-05-1230000300-0716669","text":"","title":"2021-01-05 12:30:00+03:00    0.716669"},{"location":"python/DataAnalysis/ch08/#2021-01-06-1230000300-0485656","text":"","title":"2021-01-06 12:30:00+03:00   -0.485656"},{"location":"python/DataAnalysis/ch08/#2021-01-07-1230000300-0433000","text":"","title":"2021-01-07 12:30:00+03:00    0.433000"},{"location":"python/DataAnalysis/ch08/#2021-01-08-1230000300-1540745","text":"","title":"2021-01-08 12:30:00+03:00    1.540745"},{"location":"python/DataAnalysis/ch08/#2021-01-11-1230000300-0343751","text":"","title":"2021-01-11 12:30:00+03:00    0.343751"},{"location":"python/DataAnalysis/ch08/#dtype-float64_7","text":"print(result)","title":"dtype: float64"},{"location":"python/DataAnalysis/ch08/#2021-01-01-0930000000-nan","text":"","title":"2021-01-01 09:30:00+00:00         NaN"},{"location":"python/DataAnalysis/ch08/#2021-01-04-0930000000-nan","text":"","title":"2021-01-04 09:30:00+00:00         NaN"},{"location":"python/DataAnalysis/ch08/#2021-01-05-0930000000-1433337","text":"","title":"2021-01-05 09:30:00+00:00    1.433337"},{"location":"python/DataAnalysis/ch08/#2021-01-06-0930000000-0971312","text":"","title":"2021-01-06 09:30:00+00:00   -0.971312"},{"location":"python/DataAnalysis/ch08/#2021-01-07-0930000000-0866000","text":"","title":"2021-01-07 09:30:00+00:00    0.866000"},{"location":"python/DataAnalysis/ch08/#2021-01-08-0930000000-3081489","text":"","title":"2021-01-08 09:30:00+00:00    3.081489"},{"location":"python/DataAnalysis/ch08/#2021-01-11-0930000000-0687502","text":"","title":"2021-01-11 09:30:00+00:00    0.687502"},{"location":"python/DataAnalysis/ch08/#dtype-float64_8","text":"### \u65f6\u95f4\u533a\u95f4\u548c\u533a\u95f4\u7b97\u672f from datetime import datetime, timedelta import pandas as pd import numpy as np from pandas.tseries.offsets import Hour, Minute, Day, MonthEnd import pytz \u65f6\u95f4\u533a\u95f4\u8868\u793a\u7684\u662f\u65f6\u95f4\u8303\u56f4\u901a\u8fc7\u539f\u7d22\u5f151~202\uff0c\u628ayear\u548cquarter\u8054\u5408\u8d77\u6765\uff0c\u751f\u6210\u65b0\u7d22\u5f15\uff0c\u5e76\u66ff\u6362\u539f\u7d22\u5f15\uff0c\u6bd4\u5982\u4e00\u4e9b\u5929\u3001\u4e00\u4e9b\u6708\u3001\u4e00\u4e9b\u5b63\u5ea6\u6216\u8005\u662f\u4e00\u4e9b\u5e74\u3002\\ Period\u7c7b\u8868\u793a\u7684\u6b63\u662f\u8fd9\u79cd\u6570\u636e\u7c7b\u578b\uff0c\u9700\u8981\u4e00\u4e2a\u5b57\u7b26\u4e32\u6216\u6570\u5b57\u4ee5\u53ca\u9891\u7387\u3002\\ \u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0cPeriod\u5bf9\u8c61\u8868\u793a\u7684\u662f\u4ece2007\u5e741\u67081\u65e5\u52302007\u5e7412\u670831\u65e5\uff08\u5305\u542b\u5728\u5185\uff09\u7684\u65f6\u95f4\u6bb5\u3002\\ \u5728\u65f6\u95f4\u6bb5\u4e0a\u589e\u52a0\u6216\u51cf\u53bb\u6574\u6570\u53ef\u4ee5\u65b9\u4fbf\u5730\u6839\u636e\u5b83\u4eec\u7684\u9891\u7387\u8fdb\u884c\u79fb\u4f4d\u3002 p = pd.Period(2020, freq='A-DEC') print(p)","title":"dtype: float64"},{"location":"python/DataAnalysis/ch08/#2020","text":"print(p + 5)","title":"2020"},{"location":"python/DataAnalysis/ch08/#2025","text":"print(p - 5)","title":"2025"},{"location":"python/DataAnalysis/ch08/#2015","text":"\u5982\u679c\u4e24\u4e2a\u533a\u95f4\u62e5\u6709\u76f8\u540c\u7684\u9891\u7387\uff0c\u5219\u5b83\u4eec\u7684\u5dee\u662f\u5b83\u4eec\u4e4b\u95f4\u7684\u5355\u4f4d\u6570\u3002 p1 = pd.Period(2020, freq='A-DEC') p2 = pd.Period(2010, freq='A-DEC') print(p1 - p2)","title":"2015"},{"location":"python/DataAnalysis/ch08/#10-yearends-month12","text":"p1 = pd.Period(2020, freq='Q-DEC') p2 = pd.Period(2010, freq='Q-DEC') print(p1 - p2)","title":"&lt;10 * YearEnds: month=12&gt;"},{"location":"python/DataAnalysis/ch08/#40-quarterends-startingmonth12","text":"\u4f7f\u7528period_range\u51fd\u6570\u53ef\u4ee5\u6784\u9020\u89c4\u5219\u533a\u95f4\u5e8f\u5217\u3002\\ PeriodIndex\u7c7b\u5b58\u50a8\u7684\u662f\u533a\u95f4\u7684\u5e8f\u5217\uff0c\u53ef\u4ee5\u4f5c\u4e3a\u4efb\u610fpandas\u6570\u636e\u7ed3\u6784\u7684\u8f74\u7d22\u5f15\u3002 data = np.random.randn(6) strings = ['2021Q1', '2021Q2', '2021Q3', '2021Q4', '2022Q1', '2022Q2'] rng = pd.period_range('2001-1-1', '2001-6-30', freq='M') ts = pd.Series(data, index=rng) print(ts)","title":"&lt;40 * QuarterEnds: startingMonth=12&gt;"},{"location":"python/DataAnalysis/ch08/#2001-01-0481408","text":"","title":"2001-01   -0.481408"},{"location":"python/DataAnalysis/ch08/#2001-02-0297590","text":"","title":"2001-02   -0.297590"},{"location":"python/DataAnalysis/ch08/#2001-03-0860354","text":"","title":"2001-03   -0.860354"},{"location":"python/DataAnalysis/ch08/#2001-04-1281540","text":"","title":"2001-04    1.281540"},{"location":"python/DataAnalysis/ch08/#2001-05-1036551","text":"","title":"2001-05    1.036551"},{"location":"python/DataAnalysis/ch08/#2001-06-0522592","text":"","title":"2001-06   -0.522592"},{"location":"python/DataAnalysis/ch08/#freq-m-dtype-float64_7","text":"rng = pd.PeriodIndex(strings, freq='Q-DEC') # \u5b57\u7b26\u4e32\u6570\u7ec4\u4e5f\u53ef\u4ee5\u4f7f\u7528PeriodIndex\u7c7b ts = pd.Series(data, index=rng) print(ts)","title":"Freq: M, dtype: float64"},{"location":"python/DataAnalysis/ch08/#2021q1-2077200","text":"","title":"2021Q1   -2.077200"},{"location":"python/DataAnalysis/ch08/#2021q2-0948796","text":"","title":"2021Q2   -0.948796"},{"location":"python/DataAnalysis/ch08/#2021q3-1104737","text":"","title":"2021Q3   -1.104737"},{"location":"python/DataAnalysis/ch08/#2021q4-0090281","text":"","title":"2021Q4    0.090281"},{"location":"python/DataAnalysis/ch08/#2022q1-0431517","text":"","title":"2022Q1    0.431517"},{"location":"python/DataAnalysis/ch08/#2022q2-1537045","text":"","title":"2022Q2    1.537045"},{"location":"python/DataAnalysis/ch08/#freq-q-dec-dtype-float64","text":"#### \u533a\u95f4\u9891\u7387\u8f6c\u6362 \u4f7f\u7528asfreq\u53ef\u4ee5\u5c06\u533a\u95f4\u548cPeriodIndex\u5bf9\u8c61\u8f6c\u6362\u4e3a\u5176\u4ed6\u7684\u9891\u7387\u3002\\ \u4f8b\u5982\uff0c\u5047\u8bbe\u6211\u4eec\u6709\u4e00\u4e2a\u5e74\u5ea6\u533a\u95f4\uff0c\u5e76\u4e14\u60f3\u8981\u5728\u4e00\u5e74\u7684\u5f00\u59cb\u6216\u7ed3\u675f\u65f6\u5c06\u5176\u8f6c\u6362\u4e3a\u6708\u5ea6\u533a\u95f4\u3002\\ \u53ef\u4ee5\u5c06Period('2020', 'A-DEC')\u770b\u4f5c\u4e00\u6bb5\u65f6\u95f4\u4e2d\u7684\u4e00\u79cd\u6e38\u6807\uff0c\u5c06\u65f6\u95f4\u6309\u6708\u4efd\u5212\u5206\u3002 p = pd.Period(2020, freq='A-DEC') print(p.asfreq('M', how='start'))","title":"Freq: Q-DEC, dtype: float64"},{"location":"python/DataAnalysis/ch08/#2020-01","text":"print(p.asfreq('M', how='end'))","title":"2020-01"},{"location":"python/DataAnalysis/ch08/#2020-12","text":"\u5982\u679c\u8d22\u5e74\u7ed3\u675f\u4e0d\u572812\u6708\uff0c\u5219\u6bcf\u6708\u5206\u671f\u4f1a\u81ea\u52a8\u8c03\u6574\u3002\\ \u6309\u5f53\u5e74\u8d22\u5e74\u7ed3\u675f\u8ba1\u7b97\uff0c\u8d77\u59cb\u5e74\u4efd\u5c31\u662f\u4e0a\u4e00\u5e74\u4e86\u3002 p = pd.Period(2020, freq='A-JUN') print(p.asfreq('M', how='start'))","title":"2020-12"},{"location":"python/DataAnalysis/ch08/#2019-07","text":"print(p.asfreq('M', how='end'))","title":"2019-07"},{"location":"python/DataAnalysis/ch08/#2020-06","text":"\u5f53\u4ece\u9ad8\u9891\u7387\u5411\u4f4e\u9891\u7387\u8f6c\u6362\u65f6\uff0cpandas\u6839\u636e\u5b50\u533a\u95f4\u7684\"\u6240\u5c5e\"\u6765\u51b3\u5b9a\u7236\u533a\u95f4\u3002\\ \u4f8b\u5982\uff0c\u5728A-JUN\u9891\u7387\u4e2d\uff0cAug-2020\u662f2020\u533a\u95f4\u7684\u4e00\u90e8\u5206\uff1a print(p.asfreq('A-JUN')) 2020\u901a\u8fc7\u539f\u7d22\u5f151~202\uff0c\u628ayear\u548cquarter\u8054\u5408\u8d77\u6765\uff0c\u751f\u6210\u65b0\u7d22\u5f15\uff0c\u5e76\u66ff\u6362\u539f\u7d22\u5f15 \u5b8c\u6574\u7684PeriodIndex\u5bf9\u8c61\u6216\u65f6\u95f4\u5e8f\u5217\u53ef\u4ee5\u6309\u7167\u76f8\u540c\u7684\u8bed\u4e49\u8fdb\u884c\u8f6c\u6362\uff1a rng = pd.period_range('2018', '2021', freq='A-DEC') data = np.random.randn(len(rng)) ts = pd.Series(data, index=rng) print(ts)","title":"2020-06"},{"location":"python/DataAnalysis/ch08/#2018-0221634","text":"","title":"2018    0.221634"},{"location":"python/DataAnalysis/ch08/#2019-0392724","text":"","title":"2019   -0.392724"},{"location":"python/DataAnalysis/ch08/#2020-0355022","text":"","title":"2020   -0.355022"},{"location":"python/DataAnalysis/ch08/#2021-0114000","text":"","title":"2021    0.114000"},{"location":"python/DataAnalysis/ch08/#freq-a-dec-dtype-float64","text":"\u4e0b\u9762\u5e74\u5ea6\u533a\u95f4\u5c06\u901a\u8fc7asfreq\u88ab\u66ff\u6362\u4e3a\u5bf9\u5e94\u4e8e\u6bcf\u4e2a\u5e74\u5ea6\u533a\u95f4\u5185\u7684\u7b2c\u4e00\u4e2a\u6708\u7684\u6708\u5ea6\u533a\u95f4\u3002 print(ts.asfreq('M', how='start'))","title":"Freq: A-DEC, dtype: float64"},{"location":"python/DataAnalysis/ch08/#2018-01-0681874","text":"","title":"2018-01    0.681874"},{"location":"python/DataAnalysis/ch08/#2019-01-1006585","text":"","title":"2019-01   -1.006585"},{"location":"python/DataAnalysis/ch08/#2020-01-0619142","text":"","title":"2020-01   -0.619142"},{"location":"python/DataAnalysis/ch08/#2021-01-1445820","text":"","title":"2021-01    1.445820"},{"location":"python/DataAnalysis/ch08/#freq-m-dtype-float64_8","text":"\u5982\u679c\u6211\u4eec\u60f3\u8981\u6bcf\u5e74\u6700\u540e\u4e00\u4e2a\u5de5\u4f5c\u65e5\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u2019B\u2019\u9891\u7387\u6765\u8868\u793a\u6211\u4eec\u60f3\u8981\u7684\u662f\u533a\u95f4\u7684\u672b\u7aef\u3002 print(ts.asfreq('B', how='end'))","title":"Freq: M, dtype: float64"},{"location":"python/DataAnalysis/ch08/#2018-12-31-1520316","text":"","title":"2018-12-31   -1.520316"},{"location":"python/DataAnalysis/ch08/#2019-12-31-0425544","text":"","title":"2019-12-31   -0.425544"},{"location":"python/DataAnalysis/ch08/#2020-12-31-0658073","text":"","title":"2020-12-31   -0.658073"},{"location":"python/DataAnalysis/ch08/#2021-12-31-1206881","text":"","title":"2021-12-31    1.206881"},{"location":"python/DataAnalysis/ch08/#freq-b-dtype-float64_1","text":"#### \u5b63\u5ea6\u533a\u95f4\u9891\u7387 \u5b63\u5ea6\u6570\u636e\u662f\u4f1a\u8ba1\u3001\u91d1\u878d\u548c\u5176\u4ed6\u9886\u57df\u7684\u6807\u51c6\u3002\\ \u5f88\u591a\u5b63\u5ea6\u6570\u636e\u662f\u5728\u8d22\u5e74\u7ed3\u5c3e\u62a5\u544a\u7684\uff0c\u901a\u5e38\u662f\u4e00\u5e7412\u4e2a\u6708\u4e2d\u7684\u6700\u540e\u4e00\u4e2a\u65e5\u5386\u65e5\u6216\u5de5\u4f5c\u65e5\u3002\\ pandas\u652f\u6301\u6240\u6709\u7684\u53ef\u80fd\u768412\u4e2a\u5b63\u5ea6\u9891\u7387\u4eceQ-JAN\u5230Q-DEC\uff1a \u4e0b\u4f8b\u4e2d\uff0c\u8d22\u5e74\u7ed3\u675f\u4e8e1\u6708\uff0c2020Q4\u884c\u65f6\u95f4\u4e3a\u4e0a\u4e00\u5e7411\u6708\u81f3\u5f53\u5e741\u6708\u3002\u53ef\u4ee5\u901a\u8fc7\u8f6c\u6362\u4e3a\u6bcf\u65e5\u9891\u7387\uff08asfreq\uff09\u8fdb\u884c\u68c0\u67e5\u3002 p = pd.Period('2020Q4', freq='Q-JAN') print(p)","title":"Freq: B, dtype: float64"},{"location":"python/DataAnalysis/ch08/#2020q4","text":"print(p.asfreq('D', 'start'))","title":"2020Q4"},{"location":"python/DataAnalysis/ch08/#2019-11-01","text":"print(p.asfreq('D', 'end'))","title":"2019-11-01"},{"location":"python/DataAnalysis/ch08/#2020-01-31","text":"\u5047\u5982\u8d22\u5e74\u7ed3\u675f\u4e8e2\u6708\uff0c2020Q4\u884c\u65f6\u95f4\u4e3a\u4e0a\u4e00\u5e7412\u6708\u81f3\u5f53\u5e742\u6708\u3002 p = pd.Period('2020Q4', freq='Q-FEB') print(p)","title":"2020-01-31"},{"location":"python/DataAnalysis/ch08/#2020q4_1","text":"print(p.asfreq('D', 'start'))","title":"2020Q4"},{"location":"python/DataAnalysis/ch08/#2019-11-01_1","text":"print(p.asfreq('D', 'end'))","title":"2019-11-01"},{"location":"python/DataAnalysis/ch08/#2020-01-31_1","text":"\u5047\u5982\u8d22\u5e74\u7ed3\u675f\u4e8e4\u6708\uff0c2020Q4\u884c\u65f6\u95f4\u4e3a\u4e0a\u4e00\u5e7412\u6708\u81f3\u5f53\u5e742\u6708\u3002 p = pd.Period('2020Q4', freq='Q-APR') print(p)","title":"2020-01-31"},{"location":"python/DataAnalysis/ch08/#2020q4_2","text":"print(p.asfreq('D', 'start'))","title":"2020Q4"},{"location":"python/DataAnalysis/ch08/#2020-02-01","text":"print(p.asfreq('D', 'end'))","title":"2020-02-01"},{"location":"python/DataAnalysis/ch08/#2020-04-30","text":"\u53ef\u4ee5\u5bf9\u533a\u95f4\u6570\u636e\u505a\u7b97\u672f\u64cd\u4f5c\u3002\u4f8b\u5982\uff0c\u8981\u83b7\u53d6\u5728\u5b63\u5ea6\u5012\u6570\u7b2c\u4e8c\u4e2a\u5de5\u4f5c\u65e5\u4e0b\u53484\u70b9\u7684\u65f6\u95f4\u6233\uff0c\u53ef\u4ee5\u8fd9\u4e48\u505a\uff1a \u7591\u95ee\uff1a\u8fd9\u91cc\u7684\u53c2\u6570e\u4ee3\u8868\u4ec0\u4e48 ??? p4pm = (p.asfreq('B', 'e') - 1).asfreq('T', 's') + 16 * 60 print(p4pm)","title":"2020-04-30"},{"location":"python/DataAnalysis/ch08/#2020-04-29-1600","text":"print(p4pm.to_timestamp())","title":"2020-04-29 16:00"},{"location":"python/DataAnalysis/ch08/#2020-04-29-160000","text":"\u53ef\u4ee5\u4f7f\u7528peroid_range\u751f\u6210\u5b63\u5ea6\u5e8f\u5217\u3002\u5b83\u7684\u7b97\u672f\u4e5f\u662f\u4e00\u6837\u7684\uff1a rng = pd.period_range('2000Q3', '2001Q4', freq='Q-JAN') ts = pd.Series(np.arange(len(rng)), index=rng) print(ts)","title":"2020-04-29 16:00:00"},{"location":"python/DataAnalysis/ch08/#2000q3-0","text":"","title":"2000Q3    0"},{"location":"python/DataAnalysis/ch08/#2000q4-1","text":"","title":"2000Q4    1"},{"location":"python/DataAnalysis/ch08/#2001q1-2","text":"","title":"2001Q1    2"},{"location":"python/DataAnalysis/ch08/#2001q2-3","text":"","title":"2001Q2    3"},{"location":"python/DataAnalysis/ch08/#2001q3-4","text":"","title":"2001Q3    4"},{"location":"python/DataAnalysis/ch08/#2001q4-5","text":"","title":"2001Q4    5"},{"location":"python/DataAnalysis/ch08/#freq-q-jan-dtype-int64","text":"new_rng = (rng.asfreq('B', 'e') - 1).asfreq('T', 's') + 16 * 60 ts.index = new_rng.to_timestamp() print(ts)","title":"Freq: Q-JAN, dtype: int64"},{"location":"python/DataAnalysis/ch08/#1999-10-28-160000-0","text":"","title":"1999-10-28 16:00:00    0"},{"location":"python/DataAnalysis/ch08/#2000-01-28-160000-1","text":"","title":"2000-01-28 16:00:00    1"},{"location":"python/DataAnalysis/ch08/#2000-04-27-160000-2","text":"","title":"2000-04-27 16:00:00    2"},{"location":"python/DataAnalysis/ch08/#2000-07-28-160000-3","text":"","title":"2000-07-28 16:00:00    3"},{"location":"python/DataAnalysis/ch08/#2000-10-30-160000-4","text":"","title":"2000-10-30 16:00:00    4"},{"location":"python/DataAnalysis/ch08/#2001-01-30-160000-5","text":"","title":"2001-01-30 16:00:00    5"},{"location":"python/DataAnalysis/ch08/#dtype-int64","text":"#### \u5c06\u65f6\u95f4\u6233\u8f6c\u6362\u4e3a\u533a\u95f4\uff08\u4ee5\u53ca\u9006\u8f6c\u6362\uff09 \u901a\u8fc7\u65f6\u95f4\u6233\u7d22\u5f15\u7684Series\u548cDataFrame\u53ef\u4ee5\u88abto_period\u65b9\u6cd5\u8f6c\u6362\u4e3a\u533a\u95f4\uff1a rng = pd.date_range('2020-01-01', periods=3, freq='M') ts = pd.Series(np.random.randn(3), index=rng) print(ts)","title":"dtype: int64"},{"location":"python/DataAnalysis/ch08/#2020-01-31-0567097","text":"","title":"2020-01-31   -0.567097"},{"location":"python/DataAnalysis/ch08/#2020-02-29-0634521202yearquarter2","text":"","title":"2020-02-29    0.63452\u901a\u8fc7\u539f\u7d22\u5f151~202\uff0c\u628ayear\u548cquarter\u8054\u5408\u8d77\u6765\uff0c\u751f\u6210\u65b0\u7d22\u5f15\uff0c\u5e76\u66ff\u6362\u539f\u7d22\u5f152"},{"location":"python/DataAnalysis/ch08/#2020-03-31-0297777","text":"","title":"2020-03-31    0.297777"},{"location":"python/DataAnalysis/ch08/#freq-m-dtype-float64_9","text":"pts = ts.to_period() print(pts)","title":"Freq: M, dtype: float64"},{"location":"python/DataAnalysis/ch08/#2020-01-0567097","text":"","title":"2020-01   -0.567097"},{"location":"python/DataAnalysis/ch08/#2020-02-0634522","text":"","title":"2020-02    0.634522"},{"location":"python/DataAnalysis/ch08/#2020-03-0297777","text":"","title":"2020-03    0.297777"},{"location":"python/DataAnalysis/ch08/#freq-m-dtype-float64_10","text":"\u7531\u4e8e\u533a\u95f4\u662f\u975e\u91cd\u53e0\u65f6\u95f4\u8303\u56f4\uff0c\u4e00\u4e2a\u65f6\u95f4\u6233\u53ea\u80fd\u5c5e\u4e8e\u7ed9\u5b9a\u9891\u7387\u7684\u5355\u4e2a\u533a\u95f4\u3002\\ \u5c3d\u7ba1\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u6839\u636e\u65f6\u95f4\u6233\u63a8\u65ad\u51fa\u65b0PeriodIndex\u7684\u9891\u7387\uff0c\u4f46\u53ef\u4ee5\u6307\u5b9a\u4efb\u4f55\u60f3\u8981\u7684\u9891\u7387\u3002\\ \u5728\u7ed3\u679c\u4e2d\u5305\u542b\u91cd\u590d\u7684\u533a\u95f4\u4e5f\u662f\u6ca1\u6709\u95ee\u9898\u7684\u3002 rng = pd.date_range('2020-01-01', periods=6, freq='D') ts = pd.Series(np.random.randn(6), index=rng) print(ts)","title":"Freq: M, dtype: float64"},{"location":"python/DataAnalysis/ch08/#2020-01-01-0111287","text":"","title":"2020-01-01   -0.111287"},{"location":"python/DataAnalysis/ch08/#2020-01-02-1442234","text":"","title":"2020-01-02    1.442234"},{"location":"python/DataAnalysis/ch08/#2020-01-03-0767553","text":"","title":"2020-01-03   -0.767553"},{"location":"python/DataAnalysis/ch08/#2020-01-04-0265064","text":"","title":"2020-01-04   -0.265064"},{"location":"python/DataAnalysis/ch08/#2020-01-05-1200312","text":"","title":"2020-01-05    1.200312"},{"location":"python/DataAnalysis/ch08/#2020-01-06-1782557","text":"","title":"2020-01-06   -1.782557"},{"location":"python/DataAnalysis/ch08/#freq-d-dtype-float64_3","text":"ts_m = ts.to_period('M') # \u6307\u5b9aperiod\u7684\u9891\u7387\uff08M\uff09,\u8f93\u51fa\u7ed3\u679c\u5305\u542b\u91cd\u590dperiod print(ts_m)","title":"Freq: D, dtype: float64"},{"location":"python/DataAnalysis/ch08/#2020-01-0111287","text":"","title":"2020-01   -0.111287"},{"location":"python/DataAnalysis/ch08/#2020-01-1442234","text":"","title":"2020-01    1.442234"},{"location":"python/DataAnalysis/ch08/#2020-01-0767553","text":"","title":"2020-01   -0.767553"},{"location":"python/DataAnalysis/ch08/#2020-01-0265064","text":"","title":"2020-01   -0.265064"},{"location":"python/DataAnalysis/ch08/#2020-01-1200312","text":"","title":"2020-01    1.200312"},{"location":"python/DataAnalysis/ch08/#2020-01-1782557","text":"","title":"2020-01   -1.782557"},{"location":"python/DataAnalysis/ch08/#freq-m-dtype-float64_11","text":"\u4f7f\u7528to_timestamp\u53ef\u4ee5\u5c06\u533a\u95f4\u518d\u8f6c\u6362\u4e3a\u65f6\u95f4\u6233\uff1a print(ts_m.to_timestamp(how='end'))","title":"Freq: M, dtype: float64"},{"location":"python/DataAnalysis/ch08/#2020-01-31-235959999999999-0111287","text":"","title":"2020-01-31 23:59:59.999999999   -0.111287"},{"location":"python/DataAnalysis/ch08/#2020-01-31-235959999999999-1442234","text":"","title":"2020-01-31 23:59:59.999999999    1.442234"},{"location":"python/DataAnalysis/ch08/#2020-01-31-235959999999999-0767553","text":"","title":"2020-01-31 23:59:59.999999999   -0.767553"},{"location":"python/DataAnalysis/ch08/#2020-01-31-235959999999999-0265064","text":"","title":"2020-01-31 23:59:59.999999999   -0.265064"},{"location":"python/DataAnalysis/ch08/#2020-01-31-235959999999999-1200312","text":"","title":"2020-01-31 23:59:59.999999999    1.200312"},{"location":"python/DataAnalysis/ch08/#2020-01-31-235959999999999-1782557","text":"","title":"2020-01-31 23:59:59.999999999   -1.782557"},{"location":"python/DataAnalysis/ch08/#dtype-float64_9","text":"print(ts_m.to_timestamp(how='start'))","title":"dtype: float64"},{"location":"python/DataAnalysis/ch08/#2020-01-01-0111287_1","text":"","title":"2020-01-01   -0.111287"},{"location":"python/DataAnalysis/ch08/#2020-01-01-1442234","text":"","title":"2020-01-01    1.442234"},{"location":"python/DataAnalysis/ch08/#2020-01-01-0767553","text":"","title":"2020-01-01   -0.767553"},{"location":"python/DataAnalysis/ch08/#2020-01-01-0265064","text":"","title":"2020-01-01   -0.265064"},{"location":"python/DataAnalysis/ch08/#2020-01-01-1200312","text":"","title":"2020-01-01    1.200312"},{"location":"python/DataAnalysis/ch08/#2020-01-01-1782557","text":"","title":"2020-01-01   -1.782557"},{"location":"python/DataAnalysis/ch08/#dtype-float64_10","text":"#### \u4ece\u6570\u7ec4\u751f\u6210PeriodIndex \u56fa\u5b9a\u9891\u7387\u6570\u636e\u96c6\u6709\u65f6\u5b58\u50a8\u5728\u8de8\u8d8a\u591a\u5217\u7684\u65f6\u95f4\u8303\u56f4\u4fe1\u606f\u4e2d\u3002\\ \u4f8b\u5982\uff0c\u5728\u8fd9\u4e2a\u5b8f\u89c2\u7ecf\u6d4e\u6570\u636e\u96c6\u4e2d\uff0c\u5e74\u4efd\u548c\u5b63\u5ea6\u5728\u4e0d\u540c\u5217\u4e2d\uff1a data = pd.read_csv('../examples/macrodata.csv') print(data.head(5))","title":"dtype: float64"},{"location":"python/DataAnalysis/ch08/#year-quarter-realgdp-realcons-unemp-pop-infl-realint","text":"","title":"year  quarter   realgdp  realcons  ...  unemp      pop  infl  realint"},{"location":"python/DataAnalysis/ch08/#0-19590-10-2710349-17074-58-177146-000-000","text":"","title":"0  1959.0      1.0  2710.349    1707.4  ...    5.8  177.146  0.00     0.00"},{"location":"python/DataAnalysis/ch08/#1-19590-20-2778801-17337-51-177830-234-074","text":"","title":"1  1959.0      2.0  2778.801    1733.7  ...    5.1  177.830  2.34     0.74"},{"location":"python/DataAnalysis/ch08/#2-19590-30-2775488-17518-53-178657-274-109","text":"","title":"2  1959.0      3.0  2775.488    1751.8  ...    5.3  178.657  2.74     1.09"},{"location":"python/DataAnalysis/ch08/#3-19590-40-2785204-17537-56-179386-027-406","text":"","title":"3  1959.0      4.0  2785.204    1753.7  ...    5.6  179.386  0.27     4.06"},{"location":"python/DataAnalysis/ch08/#4-19600-10-2847699-17705-52-180007-231-119","text":"print(data.year)","title":"4  1960.0      1.0  2847.699    1770.5  ...    5.2  180.007  2.31     1.19"},{"location":"python/DataAnalysis/ch08/#0-19590","text":"","title":"0      1959.0"},{"location":"python/DataAnalysis/ch08/#1-19590","text":"","title":"1      1959.0"},{"location":"python/DataAnalysis/ch08/#2-19590","text":"","title":"2      1959.0"},{"location":"python/DataAnalysis/ch08/#3-19590","text":"","title":"3      1959.0"},{"location":"python/DataAnalysis/ch08/#4-19600","text":"","title":"4      1960.0"},{"location":"python/DataAnalysis/ch08/#_9","text":"","title":"..."},{"location":"python/DataAnalysis/ch08/#198-20080","text":"","title":"198    2008.0"},{"location":"python/DataAnalysis/ch08/#199-20080","text":"","title":"199    2008.0"},{"location":"python/DataAnalysis/ch08/#200-20090","text":"","title":"200    2009.0"},{"location":"python/DataAnalysis/ch08/#201-20090","text":"","title":"201    2009.0"},{"location":"python/DataAnalysis/ch08/#202-20090","text":"","title":"202    2009.0"},{"location":"python/DataAnalysis/ch08/#name-year-length-203-dtype-float64","text":"print(data.quarter)","title":"Name: year, Length: 203, dtype: float64"},{"location":"python/DataAnalysis/ch08/#0-10","text":"","title":"0      1.0"},{"location":"python/DataAnalysis/ch08/#1-20","text":"","title":"1      2.0"},{"location":"python/DataAnalysis/ch08/#2-30","text":"","title":"2      3.0"},{"location":"python/DataAnalysis/ch08/#3-40","text":"","title":"3      4.0"},{"location":"python/DataAnalysis/ch08/#4-10","text":"","title":"4      1.0"},{"location":"python/DataAnalysis/ch08/#_10","text":"","title":"..."},{"location":"python/DataAnalysis/ch08/#198-30","text":"","title":"198    3.0"},{"location":"python/DataAnalysis/ch08/#199-40","text":"","title":"199    4.0"},{"location":"python/DataAnalysis/ch08/#200-10","text":"","title":"200    1.0"},{"location":"python/DataAnalysis/ch08/#201-20","text":"","title":"201    2.0"},{"location":"python/DataAnalysis/ch08/#202-30","text":"","title":"202    3.0"},{"location":"python/DataAnalysis/ch08/#name-quarter-length-203-dtype-float64","text":"\u901a\u8fc7\u5c06\u8fd9\u4e9b\u6570\u7ec4\u548c\u9891\u7387\u4f20\u9012\u7ed9PeriodIndex\uff0c\u53ef\u4ee5\u8054\u5408\u5f62\u6210DataFrame\u7684\u7d22\u5f15 index = pd.PeriodIndex(year=data.year, quarter=data.quarter, freq='Q-DEC') print(index)","title":"Name: quarter, Length: 203, dtype: float64"},{"location":"python/DataAnalysis/ch08/#periodindex1959q1-1959q2-1959q3-1959q4-1960q1-1960q2","text":"","title":"PeriodIndex(['1959Q1', '1959Q2', '1959Q3', '1959Q4', '1960Q1', '1960Q2',"},{"location":"python/DataAnalysis/ch08/#1960q3-1960q4-1961q1-1961q2","text":"","title":"'1960Q3', '1960Q4', '1961Q1', '1961Q2',"},{"location":"python/DataAnalysis/ch08/#_11","text":"","title":"..."},{"location":"python/DataAnalysis/ch08/#2007q2-2007q3-2007q4-2008q1-2008q2-2008q3","text":"","title":"'2007Q2', '2007Q3', '2007Q4', '2008Q1', '2008Q2', '2008Q3',"},{"location":"python/DataAnalysis/ch08/#2008q4-2009q1-2009q2-2009q3","text":"","title":"'2008Q4', '2009Q1', '2009Q2', '2009Q3'],"},{"location":"python/DataAnalysis/ch08/#dtypeperiodq-dec-length203","text":"data.index = index # \u901a\u8fc7\u539f\u7d22\u5f151~202\uff0c\u628ayear\u548cquarter\u8054\u5408\u8d77\u6765\uff0c\u751f\u6210\u65b0\u7d22\u5f15\uff0c\u5e76\u66ff\u6362\u539f\u7d22\u5f15 print(data.infl)","title":"dtype='period[Q-DEC]', length=203)"},{"location":"python/DataAnalysis/ch08/#1959q1-000","text":"","title":"1959Q1    0.00"},{"location":"python/DataAnalysis/ch08/#1959q2-234","text":"","title":"1959Q2    2.34"},{"location":"python/DataAnalysis/ch08/#1959q3-274","text":"","title":"1959Q3    2.74"},{"location":"python/DataAnalysis/ch08/#1959q4-027","text":"","title":"1959Q4    0.27"},{"location":"python/DataAnalysis/ch08/#1960q1-231","text":"","title":"1960Q1    2.31"},{"location":"python/DataAnalysis/ch08/#_12","text":"","title":"..."},{"location":"python/DataAnalysis/ch08/#2008q3-316","text":"","title":"2008Q3   -3.16"},{"location":"python/DataAnalysis/ch08/#2008q4-879","text":"","title":"2008Q4   -8.79"},{"location":"python/DataAnalysis/ch08/#2009q1-094","text":"","title":"2009Q1    0.94"},{"location":"python/DataAnalysis/ch08/#2009q2-337","text":"","title":"2009Q2    3.37"},{"location":"python/DataAnalysis/ch08/#2009q3-356","text":"","title":"2009Q3    3.56"},{"location":"python/DataAnalysis/ch08/#freq-q-dec-name-infl-length-203-dtype-float64","text":"### \u91cd\u65b0\u91c7\u6837\u9891\u7387\u8f6c\u6362 import pandas as pd import numpy as np from pandas.tseries.frequencies import to_offset \u91cd\u65b0\u91c7\u6837\u662f\u6307\u5c06\u65f6\u95f4\u5e8f\u5217\u4ece\u4e00\u4e2a\u9891\u7387\u8f6c\u6362\u4e3a\u53e6\u4e00\u4e2a\u9891\u7387\u7684\u8fc7\u7a0b\u3002\\ \u5c06\u66f4\u9ad8\u9891\u7387\u7684\u6570\u636e\u805a\u5408\u5230\u4f4e\u9891\u7387\u88ab\u79f0\u4e3a\u5411\u4e0b\u91c7\u6837\uff0c\u800c\u4ece\u4f4e\u9891\u7387\u8f6c\u6362\u5230\u9ad8\u9891\u7387\u79f0\u4e3a\u5411\u4e0a\u91c7\u6837\u3002\\ \u5e76\u4e0d\u662f\u6240\u6709\u7684\u91cd\u65b0\u91c7\u6837\u90fd\u5c5e\u4e8e\u4e0a\u9762\u8bf4\u7684\u4e24\u7c7b\uff1b# \u4f8b\u5982\uff0c\u5c06W-WED\uff08weekly on Wednesday\uff0c\u6bcf\u5468\u4e09\uff09\u8f6c\u6362\u5230W-FRI\uff08\u6bcf\u5468\u4e94\uff09\u65e2\u4e0d\u662f\u5411\u4e0a\u91c7\u6837\u4e5f\u4e0d\u662f\u5411\u4e0b\u91c7\u6837\u3002 pandas\u5bf9\u8c61\u90fd\u914d\u6709resample\u65b9\u6cd5\uff0c\u8be5\u65b9\u6cd5\u662f\u6240\u6709\u9891\u7387\u8f6c\u6362\u7684\u5de5\u5177\u51fd\u6570\u3002\\ resample\u62e5\u6709\u7c7b\u4f3c\u4e8egroupby\u7684API\uff1b\\ \u8c03\u7528resample\u5bf9\u6570\u636e\u5206\u7ec4\uff0c\u4e4b\u540e\u518d\u8c03\u7528\u805a\u5408\u51fd\u6570\uff1a #### resample\u65b9\u6cd5\u53c2\u6570 * freq: \u8868\u793a\u91cd\u91c7\u6837\u9891\u7387\uff0c\u4f8b\u5982\u2018M'\u3001\u20185min'\uff0cSecond(15) * how='mean': \u7528\u4e8e\u4ea7\u751f\u805a\u5408\u503c\u7684\u51fd\u6570\u540d\u6216\u6570\u7ec4\u51fd\u6570\uff0c\u4f8b\u5982\u2018mean'\u3001\u2018ohlc'\u3001np.max\u7b49\uff0c\u9ed8\u8ba4\u662f\u2018mean'\uff0c\u5176\u4ed6\u5e38\u7528\u7684\u503c\u7531\uff1a\u2018first'\u3001\u2018last'\u3001\u2018median'\u3001\u2018max'\u3001\u2018min' * axis=0: \u9ed8\u8ba4\u662f\u7eb5\u8f74\uff0c\u6a2a\u8f74\u8bbe\u7f6eaxis=1 * fill_method = None: \u5347\u91c7\u6837\u65f6\u5982\u4f55\u63d2\u503c\uff0c\u6bd4\u5982\u2018ffill'\u3001\u2018bfill'\u7b49 * closed = \u2018right': \u5728\u964d\u91c7\u6837\u65f6\uff0c\u5404\u65f6\u95f4\u6bb5\u7684\u54ea\u4e00\u6bb5\u662f\u95ed\u5408\u7684\uff0c\u2018right'\u6216\u2018left'\uff0c\u9ed8\u8ba4\u2018right' * label= \u2018right': \u5728\u964d\u91c7\u6837\u65f6\uff0c\u5982\u4f55\u8bbe\u7f6e\u805a\u5408\u503c\u7684\u6807\u7b7e\uff0c\u4f8b\u5982\uff0c9\uff1a30-9\uff1a35\u4f1a\u88ab\u6807\u8bb0\u62109\uff1a30\u8fd8\u662f9\uff1a35,\u9ed8\u8ba49\uff1a35 * loffset = None: \u9762\u5143\u6807\u7b7e\u7684\u65f6\u95f4\u6821\u6b63\u503c\uff0c\u6bd4\u5982\u2018-1s'\u6216Second(-1)\u7528\u4e8e\u5c06\u805a\u5408\u6807\u7b7e\u8c03\u65e91\u79d2 * limit=None: \u5728\u5411\u524d\u6216\u5411\u540e\u586b\u5145\u65f6\uff0c\u5141\u8bb8\u586b\u5145\u7684\u6700\u5927\u65f6\u671f\u6570 * kind = None: \u805a\u5408\u5230\u65f6\u671f\uff08\u2018period'\uff09\u6216\u65f6\u95f4\u6233\uff08\u2018timestamp'\uff09\uff0c\u9ed8\u8ba4\u805a\u5408\u5230\u65f6\u95f4\u5e8f\u5217\u7684\u7d22\u5f15\u7c7b\u578b * convention = None: \u5f53\u91cd\u91c7\u6837\u65f6\u671f\u65f6\uff0c\u5c06\u4f4e\u9891\u7387\u8f6c\u6362\u5230\u9ad8\u9891\u7387\u6240\u91c7\u7528\u7684\u7ea6\u5b9a\uff08start\u6216end\uff09\u3002\u9ed8\u8ba4\u2018end' rng = pd.date_range('2020-1-1', periods=100, freq='D') ts = pd.Series(np.random.randn(len(rng)), index=rng) print(ts)","title":"Freq: Q-DEC, Name: infl, Length: 203, dtype: float64"},{"location":"python/DataAnalysis/ch08/#2020-01-01-0802409","text":"","title":"2020-01-01    0.802409"},{"location":"python/DataAnalysis/ch08/#2020-01-02-1147130","text":"","title":"2020-01-02   -1.147130"},{"location":"python/DataAnalysis/ch08/#2020-01-03-1076115","text":"","title":"2020-01-03   -1.076115"},{"location":"python/DataAnalysis/ch08/#2020-01-04-2097443","text":"","title":"2020-01-04   -2.097443"},{"location":"python/DataAnalysis/ch08/#2020-01-05-0577671","text":"","title":"2020-01-05    0.577671"},{"location":"python/DataAnalysis/ch08/#_13","text":"","title":"..."},{"location":"python/DataAnalysis/ch08/#2020-04-05-0110747","text":"","title":"2020-04-05   -0.110747"},{"location":"python/DataAnalysis/ch08/#2020-04-06-0132867","text":"","title":"2020-04-06    0.132867"},{"location":"python/DataAnalysis/ch08/#2020-04-07-0294061","text":"","title":"2020-04-07   -0.294061"},{"location":"python/DataAnalysis/ch08/#2020-04-08-0246155","text":"","title":"2020-04-08   -0.246155"},{"location":"python/DataAnalysis/ch08/#2020-04-09-0927194","text":"","title":"2020-04-09    0.927194"},{"location":"python/DataAnalysis/ch08/#freq-d-length-100-dtype-float64","text":"print(ts.resample('M'))","title":"Freq: D, Length: 100, dtype: float64"},{"location":"python/DataAnalysis/ch08/#datetimeindexresampler-freq-axis0-closedright-labelright-conventionstart-originstart_day","text":"print(ts.resample('M').mean()) # \u628a100\u5929\u7684\u6570\u636e\u6309\u6708groupby\uff0c\u5e76\u8f93\u51fa\u6708\u672b\u6700\u540e\u4e00\u5929\uff0c\u8ba1\u7b97\u5e73\u5747\u503c","title":"DatetimeIndexResampler [freq=, axis=0, closed=right, label=right, convention=start, origin=start_day]"},{"location":"python/DataAnalysis/ch08/#2020-01-31-0311714","text":"","title":"2020-01-31   -0.311714"},{"location":"python/DataAnalysis/ch08/#2020-02-29-0121526","text":"","title":"2020-02-29    0.121526"},{"location":"python/DataAnalysis/ch08/#2020-03-31-0051131","text":"","title":"2020-03-31   -0.051131"},{"location":"python/DataAnalysis/ch08/#2020-04-30-0273113","text":"","title":"2020-04-30   -0.273113"},{"location":"python/DataAnalysis/ch08/#freq-m-dtype-float64_12","text":"print(ts.resample('M', kind='period').mean()) # # \u628a100\u5929\u7684\u6570\u636e\u6309\u6708groupby\uff0c\u5e76\u8f93\u51fa\u6708\u4efd\uff08\u53c2\u6570period\uff09\uff0c\u8ba1\u7b97\u5e73\u5747\u503c","title":"Freq: M, dtype: float64"},{"location":"python/DataAnalysis/ch08/#2020-01-0311714","text":"","title":"2020-01   -0.311714"},{"location":"python/DataAnalysis/ch08/#2020-02-0121526","text":"","title":"2020-02    0.121526"},{"location":"python/DataAnalysis/ch08/#2020-03-0051131","text":"","title":"2020-03   -0.051131"},{"location":"python/DataAnalysis/ch08/#2020-04-0273113","text":"","title":"2020-04   -0.273113"},{"location":"python/DataAnalysis/ch08/#freq-m-dtype-float64_13","text":"#### \u5411\u4e0b\u91c7\u6837 \u5c06\u6570\u636e\u805a\u5408\u5230\u4e00\u4e2a\u89c4\u5219\u7684\u4f4e\u9891\u7387\u4e0a\u662f\u4e00\u4e2a\u5e38\u89c1\u7684\u65f6\u95f4\u5e8f\u5217\u4efb\u52a1\u3002\\ \u8981\u805a\u5408\u7684\u6570\u636e\u4e0d\u5fc5\u662f\u56fa\u5b9a\u9891\u7387\u7684\u3002\\ \u671f\u671b\u7684\u9891\u7387\u5b9a\u4e49\u4e86\u7528\u4e8e\u5bf9\u65f6\u95f4\u5e8f\u5217\u5207\u7247\u4ee5\u805a\u5408\u7684\u7bb1\u4f53\u8fb9\u754c\u3002\u4f8b\u5982\uff0c\u8981\u5c06\u65f6\u95f4\u8f6c\u6362\u4e3a\u6bcf\u6708\uff0c'M\u2019\u6216\u2019BM'\uff0c\u5219\u9700\u8981\u5c06\u6570\u636e\u5206\u6210\u4e00\u4e2a\u6708\u7684\u65f6\u95f4\u95f4\u9694\u3002\\ \u6bcf\u4e2a\u95f4\u9694\u662f\u534a\u95ed\u5408\u7684\uff0c\u4e00\u4e2a\u6570\u636e\u70b9\u53ea\u80fd\u5c5e\u4e8e\u4e00\u4e2a\u65f6\u95f4\u95f4\u9694\uff0c\u65f6\u95f4\u95f4\u9694\u7684\u5e76\u96c6\u5fc5\u987b\u662f\u6574\u4e2a\u65f6\u95f4\u5e27\u3002\\ \u5728\u4f7f\u7528resample\u8fdb\u884c\u5411\u4e0b\u91c7\u6837\u6570\u636e\u65f6\u6709\u4e9b\u4e8b\u60c5\u9700\u8981\u8003\u8651\uff1a * \u6bcf\u6bb5\u95f4\u9694\u7684\u54ea\u4e00\u8fb9\u662f\u95ed\u5408\u7684\u3002 * \u5982\u4f55\u5728\u95f4\u9694\u7684\u8d77\u59cb\u6216\u7ed3\u675f\u4f4d\u7f6e\u6807\u8bb0\u6bcf\u4e2a\u5df2\u805a\u5408\u7684\u7bb1\u4f53\u3002 rng = pd.date_range('2020-1-1', periods=12, freq='T') ts = pd.Series(np.arange(12), index=rng) print(ts)","title":"Freq: M, dtype: float64"},{"location":"python/DataAnalysis/ch08/#2020-01-01-000000-0","text":"","title":"2020-01-01 00:00:00     0"},{"location":"python/DataAnalysis/ch08/#2020-01-01-000100-1","text":"","title":"2020-01-01 00:01:00     1"},{"location":"python/DataAnalysis/ch08/#2020-01-01-000200-2","text":"","title":"2020-01-01 00:02:00     2"},{"location":"python/DataAnalysis/ch08/#2020-01-01-000300-3","text":"","title":"2020-01-01 00:03:00     3"},{"location":"python/DataAnalysis/ch08/#2020-01-01-000400-4","text":"","title":"2020-01-01 00:04:00     4"},{"location":"python/DataAnalysis/ch08/#2020-01-01-000500-5","text":"","title":"2020-01-01 00:05:00     5"},{"location":"python/DataAnalysis/ch08/#2020-01-01-000600-6","text":"","title":"2020-01-01 00:06:00     6"},{"location":"python/DataAnalysis/ch08/#2020-01-01-000700-7","text":"","title":"2020-01-01 00:07:00     7"},{"location":"python/DataAnalysis/ch08/#2020-01-01-000800-8","text":"","title":"2020-01-01 00:08:00     8"},{"location":"python/DataAnalysis/ch08/#2020-01-01-000900-9","text":"","title":"2020-01-01 00:09:00     9"},{"location":"python/DataAnalysis/ch08/#2020-01-01-001000-10","text":"","title":"2020-01-01 00:10:00    10"},{"location":"python/DataAnalysis/ch08/#2020-01-01-001100-11","text":"","title":"2020-01-01 00:11:00    11"},{"location":"python/DataAnalysis/ch08/#freq-t-dtype-int64","text":"\u6309\u4e94\u5206\u949f\u9891\u7387\u805a\u5408\u5206\u7ec4\uff0c\u8ba1\u7b97\u6bcf\u4e00\u7ec4\u7684\u52a0\u548c\u3002\u9891\u7387\u6309\u4e94\u5206\u949f\u7684\u589e\u91cf\u5b9a\u4e49\u4e86\u7bb1\u4f53\u8fb9\u754c\u3002\\ \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u5de6\u7bb1\u4f53\u8fb9\u754c\u662f\u5305\u542b\u7684\uff0c\u56e0\u6b6400:00\u7684\u503c\u662f\u5305\u542b\u572800:00\u523000:05\u95f4\u9694\u5185\u7684\u3002\\ \u4f20\u9012closed='right\u2019\u5c06\u95f4\u9694\u7684\u95ed\u5408\u7aef\u6539\u4e3a\u4e86\u53f3\u8fb9\uff1a\\ \u5206\u7ec4 * left: [00:00,00:01,00:02,00:03,00:04],[00:05,00:06,00:07,00:08,00:09],[00:10,00:11] * right:[00:00],[00:01,00:02,00:03,00:04,00:05],[00:06,00:07,00:08,00:09,00:10],[00:11] result = ts.resample('5min', closed='right').sum() print(result)","title":"Freq: T, dtype: int64"},{"location":"python/DataAnalysis/ch08/#2019-12-31-235500-0","text":"","title":"2019-12-31 23:55:00     0"},{"location":"python/DataAnalysis/ch08/#2020-01-01-000000-15","text":"","title":"2020-01-01 00:00:00    15"},{"location":"python/DataAnalysis/ch08/#2020-01-01-000500-40","text":"","title":"2020-01-01 00:05:00    40"},{"location":"python/DataAnalysis/ch08/#2020-01-01-001000-11","text":"","title":"2020-01-01 00:10:00    11"},{"location":"python/DataAnalysis/ch08/#freq-5t-dtype-int64","text":"result = ts.resample('5min', closed='left').sum() print(result)","title":"Freq: 5T, dtype: int64"},{"location":"python/DataAnalysis/ch08/#2020-01-01-000000-10","text":"","title":"2020-01-01 00:00:00    10"},{"location":"python/DataAnalysis/ch08/#2020-01-01-000500-35","text":"","title":"2020-01-01 00:05:00    35"},{"location":"python/DataAnalysis/ch08/#2020-01-01-001000-21","text":"","title":"2020-01-01 00:10:00    21"},{"location":"python/DataAnalysis/ch08/#freq-5t-dtype-int64_1","text":"\u6700\u540e\uff0c\u5c06\u7ed3\u679c\u7d22\u5f15\u79fb\u52a8\u4e00\u5b9a\u7684\u6570\u91cf\uff0c\u4f8b\u5982\u4ece\u53f3\u8fb9\u7f18\u51cf\u53bb\u4e00\u79d2\uff0c\u4ee5\u4f7f\u5176\u66f4\u6e05\u695a\u5730\u8868\u660e\u65f6\u95f4\u6233\u6240\u6307\u7684\u95f4\u9694\u3002\\ \u8981\u5b9e\u73b0\u8fd9\u4e2a\u529f\u80fd\uff0c\u5411loffset\u4f20\u9012\u5b57\u7b26\u4e32\u6216\u65e5\u671f\u504f\u7f6e\uff1a result = ts.resample('5min', closed='right', label='right', loffset='-1s').sum() print(result)","title":"Freq: 5T, dtype: int64"},{"location":"python/DataAnalysis/ch08/#2019-12-31-235959-0","text":"","title":"2019-12-31 23:59:59     0"},{"location":"python/DataAnalysis/ch08/#2020-01-01-000459-15","text":"","title":"2020-01-01 00:04:59    15"},{"location":"python/DataAnalysis/ch08/#2020-01-01-000959-40","text":"","title":"2020-01-01 00:09:59    40"},{"location":"python/DataAnalysis/ch08/#2020-01-01-001459-11","text":"","title":"2020-01-01 00:14:59    11"},{"location":"python/DataAnalysis/ch08/#freq-5t-dtype-int64_2","text":"","title":"Freq: 5T, dtype: int64"},{"location":"python/DataAnalysis/ch08/#futurewarning-loffset-in-resample-and-in-grouper-is-deprecated","text":"","title":"FutureWarning: 'loffset' in .resample() and in Grouper() is deprecated."},{"location":"python/DataAnalysis/ch08/#dfresamplefreq3s-loffset8h","text":"","title":"&gt;&gt;&gt; df.resample(freq=\"3s\", loffset=\"8H\")"},{"location":"python/DataAnalysis/ch08/#becomes","text":"","title":"becomes:"},{"location":"python/DataAnalysis/ch08/#from-pandastseriesfrequencies-import-to_offset","text":"","title":"&gt;&gt;&gt; from pandas.tseries.frequencies import to_offset"},{"location":"python/DataAnalysis/ch08/#df-dfresamplefreq3smean","text":"","title":"&gt;&gt;&gt; df = df.resample(freq=\"3s\").mean()"},{"location":"python/DataAnalysis/ch08/#dfindex-dfindexto_timestamp-to_offset8h","text":"##### \u5f00\u7aef-\u5cf0\u503c-\u8c37\u503c-\u7ed3\u675f\uff08OHLC\uff09\u91cd\u65b0\u91c7\u6837 \u5728\u91d1\u878d\u4e2d\uff0c\u4e3a\u6bcf\u4e2a\u6570\u636e\u6876\u8ba1\u7b97\u56db\u4e2a\u503c\u662f\u4e00\u79cd\u6d41\u884c\u7684\u65f6\u95f4\u5e8f\u5217\u805a\u5408\u65b9\u6cd5\uff1a\u7b2c\u4e00\u4e2a\u503c\uff08\u5f00\u7aef\uff09\u3001\u6700\u540e\u4e00\u4e2a\u503c\uff08\u7ed3\u675f\uff09\u3001\u6700\u5927\u503c\uff08\u5cf0\u503c\uff09\u548c\u6700\u5c0f\u503c\uff08\u8c37\u503c\uff09\u3002 \u901a\u8fc7\u4f7f\u7528ohlc\u805a\u5408\u51fd\u6570\u53d6\u5f97\u5305\u542b\u56db\u79cd\u805a\u5408\u503c\u5217\u7684DataFrame\uff0c\u8fd9\u4e9b\u503c\u5728\u6570\u636e\u7684\u5355\u6b21\u626b\u63cf\u4e2d\u88ab\u9ad8\u6548\u8ba1\u7b97\uff1a result = ts.resample('5min').ohlc() print(result)","title":"&gt;&gt;&gt; df.index = df.index.to_timestamp() + to_offset(\"8H\")"},{"location":"python/DataAnalysis/ch08/#open-high-low-close","text":"","title":"open  high  low  close"},{"location":"python/DataAnalysis/ch08/#2020-01-01-000000-0-4-0-4","text":"","title":"2020-01-01 00:00:00     0     4    0      4"},{"location":"python/DataAnalysis/ch08/#2020-01-01-000500-5-9-5-9","text":"","title":"2020-01-01 00:05:00     5     9    5      9"},{"location":"python/DataAnalysis/ch08/#2020-01-01-001000-10-11-10-11","text":"#### \u5411\u4e0a\u91c7\u6837\u4e0e\u63d2\u503c \u5f53\u4ece\u4f4e\u9891\u7387\u8f6c\u6362\u4e3a\u9ad8\u9891\u7387\u65f6\uff0c\u5e76\u4e0d\u9700\u8981\u4efb\u4f55\u805a\u5408\u3002 df = pd.DataFrame( np.random.randn(2, 4), index=pd.date_range('2020/1/1', periods=2, freq='W-WED'), columns=['Colorado', 'Texas', 'New York', 'Ohio'] ) print(df)","title":"2020-01-01 00:10:00    10    11   10     11"},{"location":"python/DataAnalysis/ch08/#colorado-texas-new-york-ohio","text":"","title":"Colorado     Texas  New York      Ohio"},{"location":"python/DataAnalysis/ch08/#2020-01-01-0228758-0758718-0025410-1001819","text":"","title":"2020-01-01 -0.228758 -0.758718 -0.025410 -1.001819"},{"location":"python/DataAnalysis/ch08/#2020-01-08-0704541-0261414-0863335-0267101","text":"df_daily = df.resample('W-WED').sum() print(df_daily)","title":"2020-01-08 -0.704541 -0.261414 -0.863335  0.267101"},{"location":"python/DataAnalysis/ch08/#colorado-texas-new-york-ohio_1","text":"","title":"Colorado     Texas  New York      Ohio"},{"location":"python/DataAnalysis/ch08/#2020-01-01-0228758-0758718-0025410-1001819_1","text":"","title":"2020-01-01 -0.228758 -0.758718 -0.025410 -1.001819"},{"location":"python/DataAnalysis/ch08/#2020-01-08-0704541-0261414-0863335-0267101_1","text":"df_daily = df.resample('D').sum() print(df_daily)","title":"2020-01-08 -0.704541 -0.261414 -0.863335  0.267101"},{"location":"python/DataAnalysis/ch08/#colorado-texas-new-york-ohio_2","text":"","title":"Colorado     Texas  New York      Ohio"},{"location":"python/DataAnalysis/ch08/#2020-01-01-0228758-0758718-0025410-1001819_2","text":"","title":"2020-01-01 -0.228758 -0.758718 -0.025410 -1.001819"},{"location":"python/DataAnalysis/ch08/#2020-01-02-0000000-0000000-0000000-0000000","text":"","title":"2020-01-02  0.000000  0.000000  0.000000  0.000000"},{"location":"python/DataAnalysis/ch08/#2020-01-03-0000000-0000000-0000000-0000000","text":"","title":"2020-01-03  0.000000  0.000000  0.000000  0.000000"},{"location":"python/DataAnalysis/ch08/#2020-01-04-0000000-0000000-0000000-0000000","text":"","title":"2020-01-04  0.000000  0.000000  0.000000  0.000000"},{"location":"python/DataAnalysis/ch08/#2020-01-05-0000000-0000000-0000000-0000000","text":"","title":"2020-01-05  0.000000  0.000000  0.000000  0.000000"},{"location":"python/DataAnalysis/ch08/#2020-01-06-0000000-0000000-0000000-0000000","text":"","title":"2020-01-06  0.000000  0.000000  0.000000  0.000000"},{"location":"python/DataAnalysis/ch08/#2020-01-07-0000000-0000000-0000000-0000000","text":"","title":"2020-01-07  0.000000  0.000000  0.000000  0.000000"},{"location":"python/DataAnalysis/ch08/#2020-01-08-0704541-0261414-0863335-0267101_2","text":"\u5f53\u5bf9\u8fd9\u4e9b\u6570\u636e\u4f7f\u7528\u805a\u5408\u51fd\u6570\u65f6\uff0c\u6bcf\u4e00\u7ec4\u53ea\u6709\u4e00\u4e2a\u503c\uff0c\u5e76\u4e14\u4f1a\u5728\u95f4\u9699\u4e2d\u4ea7\u751f\u7f3a\u5931\u503c\u3002\\ \u4f7f\u7528asfreq\u65b9\u6cd5\u5728\u4e0d\u805a\u5408\u7684\u60c5\u51b5\u4e0b\u8f6c\u6362\u5230\u9ad8\u9891\u7387\uff1a df_daily = df.resample('D').asfreq() print(df_daily)","title":"2020-01-08 -0.704541 -0.261414 -0.863335  0.267101"},{"location":"python/DataAnalysis/ch08/#colorado-texas-new-york-ohio_3","text":"","title":"Colorado     Texas  New York      Ohio"},{"location":"python/DataAnalysis/ch08/#2020-01-01-0228758-0758718-0025410-1001819_3","text":"","title":"2020-01-01 -0.228758 -0.758718 -0.025410 -1.001819"},{"location":"python/DataAnalysis/ch08/#2020-01-02-nan-nan-nan-nan","text":"","title":"2020-01-02       NaN       NaN       NaN       NaN"},{"location":"python/DataAnalysis/ch08/#2020-01-03-nan-nan-nan-nan","text":"","title":"2020-01-03       NaN       NaN       NaN       NaN"},{"location":"python/DataAnalysis/ch08/#2020-01-04-nan-nan-nan-nan","text":"","title":"2020-01-04       NaN       NaN       NaN       NaN"},{"location":"python/DataAnalysis/ch08/#2020-01-05-nan-nan-nan-nan","text":"","title":"2020-01-05       NaN       NaN       NaN       NaN"},{"location":"python/DataAnalysis/ch08/#2020-01-06-nan-nan-nan-nan","text":"","title":"2020-01-06       NaN       NaN       NaN       NaN"},{"location":"python/DataAnalysis/ch08/#2020-01-07-nan-nan-nan-nan","text":"","title":"2020-01-07       NaN       NaN       NaN       NaN"},{"location":"python/DataAnalysis/ch08/#2020-01-08-0704541-0261414-0863335-0267101_3","text":"\u5728\u975e\u661f\u671f\u4e09\u7684\u65e5\u671f\u4e0a\u5411\u524d\u586b\u5145\u6bcf\u5468\u6570\u503c\u3002fillna\u548creindex\u65b9\u6cd5\u4e2d\u53ef\u7528\u7684\u586b\u5145\u6216\u63d2\u503c\u65b9\u6cd5\u53ef\u7528\u4e8e\u91cd\u91c7\u6837\uff1a df_daily = df.resample('D').ffill() print(df_daily)","title":"2020-01-08 -0.704541 -0.261414 -0.863335  0.267101"},{"location":"python/DataAnalysis/ch08/#colorado-texas-new-york-ohio_4","text":"","title":"Colorado     Texas  New York      Ohio"},{"location":"python/DataAnalysis/ch08/#2020-01-01-0228758-0758718-0025410-1001819_4","text":"","title":"2020-01-01 -0.228758 -0.758718 -0.025410 -1.001819"},{"location":"python/DataAnalysis/ch08/#2020-01-02-0228758-0758718-0025410-1001819","text":"","title":"2020-01-02 -0.228758 -0.758718 -0.025410 -1.001819"},{"location":"python/DataAnalysis/ch08/#2020-01-03-0228758-0758718-0025410-1001819","text":"","title":"2020-01-03 -0.228758 -0.758718 -0.025410 -1.001819"},{"location":"python/DataAnalysis/ch08/#2020-01-04-0228758-0758718-0025410-1001819","text":"","title":"2020-01-04 -0.228758 -0.758718 -0.025410 -1.001819"},{"location":"python/DataAnalysis/ch08/#2020-01-05-0228758-0758718-0025410-1001819","text":"","title":"2020-01-05 -0.228758 -0.758718 -0.025410 -1.001819"},{"location":"python/DataAnalysis/ch08/#2020-01-06-0228758-0758718-0025410-1001819","text":"","title":"2020-01-06 -0.228758 -0.758718 -0.025410 -1.001819"},{"location":"python/DataAnalysis/ch08/#2020-01-07-0228758-0758718-0025410-1001819","text":"","title":"2020-01-07 -0.228758 -0.758718 -0.025410 -1.001819"},{"location":"python/DataAnalysis/ch08/#2020-01-08-0704541-0261414-0863335-0267101_4","text":"\u53ef\u4ee5\u540c\u6837\u9009\u62e9\u4ec5\u5411\u524d\u586b\u5145\u4e00\u5b9a\u6570\u91cf\u7684\u533a\u95f4\uff0c\u4ee5\u9650\u5236\u7ee7\u7eed\u4f7f\u7528\u89c2\u6d4b\u503c\u7684\u65f6\u8ddd\uff1a df_daily = df.resample('D').ffill(limit=2) print(df_daily)","title":"2020-01-08 -0.704541 -0.261414 -0.863335  0.267101"},{"location":"python/DataAnalysis/ch08/#colorado-texas-new-york-ohio_5","text":"","title":"Colorado     Texas  New York      Ohio"},{"location":"python/DataAnalysis/ch08/#2020-01-01-0228758-0758718-0025410-1001819_5","text":"","title":"2020-01-01 -0.228758 -0.758718 -0.025410 -1.001819"},{"location":"python/DataAnalysis/ch08/#2020-01-02-0228758-0758718-0025410-1001819_1","text":"","title":"2020-01-02 -0.228758 -0.758718 -0.025410 -1.001819"},{"location":"python/DataAnalysis/ch08/#2020-01-03-0228758-0758718-0025410-1001819_1","text":"","title":"2020-01-03 -0.228758 -0.758718 -0.025410 -1.001819"},{"location":"python/DataAnalysis/ch08/#2020-01-04-nan-nan-nan-nan_1","text":"","title":"2020-01-04       NaN       NaN       NaN       NaN"},{"location":"python/DataAnalysis/ch08/#2020-01-05-nan-nan-nan-nan_1","text":"","title":"2020-01-05       NaN       NaN       NaN       NaN"},{"location":"python/DataAnalysis/ch08/#2020-01-06-nan-nan-nan-nan_1","text":"","title":"2020-01-06       NaN       NaN       NaN       NaN"},{"location":"python/DataAnalysis/ch08/#2020-01-07-nan-nan-nan-nan_1","text":"","title":"2020-01-07       NaN       NaN       NaN       NaN"},{"location":"python/DataAnalysis/ch08/#2020-01-08-0704541-0261414-0863335-0267101_5","text":"\u6ce8\u610f\uff0c\u65b0\u7684\u65e5\u671f\u7d22\u5f15\u4e0d\u9700\u8981\u4e0e\u65e7\u7684\u7d22\u5f15\u91cd\u53e0\uff0c\u548c\u539f\u6765df\u7684\u503c\u4e00\u6837\uff0c\u53ea\u662f\u65e5\u671f\u7d22\u5f15\u53d8\u4e86 df_new = df.resample('W-THU').ffill() print(df_new)","title":"2020-01-08 -0.704541 -0.261414 -0.863335  0.267101"},{"location":"python/DataAnalysis/ch08/#colorado-texas-new-york-ohio_6","text":"","title":"Colorado     Texas  New York      Ohio"},{"location":"python/DataAnalysis/ch08/#2020-01-02-0228758-0758718-0025410-1001819_2","text":"","title":"2020-01-02 -0.228758 -0.758718 -0.025410 -1.001819"},{"location":"python/DataAnalysis/ch08/#2020-01-09-0704541-0261414-0863335-0267101","text":"#### \u4f7f\u7528\u533a\u95f4\u8fdb\u884c\u91cd\u65b0\u91c7\u6837 \u5bf9\u4ee5\u533a\u95f4\u4e3a\u7d22\u5f15\u7684\u6570\u636e\u8fdb\u884c\u91c7\u6837\u4e0e\u65f6\u95f4\u6233\u7684\u60c5\u51b5\u7c7b\u4f3c\uff1a df = pd.DataFrame( np.random.randn(24, 4), index=pd.period_range('2020-1', periods=24, freq='M'), columns=['Colorado', 'Texas', 'New York', 'Ohio'] ) print(df)","title":"2020-01-09 -0.704541 -0.261414 -0.863335  0.267101"},{"location":"python/DataAnalysis/ch08/#2020-01-0721395-1492674-0707410-1641890","text":"","title":"2020-01  0.721395 -1.492674  0.707410  1.641890"},{"location":"python/DataAnalysis/ch08/#2020-02-0894880-0032823-0676158-0029203","text":"","title":"2020-02 -0.894880  0.032823 -0.676158  0.029203"},{"location":"python/DataAnalysis/ch08/#2020-03-2147365-0176796-0562695-0747656","text":"","title":"2020-03  2.147365 -0.176796  0.562695 -0.747656"},{"location":"python/DataAnalysis/ch08/#2020-04-1496037-0797119-0495601-0774147","text":"","title":"2020-04  1.496037 -0.797119 -0.495601  0.774147"},{"location":"python/DataAnalysis/ch08/#2020-05-0309839-0502563-0237244-0910624","text":"","title":"2020-05 -0.309839  0.502563  0.237244  0.910624"},{"location":"python/DataAnalysis/ch08/#2020-06-1231869-0105227-1315759-0217701","text":"","title":"2020-06  1.231869 -0.105227  1.315759  0.217701"},{"location":"python/DataAnalysis/ch08/#2020-07-1447419-0263876-0342045-0768907","text":"","title":"2020-07  1.447419  0.263876 -0.342045 -0.768907"},{"location":"python/DataAnalysis/ch08/#2020-08-2567162-1008827-0391085-1259560","text":"","title":"2020-08 -2.567162 -1.008827  0.391085  1.259560"},{"location":"python/DataAnalysis/ch08/#2020-09-0772501-1183532-0450374-0450714","text":"","title":"2020-09 -0.772501  1.183532  0.450374  0.450714"},{"location":"python/DataAnalysis/ch08/#2020-10-0228974-0461224-1393178-0175243","text":"","title":"2020-10  0.228974  0.461224  1.393178  0.175243"},{"location":"python/DataAnalysis/ch08/#2020-11-0725193-1544131-1372029-0659224","text":"","title":"2020-11 -0.725193 -1.544131  1.372029 -0.659224"},{"location":"python/DataAnalysis/ch08/#2020-12-0718195-0862024-0166460-0940191","text":"","title":"2020-12  0.718195  0.862024 -0.166460 -0.940191"},{"location":"python/DataAnalysis/ch08/#2021-01-0617054-0887312-0338451-1392838","text":"","title":"2021-01 -0.617054 -0.887312  0.338451 -1.392838"},{"location":"python/DataAnalysis/ch08/#2021-02-0081140-0634730-0868051-1277167","text":"","title":"2021-02 -0.081140  0.634730 -0.868051 -1.277167"},{"location":"python/DataAnalysis/ch08/#2021-03-0999642-1959715-0930662-0748687","text":"","title":"2021-03 -0.999642 -1.959715 -0.930662  0.748687"},{"location":"python/DataAnalysis/ch08/#2021-04-1851453-1561669-0688822-0371255","text":"","title":"2021-04  1.851453  1.561669 -0.688822 -0.371255"},{"location":"python/DataAnalysis/ch08/#2021-05-0540777-0890403-1204188-0243480","text":"","title":"2021-05 -0.540777 -0.890403 -1.204188  0.243480"},{"location":"python/DataAnalysis/ch08/#2021-06-1318905-1247457-0518969-0799793","text":"","title":"2021-06  1.318905  1.247457  0.518969  0.799793"},{"location":"python/DataAnalysis/ch08/#2021-07-0223238-0747177-0410889-0904593","text":"","title":"2021-07  0.223238  0.747177 -0.410889  0.904593"},{"location":"python/DataAnalysis/ch08/#2021-08-0652551-0254351-0464604-0676923","text":"","title":"2021-08 -0.652551 -0.254351 -0.464604 -0.676923"},{"location":"python/DataAnalysis/ch08/#2021-09-0562312-0182099-0018617-0573331","text":"","title":"2021-09  0.562312  0.182099  0.018617  0.573331"},{"location":"python/DataAnalysis/ch08/#2021-10-0429490-0045959-0356292-0295776","text":"","title":"2021-10  0.429490 -0.045959 -0.356292 -0.295776"},{"location":"python/DataAnalysis/ch08/#2021-11-2552155-0801299-1378421-1232792","text":"","title":"2021-11  2.552155  0.801299  1.378421  1.232792"},{"location":"python/DataAnalysis/ch08/#2021-12-1102288-0850280-0767015-0519840","text":"df_annual = df.resample('A-DEC').mean() print(df_annual)","title":"2021-12  1.102288  0.850280 -0.767015 -0.519840"},{"location":"python/DataAnalysis/ch08/#colorado-texas-new-york-ohio_7","text":"","title":"Colorado     Texas  New York      Ohio"},{"location":"python/DataAnalysis/ch08/#2020-0226807-0151561-0395793-0195259","text":"","title":"2020  0.226807 -0.151561  0.395793  0.195259"},{"location":"python/DataAnalysis/ch08/#2021-0429056-0165581-0286339-0002594","text":"\u5411\u4e0a\u91c7\u6837\u66f4\u4e3a\u7ec6\u81f4\uff0c\u56e0\u4e3a\u5fc5\u987b\u5728\u91cd\u65b0\u91c7\u6837\u524d\u51b3\u5b9a\u65b0\u9891\u7387\u4e2d\u5728\u65f6\u95f4\u6bb5\u7684\u54ea\u4e00\u7aef\u653e\u7f6e\u6570\u503c\uff0c\u5c31\u50cfasfreq\u65b9\u6cd5\u4e00\u6837\u3002\\ convention\u53c2\u6570\u9ed8\u8ba4\u503c\u662f\u2019start'\uff0c\u4f46\u4e5f\u53ef\u4ee5\u662f'end'\uff1a result = df_annual.resample('Q-DEC').ffill() print(result)","title":"2021  0.429056  0.165581 -0.286339 -0.002594"},{"location":"python/DataAnalysis/ch08/#colorado-texas-new-york-ohio_8","text":"","title":"Colorado     Texas  New York      Ohio"},{"location":"python/DataAnalysis/ch08/#2020q1-0226807-0151561-0395793-0195259","text":"","title":"2020Q1  0.226807 -0.151561  0.395793  0.195259"},{"location":"python/DataAnalysis/ch08/#2020q2-0226807-0151561-0395793-0195259","text":"","title":"2020Q2  0.226807 -0.151561  0.395793  0.195259"},{"location":"python/DataAnalysis/ch08/#2020q3-0226807-0151561-0395793-0195259","text":"","title":"2020Q3  0.226807 -0.151561  0.395793  0.195259"},{"location":"python/DataAnalysis/ch08/#2020q4-0226807-0151561-0395793-0195259","text":"","title":"2020Q4  0.226807 -0.151561  0.395793  0.195259"},{"location":"python/DataAnalysis/ch08/#2021q1-0429056-0165581-0286339-0002594","text":"","title":"2021Q1  0.429056  0.165581 -0.286339 -0.002594"},{"location":"python/DataAnalysis/ch08/#2021q2-0429056-0165581-0286339-0002594","text":"","title":"2021Q2  0.429056  0.165581 -0.286339 -0.002594"},{"location":"python/DataAnalysis/ch08/#2021q3-0429056-0165581-0286339-0002594","text":"","title":"2021Q3  0.429056  0.165581 -0.286339 -0.002594"},{"location":"python/DataAnalysis/ch08/#2021q4-0429056-0165581-0286339-0002594","text":"result = df_annual.resample('Q-DEC', convention='end').ffill() print(result)","title":"2021Q4  0.429056  0.165581 -0.286339 -0.002594"},{"location":"python/DataAnalysis/ch08/#colorado-texas-new-york-ohio_9","text":"","title":"Colorado     Texas  New York      Ohio"},{"location":"python/DataAnalysis/ch08/#2020q4-0226807-0151561-0395793-0195259_1","text":"","title":"2020Q4  0.226807 -0.151561  0.395793  0.195259"},{"location":"python/DataAnalysis/ch08/#2021q1-0226807-0151561-0395793-0195259","text":"","title":"2021Q1  0.226807 -0.151561  0.395793  0.195259"},{"location":"python/DataAnalysis/ch08/#2021q2-0226807-0151561-0395793-0195259","text":"","title":"2021Q2  0.226807 -0.151561  0.395793  0.195259"},{"location":"python/DataAnalysis/ch08/#2021q3-0226807-0151561-0395793-0195259","text":"","title":"2021Q3  0.226807 -0.151561  0.395793  0.195259"},{"location":"python/DataAnalysis/ch08/#2021q4-0429056-0165581-0286339-0002594_1","text":"\u7531\u4e8e\u533a\u95f4\u6d89\u53ca\u65f6\u95f4\u8303\u56f4\uff0c\u5411\u4e0a\u91c7\u6837\u548c\u5411\u4e0b\u91c7\u6837\u5c31\u66f4\u4e3a\u4e25\u683c\uff1a * \u5728\u5411\u4e0b\u91c7\u6837\u4e2d\uff0c\u76ee\u6807\u9891\u7387\u5fc5\u987b\u662f\u539f\u9891\u7387\u7684\u5b50\u533a\u95f4\u3002 * \u5728\u5411\u4e0a\u91c7\u6837\u4e2d\uff0c\u76ee\u6807\u9891\u7387\u5fc5\u987b\u662f\u539f\u9891\u7387\u7684\u7236\u533a\u95f4\u3002 \u5982\u679c\u4e0d\u6ee1\u8db3\u8fd9\u4e9b\u89c4\u5219\uff0c\u5c06\u4f1a\u5f15\u8d77\u5f02\u5e38\u3002\u8fd9\u4e3b\u8981\u4f1a\u5f71\u54cd\u6bcf\u5b63\u5ea6\u3001\u6bcf\u5e74\u548c\u6bcf\u5468\u7684\u9891\u7387\u3002 \u4f8b\u5982\uff0c\u6839\u636eQ-MAR\u5b9a\u4e49\u7684\u65f6\u95f4\u8303\u56f4\u5c06\u53ea\u548cA-MAR\u3001A-JUN\u3001A-SEP\u548cA-DEC\u4fdd\u6301\u4e00\u81f4\uff1a result = df_annual.resample('Q-MAR').ffill() print(result)","title":"2021Q4  0.429056  0.165581 -0.286339 -0.002594"},{"location":"python/DataAnalysis/ch08/#colorado-texas-new-york-ohio_10","text":"","title":"Colorado     Texas  New York      Ohio"},{"location":"python/DataAnalysis/ch08/#2020q4-0226807-0151561-0395793-0195259_2","text":"","title":"2020Q4  0.226807 -0.151561  0.395793  0.195259"},{"location":"python/DataAnalysis/ch08/#2021q1-0226807-0151561-0395793-0195259_1","text":"","title":"2021Q1  0.226807 -0.151561  0.395793  0.195259"},{"location":"python/DataAnalysis/ch08/#2021q2-0226807-0151561-0395793-0195259_1","text":"","title":"2021Q2  0.226807 -0.151561  0.395793  0.195259"},{"location":"python/DataAnalysis/ch08/#2021q3-0226807-0151561-0395793-0195259_1","text":"","title":"2021Q3  0.226807 -0.151561  0.395793  0.195259"},{"location":"python/DataAnalysis/ch08/#2021q4-0429056-0165581-0286339-0002594_2","text":"","title":"2021Q4  0.429056  0.165581 -0.286339 -0.002594"},{"location":"python/DataAnalysis/ch08/#2022q1-0429056-0165581-0286339-0002594","text":"","title":"2022Q1  0.429056  0.165581 -0.286339 -0.002594"},{"location":"python/DataAnalysis/ch08/#2022q2-0429056-0165581-0286339-0002594","text":"","title":"2022Q2  0.429056  0.165581 -0.286339 -0.002594"},{"location":"python/DataAnalysis/ch08/#2022q3-0429056-0165581-0286339-0002594","text":"### \u79fb\u52a8\u7a97\u53e3\u51fd\u6570 \u7edf\u8ba1\u90a3\u4e9b\u901a\u8fc7\u79fb\u52a8\u7a97\u53e3\u6216\u6307\u6570\u8870\u51cf\u800c\u8fd0\u884c\u7684\u51fd\u6570\uff0c\u662f\u7528\u4e8e\u65f6\u95f4\u5e8f\u5217\u64cd\u4f5c\u7684\u6570\u7ec4\u53d8\u6362\u7684\u4e00\u4e2a\u91cd\u8981\u7c7b\u522b\u3002\\ \u8fd9\u5bf9\u5e73\u6ed1\u566a\u58f0\u6216\u7c97\u7cd9\u7684\u6570\u636e\u975e\u5e38\u6709\u7528\u3002\u79f0\u8fd9\u4e9b\u51fd\u6570\u4e3a\u79fb\u52a8\u7a97\u53e3\u51fd\u6570\uff0c\u5c3d\u7ba1\u5b83\u4e5f\u5305\u542b\u4e86\u4e00\u4e9b\u6ca1\u6709\u56fa\u5b9a\u957f\u5ea6\u7a97\u53e3\u7684\u51fd\u6570\uff0c\u6bd4\u5982\u6307\u6570\u52a0\u6743\u79fb\u52a8\u5e73\u5747\u3002\\ \u4e0e\u5176\u4ed6\u7684\u7edf\u8ba1\u51fd\u6570\u7c7b\u4f3c\uff0c\u8fd9\u4e9b\u51fd\u6570\u4f1a\u81ea\u52a8\u6392\u9664\u7f3a\u5931\u6570\u636e\u3002 import matplotlib.pyplot as plt import pandas as pd from scipy.stats import percentileofscore import numpy as np from pandas.tseries.offsets import Hour, Minute, Day, MonthEnd import pytz \u5728\u6df1\u5165\u4e86\u89e3\u4e4b\u524d\uff0c\u6211\u4eec\u53ef\u4ee5\u5148\u8f7d\u5165\u4e00\u4e9b\u65f6\u95f4\u5e8f\u5217\u6570\u636e\u5e76\u6309\u7167\u5de5\u4f5c\u65e5\u9891\u7387\u8fdb\u884c\u91cd\u65b0\u91c7\u6837\uff1a close_px_all = pd.read_csv( '../examples/stock_px_2.csv', parse_dates = True, index_col=0 ) print(close_px_all.head(5))","title":"2022Q3  0.429056  0.165581 -0.286339 -0.002594"},{"location":"python/DataAnalysis/ch08/#aapl-msft-xom-spx","text":"","title":"AAPL   MSFT    XOM     SPX"},{"location":"python/DataAnalysis/ch08/#2003-01-02-740-2111-2922-90903","text":"","title":"2003-01-02  7.40  21.11  29.22  909.03"},{"location":"python/DataAnalysis/ch08/#2003-01-03-745-2114-2924-90859","text":"","title":"2003-01-03  7.45  21.14  29.24  908.59"},{"location":"python/DataAnalysis/ch08/#2003-01-06-745-2152-2996-92901","text":"","title":"2003-01-06  7.45  21.52  29.96  929.01"},{"location":"python/DataAnalysis/ch08/#2003-01-07-743-2193-2895-92293","text":"","title":"2003-01-07  7.43  21.93  28.95  922.93"},{"location":"python/DataAnalysis/ch08/#2003-01-08-728-2131-2883-90993","text":"close_px = close_px_all[ ['AAPL', 'MSFT', 'XOM'] ] close_px = close_px.resample('B').ffill() print(close_px)","title":"2003-01-08  7.28  21.31  28.83  909.93"},{"location":"python/DataAnalysis/ch08/#aapl-msft-xom","text":"","title":"AAPL   MSFT    XOM"},{"location":"python/DataAnalysis/ch08/#2003-01-02-740-2111-2922","text":"","title":"2003-01-02    7.40  21.11  29.22"},{"location":"python/DataAnalysis/ch08/#2003-01-03-745-2114-2924","text":"","title":"2003-01-03    7.45  21.14  29.24"},{"location":"python/DataAnalysis/ch08/#_14","text":"","title":"...            ...    ...    ..."},{"location":"python/DataAnalysis/ch08/#2011-10-13-40843-2718-7637","text":"","title":"2011-10-13  408.43  27.18  76.37"},{"location":"python/DataAnalysis/ch08/#2011-10-14-42200-2727-7811","text":"","title":"2011-10-14  422.00  27.27  78.11"},{"location":"python/DataAnalysis/ch08/#2292-rows-x-3-columns","text":"rolling\u7b97\u5b50\\ \u5b83\u7684\u884c\u4e3a\u4e0eresample\u548cgroupby\u7c7b\u4f3c\u3002\\ rolling\u53ef\u4ee5\u5728Series\u6216DataFrame\u4e0a\u901a\u8fc7\u4e00\u4e2awindow\uff08\u4ee5\u4e00\u4e2a\u533a\u95f4\u7684\u6570\u5b57\u6765\u8868\u793a\uff09\u8fdb\u884c\u8c03\u7528\u3002 close_px.AAPL.plot() \u8868\u8fbe\u5f0frolling(250)\u4e0egroupby\u7684\u884c\u4e3a\u7c7b\u4f3c\uff0c\u4f46\u662f\u5b83\u521b\u5efa\u7684\u5bf9\u8c61\u662f\u6839\u636e250\u65e5\u6ed1\u52a8\u7a97\u53e3\u5206\u7ec4\u7684\u800c\u4e0d\u662f\u76f4\u63a5\u5206\u7ec4\u3002\\ \u56e0\u6b64\u8fd9\u91cc\u6211\u4eec\u83b7\u5f97\u4e86\u82f9\u679c\u516c\u53f8\u80a1\u7968\u4ef7\u683c\u7684250\u65e5\u79fb\u52a8\u7a97\u53e3\u5e73\u5747\u503c\u3002 close_px.AAPL.rolling(250).mean().plot() plt.show() \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u6eda\u52a8\u51fd\u6570\u9700\u8981\u7a97\u53e3\u4e2d\u6240\u6709\u7684\u503c\u5fc5\u987b\u662f\u975eNA\u503c\u3002\\ \u7531\u4e8e\u5b58\u5728\u7f3a\u5931\u503c\u8fd9\u79cd\u884c\u4e3a\u4f1a\u53d1\u751f\u6539\u53d8\uff0c\u5c24\u5176\u662f\u5728\u65f6\u95f4\u5e8f\u5217\u7684\u8d77\u59cb\u4f4d\u7f6e\u4f60\u62e5\u6709\u7684\u6570\u636e\u662f\u5c11\u4e8e\u7a97\u53e3\u533a\u95f4\u7684 apple_std250 = close_px.AAPL.rolling(250, min_periods=10).std() # \u82f9\u679c\u516c\u53f8250\u65e5\u6bcf\u65e5\u8fd4\u56de\u6807\u51c6\u5dee print(apple_std250[5:12])","title":"[2292 rows x 3 columns]"},{"location":"python/DataAnalysis/ch08/#2003-01-09-nan","text":"","title":"2003-01-09         NaN"},{"location":"python/DataAnalysis/ch08/#2003-01-10-nan","text":"","title":"2003-01-10         NaN"},{"location":"python/DataAnalysis/ch08/#2003-01-13-nan","text":"","title":"2003-01-13         NaN"},{"location":"python/DataAnalysis/ch08/#2003-01-14-nan","text":"","title":"2003-01-14         NaN"},{"location":"python/DataAnalysis/ch08/#2003-01-15-0077496","text":"","title":"2003-01-15    0.077496"},{"location":"python/DataAnalysis/ch08/#2003-01-16-0074760","text":"","title":"2003-01-16    0.074760"},{"location":"python/DataAnalysis/ch08/#2003-01-17-0112368","text":"","title":"2003-01-17    0.112368"},{"location":"python/DataAnalysis/ch08/#freq-b-name-aapl-dtype-float64","text":"apple_std250.plot() plt.show() expanding_mean = apple_std250.expanding().mean() print(expanding_mean[5:12])","title":"Freq: B, Name: AAPL, dtype: float64"},{"location":"python/DataAnalysis/ch08/#2003-01-09-nan_1","text":"","title":"2003-01-09         NaN"},{"location":"python/DataAnalysis/ch08/#2003-01-10-nan_1","text":"","title":"2003-01-10         NaN"},{"location":"python/DataAnalysis/ch08/#2003-01-13-nan_1","text":"","title":"2003-01-13         NaN"},{"location":"python/DataAnalysis/ch08/#2003-01-14-nan_1","text":"","title":"2003-01-14         NaN"},{"location":"python/DataAnalysis/ch08/#2003-01-15-0077496_1","text":"","title":"2003-01-15    0.077496"},{"location":"python/DataAnalysis/ch08/#2003-01-16-0076128","text":"","title":"2003-01-16    0.076128"},{"location":"python/DataAnalysis/ch08/#2003-01-17-0088208","text":"","title":"2003-01-17    0.088208"},{"location":"python/DataAnalysis/ch08/#freq-b-name-aapl-dtype-float64_1","text":"expanding_mean.plot() plt.show() \u5728DataFrame\u4e0a\u8c03\u7528\u4e00\u4e2a\u79fb\u52a8\u7a97\u53e3\u51fd\u6570\u4f1a\u5c06\u53d8\u6362\u5e94\u7528\u5230\u6bcf\u4e00\u5217\u4e0a: close_px.rolling(60).mean().plot(logy=True) # \u80a1\u7968\u4ef7\u683c60\u65e5MA\uff08Y\u8f74\u53d6\u5bf9\u6570\uff09 plt.show() rolling\u51fd\u6570\u4e5f\u63a5\u6536\u8868\u793a\u56fa\u5b9a\u5927\u5c0f\u7684\u65f6\u95f4\u504f\u7f6e\u5b57\u7b26\u4e32\uff0c\u800c\u4e0d\u53ea\u662f\u4e00\u4e2a\u533a\u95f4\u7684\u96c6\u5408\u6570\u5b57\u3002\\ \u5bf9\u4e0d\u89c4\u5219\u65f6\u95f4\u5e8f\u5217\u4f7f\u7528\u6ce8\u91ca\u975e\u5e38\u6709\u7528\u3002\\ \u8fd9\u4e9b\u5b57\u7b26\u4e32\u53ef\u4ee5\u4f20\u9012\u7ed9resample\u3002\u4f8b\u5982\uff0c\u6211\u4eec\u53ef\u4ee5\u50cf\u8fd9\u6837\u8ba1\u7b9720\u5929\u7684\u6eda\u52a8\u5e73\u5747\u503c\uff1a result = close_px.rolling('20D').mean() print(result)","title":"Freq: B, Name: AAPL, dtype: float64"},{"location":"python/DataAnalysis/ch08/#aapl-msft-xom_1","text":"","title":"AAPL       MSFT        XOM"},{"location":"python/DataAnalysis/ch08/#2003-01-02-7400000-21110000-29220000","text":"","title":"2003-01-02    7.400000  21.110000  29.220000"},{"location":"python/DataAnalysis/ch08/#_15","text":"","title":"...                ...        ...        ..."},{"location":"python/DataAnalysis/ch08/#2011-10-14-391038000-26048667-74185333","text":"","title":"2011-10-14  391.038000  26.048667  74.185333"},{"location":"python/DataAnalysis/ch08/#2292-rows-x-3-columns_1","text":"result.plot() plt.show() #### \u6307\u6570\u52a0\u6743\u51fd\u6570 \u6307\u5b9a\u4e00\u4e2a\u5e38\u6570\u8870\u51cf\u56e0\u5b50\u4ee5\u5411\u66f4\u591a\u8fd1\u671f\u89c2\u6d4b\u503c\u63d0\u4f9b\u66f4\u591a\u6743\u91cd\uff0c\u53ef\u4ee5\u66ff\u4ee3\u4f7f\u7528\u5177\u6709\u76f8\u7b49\u52a0\u6743\u89c2\u5bdf\u503c\u7684\u9759\u6001\u7a97\u53e3\u5c3a\u5bf8\u7684\u65b9\u6cd5\u3002\\ \u6709\u591a\u79cd\u65b9\u5f0f\u53ef\u4ee5\u6307\u5b9a\u8870\u51cf\u56e0\u5b50\u3002\u5176\u4e2d\u4e00\u79cd\u6d41\u884c\u7684\u65b9\u5f0f\u662f\u4f7f\u7528\u4e00\u4e2aspan\uff08\u8de8\u5ea6\uff09\uff0c\u8fd9\u4f7f\u5f97\u7ed3\u679c\u4e0e\u7a97\u53e3\u5927\u5c0f\u7b49\u4e8e\u8de8\u5ea6\u7684\u7b80\u5355\u79fb\u52a8\u7a97\u53e3\u51fd\u6570\u3002\\ \u7531\u4e8e\u6307\u6570\u52a0\u6743\u7edf\u8ba1\u503c\u7ed9\u66f4\u8fd1\u671f\u7684\u89c2\u6d4b\u503c\u4ee5\u66f4\u591a\u7684\u6743\u91cd\uff0c\u4e0e\u7b49\u6743\u91cd\u7684\u7248\u672c\u76f8\u6bd4\uff0c\u5b83\u5bf9\u53d8\u5316\u201c\u9002\u5e94\u201d\u5f97\u66f4\u5feb\u3002\\ pandas\u62e5\u6709ewm\u7b97\u5b50\uff0c\u540crolling\u3001expanding\u7b97\u5b50\u4e00\u8d77\u4f7f\u7528\u3002 \u4ee5\u4e0b\u662f\u5c06\u82f9\u679c\u516c\u53f8\u80a1\u7968\u4ef7\u683c\u768460\u65e5\u5747\u7ebf\u4e0espan=60\u7684EW\u79fb\u52a8\u5e73\u5747\u7ebf\u8fdb\u884c\u6bd4\u8f83\u7684\u4f8b\u5b50\uff1a aapl_ex = close_px.AAPL['2006':'2007'] ma60 = aapl_ex.rolling(30, min_periods=20).mean() ewma60 = aapl_ex.ewm(span=30).mean() ma60.plot(style='k--', label='Simple MA') ewma60.plot(style='k-', label='EWMA') plt.legend() plt.show() #### \u4e8c\u5143\u79fb\u52a8\u7a97\u53e3\u51fd\u6570 \u4e00\u4e9b\u7edf\u8ba1\u7b97\u5b50\uff0c\u4f8b\u5982\u76f8\u5173\u5ea6\u548c\u534f\u65b9\u5dee\uff0c\u9700\u8981\u64cd\u4f5c\u4e24\u4e2a\u65f6\u95f4\u5e8f\u5217\u3002\\ \u4f8b\u5982\uff0c\u91d1\u878d\u5206\u6790\u5e08\u7ecf\u5e38\u5bf9\u80a1\u7968\u4e0e\u57fa\u51c6\u6307\u6570\uff08\u5982\u6807\u666e500\uff09\u7684\u5173\u8054\u6027\u611f\u5174\u8da3\u3002\\ \u6211\u4eec\u9996\u5148\u8ba1\u7b97\u6240\u6709\u6211\u4eec\u611f\u5174\u8da3\u7684\u65f6\u95f4\u5e8f\u5217\u7684\u767e\u5206\u6bd4\u53d8\u5316\uff1a spx_px = close_px_all['SPX'] spx_rets = spx_px.pct_change() returns = close_px.pct_change()","title":"[2292 rows x 3 columns]"},{"location":"python/DataAnalysis/ch08/#rollingcorrspx_rets","text":"corr = returns.AAPL.rolling(125, min_periods=100).corr(spx_rets) # \u82f9\u679c\u516c\u53f8\u4e0e\u6807\u666e500\u7684\u516d\u4e2a\u6708\u7684\u6536\u76ca\u76f8\u5173\u6027 corr.plot() plt.show() corr = returns.rolling(125, min_periods=100).corr(spx_rets) # \u591a\u53ea\u80a1\u7968\u4e0e\u6807\u666e500\u7684\u516d\u4e2a\u6708\u6536\u76ca\u76f8\u5173\u6027 corr.plot() plt.show() #### \u7528\u6237\u81ea\u5b9a\u4e49\u7684\u79fb\u52a8\u7a97\u53e3\u51fd\u6570 \u5728rolling\u53ca\u5176\u76f8\u5173\u65b9\u6cd5\u4e0a\u4f7f\u7528apply\u65b9\u6cd5\u63d0\u4f9b\u4e86\u4e00\u79cd\u5728\u79fb\u52a8\u7a97\u53e3\u4e2d\u5e94\u7528\u4f60\u81ea\u5df1\u8bbe\u8ba1\u7684\u6570\u7ec4\u51fd\u6570\u7684\u65b9\u6cd5\u3002\\ \u552f\u4e00\u7684\u8981\u6c42\u662f\u8be5\u51fd\u6570\u4ece\u6bcf\u4e2a\u6570\u7ec4\u4e2d\u4ea7\u751f\u4e00\u4e2a\u5355\u503c\uff08\u7f29\u805a\uff09\u3002\\ \u4f8b\u5982\uff0c\u5c3d\u7ba1\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528rolling(...).quantile(q)\u8ba1\u7b97\u6837\u672c\u7684\u5206\u4f4d\u6570\uff0c\u4f46\u6211\u4eec\u53ef\u80fd\u4f1a\u5bf9\u6837\u672c\u4e2d\u7279\u5b9a\u503c\u7684\u767e\u5206\u4f4d\u6570\u611f\u5174\u8da3\u3002\\ scipy.stats.percentileofscore \u51fd\u6570\u5c31\u662f\u5b9e\u73b0\u8fd9\u4e2a\u529f\u80fd\u7684\uff1a score_at_2percent = lambda x: percentileofscore(x, 0.02) result = returns.AAPL.rolling(250).apply(score_at_2percent) # \u4e00\u5e74\u7a97\u53e3\u4e0b\u82f9\u679c\u516c\u53f8\u80a1\u4ef72%\u6536\u76ca\u7684\u767e\u5206\u4f4d\u7b49\u7ea7 result.plot() plt.show() result = returns.rolling(250).apply(score_at_2percent) # \u4e00\u5e74\u7a97\u53e3\u4e0b\u6240\u6709\u516c\u53f8\u80a1\u4ef72%\u6536\u76ca\u7684\u767e\u5206\u4f4d\u7b49\u7ea7 result.plot() plt.show() ```","title":"\u5728\u8c03\u7528rolling\u540e\uff0ccorr\u805a\u5408\u51fd\u6570\u53ef\u4ee5\u6839\u636espx_rets\u8ba1\u7b97\u6eda\u52a8\u76f8\u5173\u6027\uff1a"},{"location":"python/DataAnalysis/ch09/","text":"\u5206\u7c7b\u6570\u636e import numpy as np import pandas as pd \u80cc\u666f\u548c\u76ee\u6807 \u4e00\u4e2a\u5217\u7ecf\u5e38\u4f1a\u5305\u542b\u91cd\u590d\u503c\uff0c\u8fd9\u4e9b\u91cd\u590d\u503c\u662f\u4e00\u4e2a\u5c0f\u578b\u7684\u4e0d\u540c\u503c\u7684\u96c6\u5408\u3002\\ unique\u548cvalue_counts\u8fd9\u6837\u7684\u51fd\u6570\u5141\u8bb8\u6211\u4eec\u4ece\u4e00\u4e2a\u6570\u7ec4\u4e2d\u63d0\u53d6\u4e0d\u540c\u503c\u5e76\u5206\u522b\u8ba1\u7b97\u8fd9\u4e9b\u4e0d\u540c\u503c\u7684\u9891\u7387\uff1a values = pd.Series(['apple', 'orange', 'apple', 'apple'] * 2) print(values) # 0 apple # 1 orange # 2 apple # 3 apple # 4 apple # 5 orange # 6 apple # 7 apple # dtype: object print(pd.unique(values)) # ['apple' 'orange'] print(pd.value_counts(values)) # apple 6 # orange 2 # dtype: int64 \u5728\u6570\u636e\u5165\u5e93\u7684\u64cd\u4f5c\u4e2d\uff0c\u4f7f\u7528\u7ef4\u5ea6\u8868\u662f\u4e00\u79cd\u6700\u4f73\u5b9e\u8df5\uff0c\u7ef4\u5ea6\u8868\u5305\u542b\u4e86\u4e0d\u540c\u503c\uff0c\u5e76\u5c06\u4e3b\u8981\u89c2\u6d4b\u503c\u5b58\u50a8\u4e3a\u5f15\u7528\u7ef4\u5ea6\u8868\u7684\u6574\u6570\u952e\uff1a values = pd.Series([0, 1, 0, 0] * 2) dim = pd.Series(['apple', 'oragne']) \u4f7f\u7528take\u65b9\u6cd5\u6765\u6062\u590d\u539f\u6765\u7684\u5b57\u7b26\u4e32Series\u3002\uff080\u5bf9\u5e94\u5230apple)\\ \u8fd9\u79cd\u6309\u7167\u6574\u6570\u5c55\u73b0\u7684\u65b9\u5f0f\u88ab\u79f0\u4e3a\u5206\u7c7b\u6216\u5b57\u5178\u7f16\u7801\u5c55\u73b0\u3002\u4e0d\u540c\u503c\u7684\u6570\u7ec4\u53ef\u4ee5\u88ab\u79f0\u4e3a\u6570\u636e\u7684\u7c7b\u522b\u3001\u5b57\u5178\u6216\u5c42\u7ea7\u3002 print(dim.take(values)) # 0 apple # 1 oragne # 0 apple # 0 apple # 0 apple # 1 oragne # 0 apple # 0 apple # dtype: object \u5728\u505a\u6570\u636e\u5206\u6790\u65f6\uff0c\u5206\u7c7b\u5c55\u793a\u4f1a\u4ea7\u751f\u663e\u8457\u7684\u6027\u80fd\u63d0\u5347\u3002\\ \u53ef\u4ee5\u5728\u7c7b\u522b\u4e0a\u8fdb\u884c\u8f6c\u6362\u540c\u65f6\u4e0d\u6539\u53d8\u4ee3\u7801\u3002\\ \u4ee5\u4e0b\u662f\u4e00\u4e9b\u76f8\u5bf9\u4f4e\u5f00\u9500\u7684\u8f6c\u6362\u793a\u4f8b\uff1a * \u91cd\u547d\u540d\u7c7b\u522b * \u5728\u4e0d\u6539\u53d8\u5df2\u6709\u7684\u7c7b\u522b\u987a\u5e8f\u7684\u60c5\u51b5\u4e0b\u6dfb\u52a0\u4e00\u4e2a\u65b0\u7684\u7c7b\u522b pandas\u4e2d\u7684Categorical\u7c7b\u578b pandas\u62e5\u6709\u7279\u6b8a\u7684Categorical\u7c7b\u578b\uff0c\u7528\u4e8e\u627f\u8f7d\u57fa\u4e8e\u6574\u6570\u7684\u7c7b\u522b\u5c55\u793a\u6216\u7f16\u7801\u7684\u6570\u636e\u3002 fruits = ['apple', 'orange', 'apple', 'apple'] * 2 N = len(fruits) df = pd.DataFrame( { 'fruit': fruits, 'basket_id': np.arange(N), 'count': np.random.randint(3, 15, size=N), 'weight': np.random.uniform(0, 4, size=N) }, columns=['basket_id', 'fruit', 'count', 'weight'] ) print(df) # basket_id fruit count weight # 0 0 apple 8 1.288867 # 1 1 orange 4 3.414430 # 2 2 apple 7 3.222160 # 3 3 apple 14 2.724804 # 4 4 apple 8 3.548828 # 5 5 orange 10 0.918739 # 6 6 apple 4 0.784816 # 7 7 apple 10 3.140607 df['fruit']\u662f\u4e00\u4e2aPython\u5b57\u7b26\u4e32\u5bf9\u8c61\u7ec4\u6210\u7684\u6570\u7ec4\u3002\u53ef\u4ee5\u901a\u8fc7\u8c03\u7528\u51fd\u6570\u5c06\u5b83\u8f6c\u6362\u4e3aCategorical\u5bf9\u8c61\uff1a fruit_cat = df['fruit'].astype('category') print(fruit_cat) # 0 apple # 1 orange # 2 apple # 3 apple # 4 apple # 5 orange # 6 apple # 7 apple # Name: fruit, dtype: category # Categories (2, object): ['apple', 'orange'] fruit_cat\u7684\u503c\u5e76\u4e0d\u662fNumPy\u6570\u7ec4\uff0c\u800c\u662fpandas.Categorical\u7684\u5b9e\u4f8b\uff1a c = fruit_cat.values print(type(c)) # <class 'pandas.core.arrays.categorical.Categorical'> print(c) # ['apple', 'orange', 'apple', 'apple', 'apple', 'orange', 'apple', 'apple'] # Categories (2, object): ['apple', 'orange'] Categorical\u5bf9\u8c61\u62e5\u6709categories\u548ccodes\u5c5e\u6027\uff1a print(c.categories) # Index(['apple', 'orange'], dtype='object') print(c.codes) # [0 1 0 0 0 1 0 0] \u901a\u8fc7\u5206\u914d\u5df2\u8f6c\u6362\u7684\u7ed3\u679c\u5c06DataFrame\u7684\u4e00\u5217\u8f6c\u6362\u4e3aCategorical\u5bf9\u8c61\uff1a print(df['fruit']) # 0 apple # 1 orange # 2 apple # 3 apple # 4 apple # 5 orange # 6 apple # 7 apple # Name: fruit, dtype: object df['fruit'] = df['fruit'].astype('category') print(df['fruit']) # 0 apple # 1 orange # 2 apple # 3 apple # 4 apple # 5 orange # 6 apple # 7 apple # Name: fruit, dtype: category # Categories (2, object): ['apple', 'orange'] \u4e5f\u53ef\u4ee5\u4ece\u5176\u4ed6Python\u5e8f\u5217\u7c7b\u578b\u76f4\u63a5\u751f\u6210pandas.Categorical\uff1a my_categories = pd.Categorical(['foo', 'bar', 'baz', 'foo', 'bar']) print(my_categories) # ['foo', 'bar', 'baz', 'foo', 'bar'] # Categories (3, object): ['bar', 'baz', 'foo'] \u4e5f\u53ef\u4ee5\u4f7f\u7528from_codes\u6784\u9020\u51fd\u6570\u6765\u8f6c\u6362\u5176\u4ed6\u6570\u636e\u6e90\u7684\u5206\u7c7b\u7f16\u7801\u6570\u636e\uff1a categories = ['foo', 'bar', 'baz'] codes = [0, 1, 2, 0, 0, 1] my_cats_2 = pd.Categorical.from_codes(codes, categories) print(my_cats_2) # ['foo', 'bar', 'baz', 'foo', 'foo', 'bar'] # Categories (3, object): ['foo', 'bar', 'baz'] \u8fd9\u4e2a\u672a\u6392\u5e8f\u7684\u5206\u7c7b\u5b9e\u4f8b\u53ef\u4ee5\u4f7f\u7528as_ordered\u8fdb\u884c\u6392\u5e8f\uff1a print(my_cats_2.as_ordered()) # ['foo', 'bar', 'baz', 'foo', 'foo', 'bar'] # Categories (3, object): ['foo' < 'bar' < 'baz'] \u9664\u975e\u663e\u5f0f\u5730\u6307\u5b9a\uff0c\u5206\u7c7b\u8f6c\u6362\u662f\u4e0d\u4f1a\u6307\u5b9a\u7c7b\u522b\u7684\u987a\u5e8f\u7684\u3002\\ \u56e0\u6b64categories\u6570\u7ec4\u53ef\u80fd\u4f1a\u4e0e\u8f93\u5165\u6570\u636e\u7684\u987a\u5e8f\u4e0d\u540c\u3002\\ \u5f53\u4f7f\u7528from_codes\u6216\u5176\u4ed6\u4efb\u610f\u6784\u9020\u51fd\u6570\u65f6\uff0c\u53ef\u4ee5\u4e3a\u7c7b\u522b\u6307\u5b9a\u4e00\u4e2a\u6709\u610f\u4e49\u7684\u987a\u5e8f\uff1a\\ \u8f93\u51fa\u7684[foo<bar<baz]\u8868\u660e\u2019foo\u2019\u7684\u987a\u5e8f\u5728\u2019bar\u2019\u4e4b\u524d\uff0c\u4ee5\u6b64\u7c7b\u63a8\u3002 my_categories_ordered = pd.Categorical.from_codes(codes=codes, categories=categories, ordered=True) print(my_categories_ordered) # ['foo', 'bar', 'baz', 'foo', 'foo', 'bar'] # Categories (3, object): ['foo' < 'bar' < 'baz'] \u5206\u7c7b\u6570\u636e\u53ef\u4ee5\u4e0d\u662f\u5b57\u7b26\u4e32\uff0c\u5c3d\u7ba1\u4e3e\u7684\u4f8b\u5b50\u90fd\u662f\u5b57\u7b26\u4e32\u4f8b\u5b50\u3002\u4e00\u4e2a\u5206\u7c7b\u6570\u7ec4\u53ef\u4ee5\u5305\u542b\u4efb\u4e00\u4e0d\u53ef\u53d8\u7684\u503c\u7c7b\u578b\u3002 \u4f7f\u7528Categorical\u5bf9\u8c61\u8fdb\u884c\u8ba1\u7b97 \u5728pandas\u4e2d\u4f7f\u7528Categorical\u4e0e\u975e\u7f16\u7801\u7248\u672c\u76f8\u6bd4\uff08\u4f8b\u5982\u5b57\u7b26\u4e32\u6570\u7ec4\uff09\u6574\u4f53\u4e0a\u662f\u4e00\u81f4\u7684\u3002\\ pandas\u4e2d\u7684\u67d0\u4e9b\u90e8\u5206\uff0c\u6bd4\u5982groupby\u51fd\u6570\uff0c\u5728\u4e0eCategorical\u5bf9\u8c61\u534f\u540c\u5de5\u4f5c\u65f6\u6027\u80fd\u66f4\u597d\u3002\\ \u8fd8\u6709\u4e00\u4e9b\u51fd\u6570\u53ef\u4ee5\u5229\u7528ordered\u6807\u8bc6\u3002\\ \u4e0b\u9762\u8003\u8651\u4e00\u4e9b\u968f\u673a\u6570\u5b57\u6570\u636e\uff0c\u5e76\u4f7f\u7528pandas.qcut\u5206\u7bb1\u51fd\u6570\u3002\u7ed3\u679c\u4f1a\u8fd4\u56depandas.Categorical\uff1b\\ \u5728\u524d\u9762\u7ae0\u8282\u4f7f\u7528\u8fc7pandas.cut\uff0c\u4f46\u5f53\u65f6\u6ca1\u6709\u5206\u6790\u5206\u7c7b\u662f\u5982\u4f55\u5de5\u4f5c\u7684\u7ec6\u8282\u3002 np.random.seed(12345) draws = np.random.randn(1000) print(draws[:5]) # [-0.20470766 0.47894334 -0.51943872 -0.5557303 1.96578057] \u8ba1\u7b97\u4e0a\u9762\u6570\u636e\u7684\u56db\u5206\u4f4d\u5206\u7bb1\uff0c\u5e76\u63d0\u53d6\u4e00\u4e9b\u7edf\u8ba1\u503c\uff1a bins = pd.qcut(draws, 4) print(bins) # [(-0.684, -0.0101], (-0.0101, 0.63], (-0.684, -0.0101], (-0.684, -0.0101], (0.63, 3.928], ..., (-0.0101, 0.63], (-0.684, -0.0101], (-2.9499999999999997, -0.684], (-0.0101, 0.63], (0.63, 3.928]] # Length: 1000 # Categories (4, interval[float64, right]): [(-2.9499999999999997, -0.684] < (-0.684, -0.0101] < (-0.0101, 0.63] < (0.63, 3.928]] \u901a\u8fc7\u5728qcut\u51fd\u6570\u4e2d\u4f7f\u7528labels\u53c2\u6570\u6765\u56db\u5206\u4f4d\u6570\u540d\u79f0\uff1a bins = pd.qcut(draws, 4, labels=['Q1', 'Q2', 'Q3', 'Q4']) print(bins) # ['Q2', 'Q3', 'Q2', 'Q2', 'Q4', ..., 'Q3', 'Q2', 'Q1', 'Q3', 'Q4'] # Length: 1000 # Categories (4, object): ['Q1' < 'Q2' < 'Q3' < 'Q4'] print(bins.codes[:10]) # [1 2 1 1 3 3 2 2 3 3] \u88ab\u6807\u8bb0\u7684bins\u5206\u7c7b\u6570\u636e\u5e76\u4e0d\u5305\u542b\u6570\u636e\u4e2d\u7bb1\u4f53\u8fb9\u754c\u7684\u76f8\u5173\u4fe1\u606f\uff0c\u56e0\u6b64\u53ef\u4ee5\u4f7f\u7528groupby\u6765\u63d0\u53d6\u4e00\u4e9b\u6c47\u603b\u7edf\u8ba1\u503c\uff1a bins = pd.Series(bins, name='quartile') result = (pd.Series(draws).groupby(bins).agg(['count', 'min', 'max']).reset_index()) print(result) # quartile count min max # 0 Q1 250 -2.949343 -0.685484 # 1 Q2 250 -0.683066 -0.010115 # 2 Q3 250 -0.010032 0.628894 # 3 Q4 250 0.634238 3.927528 \u7ed3\u679c\u4e2d\u7684\u2019quartile\u2019\u5217\u4fdd\u7559\u4e86bins\u4e2d\u539f\u59cb\u7684\u5206\u7c7b\u4fe1\u606f\uff0c\u5305\u62ec\u987a\u5e8f\uff1a print(result['quartile']) # 0 Q1 # 1 Q2 # 2 Q3 # 3 Q4 # Name: quartile, dtype: category # Categories (4, object): ['Q1' < 'Q2' < 'Q3' < 'Q4'] \u4f7f\u7528\u5206\u7c7b\u83b7\u5f97\u66f4\u9ad8\u6027\u80fd \u5982\u679c\u5bf9\u7279\u5b9a\u7684\u6570\u636e\u96c6\u4e0a\u505a\u4e86\u5927\u91cf\u7684\u5206\u6790\uff0c\u5c06\u6570\u636e\u8f6c\u6362\u4e3a\u5206\u7c7b\u6570\u636e\u53ef\u4ee5\u4ea7\u751f\u5927\u5e45\u7684\u6027\u80fd\u63d0\u5347\u3002\\ DateFrame\u4e2d\u4e00\u5217\u7684\u5206\u7c7b\u7248\u672c\u901a\u5e38\u4e5f\u4f1a\u660e\u663e\u4f7f\u7528\u66f4\u5c11\u5185\u5b58\u3002 \u4e0b\u9762\u7684\u4f8b\u5b50\u542b\u6709\u4e00\u5343\u4e07\u5143\u7d20\u7684Series\u4ee5\u53ca\u5c11\u91cf\u7684\u4e0d\u540c\u7c7b\u522b\uff1a N = 10000000 draws = pd.Series(np.random.randn(N)) labels = pd.Series(['foo', 'bar', 'baz', 'qux'] * (N // 4)) \u73b0\u5728\u5c06labels\u8f6c\u6362\u4e3aCategorical\u5bf9\u8c61\uff1a categories = labels.astype('category') print(labels.memory_usage()) # labels\u6bd4categories\u4f7f\u7528\u4e86\u660e\u663e\u66f4\u591a\u7684\u5185\u5b58 # 80000128 print(categories.memory_usage()) # 10000332 \u5206\u7c7b\u65b9\u6cd5 Series\u5305\u542b\u7684\u5206\u7c7b\u6570\u636e\u62e5\u6709\u4e00\u4e9b\u7279\u6b8a\u65b9\u6cd5\uff0c\u8fd9\u4e9b\u65b9\u6cd5\u7c7b\u4f3c\u4e8eSeries.str\u7684\u7279\u6b8a\u5b57\u7b26\u4e32\u65b9\u6cd5\u3002\\ \u8fd9\u4e9b\u65b9\u6cd5\u63d0\u4f9b\u4e86\u5feb\u6377\u8bbf\u95ee\u7c7b\u522b\u548c\u4ee3\u7801\u7684\u65b9\u5f0f\u3002 s = pd.Series(['a', 'b', 'c', 'd'] * 2) cat_s = s.astype('category') print(cat_s) # 0 a # 1 b # 2 c # 3 d # 4 a # 5 b # 6 c # 7 d # dtype: category # Categories (4, object): ['a', 'b', 'c', 'd'] \u7279\u6b8a\u5c5e\u6027cat\u63d0\u4f9b\u4e86\u5bf9\u5206\u7c7b\u65b9\u6cd5\u7684\u8bbf\u95ee\uff1a print(cat_s.cat.codes) # 0 0 # 1 1 # 2 2 # 3 3 # 4 0 # 5 1 # 6 2 # 7 3 # dtype: int8 print(cat_s.cat.categories) # Index(['a', 'b', 'c', 'd'], dtype='object') \u5047\u8bbe\u6570\u636e\u7684\u5b9e\u9645\u7c7b\u522b\u96c6\u5408\u8d85\u51fa\u4e86\u6570\u636e\u4e2d\u89c2\u5bdf\u5230\u7684\u56db\u4e2a\u503c\uff0c\u53ef\u4ee5\u4f7f\u7528set_categories\u65b9\u6cd5\u6765\u6539\u53d8\u7c7b\u522b\uff1a actual_categories = ['a', 'b', 'c', 'd', 'e'] cat_s2 = cat_s.cat.set_categories(actual_categories) print(cat_s2) # 0 a # 1 b # 2 c # 3 d # 4 a # 5 b # 6 c # 7 d # dtype: category # Categories (5, object): ['a', 'b', 'c', 'd', 'e'] \u867d\u7136\u770b\u8d77\u6765\u6570\u636e\u5e76\u672a\u6539\u53d8\uff0c\u4f46\u65b0\u7c7b\u522b\u5c06\u53cd\u6620\u5728\u4f7f\u7528\u5b83\u4eec\u7684\u64cd\u4f5c\u4e2d\u3002\u4f8b\u5982\uff0cvalue_counts\u5c06\u9075\u5faa\u65b0\u7684\u7c7b\u522b\uff08\u5982\u679c\u5b58\u5728\uff09\uff1a print(cat_s.value_counts()) # a 2 # b 2 # c 2 # d 2 # dtype: int64 print(cat_s2.value_counts()) # a 2 # b 2 # c 2 # d 2 # e 0 # dtype: int64 \u5927\u578b\u6570\u636e\u96c6\u4e2d\uff0c\u5206\u7c7b\u6570\u636e\u7ecf\u5e38\u88ab\u7528\u4e8e\u8282\u7701\u5185\u5b58\u548c\u66f4\u9ad8\u6027\u80fd\u7684\u4fbf\u6377\u5de5\u5177\u3002\\ \u5728\u8fc7\u6ee4\u4e86\u4e00\u4e2a\u5927\u578bDataFrame\u6216Series\u4e4b\u540e\uff0c\u5f88\u591a\u7c7b\u522b\u5c06\u4e0d\u4f1a\u51fa\u73b0\u5728\u6570\u636e\u4e2d\u3002\\ \u53ef\u4ee5\u4f7f\u7528remove_unused_categories\u65b9\u6cd5\u6765\u53bb\u9664\u672a\u89c2\u5bdf\u5230\u7684\u7c7b\u522b\uff1a cat_s3 = cat_s[cat_s.isin(['a', 'b'])] print(cat_s3) # 0 a # 1 b # 4 a # 5 b # dtype: category # Categories (4, object): ['a', 'b', 'c', 'd'] print(cat_s3.cat.remove_unused_categories()) # 0 a # 1 b # 4 a # 5 b # dtype: category # Categories (2, object): ['a', 'b'] \u521b\u5efa\u7528\u4e8e\u5efa\u6a21\u7684\u865a\u62df\u53d8\u91cf \u5f53\u4f7f\u7528\u7edf\u8ba1\u6570\u636e\u6216\u673a\u5668\u5b66\u4e60\u5de5\u5177\u65f6\uff0c\u901a\u5e38\u4f1a\u5c06\u5206\u7c7b\u6570\u636e\u8f6c\u6362\u4e3a\u865a\u62df\u53d8\u91cf\uff0c\u4e5f\u79f0\u4e3aone-hot\u7f16\u7801\u3002\\ \u8fd9\u4f1a\u4ea7\u751f\u4e00\u4e2aDataFrame\uff0c\u6bcf\u4e2a\u4e0d\u540c\u7684\u7c7b\u522b\u90fd\u662f\u5b83\u7684\u4e00\u5217\u3002\u8fd9\u4e9b\u5217\u5305\u542b\u4e00\u4e2a\u7279\u5b9a\u7c7b\u522b\u7684\u51fa\u73b0\u6b21\u6570\uff0c\u5426\u5219\u4e3a0\u3002 cat_s = pd.Series(['a', 'b', 'c', 'd'] * 2, dtype='category') \u4f7f\u7528pandas.get_dummies\u51fd\u6570\u5c06\u4e00\u7ef4\u7684\u5206\u7c7b\u6570\u636e\u8f6c\u6362\u4e3a\u4e00\u4e2a\u5305\u542b\u865a\u62df\u53d8\u91cf\u7684DataFrame\uff1a print(pd.get_dummies(cat_s)) # a b c d # 0 1 0 0 0 # 1 0 1 0 0 # 2 0 0 1 0 # 3 0 0 0 1 # 4 1 0 0 0 # 5 0 1 0 0 # 6 0 0 1 0 # 7 0 0 0 1 \u9ad8\u9636GroupBy\u5e94\u7528 import numpy as np import pandas as pd \u5206\u7ec4\u8f6c\u6362\u548c\u201c\u5c55\u5f00\u201dGroupBy \u5728\u5206\u7ec4\u64cd\u4f5c\u4e2d\u53ef\u4ee5\u4f7f\u7528apply\u65b9\u6cd5\u5b9e\u73b0\u8f6c\u6362\u64cd\u4f5c\u3002\\ \u8fd8\u6709\u53e6\u4e00\u4e2a\u5185\u5efa\u65b9\u6cd5transform\uff0c\u4e0eapply\u65b9\u6cd5\u7c7b\u4f3c\u4f46\u662f\u53ef\u4ee5\u5bf9\u4f7f\u7528\u7684\u51fd\u6570\u52a0\u4e0a\u66f4\u591a\u7684\u9650\u5236\uff1a\\ transform\u53ef\u4ee5\u4ea7\u751f\u4e00\u4e2a\u6807\u91cf\u503c\uff0c\u5e76\u5e7f\u64ad\u5230\u5404\u5206\u7ec4\u7684\u5c3a\u5bf8\u6570\u636e\u4e2d\u3002\\ transform\u53ef\u4ee5\u4ea7\u751f\u4e00\u4e2a\u4e0e\u8f93\u5165\u5206\u7ec4\u5c3a\u5bf8\u76f8\u540c\u7684\u5bf9\u8c61\u3002\\ transform\u4e0d\u53ef\u6539\u53d8\u5b83\u7684\u8f93\u5165\u3002 df = pd.DataFrame( { 'key': ['a', 'b', 'c'] * 4, 'value': np.arange(12) } ) print(df) # key value # 0 a 0 # 1 b 1 # 2 c 2 # 3 a 3 # 4 b 4 # 5 c 5 # 6 a 6 # 7 b 7 # 8 c 8 # 9 a 9 # 10 b 10 # 11 c 11 \u6309'key'\u5206\u7ec4\u7684\u5747\u503c\uff1a g = df.groupby('key').value print(g.mean()) # key # a 4.5 # b 5.5 # c 6.5 # Name: value, dtype: float64 \u5047\u8bbe\u8981\u4ea7\u751f\u4e00\u4e2aSeries\uff0c\u5b83\u7684\u5c3a\u5bf8\u548cdf['value']\u4e00\u6837\uff0c\u4f46\u503c\u90fd\u88ab\u6309\u2019key'\u5206\u7ec4\u7684\u5747\u503c\u66ff\u4ee3\u3002\\ \u53ef\u4ee5\u5411transfrom\u4f20\u9012\u533f\u540d\u51fd\u6570lambda x: x.mean()\uff1a result = g.transform(lambda x: x.mean()) print(result) # 0 4.5 # 1 5.5 # 2 6.5 # 3 4.5 # 4 5.5 # 5 6.5 # 6 4.5 # 7 5.5 # 8 6.5 # 9 4.5 # 10 5.5 # 11 6.5 # Name: value, dtype: float64 \u5bf9\u4e8e\u5185\u5efa\u7684\u805a\u5408\u51fd\u6570\uff0c\u53ef\u4ee5\u50cfGroupBy\u7684agg\u65b9\u6cd5\u4e00\u6837\u4f20\u9012\u4e00\u4e2a\u5b57\u7b26\u4e32\u522b\u540d\uff1a result = g.transform('mean') print(result) # 0 4.5 # 1 5.5 # 2 6.5 # 3 4.5 # 4 5.5 # 5 6.5 # 6 4.5 # 7 5.5 # 8 6.5 # 9 4.5 # 10 5.5 # 11 6.5 # Name: value, dtype: float64 \u4e0eapply\u7c7b\u4f3c\uff0ctransform\u53ef\u4ee5\u4e0e\u8fd4\u56deSeries\u7684\u51fd\u6570\u4e00\u8d77\u4f7f\u7528\uff0c\u4f46\u7ed3\u679c\u5fc5\u987b\u548c\u8f93\u5165\u6709\u76f8\u540c\u7684\u5927\u5c0f\u3002 \u4f8b\u5982\uff0c\u53ef\u4ee5\u4f7f\u7528lambda\u51fd\u6570\u7ed9\u6bcf\u4e2a\u7ec4\u4e58\u4ee52\uff1a result = g.transform(lambda x: x * 2) print(result) # 0 0 # 1 2 # 2 4 # 3 6 # 4 8 # 5 10 # 6 12 # 7 14 # 8 16 # 9 18 # 10 20 # 11 22 # Name: value, dtype: int64 \u66f4\u590d\u6742\u4e00\u4e9b\uff0c\u53ef\u4ee5\u6309\u7167\u6bcf\u4e2a\u7ec4\u7684\u964d\u5e8f\u8ba1\u7b97\u6392\u540d\uff1a result = g.transform(lambda x: x.rank(ascending=False)) print(result) # 0 4.0 # 1 4.0 # 2 4.0 # 3 3.0 # 4 3.0 # 5 3.0 # 6 2.0 # 7 2.0 # 8 2.0 # 9 1.0 # 10 1.0 # 11 1.0 # Name: value, dtype: float64 \u8003\u8651\u4e00\u4e2a\u7531\u7b80\u5355\u805a\u5408\u6784\u6210\u7684\u5206\u7ec4\u8f6c\u6362\u51fd\u6570\uff1a def normalize(x): return (x - x.mean()) / x.std() \u4f7f\u7528transform\u6216apply\u53ef\u4ee5\u83b7\u5f97\u7b49\u4ef7\u7684\u7ed3\u679c\uff1a result = g.transform(normalize) print(result) # 0 -1.161895 # 1 -1.161895 # 2 -1.161895 # 3 -0.387298 # 4 -0.387298 # 5 -0.387298 # 6 0.387298 # 7 0.387298 # 8 0.387298 # 9 1.161895 # 10 1.161895 # 11 1.161895 # Name: value, dtype: float64 result = g.apply(normalize) print(result) # 0 -1.161895 # 1 -1.161895 # 2 -1.161895 # 3 -0.387298 # 4 -0.387298 # 5 -0.387298 # 6 0.387298 # 7 0.387298 # 8 0.387298 # 9 1.161895 # 10 1.161895 # 11 1.161895 # Name: value, dtype: float64 \u5185\u5efa\u7684\u805a\u5408\u51fd\u6570\u5982\u2019mean\u2019\u6216\u2019sum\u2019\u901a\u5e38\u4f1a\u6bd4apply\u51fd\u6570\u66f4\u5feb\u3002\\ \u8fd9\u4e9b\u51fd\u6570\u5728\u4e0etransform\u4e00\u8d77\u4f7f\u7528\u65f6\u4e5f\u4f1a\u5b58\u5728\u4e00\u4e2a\"\u5feb\u901f\u901a\u8fc7\"\u3002\\ \u8fd9\u5141\u8bb8\u6211\u4eec\u6267\u884c\u4e00\u4e2a\u6240\u8c13\u7684\u5c55\u5f00\u5206\u7ec4\u64cd\u4f5c\u3002\\ \u4e00\u4e2a\u5c55\u5f00\u5206\u7ec4\u64cd\u4f5c\u53ef\u80fd\u4f1a\u5305\u542b\u591a\u4e2a\u5206\u7ec4\u805a\u5408\uff0c\u77e2\u91cf\u5316\u64cd\u4f5c\u7684\u6574\u4f53\u4f18\u52bf\u5f80\u5f80\u8d85\u8fc7\u4e86\u8fd9\u4e00\u70b9\u3002 result = g.transform('mean') print(result) # 0 4.5 # 1 5.5 # 2 6.5 # 3 4.5 # 4 5.5 # 5 6.5 # 6 4.5 # 7 5.5 # 8 6.5 # 9 4.5 # 10 5.5 # 11 6.5 # Name: value, dtype: float64 normalized = (df['value'] - g.transform('mean')) / g.transform('std') print(normalized) # 0 -1.161895 # 1 -1.161895 # 2 -1.161895 # 3 -0.387298 # 4 -0.387298 # 5 -0.387298 # 6 0.387298 # 7 0.387298 # 8 0.387298 # 9 1.161895 # 10 1.161895 # 11 1.161895 # Name: value, dtype: float64 \u5206\u7ec4\u7684\u65f6\u95f4\u91cd\u65b0\u91c7\u6837 \u5bf9\u4e8e\u65f6\u95f4\u5e8f\u5217\u6570\u636e\uff0cresample\u65b9\u6cd5\u5728\u8bed\u4e49\u4e0a\u662f\u4e00\u79cd\u57fa\u4e8e\u65f6\u95f4\u5206\u6bb5\u7684\u5206\u7ec4\u64cd\u4f5c\u3002 N = 15 times = pd.date_range('2020-5-20 00:00', freq='1min', periods=N) df = pd.DataFrame( { 'time': times, 'value': np.arange(N) } ) print(df) # time value # 0 2020-05-20 00:00:00 0 # 1 2020-05-20 00:01:00 1 # 2 2020-05-20 00:02:00 2 # 3 2020-05-20 00:03:00 3 # 4 2020-05-20 00:04:00 4 # 5 2020-05-20 00:05:00 5 # 6 2020-05-20 00:06:00 6 # 7 2020-05-20 00:07:00 7 # 8 2020-05-20 00:08:00 8 # 9 2020-05-20 00:09:00 9 # 10 2020-05-20 00:10:00 10 # 11 2020-05-20 00:11:00 11 # 12 2020-05-20 00:12:00 12 # 13 2020-05-20 00:13:00 13 # 14 2020-05-20 00:14:00 14 \u8fd9\u91cc\uff0c\u53ef\u4ee5\u6309\u2019time\u2019\u8fdb\u884c\u7d22\u5f15\uff0c\u7136\u540e\u91cd\u65b0\u91c7\u6837\uff1a result = df.set_index('time').resample('5min').count() print(result) # value # time # 2020-05-20 00:00:00 5 # 2020-05-20 00:05:00 5 # 2020-05-20 00:10:00 5 \u5047\u8bbeDataFrame\u5305\u542b\u591a\u4e2a\u65f6\u95f4\u5e8f\u5217\uff0c\u5e76\u6309\u4e00\u4e2a\u9644\u52a0\u7684\u5206\u7ec4\u952e\u5217\u8fdb\u884c\u4e86\u6807\u8bb0\uff1a df2 = pd.DataFrame( { 'time': times.repeat(3), 'key': np.tile(['a', 'b', 'c'], N), 'value': np.arange((N * 3)) } ) print(df2) # time key value # 0 2020-05-20 00:00:00 a 0 # 1 2020-05-20 00:00:00 b 1 # 2 2020-05-20 00:00:00 c 2 # 3 2020-05-20 00:01:00 a 3 # ...... # 43 2020-05-20 00:14:00 b 43 # 44 2020-05-20 00:14:00 c 44 \u4f7f\u7528pandas.TimeGrouper\u5bf9\u8c61\uff0c\u6bcf\u4e2a\u2019key\u2019\u7684\u503c\u8fdb\u884c\u76f8\u540c\u7684\u91cd\u65b0\u91c7\u6837\uff1a\\ pd.TimeGrouper() was formally deprecated in pandas v0.21.0 in favor of pd.Grouper(). \u65b9\u6cd5\u94fe\u6280\u672f import numpy as np import pandas as pd from numpy import nan as NA df = pd.DataFrame( [[1., 2., 3.], [1., NA, NA], [NA, NA, NA], [NA, 2., 3.]] ) v = ['a', 'b', 'c', 'd'] print(df) # 0 1 2 # 0 1.0 2.0 3.0 # 1 1.0 NaN NaN # 2 NaN NaN NaN # 3 NaN 2.0 3.0 \u975e\u51fd\u6570\u8d4b\u503c\u7684\u65b9\u5f0f df2 = df.copy() df2['k'] = v print(df2) # 0 1 2 k # 0 1.0 2.0 3.0 a # 1 1.0 NaN NaN b # 2 NaN NaN NaN c # 3 NaN 2.0 3.0 d \u51fd\u6570\u8d4b\u503c\u7684\u65b9\u5f0f\\ DataFrame.assign\u65b9\u6cd5\u662f\u5bf9df[k] = v\u7684\u8d4b\u503c\u65b9\u5f0f\u7684\u4e00\u79cd\u529f\u80fd\u66ff\u4ee3\u3002\u5b83\u8fd4\u56de\u7684\u662f\u4e00\u4e2a\u6309\u6307\u5b9a\u4fee\u6539\u7684\u65b0\u7684DataFrame\uff0c\u800c\u4e0d\u662f\u5728\u539f\u5bf9\u8c61\u4e0a\u8fdb\u884c\u4fee\u6539\u3002 df2 = df.assign(k=v) print(df2) # 0 1 2 k # 0 1.0 2.0 3.0 a # 1 1.0 NaN NaN b # 2 NaN NaN NaN c # 3 NaN 2.0 3.0 d pipe\u65b9\u6cd5 \u5bf9\u6570\u636e\u8fde\u7eed\u64cd\u4f5c\u5f62\u6210\u65b9\u6cd5\u94fe\uff08\u591a\u4e2a\u65b9\u6cd5\u8fde\u7eed\u8c03\u7528\u5bf9\u6570\u636e\u8fdb\u884c\u5904\u7406\uff09\u3002\\ Series.pipe\uff0cDataFrame.pipe \u610f\u5473\u7740 x.pipe(f, args, kwargs) \u548c f(x, args, **kwargs) \u6548\u679c\u76f8\u540c\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\u8be5\u51fd\u6570\u5e94\u7528\u4e8e\u6574\u4e2a\u6570\u636e\u3002\\ \u4ee5 DataFrame \u4e3a\u4f8b\uff1a * \u8bed\u6cd5: DataFrame.pipe(func, args, *kwargs) * \u53c2\u6570\uff1a * func\uff1a\u51fd\u6570\uff0c\u5e94\u7528\u4e8e\u7cfb\u5217/\u6570\u636e\u5e27\u7684\u51fd\u6570\u3002args \u548c kwargs \u88ab\u4f20\u9012\u5230 func\u3002\u6216\u8005\u662f\u4e00\u4e2a\uff08callable\uff0cdata_keyword\uff09\u5143\u7ec4\uff0c\u5176\u4e2d data_keyword \u662f\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u8868\u793a\u9700\u8981Series/DataFrame \u7684 callable \u5173\u952e\u5b57 * args\uff1a\u53ef\u8fed\u4ee3\u5bf9\u8c61, \u53ef\u9009\uff0c\u51fd\u6570\u7684\u4f4d\u7f6e\u53c2\u6570 * kwargs\uff1amapping, \u53ef\u9009\uff0c\u4f20\u5165 func \u7684\u5173\u952e\u5b57\u53c2\u6570\u5b57\u5178 * \u8fd4\u56de\uff1aobject\uff1afunc \u5904\u7406\u540e\u7684\u4efb\u610f\u6570\u636e\u7c7b\u578b DataFrame\u793a\u4f8b\uff1a df = pd.DataFrame( [[1., 2., 3.], [1., NA, NA], [NA, NA, NA], [NA, 2., 3.]] ) \u88ab\u4f20\u9012\u7684\u7c7b\u578b\u662f\u8c03\u7528\u7684\u5b9e\u4f8b df.pipe(type) # \u4f20\u9012\u7684\u662ftype\u5b9e\u4f8b # <class 'pandas.core.frame.DataFrame'> df.pipe(len) # \u4f20\u9012\u7684\u662flen\u5b9e\u4f8b # 4 def fun(df): return df * 2 fun(df) # 0 1 2 # 0 2.0 4.0 6.0 # 1 2.0 NaN NaN # 2 NaN NaN NaN # 3 NaN 4.0 6.0 df.pipe(fun) # \u4f20\u9012\u7684\u662ffun\u51fd\u6570 # 0 1 2 # 0 2.0 4.0 6.0 # 1 2.0 NaN NaN # 2 NaN NaN NaN # 3 NaN 4.0 6.0 def fun2(x, df): # \u6570\u636e\u662f\u7b2c\u4e8c\u4e2a\u53c2\u6570 return df * 3 df.pipe((fun2, 'df'), 2) # \u6ce8\u610f\u4f20\u503c # 0 1 2 # 0 3.0 6.0 9.0 # 1 3.0 NaN NaN # 2 NaN NaN NaN # 3 NaN 6.0 9.0 Series \u793a\u4f8b\uff1a s = pd.Series([1, 2, 3, 4, 5]) s.pipe(type) # <class 'pandas.core.series.Series'> s.pipe(len) # 5 def fun3(x, ss): return ss * 3 s.pipe((fun3, 'ss'), 2) # 0 3 # 1 6 # 2 9 # 3 12 # 4 15 # dtype: int64 GroupBy \u793a\u4f8b\uff1a df = pd.DataFrame({'A': 'a b a b'.split(), 'B': [1, 2, 3, 4]}) print(df) # A B # 0 a 1 # 1 b 2 # 2 a 3 # 3 b 4 \u6c42\u6bcf\u7ec4\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u4e4b\u95f4\u7684\u5dee\u5f02 df.groupby('A').pipe(lambda x: x.max() - x.min()) # B # A # a 2 # b 2 def mean1(groupby): return groupby.mean() df.groupby(['A']).pipe(mean1) # B # A # a 2.0 # b 3.0","title":"Ch09"},{"location":"python/DataAnalysis/ch09/#_1","text":"import numpy as np import pandas as pd","title":"\u5206\u7c7b\u6570\u636e"},{"location":"python/DataAnalysis/ch09/#_2","text":"\u4e00\u4e2a\u5217\u7ecf\u5e38\u4f1a\u5305\u542b\u91cd\u590d\u503c\uff0c\u8fd9\u4e9b\u91cd\u590d\u503c\u662f\u4e00\u4e2a\u5c0f\u578b\u7684\u4e0d\u540c\u503c\u7684\u96c6\u5408\u3002\\ unique\u548cvalue_counts\u8fd9\u6837\u7684\u51fd\u6570\u5141\u8bb8\u6211\u4eec\u4ece\u4e00\u4e2a\u6570\u7ec4\u4e2d\u63d0\u53d6\u4e0d\u540c\u503c\u5e76\u5206\u522b\u8ba1\u7b97\u8fd9\u4e9b\u4e0d\u540c\u503c\u7684\u9891\u7387\uff1a values = pd.Series(['apple', 'orange', 'apple', 'apple'] * 2) print(values) # 0 apple # 1 orange # 2 apple # 3 apple # 4 apple # 5 orange # 6 apple # 7 apple # dtype: object print(pd.unique(values)) # ['apple' 'orange'] print(pd.value_counts(values)) # apple 6 # orange 2 # dtype: int64 \u5728\u6570\u636e\u5165\u5e93\u7684\u64cd\u4f5c\u4e2d\uff0c\u4f7f\u7528\u7ef4\u5ea6\u8868\u662f\u4e00\u79cd\u6700\u4f73\u5b9e\u8df5\uff0c\u7ef4\u5ea6\u8868\u5305\u542b\u4e86\u4e0d\u540c\u503c\uff0c\u5e76\u5c06\u4e3b\u8981\u89c2\u6d4b\u503c\u5b58\u50a8\u4e3a\u5f15\u7528\u7ef4\u5ea6\u8868\u7684\u6574\u6570\u952e\uff1a values = pd.Series([0, 1, 0, 0] * 2) dim = pd.Series(['apple', 'oragne']) \u4f7f\u7528take\u65b9\u6cd5\u6765\u6062\u590d\u539f\u6765\u7684\u5b57\u7b26\u4e32Series\u3002\uff080\u5bf9\u5e94\u5230apple)\\ \u8fd9\u79cd\u6309\u7167\u6574\u6570\u5c55\u73b0\u7684\u65b9\u5f0f\u88ab\u79f0\u4e3a\u5206\u7c7b\u6216\u5b57\u5178\u7f16\u7801\u5c55\u73b0\u3002\u4e0d\u540c\u503c\u7684\u6570\u7ec4\u53ef\u4ee5\u88ab\u79f0\u4e3a\u6570\u636e\u7684\u7c7b\u522b\u3001\u5b57\u5178\u6216\u5c42\u7ea7\u3002 print(dim.take(values)) # 0 apple # 1 oragne # 0 apple # 0 apple # 0 apple # 1 oragne # 0 apple # 0 apple # dtype: object \u5728\u505a\u6570\u636e\u5206\u6790\u65f6\uff0c\u5206\u7c7b\u5c55\u793a\u4f1a\u4ea7\u751f\u663e\u8457\u7684\u6027\u80fd\u63d0\u5347\u3002\\ \u53ef\u4ee5\u5728\u7c7b\u522b\u4e0a\u8fdb\u884c\u8f6c\u6362\u540c\u65f6\u4e0d\u6539\u53d8\u4ee3\u7801\u3002\\ \u4ee5\u4e0b\u662f\u4e00\u4e9b\u76f8\u5bf9\u4f4e\u5f00\u9500\u7684\u8f6c\u6362\u793a\u4f8b\uff1a * \u91cd\u547d\u540d\u7c7b\u522b * \u5728\u4e0d\u6539\u53d8\u5df2\u6709\u7684\u7c7b\u522b\u987a\u5e8f\u7684\u60c5\u51b5\u4e0b\u6dfb\u52a0\u4e00\u4e2a\u65b0\u7684\u7c7b\u522b","title":"\u80cc\u666f\u548c\u76ee\u6807"},{"location":"python/DataAnalysis/ch09/#pandascategorical","text":"pandas\u62e5\u6709\u7279\u6b8a\u7684Categorical\u7c7b\u578b\uff0c\u7528\u4e8e\u627f\u8f7d\u57fa\u4e8e\u6574\u6570\u7684\u7c7b\u522b\u5c55\u793a\u6216\u7f16\u7801\u7684\u6570\u636e\u3002 fruits = ['apple', 'orange', 'apple', 'apple'] * 2 N = len(fruits) df = pd.DataFrame( { 'fruit': fruits, 'basket_id': np.arange(N), 'count': np.random.randint(3, 15, size=N), 'weight': np.random.uniform(0, 4, size=N) }, columns=['basket_id', 'fruit', 'count', 'weight'] ) print(df) # basket_id fruit count weight # 0 0 apple 8 1.288867 # 1 1 orange 4 3.414430 # 2 2 apple 7 3.222160 # 3 3 apple 14 2.724804 # 4 4 apple 8 3.548828 # 5 5 orange 10 0.918739 # 6 6 apple 4 0.784816 # 7 7 apple 10 3.140607 df['fruit']\u662f\u4e00\u4e2aPython\u5b57\u7b26\u4e32\u5bf9\u8c61\u7ec4\u6210\u7684\u6570\u7ec4\u3002\u53ef\u4ee5\u901a\u8fc7\u8c03\u7528\u51fd\u6570\u5c06\u5b83\u8f6c\u6362\u4e3aCategorical\u5bf9\u8c61\uff1a fruit_cat = df['fruit'].astype('category') print(fruit_cat) # 0 apple # 1 orange # 2 apple # 3 apple # 4 apple # 5 orange # 6 apple # 7 apple # Name: fruit, dtype: category # Categories (2, object): ['apple', 'orange'] fruit_cat\u7684\u503c\u5e76\u4e0d\u662fNumPy\u6570\u7ec4\uff0c\u800c\u662fpandas.Categorical\u7684\u5b9e\u4f8b\uff1a c = fruit_cat.values print(type(c)) # <class 'pandas.core.arrays.categorical.Categorical'> print(c) # ['apple', 'orange', 'apple', 'apple', 'apple', 'orange', 'apple', 'apple'] # Categories (2, object): ['apple', 'orange'] Categorical\u5bf9\u8c61\u62e5\u6709categories\u548ccodes\u5c5e\u6027\uff1a print(c.categories) # Index(['apple', 'orange'], dtype='object') print(c.codes) # [0 1 0 0 0 1 0 0] \u901a\u8fc7\u5206\u914d\u5df2\u8f6c\u6362\u7684\u7ed3\u679c\u5c06DataFrame\u7684\u4e00\u5217\u8f6c\u6362\u4e3aCategorical\u5bf9\u8c61\uff1a print(df['fruit']) # 0 apple # 1 orange # 2 apple # 3 apple # 4 apple # 5 orange # 6 apple # 7 apple # Name: fruit, dtype: object df['fruit'] = df['fruit'].astype('category') print(df['fruit']) # 0 apple # 1 orange # 2 apple # 3 apple # 4 apple # 5 orange # 6 apple # 7 apple # Name: fruit, dtype: category # Categories (2, object): ['apple', 'orange'] \u4e5f\u53ef\u4ee5\u4ece\u5176\u4ed6Python\u5e8f\u5217\u7c7b\u578b\u76f4\u63a5\u751f\u6210pandas.Categorical\uff1a my_categories = pd.Categorical(['foo', 'bar', 'baz', 'foo', 'bar']) print(my_categories) # ['foo', 'bar', 'baz', 'foo', 'bar'] # Categories (3, object): ['bar', 'baz', 'foo'] \u4e5f\u53ef\u4ee5\u4f7f\u7528from_codes\u6784\u9020\u51fd\u6570\u6765\u8f6c\u6362\u5176\u4ed6\u6570\u636e\u6e90\u7684\u5206\u7c7b\u7f16\u7801\u6570\u636e\uff1a categories = ['foo', 'bar', 'baz'] codes = [0, 1, 2, 0, 0, 1] my_cats_2 = pd.Categorical.from_codes(codes, categories) print(my_cats_2) # ['foo', 'bar', 'baz', 'foo', 'foo', 'bar'] # Categories (3, object): ['foo', 'bar', 'baz'] \u8fd9\u4e2a\u672a\u6392\u5e8f\u7684\u5206\u7c7b\u5b9e\u4f8b\u53ef\u4ee5\u4f7f\u7528as_ordered\u8fdb\u884c\u6392\u5e8f\uff1a print(my_cats_2.as_ordered()) # ['foo', 'bar', 'baz', 'foo', 'foo', 'bar'] # Categories (3, object): ['foo' < 'bar' < 'baz'] \u9664\u975e\u663e\u5f0f\u5730\u6307\u5b9a\uff0c\u5206\u7c7b\u8f6c\u6362\u662f\u4e0d\u4f1a\u6307\u5b9a\u7c7b\u522b\u7684\u987a\u5e8f\u7684\u3002\\ \u56e0\u6b64categories\u6570\u7ec4\u53ef\u80fd\u4f1a\u4e0e\u8f93\u5165\u6570\u636e\u7684\u987a\u5e8f\u4e0d\u540c\u3002\\ \u5f53\u4f7f\u7528from_codes\u6216\u5176\u4ed6\u4efb\u610f\u6784\u9020\u51fd\u6570\u65f6\uff0c\u53ef\u4ee5\u4e3a\u7c7b\u522b\u6307\u5b9a\u4e00\u4e2a\u6709\u610f\u4e49\u7684\u987a\u5e8f\uff1a\\ \u8f93\u51fa\u7684[foo<bar<baz]\u8868\u660e\u2019foo\u2019\u7684\u987a\u5e8f\u5728\u2019bar\u2019\u4e4b\u524d\uff0c\u4ee5\u6b64\u7c7b\u63a8\u3002 my_categories_ordered = pd.Categorical.from_codes(codes=codes, categories=categories, ordered=True) print(my_categories_ordered) # ['foo', 'bar', 'baz', 'foo', 'foo', 'bar'] # Categories (3, object): ['foo' < 'bar' < 'baz'] \u5206\u7c7b\u6570\u636e\u53ef\u4ee5\u4e0d\u662f\u5b57\u7b26\u4e32\uff0c\u5c3d\u7ba1\u4e3e\u7684\u4f8b\u5b50\u90fd\u662f\u5b57\u7b26\u4e32\u4f8b\u5b50\u3002\u4e00\u4e2a\u5206\u7c7b\u6570\u7ec4\u53ef\u4ee5\u5305\u542b\u4efb\u4e00\u4e0d\u53ef\u53d8\u7684\u503c\u7c7b\u578b\u3002","title":"pandas\u4e2d\u7684Categorical\u7c7b\u578b"},{"location":"python/DataAnalysis/ch09/#categorical","text":"\u5728pandas\u4e2d\u4f7f\u7528Categorical\u4e0e\u975e\u7f16\u7801\u7248\u672c\u76f8\u6bd4\uff08\u4f8b\u5982\u5b57\u7b26\u4e32\u6570\u7ec4\uff09\u6574\u4f53\u4e0a\u662f\u4e00\u81f4\u7684\u3002\\ pandas\u4e2d\u7684\u67d0\u4e9b\u90e8\u5206\uff0c\u6bd4\u5982groupby\u51fd\u6570\uff0c\u5728\u4e0eCategorical\u5bf9\u8c61\u534f\u540c\u5de5\u4f5c\u65f6\u6027\u80fd\u66f4\u597d\u3002\\ \u8fd8\u6709\u4e00\u4e9b\u51fd\u6570\u53ef\u4ee5\u5229\u7528ordered\u6807\u8bc6\u3002\\ \u4e0b\u9762\u8003\u8651\u4e00\u4e9b\u968f\u673a\u6570\u5b57\u6570\u636e\uff0c\u5e76\u4f7f\u7528pandas.qcut\u5206\u7bb1\u51fd\u6570\u3002\u7ed3\u679c\u4f1a\u8fd4\u56depandas.Categorical\uff1b\\ \u5728\u524d\u9762\u7ae0\u8282\u4f7f\u7528\u8fc7pandas.cut\uff0c\u4f46\u5f53\u65f6\u6ca1\u6709\u5206\u6790\u5206\u7c7b\u662f\u5982\u4f55\u5de5\u4f5c\u7684\u7ec6\u8282\u3002 np.random.seed(12345) draws = np.random.randn(1000) print(draws[:5]) # [-0.20470766 0.47894334 -0.51943872 -0.5557303 1.96578057] \u8ba1\u7b97\u4e0a\u9762\u6570\u636e\u7684\u56db\u5206\u4f4d\u5206\u7bb1\uff0c\u5e76\u63d0\u53d6\u4e00\u4e9b\u7edf\u8ba1\u503c\uff1a bins = pd.qcut(draws, 4) print(bins) # [(-0.684, -0.0101], (-0.0101, 0.63], (-0.684, -0.0101], (-0.684, -0.0101], (0.63, 3.928], ..., (-0.0101, 0.63], (-0.684, -0.0101], (-2.9499999999999997, -0.684], (-0.0101, 0.63], (0.63, 3.928]] # Length: 1000 # Categories (4, interval[float64, right]): [(-2.9499999999999997, -0.684] < (-0.684, -0.0101] < (-0.0101, 0.63] < (0.63, 3.928]] \u901a\u8fc7\u5728qcut\u51fd\u6570\u4e2d\u4f7f\u7528labels\u53c2\u6570\u6765\u56db\u5206\u4f4d\u6570\u540d\u79f0\uff1a bins = pd.qcut(draws, 4, labels=['Q1', 'Q2', 'Q3', 'Q4']) print(bins) # ['Q2', 'Q3', 'Q2', 'Q2', 'Q4', ..., 'Q3', 'Q2', 'Q1', 'Q3', 'Q4'] # Length: 1000 # Categories (4, object): ['Q1' < 'Q2' < 'Q3' < 'Q4'] print(bins.codes[:10]) # [1 2 1 1 3 3 2 2 3 3] \u88ab\u6807\u8bb0\u7684bins\u5206\u7c7b\u6570\u636e\u5e76\u4e0d\u5305\u542b\u6570\u636e\u4e2d\u7bb1\u4f53\u8fb9\u754c\u7684\u76f8\u5173\u4fe1\u606f\uff0c\u56e0\u6b64\u53ef\u4ee5\u4f7f\u7528groupby\u6765\u63d0\u53d6\u4e00\u4e9b\u6c47\u603b\u7edf\u8ba1\u503c\uff1a bins = pd.Series(bins, name='quartile') result = (pd.Series(draws).groupby(bins).agg(['count', 'min', 'max']).reset_index()) print(result) # quartile count min max # 0 Q1 250 -2.949343 -0.685484 # 1 Q2 250 -0.683066 -0.010115 # 2 Q3 250 -0.010032 0.628894 # 3 Q4 250 0.634238 3.927528 \u7ed3\u679c\u4e2d\u7684\u2019quartile\u2019\u5217\u4fdd\u7559\u4e86bins\u4e2d\u539f\u59cb\u7684\u5206\u7c7b\u4fe1\u606f\uff0c\u5305\u62ec\u987a\u5e8f\uff1a print(result['quartile']) # 0 Q1 # 1 Q2 # 2 Q3 # 3 Q4 # Name: quartile, dtype: category # Categories (4, object): ['Q1' < 'Q2' < 'Q3' < 'Q4']","title":"\u4f7f\u7528Categorical\u5bf9\u8c61\u8fdb\u884c\u8ba1\u7b97"},{"location":"python/DataAnalysis/ch09/#_3","text":"\u5982\u679c\u5bf9\u7279\u5b9a\u7684\u6570\u636e\u96c6\u4e0a\u505a\u4e86\u5927\u91cf\u7684\u5206\u6790\uff0c\u5c06\u6570\u636e\u8f6c\u6362\u4e3a\u5206\u7c7b\u6570\u636e\u53ef\u4ee5\u4ea7\u751f\u5927\u5e45\u7684\u6027\u80fd\u63d0\u5347\u3002\\ DateFrame\u4e2d\u4e00\u5217\u7684\u5206\u7c7b\u7248\u672c\u901a\u5e38\u4e5f\u4f1a\u660e\u663e\u4f7f\u7528\u66f4\u5c11\u5185\u5b58\u3002 \u4e0b\u9762\u7684\u4f8b\u5b50\u542b\u6709\u4e00\u5343\u4e07\u5143\u7d20\u7684Series\u4ee5\u53ca\u5c11\u91cf\u7684\u4e0d\u540c\u7c7b\u522b\uff1a N = 10000000 draws = pd.Series(np.random.randn(N)) labels = pd.Series(['foo', 'bar', 'baz', 'qux'] * (N // 4)) \u73b0\u5728\u5c06labels\u8f6c\u6362\u4e3aCategorical\u5bf9\u8c61\uff1a categories = labels.astype('category') print(labels.memory_usage()) # labels\u6bd4categories\u4f7f\u7528\u4e86\u660e\u663e\u66f4\u591a\u7684\u5185\u5b58 # 80000128 print(categories.memory_usage()) # 10000332","title":"\u4f7f\u7528\u5206\u7c7b\u83b7\u5f97\u66f4\u9ad8\u6027\u80fd"},{"location":"python/DataAnalysis/ch09/#_4","text":"Series\u5305\u542b\u7684\u5206\u7c7b\u6570\u636e\u62e5\u6709\u4e00\u4e9b\u7279\u6b8a\u65b9\u6cd5\uff0c\u8fd9\u4e9b\u65b9\u6cd5\u7c7b\u4f3c\u4e8eSeries.str\u7684\u7279\u6b8a\u5b57\u7b26\u4e32\u65b9\u6cd5\u3002\\ \u8fd9\u4e9b\u65b9\u6cd5\u63d0\u4f9b\u4e86\u5feb\u6377\u8bbf\u95ee\u7c7b\u522b\u548c\u4ee3\u7801\u7684\u65b9\u5f0f\u3002 s = pd.Series(['a', 'b', 'c', 'd'] * 2) cat_s = s.astype('category') print(cat_s) # 0 a # 1 b # 2 c # 3 d # 4 a # 5 b # 6 c # 7 d # dtype: category # Categories (4, object): ['a', 'b', 'c', 'd'] \u7279\u6b8a\u5c5e\u6027cat\u63d0\u4f9b\u4e86\u5bf9\u5206\u7c7b\u65b9\u6cd5\u7684\u8bbf\u95ee\uff1a print(cat_s.cat.codes) # 0 0 # 1 1 # 2 2 # 3 3 # 4 0 # 5 1 # 6 2 # 7 3 # dtype: int8 print(cat_s.cat.categories) # Index(['a', 'b', 'c', 'd'], dtype='object') \u5047\u8bbe\u6570\u636e\u7684\u5b9e\u9645\u7c7b\u522b\u96c6\u5408\u8d85\u51fa\u4e86\u6570\u636e\u4e2d\u89c2\u5bdf\u5230\u7684\u56db\u4e2a\u503c\uff0c\u53ef\u4ee5\u4f7f\u7528set_categories\u65b9\u6cd5\u6765\u6539\u53d8\u7c7b\u522b\uff1a actual_categories = ['a', 'b', 'c', 'd', 'e'] cat_s2 = cat_s.cat.set_categories(actual_categories) print(cat_s2) # 0 a # 1 b # 2 c # 3 d # 4 a # 5 b # 6 c # 7 d # dtype: category # Categories (5, object): ['a', 'b', 'c', 'd', 'e'] \u867d\u7136\u770b\u8d77\u6765\u6570\u636e\u5e76\u672a\u6539\u53d8\uff0c\u4f46\u65b0\u7c7b\u522b\u5c06\u53cd\u6620\u5728\u4f7f\u7528\u5b83\u4eec\u7684\u64cd\u4f5c\u4e2d\u3002\u4f8b\u5982\uff0cvalue_counts\u5c06\u9075\u5faa\u65b0\u7684\u7c7b\u522b\uff08\u5982\u679c\u5b58\u5728\uff09\uff1a print(cat_s.value_counts()) # a 2 # b 2 # c 2 # d 2 # dtype: int64 print(cat_s2.value_counts()) # a 2 # b 2 # c 2 # d 2 # e 0 # dtype: int64 \u5927\u578b\u6570\u636e\u96c6\u4e2d\uff0c\u5206\u7c7b\u6570\u636e\u7ecf\u5e38\u88ab\u7528\u4e8e\u8282\u7701\u5185\u5b58\u548c\u66f4\u9ad8\u6027\u80fd\u7684\u4fbf\u6377\u5de5\u5177\u3002\\ \u5728\u8fc7\u6ee4\u4e86\u4e00\u4e2a\u5927\u578bDataFrame\u6216Series\u4e4b\u540e\uff0c\u5f88\u591a\u7c7b\u522b\u5c06\u4e0d\u4f1a\u51fa\u73b0\u5728\u6570\u636e\u4e2d\u3002\\ \u53ef\u4ee5\u4f7f\u7528remove_unused_categories\u65b9\u6cd5\u6765\u53bb\u9664\u672a\u89c2\u5bdf\u5230\u7684\u7c7b\u522b\uff1a cat_s3 = cat_s[cat_s.isin(['a', 'b'])] print(cat_s3) # 0 a # 1 b # 4 a # 5 b # dtype: category # Categories (4, object): ['a', 'b', 'c', 'd'] print(cat_s3.cat.remove_unused_categories()) # 0 a # 1 b # 4 a # 5 b # dtype: category # Categories (2, object): ['a', 'b']","title":"\u5206\u7c7b\u65b9\u6cd5"},{"location":"python/DataAnalysis/ch09/#_5","text":"\u5f53\u4f7f\u7528\u7edf\u8ba1\u6570\u636e\u6216\u673a\u5668\u5b66\u4e60\u5de5\u5177\u65f6\uff0c\u901a\u5e38\u4f1a\u5c06\u5206\u7c7b\u6570\u636e\u8f6c\u6362\u4e3a\u865a\u62df\u53d8\u91cf\uff0c\u4e5f\u79f0\u4e3aone-hot\u7f16\u7801\u3002\\ \u8fd9\u4f1a\u4ea7\u751f\u4e00\u4e2aDataFrame\uff0c\u6bcf\u4e2a\u4e0d\u540c\u7684\u7c7b\u522b\u90fd\u662f\u5b83\u7684\u4e00\u5217\u3002\u8fd9\u4e9b\u5217\u5305\u542b\u4e00\u4e2a\u7279\u5b9a\u7c7b\u522b\u7684\u51fa\u73b0\u6b21\u6570\uff0c\u5426\u5219\u4e3a0\u3002 cat_s = pd.Series(['a', 'b', 'c', 'd'] * 2, dtype='category') \u4f7f\u7528pandas.get_dummies\u51fd\u6570\u5c06\u4e00\u7ef4\u7684\u5206\u7c7b\u6570\u636e\u8f6c\u6362\u4e3a\u4e00\u4e2a\u5305\u542b\u865a\u62df\u53d8\u91cf\u7684DataFrame\uff1a print(pd.get_dummies(cat_s)) # a b c d # 0 1 0 0 0 # 1 0 1 0 0 # 2 0 0 1 0 # 3 0 0 0 1 # 4 1 0 0 0 # 5 0 1 0 0 # 6 0 0 1 0 # 7 0 0 0 1","title":"\u521b\u5efa\u7528\u4e8e\u5efa\u6a21\u7684\u865a\u62df\u53d8\u91cf"},{"location":"python/DataAnalysis/ch09/#groupby","text":"import numpy as np import pandas as pd","title":"\u9ad8\u9636GroupBy\u5e94\u7528"},{"location":"python/DataAnalysis/ch09/#groupby_1","text":"\u5728\u5206\u7ec4\u64cd\u4f5c\u4e2d\u53ef\u4ee5\u4f7f\u7528apply\u65b9\u6cd5\u5b9e\u73b0\u8f6c\u6362\u64cd\u4f5c\u3002\\ \u8fd8\u6709\u53e6\u4e00\u4e2a\u5185\u5efa\u65b9\u6cd5transform\uff0c\u4e0eapply\u65b9\u6cd5\u7c7b\u4f3c\u4f46\u662f\u53ef\u4ee5\u5bf9\u4f7f\u7528\u7684\u51fd\u6570\u52a0\u4e0a\u66f4\u591a\u7684\u9650\u5236\uff1a\\ transform\u53ef\u4ee5\u4ea7\u751f\u4e00\u4e2a\u6807\u91cf\u503c\uff0c\u5e76\u5e7f\u64ad\u5230\u5404\u5206\u7ec4\u7684\u5c3a\u5bf8\u6570\u636e\u4e2d\u3002\\ transform\u53ef\u4ee5\u4ea7\u751f\u4e00\u4e2a\u4e0e\u8f93\u5165\u5206\u7ec4\u5c3a\u5bf8\u76f8\u540c\u7684\u5bf9\u8c61\u3002\\ transform\u4e0d\u53ef\u6539\u53d8\u5b83\u7684\u8f93\u5165\u3002 df = pd.DataFrame( { 'key': ['a', 'b', 'c'] * 4, 'value': np.arange(12) } ) print(df) # key value # 0 a 0 # 1 b 1 # 2 c 2 # 3 a 3 # 4 b 4 # 5 c 5 # 6 a 6 # 7 b 7 # 8 c 8 # 9 a 9 # 10 b 10 # 11 c 11 \u6309'key'\u5206\u7ec4\u7684\u5747\u503c\uff1a g = df.groupby('key').value print(g.mean()) # key # a 4.5 # b 5.5 # c 6.5 # Name: value, dtype: float64 \u5047\u8bbe\u8981\u4ea7\u751f\u4e00\u4e2aSeries\uff0c\u5b83\u7684\u5c3a\u5bf8\u548cdf['value']\u4e00\u6837\uff0c\u4f46\u503c\u90fd\u88ab\u6309\u2019key'\u5206\u7ec4\u7684\u5747\u503c\u66ff\u4ee3\u3002\\ \u53ef\u4ee5\u5411transfrom\u4f20\u9012\u533f\u540d\u51fd\u6570lambda x: x.mean()\uff1a result = g.transform(lambda x: x.mean()) print(result) # 0 4.5 # 1 5.5 # 2 6.5 # 3 4.5 # 4 5.5 # 5 6.5 # 6 4.5 # 7 5.5 # 8 6.5 # 9 4.5 # 10 5.5 # 11 6.5 # Name: value, dtype: float64 \u5bf9\u4e8e\u5185\u5efa\u7684\u805a\u5408\u51fd\u6570\uff0c\u53ef\u4ee5\u50cfGroupBy\u7684agg\u65b9\u6cd5\u4e00\u6837\u4f20\u9012\u4e00\u4e2a\u5b57\u7b26\u4e32\u522b\u540d\uff1a result = g.transform('mean') print(result) # 0 4.5 # 1 5.5 # 2 6.5 # 3 4.5 # 4 5.5 # 5 6.5 # 6 4.5 # 7 5.5 # 8 6.5 # 9 4.5 # 10 5.5 # 11 6.5 # Name: value, dtype: float64 \u4e0eapply\u7c7b\u4f3c\uff0ctransform\u53ef\u4ee5\u4e0e\u8fd4\u56deSeries\u7684\u51fd\u6570\u4e00\u8d77\u4f7f\u7528\uff0c\u4f46\u7ed3\u679c\u5fc5\u987b\u548c\u8f93\u5165\u6709\u76f8\u540c\u7684\u5927\u5c0f\u3002 \u4f8b\u5982\uff0c\u53ef\u4ee5\u4f7f\u7528lambda\u51fd\u6570\u7ed9\u6bcf\u4e2a\u7ec4\u4e58\u4ee52\uff1a result = g.transform(lambda x: x * 2) print(result) # 0 0 # 1 2 # 2 4 # 3 6 # 4 8 # 5 10 # 6 12 # 7 14 # 8 16 # 9 18 # 10 20 # 11 22 # Name: value, dtype: int64 \u66f4\u590d\u6742\u4e00\u4e9b\uff0c\u53ef\u4ee5\u6309\u7167\u6bcf\u4e2a\u7ec4\u7684\u964d\u5e8f\u8ba1\u7b97\u6392\u540d\uff1a result = g.transform(lambda x: x.rank(ascending=False)) print(result) # 0 4.0 # 1 4.0 # 2 4.0 # 3 3.0 # 4 3.0 # 5 3.0 # 6 2.0 # 7 2.0 # 8 2.0 # 9 1.0 # 10 1.0 # 11 1.0 # Name: value, dtype: float64 \u8003\u8651\u4e00\u4e2a\u7531\u7b80\u5355\u805a\u5408\u6784\u6210\u7684\u5206\u7ec4\u8f6c\u6362\u51fd\u6570\uff1a def normalize(x): return (x - x.mean()) / x.std() \u4f7f\u7528transform\u6216apply\u53ef\u4ee5\u83b7\u5f97\u7b49\u4ef7\u7684\u7ed3\u679c\uff1a result = g.transform(normalize) print(result) # 0 -1.161895 # 1 -1.161895 # 2 -1.161895 # 3 -0.387298 # 4 -0.387298 # 5 -0.387298 # 6 0.387298 # 7 0.387298 # 8 0.387298 # 9 1.161895 # 10 1.161895 # 11 1.161895 # Name: value, dtype: float64 result = g.apply(normalize) print(result) # 0 -1.161895 # 1 -1.161895 # 2 -1.161895 # 3 -0.387298 # 4 -0.387298 # 5 -0.387298 # 6 0.387298 # 7 0.387298 # 8 0.387298 # 9 1.161895 # 10 1.161895 # 11 1.161895 # Name: value, dtype: float64 \u5185\u5efa\u7684\u805a\u5408\u51fd\u6570\u5982\u2019mean\u2019\u6216\u2019sum\u2019\u901a\u5e38\u4f1a\u6bd4apply\u51fd\u6570\u66f4\u5feb\u3002\\ \u8fd9\u4e9b\u51fd\u6570\u5728\u4e0etransform\u4e00\u8d77\u4f7f\u7528\u65f6\u4e5f\u4f1a\u5b58\u5728\u4e00\u4e2a\"\u5feb\u901f\u901a\u8fc7\"\u3002\\ \u8fd9\u5141\u8bb8\u6211\u4eec\u6267\u884c\u4e00\u4e2a\u6240\u8c13\u7684\u5c55\u5f00\u5206\u7ec4\u64cd\u4f5c\u3002\\ \u4e00\u4e2a\u5c55\u5f00\u5206\u7ec4\u64cd\u4f5c\u53ef\u80fd\u4f1a\u5305\u542b\u591a\u4e2a\u5206\u7ec4\u805a\u5408\uff0c\u77e2\u91cf\u5316\u64cd\u4f5c\u7684\u6574\u4f53\u4f18\u52bf\u5f80\u5f80\u8d85\u8fc7\u4e86\u8fd9\u4e00\u70b9\u3002 result = g.transform('mean') print(result) # 0 4.5 # 1 5.5 # 2 6.5 # 3 4.5 # 4 5.5 # 5 6.5 # 6 4.5 # 7 5.5 # 8 6.5 # 9 4.5 # 10 5.5 # 11 6.5 # Name: value, dtype: float64 normalized = (df['value'] - g.transform('mean')) / g.transform('std') print(normalized) # 0 -1.161895 # 1 -1.161895 # 2 -1.161895 # 3 -0.387298 # 4 -0.387298 # 5 -0.387298 # 6 0.387298 # 7 0.387298 # 8 0.387298 # 9 1.161895 # 10 1.161895 # 11 1.161895 # Name: value, dtype: float64","title":"\u5206\u7ec4\u8f6c\u6362\u548c\u201c\u5c55\u5f00\u201dGroupBy"},{"location":"python/DataAnalysis/ch09/#_6","text":"\u5bf9\u4e8e\u65f6\u95f4\u5e8f\u5217\u6570\u636e\uff0cresample\u65b9\u6cd5\u5728\u8bed\u4e49\u4e0a\u662f\u4e00\u79cd\u57fa\u4e8e\u65f6\u95f4\u5206\u6bb5\u7684\u5206\u7ec4\u64cd\u4f5c\u3002 N = 15 times = pd.date_range('2020-5-20 00:00', freq='1min', periods=N) df = pd.DataFrame( { 'time': times, 'value': np.arange(N) } ) print(df) # time value # 0 2020-05-20 00:00:00 0 # 1 2020-05-20 00:01:00 1 # 2 2020-05-20 00:02:00 2 # 3 2020-05-20 00:03:00 3 # 4 2020-05-20 00:04:00 4 # 5 2020-05-20 00:05:00 5 # 6 2020-05-20 00:06:00 6 # 7 2020-05-20 00:07:00 7 # 8 2020-05-20 00:08:00 8 # 9 2020-05-20 00:09:00 9 # 10 2020-05-20 00:10:00 10 # 11 2020-05-20 00:11:00 11 # 12 2020-05-20 00:12:00 12 # 13 2020-05-20 00:13:00 13 # 14 2020-05-20 00:14:00 14 \u8fd9\u91cc\uff0c\u53ef\u4ee5\u6309\u2019time\u2019\u8fdb\u884c\u7d22\u5f15\uff0c\u7136\u540e\u91cd\u65b0\u91c7\u6837\uff1a result = df.set_index('time').resample('5min').count() print(result) # value # time # 2020-05-20 00:00:00 5 # 2020-05-20 00:05:00 5 # 2020-05-20 00:10:00 5 \u5047\u8bbeDataFrame\u5305\u542b\u591a\u4e2a\u65f6\u95f4\u5e8f\u5217\uff0c\u5e76\u6309\u4e00\u4e2a\u9644\u52a0\u7684\u5206\u7ec4\u952e\u5217\u8fdb\u884c\u4e86\u6807\u8bb0\uff1a df2 = pd.DataFrame( { 'time': times.repeat(3), 'key': np.tile(['a', 'b', 'c'], N), 'value': np.arange((N * 3)) } ) print(df2) # time key value # 0 2020-05-20 00:00:00 a 0 # 1 2020-05-20 00:00:00 b 1 # 2 2020-05-20 00:00:00 c 2 # 3 2020-05-20 00:01:00 a 3 # ...... # 43 2020-05-20 00:14:00 b 43 # 44 2020-05-20 00:14:00 c 44 \u4f7f\u7528pandas.TimeGrouper\u5bf9\u8c61\uff0c\u6bcf\u4e2a\u2019key\u2019\u7684\u503c\u8fdb\u884c\u76f8\u540c\u7684\u91cd\u65b0\u91c7\u6837\uff1a\\ pd.TimeGrouper() was formally deprecated in pandas v0.21.0 in favor of pd.Grouper().","title":"\u5206\u7ec4\u7684\u65f6\u95f4\u91cd\u65b0\u91c7\u6837"},{"location":"python/DataAnalysis/ch09/#_7","text":"import numpy as np import pandas as pd from numpy import nan as NA df = pd.DataFrame( [[1., 2., 3.], [1., NA, NA], [NA, NA, NA], [NA, 2., 3.]] ) v = ['a', 'b', 'c', 'd'] print(df) # 0 1 2 # 0 1.0 2.0 3.0 # 1 1.0 NaN NaN # 2 NaN NaN NaN # 3 NaN 2.0 3.0 \u975e\u51fd\u6570\u8d4b\u503c\u7684\u65b9\u5f0f df2 = df.copy() df2['k'] = v print(df2) # 0 1 2 k # 0 1.0 2.0 3.0 a # 1 1.0 NaN NaN b # 2 NaN NaN NaN c # 3 NaN 2.0 3.0 d \u51fd\u6570\u8d4b\u503c\u7684\u65b9\u5f0f\\ DataFrame.assign\u65b9\u6cd5\u662f\u5bf9df[k] = v\u7684\u8d4b\u503c\u65b9\u5f0f\u7684\u4e00\u79cd\u529f\u80fd\u66ff\u4ee3\u3002\u5b83\u8fd4\u56de\u7684\u662f\u4e00\u4e2a\u6309\u6307\u5b9a\u4fee\u6539\u7684\u65b0\u7684DataFrame\uff0c\u800c\u4e0d\u662f\u5728\u539f\u5bf9\u8c61\u4e0a\u8fdb\u884c\u4fee\u6539\u3002 df2 = df.assign(k=v) print(df2) # 0 1 2 k # 0 1.0 2.0 3.0 a # 1 1.0 NaN NaN b # 2 NaN NaN NaN c # 3 NaN 2.0 3.0 d","title":"\u65b9\u6cd5\u94fe\u6280\u672f"},{"location":"python/DataAnalysis/ch09/#pipe","text":"\u5bf9\u6570\u636e\u8fde\u7eed\u64cd\u4f5c\u5f62\u6210\u65b9\u6cd5\u94fe\uff08\u591a\u4e2a\u65b9\u6cd5\u8fde\u7eed\u8c03\u7528\u5bf9\u6570\u636e\u8fdb\u884c\u5904\u7406\uff09\u3002\\ Series.pipe\uff0cDataFrame.pipe \u610f\u5473\u7740 x.pipe(f, args, kwargs) \u548c f(x, args, **kwargs) \u6548\u679c\u76f8\u540c\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\u8be5\u51fd\u6570\u5e94\u7528\u4e8e\u6574\u4e2a\u6570\u636e\u3002\\ \u4ee5 DataFrame \u4e3a\u4f8b\uff1a * \u8bed\u6cd5: DataFrame.pipe(func, args, *kwargs) * \u53c2\u6570\uff1a * func\uff1a\u51fd\u6570\uff0c\u5e94\u7528\u4e8e\u7cfb\u5217/\u6570\u636e\u5e27\u7684\u51fd\u6570\u3002args \u548c kwargs \u88ab\u4f20\u9012\u5230 func\u3002\u6216\u8005\u662f\u4e00\u4e2a\uff08callable\uff0cdata_keyword\uff09\u5143\u7ec4\uff0c\u5176\u4e2d data_keyword \u662f\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u8868\u793a\u9700\u8981Series/DataFrame \u7684 callable \u5173\u952e\u5b57 * args\uff1a\u53ef\u8fed\u4ee3\u5bf9\u8c61, \u53ef\u9009\uff0c\u51fd\u6570\u7684\u4f4d\u7f6e\u53c2\u6570 * kwargs\uff1amapping, \u53ef\u9009\uff0c\u4f20\u5165 func \u7684\u5173\u952e\u5b57\u53c2\u6570\u5b57\u5178 * \u8fd4\u56de\uff1aobject\uff1afunc \u5904\u7406\u540e\u7684\u4efb\u610f\u6570\u636e\u7c7b\u578b","title":"pipe\u65b9\u6cd5"},{"location":"python/DataAnalysis/ch09/#dataframe","text":"df = pd.DataFrame( [[1., 2., 3.], [1., NA, NA], [NA, NA, NA], [NA, 2., 3.]] ) \u88ab\u4f20\u9012\u7684\u7c7b\u578b\u662f\u8c03\u7528\u7684\u5b9e\u4f8b df.pipe(type) # \u4f20\u9012\u7684\u662ftype\u5b9e\u4f8b # <class 'pandas.core.frame.DataFrame'> df.pipe(len) # \u4f20\u9012\u7684\u662flen\u5b9e\u4f8b # 4 def fun(df): return df * 2 fun(df) # 0 1 2 # 0 2.0 4.0 6.0 # 1 2.0 NaN NaN # 2 NaN NaN NaN # 3 NaN 4.0 6.0 df.pipe(fun) # \u4f20\u9012\u7684\u662ffun\u51fd\u6570 # 0 1 2 # 0 2.0 4.0 6.0 # 1 2.0 NaN NaN # 2 NaN NaN NaN # 3 NaN 4.0 6.0 def fun2(x, df): # \u6570\u636e\u662f\u7b2c\u4e8c\u4e2a\u53c2\u6570 return df * 3 df.pipe((fun2, 'df'), 2) # \u6ce8\u610f\u4f20\u503c # 0 1 2 # 0 3.0 6.0 9.0 # 1 3.0 NaN NaN # 2 NaN NaN NaN # 3 NaN 6.0 9.0","title":"DataFrame\u793a\u4f8b\uff1a"},{"location":"python/DataAnalysis/ch09/#series","text":"s = pd.Series([1, 2, 3, 4, 5]) s.pipe(type) # <class 'pandas.core.series.Series'> s.pipe(len) # 5 def fun3(x, ss): return ss * 3 s.pipe((fun3, 'ss'), 2) # 0 3 # 1 6 # 2 9 # 3 12 # 4 15 # dtype: int64","title":"Series \u793a\u4f8b\uff1a"},{"location":"python/DataAnalysis/ch09/#groupby_2","text":"df = pd.DataFrame({'A': 'a b a b'.split(), 'B': [1, 2, 3, 4]}) print(df) # A B # 0 a 1 # 1 b 2 # 2 a 3 # 3 b 4 \u6c42\u6bcf\u7ec4\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u4e4b\u95f4\u7684\u5dee\u5f02 df.groupby('A').pipe(lambda x: x.max() - x.min()) # B # A # a 2 # b 2 def mean1(groupby): return groupby.mean() df.groupby(['A']).pipe(mean1) # B # A # a 2.0 # b 3.0","title":"GroupBy \u793a\u4f8b\uff1a"},{"location":"python/DataAnalysis/ch10/","text":"\u9ad8\u9636NumPy \u5305\u542b\u4ee5\u4e0b\u5185\u5bb9\uff1a ndarray\u5bf9\u8c61\u7684\u5185\u90e8\u673a\u7406 \u9ad8\u7ea7\u6570\u7ec4\u64cd\u4f5c \u91cd\u5851\u6570\u7ec4 C\u987a\u5e8f\u548cF\u987a\u5e8f \u8fde\u63a5\u548c\u5206\u9694\u6570\u7ec4 \u5806\u53e0\u52a9\u624b\uff1ar \u548cc \u91cd\u590d\u5143\u7d20\uff1atile\u548crepeat \u795e\u5947\u7d22\u5f15\u7684\u7b49\u4ef7\u65b9\u6cd5\uff1atake\u548cput \u5e7f\u64ad ufunc\u9ad8\u7ea7\u5e94\u7528 \u7ed3\u6784\u5316\u548c\u8bb0\u5f55\u5f0f\u6570\u7ec4 ndarray\u5bf9\u8c61\u7684\u5185\u90e8\u673a\u7406 NumPy\u7684 ndarray \u63d0\u4f9b\u4e86\u4e00\u79cd\u5c06\u540c\u8d28\u6570\u636e\u5757\uff08\u53ef\u4ee5\u662f\u8fde\u7eed\u6216\u8de8\u8d8a\uff09\u89e3\u91ca\u4e3a\u591a\u7ef4\u6570\u7ec4\u5bf9\u8c61\u7684\u65b9\u5f0f\u3002 ndarray \u7684\u6570\u636e\u7c7b\u578b dtype \u51b3\u5b9a\u4e86\u6570\u636e\u7684\u89e3\u91ca\u65b9\u5f0f\uff0c\u6bd4\u5982\u6d6e\u70b9\u6570\u3001\u6574\u6570\u3001\u5e03\u5c14\u503c\u7b49\u3002 ndarray \u7684\u6240\u6709\u6570\u7ec4\u5bf9\u8c61\u90fd\u662f\u6570\u636e\u5757\u7684\u4e00\u4e2a\u8de8\u5ea6\u89c6\u56fe\uff08strided view\uff09\u3002 \u6570\u7ec4\u89c6\u56fe arr[::2,::-1] \u4e0d\u590d\u5236\u4efb\u4f55\u6570\u636e\u7684\u539f\u56e0\u662f\u4ec0\u4e48\uff1f \u7b80\u5355\u5730\u8bf4\uff0c ndarray \u4e0d\u53ea\u662f\u4e00\u5757\u5185\u5b58\u548c\u4e00\u4e2a dtype \uff0c\u5b83\u8fd8\u6709\u8de8\u5ea6\u4fe1\u606f\uff0c\u8fd9\u4f7f\u5f97\u6570\u7ec4\u80fd\u4ee5\u5404\u79cd\u6b65\u5e45\uff08step size\uff09\u5728\u5185\u5b58\u4e2d\u79fb\u52a8\u3002 \u66f4\u51c6\u786e\u5730\u8bb2\uff0c ndarray \u5185\u90e8\u7531\u4ee5\u4e0b\u5185\u5bb9\u7ec4\u6210\uff1a \u4e00\u4e2a\u6307\u5411\u6570\u636e\uff08\u5185\u5b58\u6216\u5185\u5b58\u6620\u5c04\u6587\u4ef6\u4e2d\u7684\u4e00\u5757\u6570\u636e\uff09\u7684\u6307\u9488\u3002 \u6570\u636e\u7c7b\u578b\u6216 dtype \uff0c\u63cf\u8ff0\u5728\u6570\u7ec4\u4e2d\u7684\u56fa\u5b9a\u5927\u5c0f\u503c\u7684\u683c\u5b50\u3002 \u4e00\u4e2a\u8868\u793a\u6570\u7ec4\u5f62\u72b6\uff08shape\uff09\u7684\u5143\u7ec4\u3002 \u4e00\u4e2a\u8de8\u5ea6\u5143\u7ec4\uff08stride\uff09\uff0c\u5176\u4e2d\u7684\u6574\u6570\u6307\u7684\u662f\u4e3a\u4e86\u524d\u8fdb\u5230\u5f53\u524d\u7ef4\u5ea6\u4e0b\u4e00\u4e2a\u5143\u7d20\u9700\u8981\u201c\u8de8\u8fc7\u201d\u7684\u5b57\u8282\u6570\u3002 \u4f8b\u5982\uff0c\u4e00\u4e2a10\u00d75\u7684\u6570\u7ec4\uff0c\u5176shape\u4e3a(10, 5)\uff1a s = np.ones((10, 5)).shape print(s) # (10, 5) \u4e00\u4e2a\u5178\u578b\u7684\uff08C\u9636\uff093\u00d74\u00d75 float64\u503c\uff088\u5b57\u8282\uff09\u7684\u6570\u7ec4\u5177\u6709\u8de8\u5ea6\uff08160,40,8\uff09\uff08\u901a\u5e38\u7279\u5b9a\u8f74\u4e0a\u7684\u8de8\u5ea6\u8d8a\u5927\uff0c\u6cbf\u7740\u8be5\u8f74\u6267\u884c\u8ba1\u7b97\u7684\u4ee3\u4ef7\u8d8a\u9ad8\uff09\uff1a s = np.ones((3, 4, 5), dtype=np.float64).strides print(s) # (160, 40, 8) \u6570\u7ec4\u8de8\u5ea6\uff08strides\uff09\u662f\u6784\u5efa\u201c\u96f6\u590d\u5236\u201d\u6570\u7ec4\u89c6\u56fe\u7684\u5173\u952e\u56e0\u7d20\u3002 \u6570\u7ec4\u8de8\u5ea6\u751a\u81f3\u53ef\u4ee5\u662f\u8d1f\u7684\uff0c\u8fd9\u4f7f\u5f97\u6570\u7ec4\u80fd\u591f\u7a7f\u8fc7\u5185\u5b58\u201c\u5411\u540e\u201d\u79fb\u52a8\uff08\u4f8b\u5982\uff0c\u5728\u8bf8\u5982obj[::-1]\u6216obj[:, ::-1]\u7684\u5207\u7247\u4e2d\u5c31\u662f\u8fd9\u79cd\u60c5\u51b5\uff09\u3002 NumPy dtype\u5c42\u6b21\u7ed3\u6784 \u6709\u65f6\u5019\u9700\u8981\u901a\u8fc7\u4e00\u4e9b\u4ee3\u7801\u6765\u68c0\u67e5\u6570\u7ec4\u662f\u5426\u5305\u542b\u6574\u6570\u3001\u6d6e\u70b9\u6570\u3001\u5b57\u7b26\u4e32\u6216Python\u5bf9\u8c61\u3002 \u7531\u4e8e\u6d6e\u70b9\u6570\u6709\u591a\u79cd\u7c7b\u578b\uff08float16\u5230float128\uff09\uff0c\u56e0\u6b64\u68c0\u67e5dtype\u662f\u5426\u5728\u7c7b\u578b\u5217\u8868\u4e2d\u4f1a\u975e\u5e38\u9ebb\u70e6\u3002 dtype\u6709\u8d85\u7c7b\uff0c\u5982np.integer\u548cnp.floating\uff0c\u5b83\u4eec\u53ef\u4ee5\u548cnp.issubdtype\u51fd\u6570\u4e00\u8d77\u4f7f\u7528\uff1a ints = np.ones(10, dtype=np.uint16) floats = np.ones(10, dtype=np.float32) \u53ef\u4ee5\u901a\u8fc7\u8c03\u7528\u7c7b\u578b\u7684mro\u65b9\u6cd5\u6765\u67e5\u770b\u7279\u5b9adtype\u7684\u6240\u6709\u7236\u7c7b\uff1a print(np.float64.mro()) # [<class 'numpy.float64'>, # <class 'numpy.floating'>, # <class 'numpy.inexact'>, # <class 'numpy.number'>, # <class 'numpy.generic'>, # <class 'float'>, # <class 'object'>] print(np.issubdtype(ints.dtype, np.integer)) # True print(np.issubdtype(floats.dtype, np.floating)) # True print(np.issubdtype(floats.dtype, np.number)) # True print(np.issubdtype(floats.dtype, np.generic)) # True \u9ad8\u7ea7\u6570\u7ec4\u64cd\u4f5c \u91cd\u5851\u6570\u7ec4 \u901a\u5e38\uff0c\u901a\u8fc7 reshape \u5c06\u6570\u7ec4\u4ece\u4e00\u4e2a\u5f62\u72b6\u8f6c\u6362\u4e3a\u53e6\u4e00\u4e2a\u5f62\u72b6\uff0c\u5e76\u4e14\u4e0d\u590d\u5236\u4efb\u4f55\u6570\u636e\u3002 reshape \u91cc\u9762\u6709\u4e24\u79cd\u91cd\u5851\u987a\u5e8f\uff0c\u6309C\u987a\u5e8f\uff08\u884c\u65b9\u5411\uff09\u7684\u91cd\u5851\u548c\u6309Fortran\u987a\u5e8f\uff08\u5217\u65b9\u5411\uff09\u7684\u91cd\u5851\u3002 \u9996\u5148\u662f\u53d6\u6570\uff0c\u7136\u540e\u662f\u653e\u6570\uff0c\u53d6\u6570\u6309\u4ec0\u4e48\u987a\u5e8f\uff0c\u653e\u6570\u5c31\u6309\u4ec0\u4e48\u987a\u5e8f\u3002 \u4e0b\u9762\u662f\u5b98\u7f51\u7684\u89e3\u91ca\uff1a \u2018C\u2019 means to read / write the elements using C-like index order, with the last axis index changing fastest, back to the first axis index changing slowest. \u2018F\u2019 means to read / write the elements using Fortran-like index order, with the first index changing fastest, and the last index changing slowest. Note that the \u2018C\u2019 and \u2018F\u2019 options take no account of the memory layout of the underlying array, and only refer to the order of indexing. \u2018A\u2019 means to read / write the elements in Fortran-like index order if a is Fortran contiguous in memory, C-like order otherwise. \u4e00\u7ef4\u6570\u7ec4\u91cd\u5851\uff1a arr = np.arange(8) print(arr) # [0 1 2 3 4 5 6 7] a = arr.reshape((4, 2), order='C') print(a) # [[0 1] # [2 3] # [4 5] # [6 7]] a = arr.reshape((4, 2), order='F') print(a) # [[0 4] # [1 5] # [2 6] # [3 7]] \u591a\u7ef4\u6570\u7ec4\u91cd\u5851\uff1a\u4f20\u9012\u7684\u5f62\u72b6\u7ef4\u5ea6\u53ef\u4ee5\u6709\u4e00\u4e2a\u503c\u662f-1\uff0c\u8868\u793a\u7ef4\u5ea6\u901a\u8fc7\u6570\u636e\u8fdb\u884c\u63a8\u65ad\uff1a a = arr.reshape((4, 2)).reshape((2, 4)) print(a) # [[0 1 2 3] # [4 5 6 7]] arr = np.arange(15) a = arr.reshape((5, -1)) # 15 / 5 = 3\u5217 print(a) # [[ 0 1 2] # [ 3 4 5] # [ 6 7 8] # [ 9 10 11] # [12 13 14]] print(a.shape) # (5, 3) \u6570\u7ec4\u7684 shape \u5c5e\u6027\u662f\u4e00\u4e2a \u5143\u7ec4 \uff0c\u5b83\u4e5f\u53ef\u4ee5\u88ab\u4f20\u9012\u7ed9 reshape \uff0c\u63a5\u4e0a\u4f8b\uff1a other_arr = np.ones((3, 5)) print(other_arr.shape) # (3, 5) a = arr.reshape(other_arr.shape) print(a.shape) # (3, 5) reshape \u7684\u53cd\u64cd\u4f5c\u53ef\u4ee5\u5c06\u66f4\u9ad8\u7ef4\u5ea6\u7684\u6570\u7ec4\u8f6c\u6362\u4e3a\u4e00\u7ef4\u6570\u7ec4\uff0c\u8fd9\u79cd\u64cd\u4f5c\u901a\u5e38\u88ab\u6210\u4e3a\u6241\u5e73\u5316\uff08flattening\uff09\u6216\u5206\u6563\u5316\uff08raveling\uff09\u3002 \u5982\u679c\u7ed3\u679c\u4e2d\u7684\u503c\u5728\u539f\u59cb\u6570\u7ec4\u4e2d\u662f\u8fde\u7eed\u7684\uff0c\u5219 ravel \u4e0d\u4f1a\u751f\u6210\u5e95\u5c42\u6570\u503c\u7684\u526f\u672c\u3002 flatten \u65b9\u6cd5\u7684\u884c\u4e3a\u7c7b\u4f3c\u4e8e ravel \uff0c\u4f46\u5b83\u603b\u662f\u751f\u6210\u6570\u636e\u7684\u526f\u672c\u3002 arr = np.arange(15).reshape((5, 3)) print(arr) # [[ 0 1 2] # [ 3 4 5] # [ 6 7 8] # [ 9 10 11] # [12 13 14]] a = arr.ravel() print(a) # [ 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14] a = arr.flatten() print(a) # [ 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14] C\u987a\u5e8f\u548cF\u987a\u5e8f \u6570\u636e\u53ef\u4ee5\u6309\u7167\u4e0d\u540c\u7684\u987a\u5e8f\u8fdb\u884c\u91cd\u5851\u6216\u6241\u5e73\u5316\u3002\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0cNumPy\u6570\u7ec4\u662f\u6309\u884c\u65b9\u5411\u987a\u5e8f\u521b\u5efa\u7684\u3002 \u5bf9\u4e8e\u4e00\u4e2a\u4e8c\u7ef4\u7684\u6570\u636e\u6570\u7ec4\uff0c C\u987a\u5e8f \u8bf4\u660e\u6570\u7ec4\u6bcf\u884c\u4e2d\u7684\u5143\u7d20\u5b58\u50a8\u5728\u76f8\u90bb\u7684\u5b58\u50a8\u5355\u5143\u4e2d\u3002 F\u987a\u5e8f \u610f\u5473\u7740\u6bcf\u5217\u6570\u636e\u4e2d\u7684\u503c\u90fd\u5b58\u50a8\u5728\u76f8\u90bb\u7684\u5185\u5b58\u4f4d\u7f6e\u4e2d\u3002 \u53ef\u4ee5\u901a\u8fc7\u8bbe\u7f6e reshape \u548c ravel \u51fd\u6570\u7684 order \u53c2\u6570\u6765\u8868\u793a\u6570\u636e\u5728\u6570\u7ec4\u4e2d\u4f7f\u7528\u54ea\u79cd\u987a\u5e8f\u3002 arr = np.arange(15).reshape((5, 3)) print(arr) # [[ 0 1 2] # [ 3 4 5] # [ 6 7 8] # [ 9 10 11] # [12 13 14]] print(arr.ravel()) # [ 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14] print(arr.ravel('F')) # [ 0 3 6 9 12 1 4 7 10 13 2 5 8 11 14] C\u987a\u5e8f\u548cFortran\u987a\u5e8f\u7684\u6838\u5fc3\u533a\u522b\u5c31\u662f\u5728\u7ef4\u5ea6\u65b9\u5411\u4e0a\u904d\u5386\u7684\u65b9\u5f0f\u3002 C\u987a\u5e8f/\u884c\u65b9\u5411\u987a\u5e8f\u9996\u5148\u904d\u5386\u66f4\u9ad8\u7684\u7ef4\u5ea6\uff08\u4f8b\u5982\uff0c\u5728\u8f740\u4e0a\u884c\u8fdb\u4e4b\u524d\u5148\u5728\u8f741\u4e0a\u884c\u8fdb\uff09\u3002 Fortran\u987a\u5e8f/\u5217\u65b9\u5411\u987a\u5e8f\u6700\u540e\u904d\u5386\u66f4\u9ad8\u7684\u7ef4\u5ea6\uff08\u4f8b\u5982\uff0c\u5728\u8f741\u4e0a\u884c\u8fdb\u4e4b\u524d\u5148\u5728\u8f740\u4e0a\u884c\u8fdb\uff09\u3002 \u6570\u7ec4\u8fde\u63a5\u548c\u5206\u9694 numpy.concatenate \u53ef\u4ee5\u83b7\u53d6\u6570\u7ec4\u7684\u5e8f\u5217\uff08\u5143\u7ec4\u3001\u5217\u8868\u7b49\uff09\uff0c\u5e76\u6cbf\u7740\u8f93\u5165\u8f74\u5c06\u5b83\u4eec\u6309\u987a\u5e8f\u8fde\u63a5\u5728\u4e00\u8d77\uff1a arr1 = np.array( [ [1, 2, 3], [4, 5, 6] ] ) arr2 = np.array( [ [7, 8, 9], [10, 11, 12] ] ) a = np.concatenate([arr1, arr2], axis=0) print(a) # [[ 1 2 3] # [ 4 5 6] # [ 7 8 9] # [10 11 12]] a = np.concatenate([arr1, arr2], axis=1) print(a) # [[ 1 2 3 7 8 9] # [ 4 5 6 10 11 12]] \u5176\u4ed6\u7c7b\u4f3c concatenate \u7684\u51fd\u6570\u3002 vstack \u7c7b\u4f3c concatenate \u6cbf axis=0 \u64cd\u4f5c\uff0c hstack \u7c7b\u4f3c concatenate \u6cbf axis=1 \u64cd\u4f5c\u3002 a = np.vstack((arr1, arr2)) print(a) # [[ 1 2 3] # [ 4 5 6] # [ 7 8 9] # [10 11 12]] a = np.hstack((arr1, arr2)) print(a) # [[ 1 2 3 7 8 9] # [ 4 5 6 10 11 12]] split \u53ef\u4ee5\u5c06\u4e00\u4e2a\u6570\u7ec4\u6cbf\u8f74\u5411\u5207\u7247\u6210\u591a\u4e2a\u6570\u7ec4\u3002\u5148\u770b\u4e00\u7ef4\u6570\u7ec4\u3002 np.split(arr, 3) \u8868\u793a\u5c06\u6570\u7ec4\u62c6\u5206\u65f6\u7684 \u7d22\u5f15\u4f4d\u7f6e arr = np.array(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k']) print(arr) # ['a' 'b' 'c' 'd' 'e' 'f' 'g' 'h' 'i' 'j' 'k'] print(np.split(arr, 3)) print(np.split(arr, [3])) # \u4ece\u7d22\u5f15\u4f4d\u7f6e\u4e3a3\u8fdb\u884c\u62c6\u5206 # [array(['a', 'b', 'c'], dtype='<U1'), array(['d', 'e', 'f', 'g', 'h', 'i', 'j', 'k'], dtype='<U1')] print(np.split(arr, [3, 7])) # \u4ece\u7d22\u5f15\u4f4d\u7f6e\u4e3a3\u548c7\u8fdb\u884c\u62c6\u5206 # [array(['a', 'b', 'c'], dtype='<U1'), array(['d', 'e', 'f', 'g'], dtype='<U1'), array(['h', 'i', 'j', 'k'], dtype='<U1')] print(np.split(arr, [3, 7, 9])) # \u4ece\u7d22\u5f15\u4f4d\u7f6e\u4e3a3\u30017\u30019\u8fdb\u884c\u62c6\u5206 # [array(['a', 'b', 'c'], dtype='<U1'), array(['d', 'e', 'f', 'g'], dtype='<U1'), array(['h', 'i'], dtype='<U1'), array(['j', 'k'], dtype='<U1')] \u4e8c\u7ef4\u6570\u7ec4\u548c\u4e00\u7ef4\u6570\u7ec4\u7c7b\u4f3c\u3002 np.split(arr, [1, 2]) \u9ed8\u8ba4axis=0\uff0c\u6cbf\u6c34\u5e73\u65b9\u5411\u8fdb\u884c\u62c6\u5206\uff0c\u62c6\u5206\u884c\u7d22\u5f15\u5206\u522b\u4e3a\u884c\u53f71\u548c\u884c\u53f72\uff0c\u5373[0, 1)\uff0c[1, 2)\uff0c[2, 4]\u4e09\u4e2a\u884c\u533a\u95f4\u3002 np.split(arr, [1, 2], axis=1) \u6cbf\u5782\u76f4\u65b9\u5411\u8fdb\u884c\u62c6\u5206\uff0c\u62c6\u5206\u5217\u7d22\u5f15\u5206\u522b\u4e3a\u5217\u53f71\u548c\u5217\u53f72\uff0c\u5373[0, 1)\uff0c[1, 2)\uff0c[2, 3]\u4e09\u4e2a\u5217\u533a\u95f4\u3002 \u5982\u679c\u62c6\u5206\u533a\u95f4\u51fa\u73b0\u5012\u5e8f\uff0c\u5982 np.split(arr, [3, 1]) \uff0c\u6cbf\u6c34\u5e73\u65b9\u5411\u62c6\u5206\uff0c\u7b2c\u4e00\u4e2a\u884c\u533a\u95f4\u662f[0, 3)\uff0c\u7b2c\u4e8c\u4e2a\u884c\u533a\u95f4\u662f[3, 1)\uff0c\u65e0\u7ed3\u679c\uff0c\u5f53\u524d\u884c\u7d22\u5f15\u4e3a0\uff0c\u672a\u8fbe\u5230\u6700\u5927\u884c\u6570\uff0c\u6240\u4ee5\u8f93\u51fa\u7b2c\u4e09\u4e2a\u533a\u95f4[1, 4]\u3002\u540c\u7406\u53ef\u63a8 np.split(arr, [3, 1], axis=1) \u7684\u4e09\u4e2a\u5217\u533a\u95f4\u3002 arr = np.arange(15).reshape((5, 3)) print(arr) # [[ 0 1 2] # [ 3 4 5] # [ 6 7 8] # [ 9 10 11] # [12 13 14]] result = np.split(arr, [1, 2]) print(result) # [array([[0, 1, 2]]), # array([[3, 4, 5]]), # array([[ 6, 7, 8], # [ 9, 10, 11], # [12, 13, 14]])] result = np.split(arr, [1, 2], axis=1) print(result) # [array([[ 0], # [ 3], # [ 6], # [ 9], # [12]]), # array([[ 1], # [ 4], # [ 7], # [10], # [13]]), # array([[ 2], # [ 5], # [ 8], # [11], # [14]])] result = np.split(arr, [3, 1]) print(result) # [array([[0, 1, 2], # [3, 4, 5], # [6, 7, 8]]), # array([], shape=(0, 3), dtype=int64), # array([[ 3, 4, 5], # [ 6, 7, 8], # [ 9, 10, 11], # [12, 13, 14]]) result = np.split(arr, [3, 1], axis=1) print(result) # [array([[ 0, 1, 2], # [ 3, 4, 5], # [ 6, 7, 8], # [ 9, 10, 11], # [12, 13, 14]]), # array([], shape=(5, 0), dtype=int64), # array([[ 1, 2], # [ 4, 5], # [ 7, 8], # [10, 11], # [13, 14]])] \u6570\u7ec4\u5806\u53e0\u7684\u65b9\u6cd5\uff1ar_\u548cc_ \u5728NumPy\u4e2d\u6709\u4e24\u4e2a\u7279\u6b8a\u7684\u5bf9\u8c61\uff1ar_\u548cc_\uff0c\u5b83\u4eec\u53ef\u4ee5\u4f7f\u5806\u6808\u6570\u7ec4\u7684\u64cd\u4f5c\u66f4\u4e3a\u7b80\u6d01\uff1a np.r_ \u662f\u6309\u5217\u8fde\u63a5\u4e24\u4e2a\u77e9\u9635\uff0c\u5c31\u662f\u628a\u4e24\u77e9\u9635\u4e0a\u4e0b\u76f8\u52a0\uff0c\u8981\u6c42\u5217\u6570\u76f8\u7b49\u3002 np.c_ \u662f\u6309\u884c\u8fde\u63a5\u4e24\u4e2a\u77e9\u9635\uff0c\u5c31\u662f\u628a\u4e24\u77e9\u9635\u5de6\u53f3\u76f8\u52a0\uff0c\u8981\u6c42\u884c\u6570\u76f8\u7b49\u3002 arr = np.arange(6) arr1 = arr.reshape((3, 2)) arr2 = np.random.randn(3, 2) print(arr) # [0 1 2 3 4 5] print(arr1) # [[0 1] # [2 3] # [4 5]] print(arr2) # [[ 0.15407269 0.56316672] # [-1.2390795 -1.59294986] # [ 0.082398 0.75602857]] a = np.r_[arr1, arr2] print(a) # [[ 0. 1. ] # [ 2. 3. ] # [ 4. 5. ] # [ 0.15407269 0.56316672] # [-1.2390795 -1.59294986] # [ 0.082398 0.75602857]] a = np.c_[arr1, arr2] print(a) # [[ 0. 1. 0.15407269 0.56316672] # [ 2. 3. -1.2390795 -1.59294986] # [ 4. 5. 0.082398 0.75602857]] a = np.c_[np.r_[arr1, arr2], arr] print(a) # [[ 0. 1. 0. ] # [ 2. 3. 1. ] # [ 4. 5. 2. ] # [ 0.15407269 0.56316672 3. ] # [-1.2390795 -1.59294986 4. ] # [ 0.082398 0.75602857 5. ]] \u8fd8\u53ef\u4ee5\u5c06\u5207\u7247\u8f6c\u6362\u4e3a\u6570\u7ec4\uff1a a = np.c_[1:6, -10:-5] print(a) # [[ 1 -10] # [ 2 -9] # [ 3 -8] # [ 4 -7] # [ 5 -6]] \u91cd\u590d\u5143\u7d20\uff1atile\u548crepeat repeat \u548c tile \u51fd\u6570\u662f\u7528\u4e8e\u91cd\u590d\u6216\u590d\u5236\u6570\u7ec4\u7684\u4e24\u4e2a\u6709\u7528\u7684\u5de5\u5177\u3002 repeat \u51fd\u6570\u6309\u7167\u7ed9\u5b9a\u6b21\u6570\u5bf9\u6570\u7ec4\u4e2d\u7684 \u6bcf\u4e2a\u5143\u7d20 \u8fdb\u884c\u590d\u5236\uff0c\u751f\u6210\u4e00\u4e2a\u66f4\u5927\u7684\u6570\u7ec4\u3002 \u5bf9\u4e8eNumPy\u800c\u8a00\uff0c\u590d\u5236\u6216\u91cd\u590d\u6570\u7ec4\u7684\u9700\u6c42\u53ef\u80fd\u4e0d\u5982\u5176\u4ed6\u6570\u7ec4\u7f16\u7a0b\u6846\u67b6\uff08\u5982MATLAB\uff09\u90a3\u6837\u5e38\u89c1\u3002\u5176\u4e2d\u4e00\u4e2a\u539f\u56e0\u662f\u5e7f\u64ad\u901a\u5e38\u4f1a\u66f4\u597d\u5730\u6ee1\u8db3\u8fd9\u4e00\u9700\u6c42\u3002 arr = np.arange(3) print(arr) # [0 1 2] a = arr.repeat(3) print(a) # [0 0 0 1 1 1 2 2 2] \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u5982\u679c\u4f60\u4f20\u9012\u4e00\u4e2a\u6574\u6570\uff0c\u6bcf\u4e2a\u5143\u7d20\u90fd\u4f1a\u590d\u5236\u76f8\u5e94\u7684\u6b21\u6570\u3002\u5982\u679c\u4f60\u4f20\u9012\u4e86\u4e00\u4e2a\u6574\u6570\u6570\u7ec4\uff0c\u6bcf\u4e2a\u5143\u7d20\u90fd\u4f1a\u91cd\u590d\u76f8\u5e94\u7684\u4e0d\u540c\u6b21\u6570\uff1a arr = np.arange(3) print(arr) # [0 1 2] a = arr.repeat([2, 3, 4]) print(a) # [0 0 1 1 1 2 2 2 2] \u591a\u7ef4\u6570\u7ec4\u53ef\u4ee5\u5728\u6307\u5b9a\u7684\u8f74\u5411\u4e0a\u5bf9\u5b83\u4eec\u7684\u5143\u7d20\u8fdb\u884c\u91cd\u590d\uff0c\u6ce8\u610f\uff0c\u5982\u679c\u6ca1\u6709\u4f20\u9012\u8f74\uff0c\u6570\u7ec4\u5c06\u9996\u5148\u6241\u5e73\u5316\uff08\u6cbf0\u8f74\u590d\u5236\uff09\u3002 arr = np.random.randn(2, 2) print(arr) # [[-0.15870621 0.26521446] # [-1.35042383 -0.65562376]] a = arr.repeat(2, axis=0) print(a) # [[-0.15870621 0.26521446] # [-0.15870621 0.26521446] # [-1.35042383 -0.65562376] # [-1.35042383 -0.65562376]] a = arr.repeat(2, axis=1) print(a) # [[-0.15870621 -0.15870621 0.26521446 0.26521446] # [-1.35042383 -1.35042383 -0.65562376 -0.65562376]] \u540c\u6837\uff0c\u9700\u8981\u6309\u7167\u4e0d\u540c\u6b21\u6570\u91cd\u590d\u591a\u7ef4\u6570\u7ec4\u7684\u5207\u7247\u65f6\uff0c\u53ef\u4ee5\u4f20\u9012\u4e00\u4e2a\u6574\u6570\u6570\u7ec4\uff1a arr = np.random.randn(2, 2) print(arr) # [[-0.15870621 0.26521446] # [-1.35042383 -0.65562376]] a = arr.repeat([2, 3], axis=0) print(a) # [[-0.15870621 0.26521446] # [-0.15870621 0.26521446] # [-1.35042383 -0.65562376] # [-1.35042383 -0.65562376] # [-1.35042383 -0.65562376]] tile \u662f\u4e00\u79cd\u5feb\u6377\u65b9\u6cd5\uff0c\u5b83\u53ef\u4ee5\u6cbf\u7740\u8f74\u5411\u5806\u53e0\u526f\u672c\u3002\u5728\u89c6\u89c9\u4e0a\uff0c\u4f60\u53ef\u4ee5\u628a\u5b83\u770b\u4f5c\u7c7b\u4f3c\u4e8e\u201c\u94fa\u8bbe\u74f7\u7816\u201d\u3002 np.tile(arr, 2) \u7b2c\u4e8c\u4e2a\u53c2\u6570\u662f\u74f7\u7816\u7684\u6570\u91cf\u3002\u7528\u6807\u91cf\u6765\u8bf4\uff0c\u94fa\u8bbe\u662f\u9010\u884c\u8fdb\u884c\u7684\uff0c\u800c\u4e0d\u662f\u9010\u5217\uff0c\u7b2c\u4e8c\u4e2a\u53c2\u6570\u4e5f\u53ef\u4ee5\u662f\u8868\u793a\u201c\u94fa\u74f7\u7816\u201d\u5e03\u5c40\u7684\u5143\u7ec4\u3002 arr = np.random.randn(2, 2) print(arr) # [[-0.15870621 0.26521446] # [-1.35042383 -0.65562376]] a = np.tile(arr, 2) print(a) # [[-0.15870621 0.26521446 -0.15870621 0.26521446] # [-1.35042383 -0.65562376 -1.35042383 -0.65562376]] a = np.tile(arr, (2, 1)) print(a) # [[-0.15870621 0.26521446] # [-1.35042383 -0.65562376] # [-0.15870621 0.26521446] # [-1.35042383 -0.65562376]] a = np.tile(arr, (3, 2)) print(a) # [[-0.15870621 0.26521446 -0.15870621 0.26521446] # [-1.35042383 -0.65562376 -1.35042383 -0.65562376] # [-0.15870621 0.26521446 -0.15870621 0.26521446] # [-1.35042383 -0.65562376 -1.35042383 -0.65562376] # [-0.15870621 0.26521446 -0.15870621 0.26521446] # [-1.35042383 -0.65562376 -1.35042383 -0.65562376]] \u795e\u5947\u7d22\u5f15\uff08Fancy Indexing\uff09\u7684\u7b49\u4ef7\u65b9\u6cd5\uff1atake\u548cput take \u51fd\u6570\u53ef\u4ee5\u83b7\u53d6\u6570\u7ec4\u5b50\u96c6\uff0c put \u51fd\u6570\u53ef\u4ee5\u8bbe\u7f6e\u6570\u7ec4\u5b50\u96c6\u3002\u5176\u4ed6\u4e00\u4e9bndarray\u65b9\u6cd5\u53ef\u4ee5\u7528\u4e8e\u7279\u6b8a\u60c5\u51b5\u4e0b\u5728\u5355\u4e2a\u8f74\u4e0a\u7684\u6570\u636e\u9009\u53d6. arr = np.arange(10) * 100 inds = [7, 1, 2, 6] print(arr) # [ 0 100 200 300 400 500 600 700 800 900] print(inds) # [7, 1, 2, 6] # \u4ecearr\u5e8f\u5217\u4e2d\u4f9d\u6b21\u83b7\u53d6\u7d22\u5f15\u4e3a7,1,2,6\u4f4d\u7f6e\u4e0a\u7684\u5143\u7d20\u3002 a = np.take(arr, inds) print(a) # [700 100 200 600] print(arr) # [ 0 100 200 300 400 500 600 700 800 900] arr = np.arange(10) * 100 inds = [7, 1, 2, 6] # \u76f8\u5f53\u4e8e\u5c06arr\u5e8f\u5217\u4e2d\u7d22\u5f15\u4e3a7,1,2,6\u4f4d\u7f6e\u4e0a\u7684\u5143\u7d20\u752842\u6765\u66ff\u6362 np.put(arr, inds, 41) print(arr) # [ 0 41 41 300 400 500 41 41 800 900] arr = np.arange(10) * 100 inds = [7, 1, 2, 6] np.put(arr, inds, [40, 41, 42]) print(arr) # [ 0 41 42 300 400 500 40 40 800 900] \u6ce8\u610f\uff0c\u4e0a\u4f8b\u5982\u679c\u6539\u5199\u4e3a a = np.put(arr, inds, 41) \uff0c\u5219\u8fd4\u56de None \u3002 a = np.put(arr, inds, 41) print(a) # None \u5982\u679c\u8981\u5728\u522b\u7684\u8f74\u4e0a\u4f7f\u7528 take \uff0c\u53ef\u4ee5\u901a\u8fc7\u4f20\u9012 axis \u5173\u952e\u5b57\u6765\u5b9e\u73b0\u3002 inds = [2, 0, 2, 1] arr = np.random.randn(2, 4) print(arr) # [[-0.82371274 -0.16911898 -0.01903239 -0.91792531] # [-0.55176496 -0.30111564 0.33872999 0.32454671]] a = arr.take(inds, axis=1) print(a) # [[-0.01903239 -0.82371274 -0.01903239 -0.16911898] # [ 0.33872999 -0.55176496 0.33872999 -0.30111564]] \u5e7f\u64ad \u5e7f\u64ad\uff08broadcasting\uff09 \u6307\u7684\u662f\u4e0d\u540c\u5f62\u72b6\u7684\u6570\u7ec4\u4e4b\u95f4\u7684\u7b97\u672f\u8fd0\u7b97\u7684\u6267\u884c\u65b9\u5f0f\u3002\u53d7\u67d0\u4e9b\u7ea6\u675f\u7684\u5f71\u54cd\uff0c\u8f83\u5c0f\u7684\u6570\u7ec4\u5728\u8f83\u5927\u7684\u6570\u7ec4\u4e0a\u201c\u5e7f\u64ad\u201d\uff0c\u4ee5\u4fbf\u5b83\u4eec\u5177\u6709\u517c\u5bb9\u7684\u5f62\u72b6\u3002\u5e7f\u64ad\u63d0\u4f9b\u4e86\u4e00\u79cd\u77e2\u91cf\u5316\u6570\u7ec4\u64cd\u4f5c\u7684\u65b9\u6cd5\u3002 NumPy \u64cd\u4f5c\u901a\u5e38\u5728 \u9010\u4e2a\u5143\u7d20 \u7684\u57fa\u7840\u4e0a\u5728\u6570\u7ec4\u5bf9\u4e0a\u5b8c\u6210\u3002\u5728\u6700\u7b80\u5355\u7684\u60c5\u51b5\u4e0b\uff0c\u4e24\u4e2a\u6570\u7ec4\u5fc5\u987b\u5177\u6709\u5b8c\u5168\u76f8\u540c\u7684\u5f62\u72b6\uff0c\u5982\u4e0b\u4f8b\u6240\u793a\uff1a a = np.array([1, 3, 5]) b = np.array([2, 2, 2]) print(a * b) # [ 2 6 10] print(a + b) # [3 5 7] \u5f53\u6570\u7ec4\u7684\u5f62\u72b6\u6ee1\u8db3\u67d0\u4e9b\u7ea6\u675f\u65f6\uff0cNumPy\u7684\u5e7f\u64ad\u89c4\u5219\u653e\u5bbd\u4e86\u8fd9\u79cd\u7ea6\u675f\u3002\u5f53\u4e00\u4e2a\u6570\u7ec4\u548c\u4e00\u4e2a\u6807\u91cf\u503c\u5728\u4e00\u4e2a\u64cd\u4f5c\u4e2d\u7ec4\u5408\u65f6\uff0c\u4f1a\u53d1\u751f\u6700\u7b80\u5355\u7684\u5e7f\u64ad\u793a\u4f8b\uff1a a = np.array([1, 3, 5]) b = 2 print(a * b) # [ 2 6 10] print(a + b) # [3 5 7] \u7ed3\u679c\u7b49\u540c\u4e8e\u524d\u9762\u7684\u793a\u4f8b\uff0c\u5176\u4e2d b \u662f\u6570\u7ec4\u3002\u53ef\u4ee5\u5047\u8c61\u5c06\u5728\u7b97\u672f\u8fd0\u7b97\u671f\u95f4\u6807\u91cf b \u88ab \u62c9\u4f38 \u6210\u4e0e\u6570\u7ec4 a \u5177\u6709\u76f8\u540c\u5f62\u72b6\u7684\u6570\u7ec4\u3002\u62c9\u4f38\u7c7b\u6bd4\u53ea\u662f\u6982\u5ff5\u6027\u7684\u3002NumPy\u5728\u5b9e\u9645\u8fd0\u7b97\u4e2d\u76f4\u63a5\u4f7f\u7528\u539f\u59cb\u6807\u91cf\u503c\u800c\u4e0d\u4f1a\u53bb\u5236\u4f5c\u62c9\u4f38\u526f\u672c\uff0c\u56e0\u6b64\u5e7f\u64ad\u64cd\u4f5c\u6548\u7387\u66f4\u9ad8\u6548\uff0c\u5728\u4e0a\u4f8b\u7684\u4e58\u6cd5\u671f\u95f4\uff0c\u901a\u8fc7\u5e7f\u64ad\u64cd\u4f5c\uff0c\u79fb\u52a8\u7684\u5185\u5b58\u8f83\u5c11\uff08b\u662f\u6807\u91cf\u800c\u4e0d\u662f\u6570\u7ec4\uff09\u3002 \u5e7f\u64ad\u7684\u89c4\u5219 \uff1a \u5728\u4e24\u4e2a\u6570\u7ec4\u4e0a\u8fdb\u884c\u5e7f\u64ad\u64cd\u4f5c\u65f6\uff0cNumPy\u4f1a\u9010\u5143\u7d20\u5730\u6bd4\u8f83\u5b83\u4eec\u7684\u5f62\u72b6\u3002\u5b83\u4ece\u5c3e\u968f\u5c3a\u5bf8\u5f00\u59cb\uff0c\u5e76\u5411\u524d\u53d1\u5c55\u3002\u5982\u679c\u5bf9\u4e8e\u6bcf\u4e2a\u7ed3\u5c3e\u7ef4\u5ea6\uff08\u5373\u4ece\u5c3e\u90e8\u5f00\u59cb\u7684\uff09\u8f74\u957f\u5ea6\u90fd\u5339\u914d\uff0c\u6216\u8005\u957f\u5ea6\u90fd\u662f1\uff0c\u5219\u4e24\u4e2a\u4e8c\u7ef4\u6570\u7ec4\u5c31\u662f\u53ef\u4ee5\u517c\u5bb9\u5e7f\u64ad\u7684\u3002\u4e4b\u540e\uff0c\u5e7f\u64ad\u4f1a\u5728\u4e22\u5931\u7684\u6216\u957f\u5ea6\u4e3a1\u7684\u8f74\u4e0a\u8fdb\u884c\u3002 \u5982\u679c\u4e0d\u6ee1\u8db3\u8fd9\u4e9b\u6761\u4ef6\uff0c\u5219\u629b\u51fa ValueError: operands could not be broadcast together \u5f02\u5e38\uff0c\u6307\u793a\u6570\u7ec4\u5177\u6709\u4e0d\u517c\u5bb9\u7684\u5f62\u72b6\u3002\u7ed3\u679c\u6570\u7ec4\u7684\u5927\u5c0f\u662f\u6cbf\u8f93\u5165\u7684\u6bcf\u4e2a\u8f74\u4e0d\u662f1\u7684\u5927\u5c0f\u3002 \u5c06\u6807\u91cf\u503c\u8ddf\u6570\u7ec4\u5408\u5e76\u65f6\u5c31\u4f1a\u53d1\u751f\u6700\u7b80\u5355\u7684\u5e7f\u64ad\u3002 arr = np.arange(5) print(arr * 4) # \u6807\u91cf\u503c4\u5df2\u7ecf\u88ab\u5e7f\u64ad\u7ed9\u4e58\u6cd5\u8fd0\u7b97\u4e2d\u7684\u6240\u6709\u5176\u4ed6\u5143\u7d20 # [ 0 4 8 12 16] \u6cbf0\u8f74\u5e7f\u64ad\uff1a\u4e0b\u4f8b\u4e2d\uff0c\u7531\u4e8earr.mean(0)\u7684\u957f\u5ea6\u4e3a3\uff0c\u56e0\u6b64\u5b83\u4e0e\u8f740\u4e0a\u7684\u5e7f\u64ad\u517c\u5bb9\uff0c\u56e0\u4e3aarr\u4e2d\u7684\u7ed3\u5c3e\u7ef4\u5ea6\u4e3a3\uff0c\u56e0\u6b64\u5339\u914d\u3002 arr = np.random.randn(4, 3) print(arr) # [[ 0.5338909 0.52839493 0.43633023] # [-0.23583192 0.88555534 -0.21576162] # [-2.98702701 1.34854523 -1.97894712] # [ 0.08421219 0.4262033 -1.34178772]] print(arr.mean(0)) # [-0.65118896 0.7971747 -0.77504156] demeaned = arr - arr.mean(0) # \u901a\u8fc7\u51cf\u53bb\u5217\u5747\u503c\u6765\u964d\u4f4e\u6570\u7ec4\u4e2d\u7684\u6bcf\u4e00\u5217\u7684\u6570\u503c print(demeaned) # [[ 1.18507986 -0.26877977 1.21137178] # [ 0.41535704 0.08838064 0.55927993] # [-2.33583805 0.55137054 -1.20390556] # [ 0.73540115 -0.3709714 -0.56674616]] print(demeaned.mean(0)) # [-8.32667268e-17 -2.77555756e-17 0.00000000e+00] \u4e00\u7ef4\u5e7f\u64ad\uff1a \u5728\u4e0b\u9762\u884c\u51cf\u5747\u503c\u7684\u4f8b\u5b50\u4e2d\uff0c\u6839\u636e\u89c4\u5219\uff0c\u4e3a\u4e86\u4ece\u8f741\u51cf\u5747\u503c\uff08\u5373\u4ece\u6bcf\u884c\u51cf\u53bb\u884c\u5e73\u5747\u503c\uff09\uff0c\u8f83\u5c0f\u7684\u6570\u7ec4\u7684\u5f62\u72b6\u5fc5\u987b\u662f\uff084, 1\uff09\u3002 \u91cd\u65b0\u5851\u9020\u884c\u610f\u5473\u7740\u5f62\u72b6\u662f\uff084,1\uff09\u800c\u4e0d\u662f\uff084, \uff09\u3002 row_means = arr.mean(1) print(row_means) # [-0.70122122 0.16605647 -0.40749722 -0.7203534 ] print(row_means.shape) # (4,) print(row_means.reshape(4, 1)) # [[-0.53106 ] # [-1.62253021] # [-0.70818004] # [ 0.59117791]] demeaned = arr - row_means.reshape((4, 1)) print(demeaned) # [[ 0.1798217 0.09479837 -0.27462006] # [-1.17020199 0.62503236 0.54516963] # [ 0.85457175 -0.75122184 -0.1033499 ] # [ 0.04550358 -0.41094345 0.36543987]] print(demeaned.mean(1)) # [0.00000000e+00 7.40148683e-17 9.25185854e-18 1.85037171e-17] \u4e09\u7ef4\u5e7f\u64ad\uff1a \u60f3\u8981\u5728\u8f740\u4ee5\u5916\u7684\u8f74\u4e0a\u4f7f\u7528\u8f83\u4f4e\u7ef4\u6570\u7ec4\u8fdb\u884c\u7b97\u672f\u8fd0\u7b97\u662f\u76f8\u5f53\u666e\u904d\u7684\u3002\u6839\u636e\u5e7f\u64ad\u89c4\u5219\uff0c\u201c\u5e7f\u64ad\u7ef4\u5ea6\u201d\u5728\u8f83\u5c0f\u7684\u6570\u7ec4\u4e2d\u5fc5\u987b\u4e3a1\u3002\\ \u5728\u4e09\u7ef4\u60c5\u51b5\u4e0b\uff0c\u5728\u4e09\u4e2a\u7ef4\u5ea6\u4e2d\u7684\u4efb\u4f55\u4e00\u4e2a\u7ef4\u5ea6\u4e0a\u8fdb\u884c\u5e7f\u64ad\u53ea\u662f\u5c06\u6570\u636e\u91cd\u5851\u4e3a\u5f62\u72b6\u517c\u5bb9\u7684\u95ee\u9898\u3002\\ \u56e0\u6b64\uff0c\u9700\u8981\u6dfb\u52a0\u4e00\u4e2a\u957f\u5ea6\u4e3a1\u7684\u65b0\u8f74\uff0c\u4e13\u95e8\u7528\u4e8e\u5e7f\u64ad\u76ee\u7684\u3002\\ \u4f7f\u7528reshape\u662f\u4e00\u79cd\u9009\u62e9\uff0c\u4f46\u63d2\u5165\u4e00\u4e2a\u8f74\u9700\u8981\u6784\u9020\u4e00\u4e2a\u8868\u793a\u65b0\u5f62\u72b6\u7684\u5143\u7ec4\u3002\\ NumPy\u6570\u7ec4\u63d0\u4f9b\u4e86np.newaxis\u5c5e\u6027\u548c\u201c\u5b8c\u6574\u201d\u5207\u7247\u6765\u63d2\u5165\u65b0\u8f74\u3002 Full array shape: (3, 2, 4)\\ Axis 0: (2, 4), (1, 2, 4)\\ Axis 1: (3, 1, 4)\\ Axis 2: (3, 2, 1) arr = np.zeros((3, 2, 4)) print(arr) # [[[0. 0. 0. 0.] # [0. 0. 0. 0.]] # # [[0. 0. 0. 0.] # [0. 0. 0. 0.]] # # [[0. 0. 0. 0.] # [0. 0. 0. 0.]]] arr_0 = np.arange(2) # \u751f\u62100\u8f74\u5207\u7247 arr = arr + arr_0[np.newaxis, :, np.newaxis] print(arr) # [[[0. 0. 0. 0.] # [1. 1. 1. 1.]] # # [[0. 0. 0. 0.] # [1. 1. 1. 1.]] # # [[0. 0. 0. 0.] # [1. 1. 1. 1.]]] arr_1 = np.arange(4) # \u751f\u62101\u8f74\u5207\u7247 arr = arr + arr_1[np.newaxis, np.newaxis, :] print(arr) # [[[0. 1. 2. 3.] # [1. 2. 3. 4.]] # # [[0. 1. 2. 3.] # [1. 2. 3. 4.]] # # [[0. 1. 2. 3.] # [1. 2. 3. 4.]]] arr_2 = np.arange(3) # \u751f\u62102\u8f74\u5207\u7247 arr = arr + arr_2[:, np.newaxis, np.newaxis] print(arr) # [[[0. 1. 2. 3.] # [1. 2. 3. 4.]] # # [[1. 2. 3. 4.] # [2. 3. 4. 5.]] # # [[2. 3. 4. 5.] # [3. 4. 5. 6.]]] \u5728\u8f742\u4e0a\u51cf\u53bb\u5747\u503c depth_means = arr.mean(2) print(depth_means) # [[1.5 2.5] # [2.5 3.5] # [3.5 4.5]] demeaned = arr - depth_means[:, :, np.newaxis] print(demeaned) # [[[-1.5 -0.5 0.5 1.5] # [-1.5 -0.5 0.5 1.5]] # # [[-1.5 -0.5 0.5 1.5] # [-1.5 -0.5 0.5 1.5]] # # [[-1.5 -0.5 0.5 1.5] # [-1.5 -0.5 0.5 1.5]]] N\u7ef4\u5e7f\u64ad def demean_axis(arr, axis=0): means = arr.mean(axis) indexer = [slice(None)] * arr.ndim indexer[axis] = np.newaxis return arr - means[indexer] print(demean_axis(arr, axis=2)) # \u548c\u524d\u9762\u7ed3\u679c\u76f8\u540c # [[[-1.5 -0.5 0.5 1.5] # [-1.5 -0.5 0.5 1.5]] # # [[-1.5 -0.5 0.5 1.5] # [-1.5 -0.5 0.5 1.5]] # # [[-1.5 -0.5 0.5 1.5] # [-1.5 -0.5 0.5 1.5]]] \u901a\u8fc7\u5e7f\u64ad\u8bbe\u5b9a\u6570\u7ec4\u7684\u503c \u63a7\u5236\u7b97\u672f\u8fd0\u7b97\u7684\u76f8\u540c\u5e7f\u64ad\u89c4\u5219\u4e5f\u9002\u7528\u4e8e\u901a\u8fc7\u6570\u7ec4\u7d22\u5f15\u8bbe\u7f6e\u503c\u3002 arr = np.zeros((4, 3)) arr[:] = 5 print(arr) # [[5. 5. 5.] # [5. 5. 5.] # [5. 5. 5.] # [5. 5. 5.]] col = np.arange(4) arr[:] = col[:, np.newaxis] print(arr) # [[0. 0. 0.] # [1. 1. 1.] # [2. 2. 2.] # [3. 3. 3.]] ufunc\u9ad8\u7ea7\u5e94\u7528 import numpy as np ufunc\u5b9e\u4f8b\u65b9\u6cd5 \u901a\u7528\u51fd\u6570\uff08\u6216\u7b80\u79f0\u4e3aufunc \uff09 \u662f\u4e00\u79cdndarrays \u4ee5\u9010\u5143\u7d20\u65b9\u5f0f\u64cd\u4f5c\u7684\u51fd\u6570\uff0c\u652f\u6301\u6570\u7ec4\u5e7f\u64ad\uff0c\u7c7b\u578b\u8f6c\u6362\u548c\u5176\u4ed6\u4e00\u4e9b\u6807\u51c6\u529f\u80fd\u3002\\ \u4e5f\u5c31\u662f\u8bf4\uff0cufunc\u662f\u4e00\u4e2a\u51fd\u6570\u7684\"\u77e2\u91cf\u5316\" \u5305\u88c5\u5668\uff0c\u5b83\u63a5\u53d7\u56fa\u5b9a\u6570\u91cf\u7684\u7279\u5b9a\u8f93\u5165\u5e76\u4ea7\u751f\u56fa\u5b9a\u6570\u91cf\u7684\u7279\u5b9a\u8f93\u51fa\u3002\\ \u5728NumPy\u4e2d\uff0c\u901a\u7528\u51fd\u6570\u662fnumpy.ufunc\u7c7b\u7684\u5b9e\u4f8b\u3002 NumPy\u7684\u6bcf\u4e2a\u4e8c\u5143ufunc\uff08\u901a\u7528\u51fd\u6570\uff09\u90fd\u6709\u7279\u6b8a\u7684\u65b9\u6cd5\u6765\u6267\u884c\u67d0\u4e9b\u7279\u6b8a\u7684\u5411\u91cf\u5316\u64cd\u4f5c\u3002 reduce\u65b9\u6cd5\u63a5\u6536\u5355\u4e2a\u6570\u7ec4\u5e76\u901a\u8fc7\u6267\u884c\u4e00\u7cfb\u5217\u4e8c\u5143\u64cd\u4f5c\u5728\u53ef\u9009\u7684\u8f74\u5411\u4e0a\u5bf9\u6570\u7ec4\u7684\u503c\u8fdb\u884c\u805a\u5408\u3002\\ \u4f8b\u5982\uff0c\u4f7f\u7528np.add.reduce\u662f\u5bf9\u6570\u7ec4\u4e2d\u5143\u7d20\u8fdb\u884c\u52a0\u548c\u7684\u53e6\u4e00\u79cd\u65b9\u6cd5\uff1a\\ \u8d77\u59cb\u503c\uff08\u5bf9\u4e8eadd\u65b9\u6cd5\u662f0\uff09\u53d6\u51b3\u4e8eufunc\u3002\u5982\u679c\u4f20\u9012\u4e86\u4e00\u4e2a\u8f74\uff0c\u5219\u6cbf\u8be5\u8f74\u6267\u884c\u7f29\u805a\u3002 arr = np.arange(10) a = np.add.reduce(arr) print(a) # 45 a = arr.sum() print(a) # 45 \u4f7f\u7528np.logical_and\u6765\u68c0\u67e5\u6570\u7ec4\u7684\u6bcf\u4e00\u884c\u4e2d\u7684\u503c\u662f\u5426\u88ab\u6392\u5e8f(logical_and.reduce\u7b49\u4ef7\u4e8eall\u65b9\u6cd5)\uff1a arr = np.random.randn(5, 5) print(arr) # [[ 0.75217836 1.26134639 -0.39387918 0.46348823 -1.0026674 ] # [ 0.72085602 -0.50487667 3.21023694 -0.2752039 -1.41158734] # [ 1.69031532 0.61134097 0.58282835 1.03043232 -0.1609196 ] # [-3.05141239 0.47221317 1.36464297 0.17500156 1.26158638] # [-0.21578318 0.37700321 1.05427816 1.56526207 -0.08290142]] a = arr[::2].sort(1) # \u5bf9\u884c\u8fdb\u884c\u6392\u5e8f print(a) # None a = arr[:, :-1] < arr[:, 1:] print(a) # [[ True True True True] # [False True False False] # [ True True True True] # [ True True False True] # [ True True True True]] a = np.logical_and.reduce(arr[:, :-1] < arr[:, 1:], axis=1) print(a) # [ True False True False True] accumulate\u4e0ereduce\u662f\u76f8\u5173\u7684\uff0c\u5c31\u50cfcumsum\u4e0esum\u76f8\u5173\u4e00\u6837\u3002\\ accumulate\u751f\u6210\u4e00\u4e2a\u6570\u7ec4\uff0c\u5176\u5c3a\u5bf8\u4e0e\u4e2d\u95f4\u201c\u7d2f\u8ba1\u201d\u503c\u76f8\u540c\uff1a arr = np.arange(15).reshape((3, 5)) print(arr) # [[ 0 1 2 3 4] # [ 5 6 7 8 9] # [10 11 12 13 14]] a = np.add.accumulate(arr, axis=1) print(a) # [[ 0 1 3 6 10] # [ 5 11 18 26 35] # [10 21 33 46 60]] outer\u5728\u4e24\u4e2a\u6570\u7ec4\u4e4b\u95f4\u6267\u884c\u6210\u5bf9\u7684\u4ea4\u53c9\u4e58\u79ef\uff1a arr = np.arange(3).repeat([1, 2, 2]) print(arr) # [0 1 1 2 2] a = np.multiply.outer(arr, np.arange(5)) print(a) # [[0 0 0 0 0] # [0 1 2 3 4] # [0 1 2 3 4] # [0 2 4 6 8] # [0 2 4 6 8]] outer\u7684\u8f93\u51fa\u7684\u7ef4\u5ea6\u7b49\u4e8e\u8f93\u5165\u7684\u7ef4\u5ea6\u603b\u548c\uff1a x, y = np.random.randn(3, 4), np.random.randn(5) result = np.subtract.outer(x, y) print(result.shape) # (3, 4, 5) reduceat\u65b9\u6cd5\u6267\u884c\u201c\u672c\u5730\u7f29\u805a\u201d\uff0c\u672c\u8d28\u4e0a\u662f\u4e00\u4e2a\u6570\u7ec4groupby\u64cd\u4f5c\uff0c\u5728\u64cd\u4f5c\u4e2d\u6570\u7ec4\u7684\u5207\u7247\u805a\u5408\u5728\u4e86\u4e00\u8d77\u3002\\ reduceat\u65b9\u6cd5\u63a5\u53d7\u4e00\u7cfb\u5217\u7684\u201c\u7bb1\u4f53\u8fb9\u7f18\u201d\uff0c\u8fd9\u4e9b\u7bb1\u4f53\u8fb9\u7f18\u8868\u793a\u5982\u4f55\u5206\u9694\u4ee5\u53ca\u805a\u5408\u6570\u636e\u503c\uff1a arr = np.arange(10) a = np.add.reduceat(arr, [0, 5, 8]) # \u7ed3\u679c\u662f\u5728arr[0:5]\u3001arr[5:8]\u548carr[8:]\u4e0a\u6267\u884c\u4e86\u7f29\u805a\uff08\u6b64\u5904\u662f\u52a0\u548c\uff09\u3002 print(a) # [10 18 17] \u53ef\u4ee5\u4f20\u9012\u4e00\u4e2aaxis\u53c2\u6570\uff1a arr = np.multiply.outer(np.arange(4), np.arange(5)) print(arr) # [[ 0 0 0 0 0] # [ 0 1 2 3 4] # [ 0 2 4 6 8] # [ 0 3 6 9 12]] a = np.add.reduceat(arr, [0, 2, 4], axis=1) print(a) # [[ 0 0 0] # [ 1 5 4] # [ 2 10 8] # [ 3 15 12]] \u4f7f\u7528Python\u7f16\u5199\u65b0\u7684ufunc\u65b9\u6cd5 \u6709\u5f88\u591a\u5de5\u5177\u53ef\u4ee5\u7528\u4e8e\u521b\u5efa\u4f60\u81ea\u5df1\u7684NumPy ufunc\uff0c\u6700\u5e38\u7528\u7684\u662fNumPy\u7684C\u8bed\u8a00API\uff0c\u4f46\u662f\u5b83\u5df2\u7ecf\u8d85\u51fa\u4e86\u672c\u4e66\u7684\u8303\u7574\u3002\\ \u5728\u672c\u8282\uff0c\u6211\u4eec\u5c06\u4e00\u8d77\u770b\u770b\u7eafPython\u7684ufunc\u65b9\u6cd5\u3002\\ numpy.frompyfunc\u51fd\u6570\u63a5\u6536\u4e00\u4e2a\u5177\u6709\u7279\u5b9a\u6570\u5b57\u8f93\u5165\u548c\u8f93\u51fa\u7684\u51fd\u6570\u3002\\ \u4f7f\u7528frompyfunc\u521b\u5efa\u7684\u51fd\u6570\u901a\u5e38\u8fd4\u56de\u7684\u662fPython\u5bf9\u8c61\u7684\u6570\u7ec4\uff0c\u8fd9\u5e76\u4e0d\u65b9\u4fbf\u3002\\ \u8fd8\u6709\u53e6\u4e00\u4e2a\u51fd\u6570numpy.vectorize\u5141\u8bb8\u6307\u5b9a\u8f93\u51fa\u7684\u7c7b\u578b\uff08\u4f46\u529f\u80fd\u7a0d\u5dee\uff09\u3002 \u4f8b\u5982\uff0c\u4e00\u4e2a\u7b80\u5355\u7684\u6309\u5143\u7d20\u76f8\u52a0\u7684\u51fd\u6570\u53ef\u4ee5\u5982\u4e0b\uff1a def add_elements(x, y): return x + y add_them = np.frompyfunc(add_elements, 2, 1) result = add_them(np.arange(8), np.arange(8)) print(result) # [0 2 4 6 8 10 12 14] add_them = np.vectorize(add_elements, otypes=[np.float64]) result = add_them(np.arange(8), np.arange(8)) print(result) # [ 0. 2. 4. 6. 8. 10. 12. 14.] \u7ed3\u6784\u5316\u548c\u8bb0\u5f55\u5f0f\u6570\u7ec4 import numpy as np ndarray\u662f\u4e00\u4e2a\u540c\u6784\u6570\u636e\u7684\u5bb9\u5668\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u5b83\u8868\u793a\u4e00\u4e2a\u5185\u5b58\u5757\uff0c\u5176\u4e2d\u6bcf\u4e2a\u5143\u7d20\u5360\u7528\u76f8\u540c\u6570\u91cf\u7684\u5b57\u8282\uff0c\u7531dtype\u786e\u5b9a\u3002\\ ndarray\u7684\u8fd9\u79cd\u7279\u6027\u4e0d\u5141\u8bb8\u4f60\u4f7f\u7528\u5b83\u8868\u793a\u5f02\u6784\u7684\u6570\u636e\u6216\u8868\u683c\u578b\u6570\u636e\u3002\\ \u7ed3\u6784\u5316\u6570\u7ec4\u662f\u4e00\u4e2andarray\uff0c\u5176\u4e2d\u6bcf\u4e2a\u5143\u7d20\u53ef\u4ee5\u88ab\u8ba4\u4e3a\u4ee3\u8868C\u4e2d\u7684struct\uff08\u56e0\u6b64\u662f\u201c\u7ed3\u6784\u5316\u201d\u7684\u540d\u79f0\uff09\uff0c\u6216\u8005\u662fSQL\u8868\u4e2d\u5177\u6709\u591a\u4e2a\u547d\u540d\u5b57\u6bb5\u7684\u884c\uff1a dtype = [('x', np.float64), ('y', np.int32)] sarr = np.array( [ (1.5, 6), (np.pi, -2) ], dtype=dtype ) print(sarr) # [(1.5 , 6) (3.14159265, -2)] \u6709\u51e0\u79cd\u65b9\u6cd5\u53ef\u4ee5\u6307\u5b9a\u7ed3\u6784\u5316\u7684dtype\uff08\u8bf7\u53c2\u9605NumPy\u5b98\u65b9\u5728\u7ebf\u6587\u6863\uff09\u3002\\ \u4e00\u79cd\u5178\u578b\u7684\u65b9\u5f0f\u662f\u4f7f\u7528(field_name, field_data_type)\u4f5c\u4e3a\u5143\u7ec4\u7684\u5217\u8868\u3002 \u6570\u7ec4\u7684\u5143\u7d20\u662f\u5143\u7ec4\u5bf9\u8c61\uff0c\u5176\u5143\u7d20\u53ef\u4ee5\u50cf\u5b57\u5178\u4e00\u6837\u8bbf\u95ee\uff1a\\ \u5b57\u6bb5\u540d\u79f0\u5b58\u50a8\u5728dtype.names\u5c5e\u6027\u4e2d\u3002 print(sarr[0]) # (1.5, 6) print(sarr['x']) # [1.5 3.14159265] print(sarr[0]['y']) # 6 \u5d4c\u5957dtype\u548c\u591a\u7ef4\u5b57\u6bb5 \u5f53\u6307\u5b9a\u7ed3\u6784\u5316\u7684dtype\u65f6\uff0c\u53ef\u4ee5\u53e6\u5916\u4f20\u9012\u4e00\u4e2a\u5f62\u72b6\uff08\u4ee5int\u6216\u5143\u7ec4\u7684\u5f62\u5f0f\uff09\uff1a dtype = [('x', np.int64, 3), ('y', np.int32)] arr = np.zeros(4, dtype=dtype) print(arr) # [([0, 0, 0], 0) ([0, 0, 0], 0) ([0, 0, 0], 0) ([0, 0, 0], 0)] x\u5b57\u6bb5\u5f15\u7528\u7684\u662f\u6bcf\u6761\u8bb0\u5f55\u4e2d\u957f\u5ea6\u4e3a3\u7684\u6570\u7ec4\uff1a print(arr[0]['x']) # [0 0 0] \u8bbf\u95eearr['x']\u7136\u540e\u8fd4\u56de\u4e00\u4e2a\u4e8c\u7ef4\u6570\u7ec4\uff0c\u800c\u4e0d\u662f\u8fd4\u56de\u4e00\u4e2a\u4e00\u7ef4\u6570\u7ec4\uff1a print(arr['x']) # [[0 0 0] # [0 0 0] # [0 0 0] # [0 0 0]] \u4e3a\u4ec0\u4e48\u8981\u4f7f\u7528\u7ed3\u6784\u5316\u6570\u7ec4 \u4e0epandas\u7684DataFrame\u76f8\u6bd4\uff0cNumPy\u7ed3\u6784\u5316\u6570\u7ec4\u662f\u4e00\u4e2a\u76f8\u5bf9\u5e95\u5c42\u7684\u5de5\u5177\u3002\\ \u7ed3\u6784\u5316\u6570\u7ec4\u63d0\u4f9b\u4e86\u4e00\u79cd\u5c06\u5185\u5b58\u5757\u89e3\u91ca\u4e3a\u5177\u6709\u4efb\u610f\u590d\u6742\u5d4c\u5957\u5217\u7684\u8868\u683c\u7ed3\u6784\u7684\u65b9\u6cd5\u3002\\ \u7531\u4e8e\u6570\u7ec4\u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\u90fd\u5728\u5185\u5b58\u4e2d\u8868\u793a\u4e3a\u56fa\u5b9a\u6570\u91cf\u7684\u5b57\u8282\uff0c\u56e0\u6b64\u7ed3\u6784\u5316\u6570\u7ec4\u63d0\u4f9b\u4e86\u8bfb/\u5199\u78c1\u76d8\uff08\u5305\u62ec\u5185\u5b58\u6620\u5c04\uff09\u6570\u636e\uff0c\u4ee5\u53ca\u5728\u7f51\u7edc\u4e0a\u4f20\u8f93\u6570\u636e\u548c\u5176\u4ed6\u6b64\u7c7b\u7528\u9014\u7684\u975e\u5e38\u5feb\u901f\u6709\u6548\u7684\u65b9\u6cd5\u3002\\ \u4f5c\u4e3a\u7ed3\u6784\u5316\u6570\u7ec4\u7684\u53e6\u4e00\u79cd\u5e38\u89c1\u7528\u9014\uff0c\u5c06\u6570\u636e\u6587\u4ef6\u7f16\u5199\u4e3a\u56fa\u5b9a\u957f\u5ea6\u7684\u8bb0\u5f55\u5b57\u8282\u6d41\u662f\u5c06C\u548cC ++\u4ee3\u7801\u4e2d\u7684\u6570\u636e\u5e8f\u5217\u5316\u7684\u5e38\u7528\u65b9\u6cd5\uff0c\u8fd9\u5728\u4e1a\u754c\u4f20\u7edf\u7cfb\u7edf\u4e2d\u5f88\u5e38\u89c1\u3002\\ \u53ea\u8981\u77e5\u9053\u6587\u4ef6\u7684\u683c\u5f0f\uff08\u6bcf\u4e2a\u8bb0\u5f55\u7684\u5927\u5c0f\u4ee5\u53ca\u6bcf\u4e2a\u5143\u7d20\u7684\u987a\u5e8f\u3001\u5b57\u8282\u5927\u5c0f\u548c\u6570\u636e\u7c7b\u578b\uff09\uff0c\u5c31\u53ef\u4ee5\u7528np.fromfile\u5c06\u6570\u636e\u8bfb\u5165\u5185\u5b58\u3002","title":"\u9ad8\u9636NumPy"},{"location":"python/DataAnalysis/ch10/#numpy","text":"\u5305\u542b\u4ee5\u4e0b\u5185\u5bb9\uff1a ndarray\u5bf9\u8c61\u7684\u5185\u90e8\u673a\u7406 \u9ad8\u7ea7\u6570\u7ec4\u64cd\u4f5c \u91cd\u5851\u6570\u7ec4 C\u987a\u5e8f\u548cF\u987a\u5e8f \u8fde\u63a5\u548c\u5206\u9694\u6570\u7ec4 \u5806\u53e0\u52a9\u624b\uff1ar \u548cc \u91cd\u590d\u5143\u7d20\uff1atile\u548crepeat \u795e\u5947\u7d22\u5f15\u7684\u7b49\u4ef7\u65b9\u6cd5\uff1atake\u548cput \u5e7f\u64ad ufunc\u9ad8\u7ea7\u5e94\u7528 \u7ed3\u6784\u5316\u548c\u8bb0\u5f55\u5f0f\u6570\u7ec4","title":"\u9ad8\u9636NumPy"},{"location":"python/DataAnalysis/ch10/#ndarray","text":"NumPy\u7684 ndarray \u63d0\u4f9b\u4e86\u4e00\u79cd\u5c06\u540c\u8d28\u6570\u636e\u5757\uff08\u53ef\u4ee5\u662f\u8fde\u7eed\u6216\u8de8\u8d8a\uff09\u89e3\u91ca\u4e3a\u591a\u7ef4\u6570\u7ec4\u5bf9\u8c61\u7684\u65b9\u5f0f\u3002 ndarray \u7684\u6570\u636e\u7c7b\u578b dtype \u51b3\u5b9a\u4e86\u6570\u636e\u7684\u89e3\u91ca\u65b9\u5f0f\uff0c\u6bd4\u5982\u6d6e\u70b9\u6570\u3001\u6574\u6570\u3001\u5e03\u5c14\u503c\u7b49\u3002 ndarray \u7684\u6240\u6709\u6570\u7ec4\u5bf9\u8c61\u90fd\u662f\u6570\u636e\u5757\u7684\u4e00\u4e2a\u8de8\u5ea6\u89c6\u56fe\uff08strided view\uff09\u3002 \u6570\u7ec4\u89c6\u56fe arr[::2,::-1] \u4e0d\u590d\u5236\u4efb\u4f55\u6570\u636e\u7684\u539f\u56e0\u662f\u4ec0\u4e48\uff1f \u7b80\u5355\u5730\u8bf4\uff0c ndarray \u4e0d\u53ea\u662f\u4e00\u5757\u5185\u5b58\u548c\u4e00\u4e2a dtype \uff0c\u5b83\u8fd8\u6709\u8de8\u5ea6\u4fe1\u606f\uff0c\u8fd9\u4f7f\u5f97\u6570\u7ec4\u80fd\u4ee5\u5404\u79cd\u6b65\u5e45\uff08step size\uff09\u5728\u5185\u5b58\u4e2d\u79fb\u52a8\u3002 \u66f4\u51c6\u786e\u5730\u8bb2\uff0c ndarray \u5185\u90e8\u7531\u4ee5\u4e0b\u5185\u5bb9\u7ec4\u6210\uff1a \u4e00\u4e2a\u6307\u5411\u6570\u636e\uff08\u5185\u5b58\u6216\u5185\u5b58\u6620\u5c04\u6587\u4ef6\u4e2d\u7684\u4e00\u5757\u6570\u636e\uff09\u7684\u6307\u9488\u3002 \u6570\u636e\u7c7b\u578b\u6216 dtype \uff0c\u63cf\u8ff0\u5728\u6570\u7ec4\u4e2d\u7684\u56fa\u5b9a\u5927\u5c0f\u503c\u7684\u683c\u5b50\u3002 \u4e00\u4e2a\u8868\u793a\u6570\u7ec4\u5f62\u72b6\uff08shape\uff09\u7684\u5143\u7ec4\u3002 \u4e00\u4e2a\u8de8\u5ea6\u5143\u7ec4\uff08stride\uff09\uff0c\u5176\u4e2d\u7684\u6574\u6570\u6307\u7684\u662f\u4e3a\u4e86\u524d\u8fdb\u5230\u5f53\u524d\u7ef4\u5ea6\u4e0b\u4e00\u4e2a\u5143\u7d20\u9700\u8981\u201c\u8de8\u8fc7\u201d\u7684\u5b57\u8282\u6570\u3002 \u4f8b\u5982\uff0c\u4e00\u4e2a10\u00d75\u7684\u6570\u7ec4\uff0c\u5176shape\u4e3a(10, 5)\uff1a s = np.ones((10, 5)).shape print(s) # (10, 5) \u4e00\u4e2a\u5178\u578b\u7684\uff08C\u9636\uff093\u00d74\u00d75 float64\u503c\uff088\u5b57\u8282\uff09\u7684\u6570\u7ec4\u5177\u6709\u8de8\u5ea6\uff08160,40,8\uff09\uff08\u901a\u5e38\u7279\u5b9a\u8f74\u4e0a\u7684\u8de8\u5ea6\u8d8a\u5927\uff0c\u6cbf\u7740\u8be5\u8f74\u6267\u884c\u8ba1\u7b97\u7684\u4ee3\u4ef7\u8d8a\u9ad8\uff09\uff1a s = np.ones((3, 4, 5), dtype=np.float64).strides print(s) # (160, 40, 8) \u6570\u7ec4\u8de8\u5ea6\uff08strides\uff09\u662f\u6784\u5efa\u201c\u96f6\u590d\u5236\u201d\u6570\u7ec4\u89c6\u56fe\u7684\u5173\u952e\u56e0\u7d20\u3002 \u6570\u7ec4\u8de8\u5ea6\u751a\u81f3\u53ef\u4ee5\u662f\u8d1f\u7684\uff0c\u8fd9\u4f7f\u5f97\u6570\u7ec4\u80fd\u591f\u7a7f\u8fc7\u5185\u5b58\u201c\u5411\u540e\u201d\u79fb\u52a8\uff08\u4f8b\u5982\uff0c\u5728\u8bf8\u5982obj[::-1]\u6216obj[:, ::-1]\u7684\u5207\u7247\u4e2d\u5c31\u662f\u8fd9\u79cd\u60c5\u51b5\uff09\u3002","title":"ndarray\u5bf9\u8c61\u7684\u5185\u90e8\u673a\u7406"},{"location":"python/DataAnalysis/ch10/#numpy-dtype","text":"\u6709\u65f6\u5019\u9700\u8981\u901a\u8fc7\u4e00\u4e9b\u4ee3\u7801\u6765\u68c0\u67e5\u6570\u7ec4\u662f\u5426\u5305\u542b\u6574\u6570\u3001\u6d6e\u70b9\u6570\u3001\u5b57\u7b26\u4e32\u6216Python\u5bf9\u8c61\u3002 \u7531\u4e8e\u6d6e\u70b9\u6570\u6709\u591a\u79cd\u7c7b\u578b\uff08float16\u5230float128\uff09\uff0c\u56e0\u6b64\u68c0\u67e5dtype\u662f\u5426\u5728\u7c7b\u578b\u5217\u8868\u4e2d\u4f1a\u975e\u5e38\u9ebb\u70e6\u3002 dtype\u6709\u8d85\u7c7b\uff0c\u5982np.integer\u548cnp.floating\uff0c\u5b83\u4eec\u53ef\u4ee5\u548cnp.issubdtype\u51fd\u6570\u4e00\u8d77\u4f7f\u7528\uff1a ints = np.ones(10, dtype=np.uint16) floats = np.ones(10, dtype=np.float32) \u53ef\u4ee5\u901a\u8fc7\u8c03\u7528\u7c7b\u578b\u7684mro\u65b9\u6cd5\u6765\u67e5\u770b\u7279\u5b9adtype\u7684\u6240\u6709\u7236\u7c7b\uff1a print(np.float64.mro()) # [<class 'numpy.float64'>, # <class 'numpy.floating'>, # <class 'numpy.inexact'>, # <class 'numpy.number'>, # <class 'numpy.generic'>, # <class 'float'>, # <class 'object'>] print(np.issubdtype(ints.dtype, np.integer)) # True print(np.issubdtype(floats.dtype, np.floating)) # True print(np.issubdtype(floats.dtype, np.number)) # True print(np.issubdtype(floats.dtype, np.generic)) # True","title":"NumPy dtype\u5c42\u6b21\u7ed3\u6784"},{"location":"python/DataAnalysis/ch10/#_1","text":"","title":"\u9ad8\u7ea7\u6570\u7ec4\u64cd\u4f5c"},{"location":"python/DataAnalysis/ch10/#_2","text":"\u901a\u5e38\uff0c\u901a\u8fc7 reshape \u5c06\u6570\u7ec4\u4ece\u4e00\u4e2a\u5f62\u72b6\u8f6c\u6362\u4e3a\u53e6\u4e00\u4e2a\u5f62\u72b6\uff0c\u5e76\u4e14\u4e0d\u590d\u5236\u4efb\u4f55\u6570\u636e\u3002 reshape \u91cc\u9762\u6709\u4e24\u79cd\u91cd\u5851\u987a\u5e8f\uff0c\u6309C\u987a\u5e8f\uff08\u884c\u65b9\u5411\uff09\u7684\u91cd\u5851\u548c\u6309Fortran\u987a\u5e8f\uff08\u5217\u65b9\u5411\uff09\u7684\u91cd\u5851\u3002 \u9996\u5148\u662f\u53d6\u6570\uff0c\u7136\u540e\u662f\u653e\u6570\uff0c\u53d6\u6570\u6309\u4ec0\u4e48\u987a\u5e8f\uff0c\u653e\u6570\u5c31\u6309\u4ec0\u4e48\u987a\u5e8f\u3002 \u4e0b\u9762\u662f\u5b98\u7f51\u7684\u89e3\u91ca\uff1a \u2018C\u2019 means to read / write the elements using C-like index order, with the last axis index changing fastest, back to the first axis index changing slowest. \u2018F\u2019 means to read / write the elements using Fortran-like index order, with the first index changing fastest, and the last index changing slowest. Note that the \u2018C\u2019 and \u2018F\u2019 options take no account of the memory layout of the underlying array, and only refer to the order of indexing. \u2018A\u2019 means to read / write the elements in Fortran-like index order if a is Fortran contiguous in memory, C-like order otherwise. \u4e00\u7ef4\u6570\u7ec4\u91cd\u5851\uff1a arr = np.arange(8) print(arr) # [0 1 2 3 4 5 6 7] a = arr.reshape((4, 2), order='C') print(a) # [[0 1] # [2 3] # [4 5] # [6 7]] a = arr.reshape((4, 2), order='F') print(a) # [[0 4] # [1 5] # [2 6] # [3 7]] \u591a\u7ef4\u6570\u7ec4\u91cd\u5851\uff1a\u4f20\u9012\u7684\u5f62\u72b6\u7ef4\u5ea6\u53ef\u4ee5\u6709\u4e00\u4e2a\u503c\u662f-1\uff0c\u8868\u793a\u7ef4\u5ea6\u901a\u8fc7\u6570\u636e\u8fdb\u884c\u63a8\u65ad\uff1a a = arr.reshape((4, 2)).reshape((2, 4)) print(a) # [[0 1 2 3] # [4 5 6 7]] arr = np.arange(15) a = arr.reshape((5, -1)) # 15 / 5 = 3\u5217 print(a) # [[ 0 1 2] # [ 3 4 5] # [ 6 7 8] # [ 9 10 11] # [12 13 14]] print(a.shape) # (5, 3) \u6570\u7ec4\u7684 shape \u5c5e\u6027\u662f\u4e00\u4e2a \u5143\u7ec4 \uff0c\u5b83\u4e5f\u53ef\u4ee5\u88ab\u4f20\u9012\u7ed9 reshape \uff0c\u63a5\u4e0a\u4f8b\uff1a other_arr = np.ones((3, 5)) print(other_arr.shape) # (3, 5) a = arr.reshape(other_arr.shape) print(a.shape) # (3, 5) reshape \u7684\u53cd\u64cd\u4f5c\u53ef\u4ee5\u5c06\u66f4\u9ad8\u7ef4\u5ea6\u7684\u6570\u7ec4\u8f6c\u6362\u4e3a\u4e00\u7ef4\u6570\u7ec4\uff0c\u8fd9\u79cd\u64cd\u4f5c\u901a\u5e38\u88ab\u6210\u4e3a\u6241\u5e73\u5316\uff08flattening\uff09\u6216\u5206\u6563\u5316\uff08raveling\uff09\u3002 \u5982\u679c\u7ed3\u679c\u4e2d\u7684\u503c\u5728\u539f\u59cb\u6570\u7ec4\u4e2d\u662f\u8fde\u7eed\u7684\uff0c\u5219 ravel \u4e0d\u4f1a\u751f\u6210\u5e95\u5c42\u6570\u503c\u7684\u526f\u672c\u3002 flatten \u65b9\u6cd5\u7684\u884c\u4e3a\u7c7b\u4f3c\u4e8e ravel \uff0c\u4f46\u5b83\u603b\u662f\u751f\u6210\u6570\u636e\u7684\u526f\u672c\u3002 arr = np.arange(15).reshape((5, 3)) print(arr) # [[ 0 1 2] # [ 3 4 5] # [ 6 7 8] # [ 9 10 11] # [12 13 14]] a = arr.ravel() print(a) # [ 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14] a = arr.flatten() print(a) # [ 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14]","title":"\u91cd\u5851\u6570\u7ec4"},{"location":"python/DataAnalysis/ch10/#cf","text":"\u6570\u636e\u53ef\u4ee5\u6309\u7167\u4e0d\u540c\u7684\u987a\u5e8f\u8fdb\u884c\u91cd\u5851\u6216\u6241\u5e73\u5316\u3002\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0cNumPy\u6570\u7ec4\u662f\u6309\u884c\u65b9\u5411\u987a\u5e8f\u521b\u5efa\u7684\u3002 \u5bf9\u4e8e\u4e00\u4e2a\u4e8c\u7ef4\u7684\u6570\u636e\u6570\u7ec4\uff0c C\u987a\u5e8f \u8bf4\u660e\u6570\u7ec4\u6bcf\u884c\u4e2d\u7684\u5143\u7d20\u5b58\u50a8\u5728\u76f8\u90bb\u7684\u5b58\u50a8\u5355\u5143\u4e2d\u3002 F\u987a\u5e8f \u610f\u5473\u7740\u6bcf\u5217\u6570\u636e\u4e2d\u7684\u503c\u90fd\u5b58\u50a8\u5728\u76f8\u90bb\u7684\u5185\u5b58\u4f4d\u7f6e\u4e2d\u3002 \u53ef\u4ee5\u901a\u8fc7\u8bbe\u7f6e reshape \u548c ravel \u51fd\u6570\u7684 order \u53c2\u6570\u6765\u8868\u793a\u6570\u636e\u5728\u6570\u7ec4\u4e2d\u4f7f\u7528\u54ea\u79cd\u987a\u5e8f\u3002 arr = np.arange(15).reshape((5, 3)) print(arr) # [[ 0 1 2] # [ 3 4 5] # [ 6 7 8] # [ 9 10 11] # [12 13 14]] print(arr.ravel()) # [ 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14] print(arr.ravel('F')) # [ 0 3 6 9 12 1 4 7 10 13 2 5 8 11 14] C\u987a\u5e8f\u548cFortran\u987a\u5e8f\u7684\u6838\u5fc3\u533a\u522b\u5c31\u662f\u5728\u7ef4\u5ea6\u65b9\u5411\u4e0a\u904d\u5386\u7684\u65b9\u5f0f\u3002 C\u987a\u5e8f/\u884c\u65b9\u5411\u987a\u5e8f\u9996\u5148\u904d\u5386\u66f4\u9ad8\u7684\u7ef4\u5ea6\uff08\u4f8b\u5982\uff0c\u5728\u8f740\u4e0a\u884c\u8fdb\u4e4b\u524d\u5148\u5728\u8f741\u4e0a\u884c\u8fdb\uff09\u3002 Fortran\u987a\u5e8f/\u5217\u65b9\u5411\u987a\u5e8f\u6700\u540e\u904d\u5386\u66f4\u9ad8\u7684\u7ef4\u5ea6\uff08\u4f8b\u5982\uff0c\u5728\u8f741\u4e0a\u884c\u8fdb\u4e4b\u524d\u5148\u5728\u8f740\u4e0a\u884c\u8fdb\uff09\u3002","title":"C\u987a\u5e8f\u548cF\u987a\u5e8f"},{"location":"python/DataAnalysis/ch10/#_3","text":"numpy.concatenate \u53ef\u4ee5\u83b7\u53d6\u6570\u7ec4\u7684\u5e8f\u5217\uff08\u5143\u7ec4\u3001\u5217\u8868\u7b49\uff09\uff0c\u5e76\u6cbf\u7740\u8f93\u5165\u8f74\u5c06\u5b83\u4eec\u6309\u987a\u5e8f\u8fde\u63a5\u5728\u4e00\u8d77\uff1a arr1 = np.array( [ [1, 2, 3], [4, 5, 6] ] ) arr2 = np.array( [ [7, 8, 9], [10, 11, 12] ] ) a = np.concatenate([arr1, arr2], axis=0) print(a) # [[ 1 2 3] # [ 4 5 6] # [ 7 8 9] # [10 11 12]] a = np.concatenate([arr1, arr2], axis=1) print(a) # [[ 1 2 3 7 8 9] # [ 4 5 6 10 11 12]] \u5176\u4ed6\u7c7b\u4f3c concatenate \u7684\u51fd\u6570\u3002 vstack \u7c7b\u4f3c concatenate \u6cbf axis=0 \u64cd\u4f5c\uff0c hstack \u7c7b\u4f3c concatenate \u6cbf axis=1 \u64cd\u4f5c\u3002 a = np.vstack((arr1, arr2)) print(a) # [[ 1 2 3] # [ 4 5 6] # [ 7 8 9] # [10 11 12]] a = np.hstack((arr1, arr2)) print(a) # [[ 1 2 3 7 8 9] # [ 4 5 6 10 11 12]] split \u53ef\u4ee5\u5c06\u4e00\u4e2a\u6570\u7ec4\u6cbf\u8f74\u5411\u5207\u7247\u6210\u591a\u4e2a\u6570\u7ec4\u3002\u5148\u770b\u4e00\u7ef4\u6570\u7ec4\u3002 np.split(arr, 3) \u8868\u793a\u5c06\u6570\u7ec4\u62c6\u5206\u65f6\u7684 \u7d22\u5f15\u4f4d\u7f6e arr = np.array(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k']) print(arr) # ['a' 'b' 'c' 'd' 'e' 'f' 'g' 'h' 'i' 'j' 'k'] print(np.split(arr, 3)) print(np.split(arr, [3])) # \u4ece\u7d22\u5f15\u4f4d\u7f6e\u4e3a3\u8fdb\u884c\u62c6\u5206 # [array(['a', 'b', 'c'], dtype='<U1'), array(['d', 'e', 'f', 'g', 'h', 'i', 'j', 'k'], dtype='<U1')] print(np.split(arr, [3, 7])) # \u4ece\u7d22\u5f15\u4f4d\u7f6e\u4e3a3\u548c7\u8fdb\u884c\u62c6\u5206 # [array(['a', 'b', 'c'], dtype='<U1'), array(['d', 'e', 'f', 'g'], dtype='<U1'), array(['h', 'i', 'j', 'k'], dtype='<U1')] print(np.split(arr, [3, 7, 9])) # \u4ece\u7d22\u5f15\u4f4d\u7f6e\u4e3a3\u30017\u30019\u8fdb\u884c\u62c6\u5206 # [array(['a', 'b', 'c'], dtype='<U1'), array(['d', 'e', 'f', 'g'], dtype='<U1'), array(['h', 'i'], dtype='<U1'), array(['j', 'k'], dtype='<U1')] \u4e8c\u7ef4\u6570\u7ec4\u548c\u4e00\u7ef4\u6570\u7ec4\u7c7b\u4f3c\u3002 np.split(arr, [1, 2]) \u9ed8\u8ba4axis=0\uff0c\u6cbf\u6c34\u5e73\u65b9\u5411\u8fdb\u884c\u62c6\u5206\uff0c\u62c6\u5206\u884c\u7d22\u5f15\u5206\u522b\u4e3a\u884c\u53f71\u548c\u884c\u53f72\uff0c\u5373[0, 1)\uff0c[1, 2)\uff0c[2, 4]\u4e09\u4e2a\u884c\u533a\u95f4\u3002 np.split(arr, [1, 2], axis=1) \u6cbf\u5782\u76f4\u65b9\u5411\u8fdb\u884c\u62c6\u5206\uff0c\u62c6\u5206\u5217\u7d22\u5f15\u5206\u522b\u4e3a\u5217\u53f71\u548c\u5217\u53f72\uff0c\u5373[0, 1)\uff0c[1, 2)\uff0c[2, 3]\u4e09\u4e2a\u5217\u533a\u95f4\u3002 \u5982\u679c\u62c6\u5206\u533a\u95f4\u51fa\u73b0\u5012\u5e8f\uff0c\u5982 np.split(arr, [3, 1]) \uff0c\u6cbf\u6c34\u5e73\u65b9\u5411\u62c6\u5206\uff0c\u7b2c\u4e00\u4e2a\u884c\u533a\u95f4\u662f[0, 3)\uff0c\u7b2c\u4e8c\u4e2a\u884c\u533a\u95f4\u662f[3, 1)\uff0c\u65e0\u7ed3\u679c\uff0c\u5f53\u524d\u884c\u7d22\u5f15\u4e3a0\uff0c\u672a\u8fbe\u5230\u6700\u5927\u884c\u6570\uff0c\u6240\u4ee5\u8f93\u51fa\u7b2c\u4e09\u4e2a\u533a\u95f4[1, 4]\u3002\u540c\u7406\u53ef\u63a8 np.split(arr, [3, 1], axis=1) \u7684\u4e09\u4e2a\u5217\u533a\u95f4\u3002 arr = np.arange(15).reshape((5, 3)) print(arr) # [[ 0 1 2] # [ 3 4 5] # [ 6 7 8] # [ 9 10 11] # [12 13 14]] result = np.split(arr, [1, 2]) print(result) # [array([[0, 1, 2]]), # array([[3, 4, 5]]), # array([[ 6, 7, 8], # [ 9, 10, 11], # [12, 13, 14]])] result = np.split(arr, [1, 2], axis=1) print(result) # [array([[ 0], # [ 3], # [ 6], # [ 9], # [12]]), # array([[ 1], # [ 4], # [ 7], # [10], # [13]]), # array([[ 2], # [ 5], # [ 8], # [11], # [14]])] result = np.split(arr, [3, 1]) print(result) # [array([[0, 1, 2], # [3, 4, 5], # [6, 7, 8]]), # array([], shape=(0, 3), dtype=int64), # array([[ 3, 4, 5], # [ 6, 7, 8], # [ 9, 10, 11], # [12, 13, 14]]) result = np.split(arr, [3, 1], axis=1) print(result) # [array([[ 0, 1, 2], # [ 3, 4, 5], # [ 6, 7, 8], # [ 9, 10, 11], # [12, 13, 14]]), # array([], shape=(5, 0), dtype=int64), # array([[ 1, 2], # [ 4, 5], # [ 7, 8], # [10, 11], # [13, 14]])]","title":"\u6570\u7ec4\u8fde\u63a5\u548c\u5206\u9694"},{"location":"python/DataAnalysis/ch10/#r_c_","text":"\u5728NumPy\u4e2d\u6709\u4e24\u4e2a\u7279\u6b8a\u7684\u5bf9\u8c61\uff1ar_\u548cc_\uff0c\u5b83\u4eec\u53ef\u4ee5\u4f7f\u5806\u6808\u6570\u7ec4\u7684\u64cd\u4f5c\u66f4\u4e3a\u7b80\u6d01\uff1a np.r_ \u662f\u6309\u5217\u8fde\u63a5\u4e24\u4e2a\u77e9\u9635\uff0c\u5c31\u662f\u628a\u4e24\u77e9\u9635\u4e0a\u4e0b\u76f8\u52a0\uff0c\u8981\u6c42\u5217\u6570\u76f8\u7b49\u3002 np.c_ \u662f\u6309\u884c\u8fde\u63a5\u4e24\u4e2a\u77e9\u9635\uff0c\u5c31\u662f\u628a\u4e24\u77e9\u9635\u5de6\u53f3\u76f8\u52a0\uff0c\u8981\u6c42\u884c\u6570\u76f8\u7b49\u3002 arr = np.arange(6) arr1 = arr.reshape((3, 2)) arr2 = np.random.randn(3, 2) print(arr) # [0 1 2 3 4 5] print(arr1) # [[0 1] # [2 3] # [4 5]] print(arr2) # [[ 0.15407269 0.56316672] # [-1.2390795 -1.59294986] # [ 0.082398 0.75602857]] a = np.r_[arr1, arr2] print(a) # [[ 0. 1. ] # [ 2. 3. ] # [ 4. 5. ] # [ 0.15407269 0.56316672] # [-1.2390795 -1.59294986] # [ 0.082398 0.75602857]] a = np.c_[arr1, arr2] print(a) # [[ 0. 1. 0.15407269 0.56316672] # [ 2. 3. -1.2390795 -1.59294986] # [ 4. 5. 0.082398 0.75602857]] a = np.c_[np.r_[arr1, arr2], arr] print(a) # [[ 0. 1. 0. ] # [ 2. 3. 1. ] # [ 4. 5. 2. ] # [ 0.15407269 0.56316672 3. ] # [-1.2390795 -1.59294986 4. ] # [ 0.082398 0.75602857 5. ]] \u8fd8\u53ef\u4ee5\u5c06\u5207\u7247\u8f6c\u6362\u4e3a\u6570\u7ec4\uff1a a = np.c_[1:6, -10:-5] print(a) # [[ 1 -10] # [ 2 -9] # [ 3 -8] # [ 4 -7] # [ 5 -6]]","title":"\u6570\u7ec4\u5806\u53e0\u7684\u65b9\u6cd5\uff1ar_\u548cc_"},{"location":"python/DataAnalysis/ch10/#tilerepeat","text":"repeat \u548c tile \u51fd\u6570\u662f\u7528\u4e8e\u91cd\u590d\u6216\u590d\u5236\u6570\u7ec4\u7684\u4e24\u4e2a\u6709\u7528\u7684\u5de5\u5177\u3002 repeat \u51fd\u6570\u6309\u7167\u7ed9\u5b9a\u6b21\u6570\u5bf9\u6570\u7ec4\u4e2d\u7684 \u6bcf\u4e2a\u5143\u7d20 \u8fdb\u884c\u590d\u5236\uff0c\u751f\u6210\u4e00\u4e2a\u66f4\u5927\u7684\u6570\u7ec4\u3002 \u5bf9\u4e8eNumPy\u800c\u8a00\uff0c\u590d\u5236\u6216\u91cd\u590d\u6570\u7ec4\u7684\u9700\u6c42\u53ef\u80fd\u4e0d\u5982\u5176\u4ed6\u6570\u7ec4\u7f16\u7a0b\u6846\u67b6\uff08\u5982MATLAB\uff09\u90a3\u6837\u5e38\u89c1\u3002\u5176\u4e2d\u4e00\u4e2a\u539f\u56e0\u662f\u5e7f\u64ad\u901a\u5e38\u4f1a\u66f4\u597d\u5730\u6ee1\u8db3\u8fd9\u4e00\u9700\u6c42\u3002 arr = np.arange(3) print(arr) # [0 1 2] a = arr.repeat(3) print(a) # [0 0 0 1 1 1 2 2 2] \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u5982\u679c\u4f60\u4f20\u9012\u4e00\u4e2a\u6574\u6570\uff0c\u6bcf\u4e2a\u5143\u7d20\u90fd\u4f1a\u590d\u5236\u76f8\u5e94\u7684\u6b21\u6570\u3002\u5982\u679c\u4f60\u4f20\u9012\u4e86\u4e00\u4e2a\u6574\u6570\u6570\u7ec4\uff0c\u6bcf\u4e2a\u5143\u7d20\u90fd\u4f1a\u91cd\u590d\u76f8\u5e94\u7684\u4e0d\u540c\u6b21\u6570\uff1a arr = np.arange(3) print(arr) # [0 1 2] a = arr.repeat([2, 3, 4]) print(a) # [0 0 1 1 1 2 2 2 2] \u591a\u7ef4\u6570\u7ec4\u53ef\u4ee5\u5728\u6307\u5b9a\u7684\u8f74\u5411\u4e0a\u5bf9\u5b83\u4eec\u7684\u5143\u7d20\u8fdb\u884c\u91cd\u590d\uff0c\u6ce8\u610f\uff0c\u5982\u679c\u6ca1\u6709\u4f20\u9012\u8f74\uff0c\u6570\u7ec4\u5c06\u9996\u5148\u6241\u5e73\u5316\uff08\u6cbf0\u8f74\u590d\u5236\uff09\u3002 arr = np.random.randn(2, 2) print(arr) # [[-0.15870621 0.26521446] # [-1.35042383 -0.65562376]] a = arr.repeat(2, axis=0) print(a) # [[-0.15870621 0.26521446] # [-0.15870621 0.26521446] # [-1.35042383 -0.65562376] # [-1.35042383 -0.65562376]] a = arr.repeat(2, axis=1) print(a) # [[-0.15870621 -0.15870621 0.26521446 0.26521446] # [-1.35042383 -1.35042383 -0.65562376 -0.65562376]] \u540c\u6837\uff0c\u9700\u8981\u6309\u7167\u4e0d\u540c\u6b21\u6570\u91cd\u590d\u591a\u7ef4\u6570\u7ec4\u7684\u5207\u7247\u65f6\uff0c\u53ef\u4ee5\u4f20\u9012\u4e00\u4e2a\u6574\u6570\u6570\u7ec4\uff1a arr = np.random.randn(2, 2) print(arr) # [[-0.15870621 0.26521446] # [-1.35042383 -0.65562376]] a = arr.repeat([2, 3], axis=0) print(a) # [[-0.15870621 0.26521446] # [-0.15870621 0.26521446] # [-1.35042383 -0.65562376] # [-1.35042383 -0.65562376] # [-1.35042383 -0.65562376]] tile \u662f\u4e00\u79cd\u5feb\u6377\u65b9\u6cd5\uff0c\u5b83\u53ef\u4ee5\u6cbf\u7740\u8f74\u5411\u5806\u53e0\u526f\u672c\u3002\u5728\u89c6\u89c9\u4e0a\uff0c\u4f60\u53ef\u4ee5\u628a\u5b83\u770b\u4f5c\u7c7b\u4f3c\u4e8e\u201c\u94fa\u8bbe\u74f7\u7816\u201d\u3002 np.tile(arr, 2) \u7b2c\u4e8c\u4e2a\u53c2\u6570\u662f\u74f7\u7816\u7684\u6570\u91cf\u3002\u7528\u6807\u91cf\u6765\u8bf4\uff0c\u94fa\u8bbe\u662f\u9010\u884c\u8fdb\u884c\u7684\uff0c\u800c\u4e0d\u662f\u9010\u5217\uff0c\u7b2c\u4e8c\u4e2a\u53c2\u6570\u4e5f\u53ef\u4ee5\u662f\u8868\u793a\u201c\u94fa\u74f7\u7816\u201d\u5e03\u5c40\u7684\u5143\u7ec4\u3002 arr = np.random.randn(2, 2) print(arr) # [[-0.15870621 0.26521446] # [-1.35042383 -0.65562376]] a = np.tile(arr, 2) print(a) # [[-0.15870621 0.26521446 -0.15870621 0.26521446] # [-1.35042383 -0.65562376 -1.35042383 -0.65562376]] a = np.tile(arr, (2, 1)) print(a) # [[-0.15870621 0.26521446] # [-1.35042383 -0.65562376] # [-0.15870621 0.26521446] # [-1.35042383 -0.65562376]] a = np.tile(arr, (3, 2)) print(a) # [[-0.15870621 0.26521446 -0.15870621 0.26521446] # [-1.35042383 -0.65562376 -1.35042383 -0.65562376] # [-0.15870621 0.26521446 -0.15870621 0.26521446] # [-1.35042383 -0.65562376 -1.35042383 -0.65562376] # [-0.15870621 0.26521446 -0.15870621 0.26521446] # [-1.35042383 -0.65562376 -1.35042383 -0.65562376]]","title":"\u91cd\u590d\u5143\u7d20\uff1atile\u548crepeat"},{"location":"python/DataAnalysis/ch10/#fancy-indexingtakeput","text":"take \u51fd\u6570\u53ef\u4ee5\u83b7\u53d6\u6570\u7ec4\u5b50\u96c6\uff0c put \u51fd\u6570\u53ef\u4ee5\u8bbe\u7f6e\u6570\u7ec4\u5b50\u96c6\u3002\u5176\u4ed6\u4e00\u4e9bndarray\u65b9\u6cd5\u53ef\u4ee5\u7528\u4e8e\u7279\u6b8a\u60c5\u51b5\u4e0b\u5728\u5355\u4e2a\u8f74\u4e0a\u7684\u6570\u636e\u9009\u53d6. arr = np.arange(10) * 100 inds = [7, 1, 2, 6] print(arr) # [ 0 100 200 300 400 500 600 700 800 900] print(inds) # [7, 1, 2, 6] # \u4ecearr\u5e8f\u5217\u4e2d\u4f9d\u6b21\u83b7\u53d6\u7d22\u5f15\u4e3a7,1,2,6\u4f4d\u7f6e\u4e0a\u7684\u5143\u7d20\u3002 a = np.take(arr, inds) print(a) # [700 100 200 600] print(arr) # [ 0 100 200 300 400 500 600 700 800 900] arr = np.arange(10) * 100 inds = [7, 1, 2, 6] # \u76f8\u5f53\u4e8e\u5c06arr\u5e8f\u5217\u4e2d\u7d22\u5f15\u4e3a7,1,2,6\u4f4d\u7f6e\u4e0a\u7684\u5143\u7d20\u752842\u6765\u66ff\u6362 np.put(arr, inds, 41) print(arr) # [ 0 41 41 300 400 500 41 41 800 900] arr = np.arange(10) * 100 inds = [7, 1, 2, 6] np.put(arr, inds, [40, 41, 42]) print(arr) # [ 0 41 42 300 400 500 40 40 800 900] \u6ce8\u610f\uff0c\u4e0a\u4f8b\u5982\u679c\u6539\u5199\u4e3a a = np.put(arr, inds, 41) \uff0c\u5219\u8fd4\u56de None \u3002 a = np.put(arr, inds, 41) print(a) # None \u5982\u679c\u8981\u5728\u522b\u7684\u8f74\u4e0a\u4f7f\u7528 take \uff0c\u53ef\u4ee5\u901a\u8fc7\u4f20\u9012 axis \u5173\u952e\u5b57\u6765\u5b9e\u73b0\u3002 inds = [2, 0, 2, 1] arr = np.random.randn(2, 4) print(arr) # [[-0.82371274 -0.16911898 -0.01903239 -0.91792531] # [-0.55176496 -0.30111564 0.33872999 0.32454671]] a = arr.take(inds, axis=1) print(a) # [[-0.01903239 -0.82371274 -0.01903239 -0.16911898] # [ 0.33872999 -0.55176496 0.33872999 -0.30111564]]","title":"\u795e\u5947\u7d22\u5f15\uff08Fancy Indexing\uff09\u7684\u7b49\u4ef7\u65b9\u6cd5\uff1atake\u548cput"},{"location":"python/DataAnalysis/ch10/#_4","text":"\u5e7f\u64ad\uff08broadcasting\uff09 \u6307\u7684\u662f\u4e0d\u540c\u5f62\u72b6\u7684\u6570\u7ec4\u4e4b\u95f4\u7684\u7b97\u672f\u8fd0\u7b97\u7684\u6267\u884c\u65b9\u5f0f\u3002\u53d7\u67d0\u4e9b\u7ea6\u675f\u7684\u5f71\u54cd\uff0c\u8f83\u5c0f\u7684\u6570\u7ec4\u5728\u8f83\u5927\u7684\u6570\u7ec4\u4e0a\u201c\u5e7f\u64ad\u201d\uff0c\u4ee5\u4fbf\u5b83\u4eec\u5177\u6709\u517c\u5bb9\u7684\u5f62\u72b6\u3002\u5e7f\u64ad\u63d0\u4f9b\u4e86\u4e00\u79cd\u77e2\u91cf\u5316\u6570\u7ec4\u64cd\u4f5c\u7684\u65b9\u6cd5\u3002 NumPy \u64cd\u4f5c\u901a\u5e38\u5728 \u9010\u4e2a\u5143\u7d20 \u7684\u57fa\u7840\u4e0a\u5728\u6570\u7ec4\u5bf9\u4e0a\u5b8c\u6210\u3002\u5728\u6700\u7b80\u5355\u7684\u60c5\u51b5\u4e0b\uff0c\u4e24\u4e2a\u6570\u7ec4\u5fc5\u987b\u5177\u6709\u5b8c\u5168\u76f8\u540c\u7684\u5f62\u72b6\uff0c\u5982\u4e0b\u4f8b\u6240\u793a\uff1a a = np.array([1, 3, 5]) b = np.array([2, 2, 2]) print(a * b) # [ 2 6 10] print(a + b) # [3 5 7] \u5f53\u6570\u7ec4\u7684\u5f62\u72b6\u6ee1\u8db3\u67d0\u4e9b\u7ea6\u675f\u65f6\uff0cNumPy\u7684\u5e7f\u64ad\u89c4\u5219\u653e\u5bbd\u4e86\u8fd9\u79cd\u7ea6\u675f\u3002\u5f53\u4e00\u4e2a\u6570\u7ec4\u548c\u4e00\u4e2a\u6807\u91cf\u503c\u5728\u4e00\u4e2a\u64cd\u4f5c\u4e2d\u7ec4\u5408\u65f6\uff0c\u4f1a\u53d1\u751f\u6700\u7b80\u5355\u7684\u5e7f\u64ad\u793a\u4f8b\uff1a a = np.array([1, 3, 5]) b = 2 print(a * b) # [ 2 6 10] print(a + b) # [3 5 7] \u7ed3\u679c\u7b49\u540c\u4e8e\u524d\u9762\u7684\u793a\u4f8b\uff0c\u5176\u4e2d b \u662f\u6570\u7ec4\u3002\u53ef\u4ee5\u5047\u8c61\u5c06\u5728\u7b97\u672f\u8fd0\u7b97\u671f\u95f4\u6807\u91cf b \u88ab \u62c9\u4f38 \u6210\u4e0e\u6570\u7ec4 a \u5177\u6709\u76f8\u540c\u5f62\u72b6\u7684\u6570\u7ec4\u3002\u62c9\u4f38\u7c7b\u6bd4\u53ea\u662f\u6982\u5ff5\u6027\u7684\u3002NumPy\u5728\u5b9e\u9645\u8fd0\u7b97\u4e2d\u76f4\u63a5\u4f7f\u7528\u539f\u59cb\u6807\u91cf\u503c\u800c\u4e0d\u4f1a\u53bb\u5236\u4f5c\u62c9\u4f38\u526f\u672c\uff0c\u56e0\u6b64\u5e7f\u64ad\u64cd\u4f5c\u6548\u7387\u66f4\u9ad8\u6548\uff0c\u5728\u4e0a\u4f8b\u7684\u4e58\u6cd5\u671f\u95f4\uff0c\u901a\u8fc7\u5e7f\u64ad\u64cd\u4f5c\uff0c\u79fb\u52a8\u7684\u5185\u5b58\u8f83\u5c11\uff08b\u662f\u6807\u91cf\u800c\u4e0d\u662f\u6570\u7ec4\uff09\u3002 \u5e7f\u64ad\u7684\u89c4\u5219 \uff1a \u5728\u4e24\u4e2a\u6570\u7ec4\u4e0a\u8fdb\u884c\u5e7f\u64ad\u64cd\u4f5c\u65f6\uff0cNumPy\u4f1a\u9010\u5143\u7d20\u5730\u6bd4\u8f83\u5b83\u4eec\u7684\u5f62\u72b6\u3002\u5b83\u4ece\u5c3e\u968f\u5c3a\u5bf8\u5f00\u59cb\uff0c\u5e76\u5411\u524d\u53d1\u5c55\u3002\u5982\u679c\u5bf9\u4e8e\u6bcf\u4e2a\u7ed3\u5c3e\u7ef4\u5ea6\uff08\u5373\u4ece\u5c3e\u90e8\u5f00\u59cb\u7684\uff09\u8f74\u957f\u5ea6\u90fd\u5339\u914d\uff0c\u6216\u8005\u957f\u5ea6\u90fd\u662f1\uff0c\u5219\u4e24\u4e2a\u4e8c\u7ef4\u6570\u7ec4\u5c31\u662f\u53ef\u4ee5\u517c\u5bb9\u5e7f\u64ad\u7684\u3002\u4e4b\u540e\uff0c\u5e7f\u64ad\u4f1a\u5728\u4e22\u5931\u7684\u6216\u957f\u5ea6\u4e3a1\u7684\u8f74\u4e0a\u8fdb\u884c\u3002 \u5982\u679c\u4e0d\u6ee1\u8db3\u8fd9\u4e9b\u6761\u4ef6\uff0c\u5219\u629b\u51fa ValueError: operands could not be broadcast together \u5f02\u5e38\uff0c\u6307\u793a\u6570\u7ec4\u5177\u6709\u4e0d\u517c\u5bb9\u7684\u5f62\u72b6\u3002\u7ed3\u679c\u6570\u7ec4\u7684\u5927\u5c0f\u662f\u6cbf\u8f93\u5165\u7684\u6bcf\u4e2a\u8f74\u4e0d\u662f1\u7684\u5927\u5c0f\u3002 \u5c06\u6807\u91cf\u503c\u8ddf\u6570\u7ec4\u5408\u5e76\u65f6\u5c31\u4f1a\u53d1\u751f\u6700\u7b80\u5355\u7684\u5e7f\u64ad\u3002 arr = np.arange(5) print(arr * 4) # \u6807\u91cf\u503c4\u5df2\u7ecf\u88ab\u5e7f\u64ad\u7ed9\u4e58\u6cd5\u8fd0\u7b97\u4e2d\u7684\u6240\u6709\u5176\u4ed6\u5143\u7d20 # [ 0 4 8 12 16] \u6cbf0\u8f74\u5e7f\u64ad\uff1a\u4e0b\u4f8b\u4e2d\uff0c\u7531\u4e8earr.mean(0)\u7684\u957f\u5ea6\u4e3a3\uff0c\u56e0\u6b64\u5b83\u4e0e\u8f740\u4e0a\u7684\u5e7f\u64ad\u517c\u5bb9\uff0c\u56e0\u4e3aarr\u4e2d\u7684\u7ed3\u5c3e\u7ef4\u5ea6\u4e3a3\uff0c\u56e0\u6b64\u5339\u914d\u3002 arr = np.random.randn(4, 3) print(arr) # [[ 0.5338909 0.52839493 0.43633023] # [-0.23583192 0.88555534 -0.21576162] # [-2.98702701 1.34854523 -1.97894712] # [ 0.08421219 0.4262033 -1.34178772]] print(arr.mean(0)) # [-0.65118896 0.7971747 -0.77504156] demeaned = arr - arr.mean(0) # \u901a\u8fc7\u51cf\u53bb\u5217\u5747\u503c\u6765\u964d\u4f4e\u6570\u7ec4\u4e2d\u7684\u6bcf\u4e00\u5217\u7684\u6570\u503c print(demeaned) # [[ 1.18507986 -0.26877977 1.21137178] # [ 0.41535704 0.08838064 0.55927993] # [-2.33583805 0.55137054 -1.20390556] # [ 0.73540115 -0.3709714 -0.56674616]] print(demeaned.mean(0)) # [-8.32667268e-17 -2.77555756e-17 0.00000000e+00] \u4e00\u7ef4\u5e7f\u64ad\uff1a \u5728\u4e0b\u9762\u884c\u51cf\u5747\u503c\u7684\u4f8b\u5b50\u4e2d\uff0c\u6839\u636e\u89c4\u5219\uff0c\u4e3a\u4e86\u4ece\u8f741\u51cf\u5747\u503c\uff08\u5373\u4ece\u6bcf\u884c\u51cf\u53bb\u884c\u5e73\u5747\u503c\uff09\uff0c\u8f83\u5c0f\u7684\u6570\u7ec4\u7684\u5f62\u72b6\u5fc5\u987b\u662f\uff084, 1\uff09\u3002 \u91cd\u65b0\u5851\u9020\u884c\u610f\u5473\u7740\u5f62\u72b6\u662f\uff084,1\uff09\u800c\u4e0d\u662f\uff084, \uff09\u3002 row_means = arr.mean(1) print(row_means) # [-0.70122122 0.16605647 -0.40749722 -0.7203534 ] print(row_means.shape) # (4,) print(row_means.reshape(4, 1)) # [[-0.53106 ] # [-1.62253021] # [-0.70818004] # [ 0.59117791]] demeaned = arr - row_means.reshape((4, 1)) print(demeaned) # [[ 0.1798217 0.09479837 -0.27462006] # [-1.17020199 0.62503236 0.54516963] # [ 0.85457175 -0.75122184 -0.1033499 ] # [ 0.04550358 -0.41094345 0.36543987]] print(demeaned.mean(1)) # [0.00000000e+00 7.40148683e-17 9.25185854e-18 1.85037171e-17] \u4e09\u7ef4\u5e7f\u64ad\uff1a \u60f3\u8981\u5728\u8f740\u4ee5\u5916\u7684\u8f74\u4e0a\u4f7f\u7528\u8f83\u4f4e\u7ef4\u6570\u7ec4\u8fdb\u884c\u7b97\u672f\u8fd0\u7b97\u662f\u76f8\u5f53\u666e\u904d\u7684\u3002\u6839\u636e\u5e7f\u64ad\u89c4\u5219\uff0c\u201c\u5e7f\u64ad\u7ef4\u5ea6\u201d\u5728\u8f83\u5c0f\u7684\u6570\u7ec4\u4e2d\u5fc5\u987b\u4e3a1\u3002\\ \u5728\u4e09\u7ef4\u60c5\u51b5\u4e0b\uff0c\u5728\u4e09\u4e2a\u7ef4\u5ea6\u4e2d\u7684\u4efb\u4f55\u4e00\u4e2a\u7ef4\u5ea6\u4e0a\u8fdb\u884c\u5e7f\u64ad\u53ea\u662f\u5c06\u6570\u636e\u91cd\u5851\u4e3a\u5f62\u72b6\u517c\u5bb9\u7684\u95ee\u9898\u3002\\ \u56e0\u6b64\uff0c\u9700\u8981\u6dfb\u52a0\u4e00\u4e2a\u957f\u5ea6\u4e3a1\u7684\u65b0\u8f74\uff0c\u4e13\u95e8\u7528\u4e8e\u5e7f\u64ad\u76ee\u7684\u3002\\ \u4f7f\u7528reshape\u662f\u4e00\u79cd\u9009\u62e9\uff0c\u4f46\u63d2\u5165\u4e00\u4e2a\u8f74\u9700\u8981\u6784\u9020\u4e00\u4e2a\u8868\u793a\u65b0\u5f62\u72b6\u7684\u5143\u7ec4\u3002\\ NumPy\u6570\u7ec4\u63d0\u4f9b\u4e86np.newaxis\u5c5e\u6027\u548c\u201c\u5b8c\u6574\u201d\u5207\u7247\u6765\u63d2\u5165\u65b0\u8f74\u3002 Full array shape: (3, 2, 4)\\ Axis 0: (2, 4), (1, 2, 4)\\ Axis 1: (3, 1, 4)\\ Axis 2: (3, 2, 1) arr = np.zeros((3, 2, 4)) print(arr) # [[[0. 0. 0. 0.] # [0. 0. 0. 0.]] # # [[0. 0. 0. 0.] # [0. 0. 0. 0.]] # # [[0. 0. 0. 0.] # [0. 0. 0. 0.]]] arr_0 = np.arange(2) # \u751f\u62100\u8f74\u5207\u7247 arr = arr + arr_0[np.newaxis, :, np.newaxis] print(arr) # [[[0. 0. 0. 0.] # [1. 1. 1. 1.]] # # [[0. 0. 0. 0.] # [1. 1. 1. 1.]] # # [[0. 0. 0. 0.] # [1. 1. 1. 1.]]] arr_1 = np.arange(4) # \u751f\u62101\u8f74\u5207\u7247 arr = arr + arr_1[np.newaxis, np.newaxis, :] print(arr) # [[[0. 1. 2. 3.] # [1. 2. 3. 4.]] # # [[0. 1. 2. 3.] # [1. 2. 3. 4.]] # # [[0. 1. 2. 3.] # [1. 2. 3. 4.]]] arr_2 = np.arange(3) # \u751f\u62102\u8f74\u5207\u7247 arr = arr + arr_2[:, np.newaxis, np.newaxis] print(arr) # [[[0. 1. 2. 3.] # [1. 2. 3. 4.]] # # [[1. 2. 3. 4.] # [2. 3. 4. 5.]] # # [[2. 3. 4. 5.] # [3. 4. 5. 6.]]] \u5728\u8f742\u4e0a\u51cf\u53bb\u5747\u503c depth_means = arr.mean(2) print(depth_means) # [[1.5 2.5] # [2.5 3.5] # [3.5 4.5]] demeaned = arr - depth_means[:, :, np.newaxis] print(demeaned) # [[[-1.5 -0.5 0.5 1.5] # [-1.5 -0.5 0.5 1.5]] # # [[-1.5 -0.5 0.5 1.5] # [-1.5 -0.5 0.5 1.5]] # # [[-1.5 -0.5 0.5 1.5] # [-1.5 -0.5 0.5 1.5]]] N\u7ef4\u5e7f\u64ad def demean_axis(arr, axis=0): means = arr.mean(axis) indexer = [slice(None)] * arr.ndim indexer[axis] = np.newaxis return arr - means[indexer] print(demean_axis(arr, axis=2)) # \u548c\u524d\u9762\u7ed3\u679c\u76f8\u540c # [[[-1.5 -0.5 0.5 1.5] # [-1.5 -0.5 0.5 1.5]] # # [[-1.5 -0.5 0.5 1.5] # [-1.5 -0.5 0.5 1.5]] # # [[-1.5 -0.5 0.5 1.5] # [-1.5 -0.5 0.5 1.5]]]","title":"\u5e7f\u64ad"},{"location":"python/DataAnalysis/ch10/#_5","text":"\u63a7\u5236\u7b97\u672f\u8fd0\u7b97\u7684\u76f8\u540c\u5e7f\u64ad\u89c4\u5219\u4e5f\u9002\u7528\u4e8e\u901a\u8fc7\u6570\u7ec4\u7d22\u5f15\u8bbe\u7f6e\u503c\u3002 arr = np.zeros((4, 3)) arr[:] = 5 print(arr) # [[5. 5. 5.] # [5. 5. 5.] # [5. 5. 5.] # [5. 5. 5.]] col = np.arange(4) arr[:] = col[:, np.newaxis] print(arr) # [[0. 0. 0.] # [1. 1. 1.] # [2. 2. 2.] # [3. 3. 3.]]","title":"\u901a\u8fc7\u5e7f\u64ad\u8bbe\u5b9a\u6570\u7ec4\u7684\u503c"},{"location":"python/DataAnalysis/ch10/#ufunc","text":"import numpy as np","title":"ufunc\u9ad8\u7ea7\u5e94\u7528"},{"location":"python/DataAnalysis/ch10/#ufunc_1","text":"\u901a\u7528\u51fd\u6570\uff08\u6216\u7b80\u79f0\u4e3aufunc \uff09 \u662f\u4e00\u79cdndarrays \u4ee5\u9010\u5143\u7d20\u65b9\u5f0f\u64cd\u4f5c\u7684\u51fd\u6570\uff0c\u652f\u6301\u6570\u7ec4\u5e7f\u64ad\uff0c\u7c7b\u578b\u8f6c\u6362\u548c\u5176\u4ed6\u4e00\u4e9b\u6807\u51c6\u529f\u80fd\u3002\\ \u4e5f\u5c31\u662f\u8bf4\uff0cufunc\u662f\u4e00\u4e2a\u51fd\u6570\u7684\"\u77e2\u91cf\u5316\" \u5305\u88c5\u5668\uff0c\u5b83\u63a5\u53d7\u56fa\u5b9a\u6570\u91cf\u7684\u7279\u5b9a\u8f93\u5165\u5e76\u4ea7\u751f\u56fa\u5b9a\u6570\u91cf\u7684\u7279\u5b9a\u8f93\u51fa\u3002\\ \u5728NumPy\u4e2d\uff0c\u901a\u7528\u51fd\u6570\u662fnumpy.ufunc\u7c7b\u7684\u5b9e\u4f8b\u3002 NumPy\u7684\u6bcf\u4e2a\u4e8c\u5143ufunc\uff08\u901a\u7528\u51fd\u6570\uff09\u90fd\u6709\u7279\u6b8a\u7684\u65b9\u6cd5\u6765\u6267\u884c\u67d0\u4e9b\u7279\u6b8a\u7684\u5411\u91cf\u5316\u64cd\u4f5c\u3002 reduce\u65b9\u6cd5\u63a5\u6536\u5355\u4e2a\u6570\u7ec4\u5e76\u901a\u8fc7\u6267\u884c\u4e00\u7cfb\u5217\u4e8c\u5143\u64cd\u4f5c\u5728\u53ef\u9009\u7684\u8f74\u5411\u4e0a\u5bf9\u6570\u7ec4\u7684\u503c\u8fdb\u884c\u805a\u5408\u3002\\ \u4f8b\u5982\uff0c\u4f7f\u7528np.add.reduce\u662f\u5bf9\u6570\u7ec4\u4e2d\u5143\u7d20\u8fdb\u884c\u52a0\u548c\u7684\u53e6\u4e00\u79cd\u65b9\u6cd5\uff1a\\ \u8d77\u59cb\u503c\uff08\u5bf9\u4e8eadd\u65b9\u6cd5\u662f0\uff09\u53d6\u51b3\u4e8eufunc\u3002\u5982\u679c\u4f20\u9012\u4e86\u4e00\u4e2a\u8f74\uff0c\u5219\u6cbf\u8be5\u8f74\u6267\u884c\u7f29\u805a\u3002 arr = np.arange(10) a = np.add.reduce(arr) print(a) # 45 a = arr.sum() print(a) # 45 \u4f7f\u7528np.logical_and\u6765\u68c0\u67e5\u6570\u7ec4\u7684\u6bcf\u4e00\u884c\u4e2d\u7684\u503c\u662f\u5426\u88ab\u6392\u5e8f(logical_and.reduce\u7b49\u4ef7\u4e8eall\u65b9\u6cd5)\uff1a arr = np.random.randn(5, 5) print(arr) # [[ 0.75217836 1.26134639 -0.39387918 0.46348823 -1.0026674 ] # [ 0.72085602 -0.50487667 3.21023694 -0.2752039 -1.41158734] # [ 1.69031532 0.61134097 0.58282835 1.03043232 -0.1609196 ] # [-3.05141239 0.47221317 1.36464297 0.17500156 1.26158638] # [-0.21578318 0.37700321 1.05427816 1.56526207 -0.08290142]] a = arr[::2].sort(1) # \u5bf9\u884c\u8fdb\u884c\u6392\u5e8f print(a) # None a = arr[:, :-1] < arr[:, 1:] print(a) # [[ True True True True] # [False True False False] # [ True True True True] # [ True True False True] # [ True True True True]] a = np.logical_and.reduce(arr[:, :-1] < arr[:, 1:], axis=1) print(a) # [ True False True False True] accumulate\u4e0ereduce\u662f\u76f8\u5173\u7684\uff0c\u5c31\u50cfcumsum\u4e0esum\u76f8\u5173\u4e00\u6837\u3002\\ accumulate\u751f\u6210\u4e00\u4e2a\u6570\u7ec4\uff0c\u5176\u5c3a\u5bf8\u4e0e\u4e2d\u95f4\u201c\u7d2f\u8ba1\u201d\u503c\u76f8\u540c\uff1a arr = np.arange(15).reshape((3, 5)) print(arr) # [[ 0 1 2 3 4] # [ 5 6 7 8 9] # [10 11 12 13 14]] a = np.add.accumulate(arr, axis=1) print(a) # [[ 0 1 3 6 10] # [ 5 11 18 26 35] # [10 21 33 46 60]] outer\u5728\u4e24\u4e2a\u6570\u7ec4\u4e4b\u95f4\u6267\u884c\u6210\u5bf9\u7684\u4ea4\u53c9\u4e58\u79ef\uff1a arr = np.arange(3).repeat([1, 2, 2]) print(arr) # [0 1 1 2 2] a = np.multiply.outer(arr, np.arange(5)) print(a) # [[0 0 0 0 0] # [0 1 2 3 4] # [0 1 2 3 4] # [0 2 4 6 8] # [0 2 4 6 8]] outer\u7684\u8f93\u51fa\u7684\u7ef4\u5ea6\u7b49\u4e8e\u8f93\u5165\u7684\u7ef4\u5ea6\u603b\u548c\uff1a x, y = np.random.randn(3, 4), np.random.randn(5) result = np.subtract.outer(x, y) print(result.shape) # (3, 4, 5) reduceat\u65b9\u6cd5\u6267\u884c\u201c\u672c\u5730\u7f29\u805a\u201d\uff0c\u672c\u8d28\u4e0a\u662f\u4e00\u4e2a\u6570\u7ec4groupby\u64cd\u4f5c\uff0c\u5728\u64cd\u4f5c\u4e2d\u6570\u7ec4\u7684\u5207\u7247\u805a\u5408\u5728\u4e86\u4e00\u8d77\u3002\\ reduceat\u65b9\u6cd5\u63a5\u53d7\u4e00\u7cfb\u5217\u7684\u201c\u7bb1\u4f53\u8fb9\u7f18\u201d\uff0c\u8fd9\u4e9b\u7bb1\u4f53\u8fb9\u7f18\u8868\u793a\u5982\u4f55\u5206\u9694\u4ee5\u53ca\u805a\u5408\u6570\u636e\u503c\uff1a arr = np.arange(10) a = np.add.reduceat(arr, [0, 5, 8]) # \u7ed3\u679c\u662f\u5728arr[0:5]\u3001arr[5:8]\u548carr[8:]\u4e0a\u6267\u884c\u4e86\u7f29\u805a\uff08\u6b64\u5904\u662f\u52a0\u548c\uff09\u3002 print(a) # [10 18 17] \u53ef\u4ee5\u4f20\u9012\u4e00\u4e2aaxis\u53c2\u6570\uff1a arr = np.multiply.outer(np.arange(4), np.arange(5)) print(arr) # [[ 0 0 0 0 0] # [ 0 1 2 3 4] # [ 0 2 4 6 8] # [ 0 3 6 9 12]] a = np.add.reduceat(arr, [0, 2, 4], axis=1) print(a) # [[ 0 0 0] # [ 1 5 4] # [ 2 10 8] # [ 3 15 12]]","title":"ufunc\u5b9e\u4f8b\u65b9\u6cd5"},{"location":"python/DataAnalysis/ch10/#pythonufunc","text":"\u6709\u5f88\u591a\u5de5\u5177\u53ef\u4ee5\u7528\u4e8e\u521b\u5efa\u4f60\u81ea\u5df1\u7684NumPy ufunc\uff0c\u6700\u5e38\u7528\u7684\u662fNumPy\u7684C\u8bed\u8a00API\uff0c\u4f46\u662f\u5b83\u5df2\u7ecf\u8d85\u51fa\u4e86\u672c\u4e66\u7684\u8303\u7574\u3002\\ \u5728\u672c\u8282\uff0c\u6211\u4eec\u5c06\u4e00\u8d77\u770b\u770b\u7eafPython\u7684ufunc\u65b9\u6cd5\u3002\\ numpy.frompyfunc\u51fd\u6570\u63a5\u6536\u4e00\u4e2a\u5177\u6709\u7279\u5b9a\u6570\u5b57\u8f93\u5165\u548c\u8f93\u51fa\u7684\u51fd\u6570\u3002\\ \u4f7f\u7528frompyfunc\u521b\u5efa\u7684\u51fd\u6570\u901a\u5e38\u8fd4\u56de\u7684\u662fPython\u5bf9\u8c61\u7684\u6570\u7ec4\uff0c\u8fd9\u5e76\u4e0d\u65b9\u4fbf\u3002\\ \u8fd8\u6709\u53e6\u4e00\u4e2a\u51fd\u6570numpy.vectorize\u5141\u8bb8\u6307\u5b9a\u8f93\u51fa\u7684\u7c7b\u578b\uff08\u4f46\u529f\u80fd\u7a0d\u5dee\uff09\u3002 \u4f8b\u5982\uff0c\u4e00\u4e2a\u7b80\u5355\u7684\u6309\u5143\u7d20\u76f8\u52a0\u7684\u51fd\u6570\u53ef\u4ee5\u5982\u4e0b\uff1a def add_elements(x, y): return x + y add_them = np.frompyfunc(add_elements, 2, 1) result = add_them(np.arange(8), np.arange(8)) print(result) # [0 2 4 6 8 10 12 14] add_them = np.vectorize(add_elements, otypes=[np.float64]) result = add_them(np.arange(8), np.arange(8)) print(result) # [ 0. 2. 4. 6. 8. 10. 12. 14.]","title":"\u4f7f\u7528Python\u7f16\u5199\u65b0\u7684ufunc\u65b9\u6cd5"},{"location":"python/DataAnalysis/ch10/#_6","text":"import numpy as np ndarray\u662f\u4e00\u4e2a\u540c\u6784\u6570\u636e\u7684\u5bb9\u5668\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u5b83\u8868\u793a\u4e00\u4e2a\u5185\u5b58\u5757\uff0c\u5176\u4e2d\u6bcf\u4e2a\u5143\u7d20\u5360\u7528\u76f8\u540c\u6570\u91cf\u7684\u5b57\u8282\uff0c\u7531dtype\u786e\u5b9a\u3002\\ ndarray\u7684\u8fd9\u79cd\u7279\u6027\u4e0d\u5141\u8bb8\u4f60\u4f7f\u7528\u5b83\u8868\u793a\u5f02\u6784\u7684\u6570\u636e\u6216\u8868\u683c\u578b\u6570\u636e\u3002\\ \u7ed3\u6784\u5316\u6570\u7ec4\u662f\u4e00\u4e2andarray\uff0c\u5176\u4e2d\u6bcf\u4e2a\u5143\u7d20\u53ef\u4ee5\u88ab\u8ba4\u4e3a\u4ee3\u8868C\u4e2d\u7684struct\uff08\u56e0\u6b64\u662f\u201c\u7ed3\u6784\u5316\u201d\u7684\u540d\u79f0\uff09\uff0c\u6216\u8005\u662fSQL\u8868\u4e2d\u5177\u6709\u591a\u4e2a\u547d\u540d\u5b57\u6bb5\u7684\u884c\uff1a dtype = [('x', np.float64), ('y', np.int32)] sarr = np.array( [ (1.5, 6), (np.pi, -2) ], dtype=dtype ) print(sarr) # [(1.5 , 6) (3.14159265, -2)] \u6709\u51e0\u79cd\u65b9\u6cd5\u53ef\u4ee5\u6307\u5b9a\u7ed3\u6784\u5316\u7684dtype\uff08\u8bf7\u53c2\u9605NumPy\u5b98\u65b9\u5728\u7ebf\u6587\u6863\uff09\u3002\\ \u4e00\u79cd\u5178\u578b\u7684\u65b9\u5f0f\u662f\u4f7f\u7528(field_name, field_data_type)\u4f5c\u4e3a\u5143\u7ec4\u7684\u5217\u8868\u3002 \u6570\u7ec4\u7684\u5143\u7d20\u662f\u5143\u7ec4\u5bf9\u8c61\uff0c\u5176\u5143\u7d20\u53ef\u4ee5\u50cf\u5b57\u5178\u4e00\u6837\u8bbf\u95ee\uff1a\\ \u5b57\u6bb5\u540d\u79f0\u5b58\u50a8\u5728dtype.names\u5c5e\u6027\u4e2d\u3002 print(sarr[0]) # (1.5, 6) print(sarr['x']) # [1.5 3.14159265] print(sarr[0]['y']) # 6","title":"\u7ed3\u6784\u5316\u548c\u8bb0\u5f55\u5f0f\u6570\u7ec4"},{"location":"python/DataAnalysis/ch10/#dtype","text":"\u5f53\u6307\u5b9a\u7ed3\u6784\u5316\u7684dtype\u65f6\uff0c\u53ef\u4ee5\u53e6\u5916\u4f20\u9012\u4e00\u4e2a\u5f62\u72b6\uff08\u4ee5int\u6216\u5143\u7ec4\u7684\u5f62\u5f0f\uff09\uff1a dtype = [('x', np.int64, 3), ('y', np.int32)] arr = np.zeros(4, dtype=dtype) print(arr) # [([0, 0, 0], 0) ([0, 0, 0], 0) ([0, 0, 0], 0) ([0, 0, 0], 0)] x\u5b57\u6bb5\u5f15\u7528\u7684\u662f\u6bcf\u6761\u8bb0\u5f55\u4e2d\u957f\u5ea6\u4e3a3\u7684\u6570\u7ec4\uff1a print(arr[0]['x']) # [0 0 0] \u8bbf\u95eearr['x']\u7136\u540e\u8fd4\u56de\u4e00\u4e2a\u4e8c\u7ef4\u6570\u7ec4\uff0c\u800c\u4e0d\u662f\u8fd4\u56de\u4e00\u4e2a\u4e00\u7ef4\u6570\u7ec4\uff1a print(arr['x']) # [[0 0 0] # [0 0 0] # [0 0 0] # [0 0 0]]","title":"\u5d4c\u5957dtype\u548c\u591a\u7ef4\u5b57\u6bb5"},{"location":"python/DataAnalysis/ch10/#_7","text":"\u4e0epandas\u7684DataFrame\u76f8\u6bd4\uff0cNumPy\u7ed3\u6784\u5316\u6570\u7ec4\u662f\u4e00\u4e2a\u76f8\u5bf9\u5e95\u5c42\u7684\u5de5\u5177\u3002\\ \u7ed3\u6784\u5316\u6570\u7ec4\u63d0\u4f9b\u4e86\u4e00\u79cd\u5c06\u5185\u5b58\u5757\u89e3\u91ca\u4e3a\u5177\u6709\u4efb\u610f\u590d\u6742\u5d4c\u5957\u5217\u7684\u8868\u683c\u7ed3\u6784\u7684\u65b9\u6cd5\u3002\\ \u7531\u4e8e\u6570\u7ec4\u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\u90fd\u5728\u5185\u5b58\u4e2d\u8868\u793a\u4e3a\u56fa\u5b9a\u6570\u91cf\u7684\u5b57\u8282\uff0c\u56e0\u6b64\u7ed3\u6784\u5316\u6570\u7ec4\u63d0\u4f9b\u4e86\u8bfb/\u5199\u78c1\u76d8\uff08\u5305\u62ec\u5185\u5b58\u6620\u5c04\uff09\u6570\u636e\uff0c\u4ee5\u53ca\u5728\u7f51\u7edc\u4e0a\u4f20\u8f93\u6570\u636e\u548c\u5176\u4ed6\u6b64\u7c7b\u7528\u9014\u7684\u975e\u5e38\u5feb\u901f\u6709\u6548\u7684\u65b9\u6cd5\u3002\\ \u4f5c\u4e3a\u7ed3\u6784\u5316\u6570\u7ec4\u7684\u53e6\u4e00\u79cd\u5e38\u89c1\u7528\u9014\uff0c\u5c06\u6570\u636e\u6587\u4ef6\u7f16\u5199\u4e3a\u56fa\u5b9a\u957f\u5ea6\u7684\u8bb0\u5f55\u5b57\u8282\u6d41\u662f\u5c06C\u548cC ++\u4ee3\u7801\u4e2d\u7684\u6570\u636e\u5e8f\u5217\u5316\u7684\u5e38\u7528\u65b9\u6cd5\uff0c\u8fd9\u5728\u4e1a\u754c\u4f20\u7edf\u7cfb\u7edf\u4e2d\u5f88\u5e38\u89c1\u3002\\ \u53ea\u8981\u77e5\u9053\u6587\u4ef6\u7684\u683c\u5f0f\uff08\u6bcf\u4e2a\u8bb0\u5f55\u7684\u5927\u5c0f\u4ee5\u53ca\u6bcf\u4e2a\u5143\u7d20\u7684\u987a\u5e8f\u3001\u5b57\u8282\u5927\u5c0f\u548c\u6570\u636e\u7c7b\u578b\uff09\uff0c\u5c31\u53ef\u4ee5\u7528np.fromfile\u5c06\u6570\u636e\u8bfb\u5165\u5185\u5b58\u3002","title":"\u4e3a\u4ec0\u4e48\u8981\u4f7f\u7528\u7ed3\u6784\u5316\u6570\u7ec4"},{"location":"python/DataAnalysis/ch11/","text":"pandas\u4e0e\u5efa\u6a21\u4ee3\u7801\u7684\u7ed3\u5408 \u4ecb\u7ecd\u4e24\u4e2a\u6d41\u884c\u7684\u5efa\u6a21\u5de5\u5177\u5305 * statsmodels\uff08http://statsmodels.org\uff09 * scikit-learn\uff08http://scikit-learn.org\uff09\u3002 import pandas as pd import numpy as np \u4f7f\u7528pandas\u7528\u4e8e\u6570\u636e\u8f7d\u5165\u548c\u6570\u636e\u6e05\u6d17\uff0c\u4e4b\u540e\u5207\u6362\u5230\u6a21\u578b\u5e93\u53bb\u5efa\u7acb\u6a21\u578b\u662f\u4e00\u4e2a\u5e38\u89c1\u7684\u6a21\u578b\u5f00\u53d1\u5de5\u4f5c\u6d41\u3002\\ \u5728\u673a\u5668\u5b66\u4e60\u4e2d\uff0c\u7279\u5f81\u5de5\u7a0b\u662f\u6a21\u578b\u5f00\u53d1\u7684\u91cd\u8981\u90e8\u5206\u4e4b\u4e00\u3002\\ \u7279\u5f81\u5de5\u7a0b\u662f\u6307\u4ece\u539f\u751f\u6570\u636e\u96c6\u4e2d\u63d0\u53d6\u53ef\u7528\u4e8e\u6a21\u578b\u4e0a\u4e0b\u6587\u7684\u6709\u6548\u4fe1\u606f\u7684\u6570\u636e\u8f6c\u6362\u8fc7\u7a0b\u6216\u5206\u6790\u3002 pandas\u548c\u5176\u4ed6\u5206\u6790\u5e93\u7684\u7ed3\u5408\u70b9\u901a\u5e38\u662fNumPy\u6570\u7ec4\u3002\\ \u8981\u5c06DataFrame\u8f6c\u6362\u4e3aNumPy\u6570\u7ec4\uff0c\u4f7f\u7528\uff0evalues\u5c5e\u6027\uff1a df = pd.DataFrame( { 'x0': [1, 2, 3, 4, 5], 'x1': [0.01, -0.01, 0.25, -4.1, 0.], 'y': [-1.5, 0., 3.6, 1.3, -2.] } ) print(df) # x0 x1 y # 0 1 0.01 -1.5 # 1 2 -0.01 0.0 # 2 3 0.25 3.6 # 3 4 -4.10 1.3 # 4 5 0.00 -2.0 print(df.columns) # Index(['x0', 'x1', 'y'], dtype='object') print(df.values) # [[ 1. 0.01 -1.5 ] # [ 2. -0.01 0. ] # [ 3. 0.25 3.6 ] # [ 4. -4.1 1.3 ] # [ 5. 0. -2. ]] \u5c06\u6570\u7ec4\u518d\u8f6c\u6362\u4e3aDataFrame\uff1a df2 = pd.DataFrame(df.values, columns=['one', 'two', 'three']) # \u9012\u4e00\u4e2a\u542b\u6709\u5217\u540d\u7684\u4e8c\u7ef4ndarray print(df2) # one two three # 0 1.0 0.01 -1.5 # 1 2.0 -0.01 0.0 # 2 3.0 0.25 3.6 # 3 4.0 -4.10 1.3 # 4 5.0 0.00 -2.0 .values\u5c5e\u6027\u4e00\u822c\u5728\u6570\u636e\u662f\u540c\u6784\u5316\u7684\u65f6\u5019\u4f7f\u7528\u2014\u2014\u4f8b\u5982\uff0c\u90fd\u662f\u6570\u5b57\u7c7b\u578b\u7684\u65f6\u5019\u3002\\ \u5982\u679c\u6570\u636e\u662f\u5f02\u6784\u5316\u7684\uff0c\u7ed3\u679c\u5c06\u662fPython\u5bf9\u8c61\u7684 ndarray\uff1a\\ \u6dfb\u52a0\u4e00\u4e2a\u975e\u6570\u5b57\u7c7b\u578b\u7684\u5217 df3 = df.copy() df3['category'] = pd.Categorical(['a', 'b', 'a', 'a', 'b'], categories=['a', 'b']) print(df3) # x0 x1 y category # 0 1 0.01 -1.5 a # 1 2 -0.01 0.0 b # 2 3 0.25 3.6 a # 3 4 -4.10 1.3 a # 4 5 0.00 -2.0 b print(df3.values) # [[1 0.01 -1.5 'a'] # [2 -0.01 0.0 'b'] # [3 0.25 3.6 'a'] # [4 -4.1 1.3 'a'] # [5 0.0 -2.0 'b']] \u901a\u8fc7loc\u7d22\u5f15\u548cvalues\u4f7f\u7528\u4e00\u90e8\u5206\u5217\u6570\u636e model_cols = ['x0', 'x1'] result = df.loc[:, model_cols].values print(result) # [[ 1. 0.01] # [ 2. -0.01] # [ 3. 0.25] # [ 4. -4.1 ] # [ 5. 0. ]] \u5982\u679c\u6211\u4f7f\u7528\u865a\u62df\u53d8\u91cf\u66ff\u4ee3df3\u7684'category'\u5217\uff0c\u5148\u521b\u5efa\u865a\u62df\u53d8\u91cf\uff0c\u4e4b\u540e\u5220\u9664\u2019categroy\u2019\u5217\uff0c\u7136\u540e\u8fde\u63a5\u7ed3\u679c\uff1a dummies = pd.get_dummies(df3.category, prefix='category') print(dummies) # category_a category_b # 0 1 0 # 1 0 1 # 2 1 0 # 3 1 0 # 4 0 1 data_with_dummies = df3.drop('category', axis=1).join(dummies) print(data_with_dummies) # x0 x1 y category_a category_b # 0 1 0.01 -1.5 1 0 # 1 2 -0.01 0.0 0 1 # 2 3 0.25 3.6 1 0 # 3 4 -4.10 1.3 1 0 # 4 5 0.00 -2.0 0 1 \u4f7f\u7528Patsy\u521b\u5efa\u6a21\u578b\u63cf\u8ff0 \u6837\u672c\u7684\u8868\u793a\u5f62\u5f0f * \u5728\u6570\u636e\u6316\u6398\u8fc7\u7a0b\u4e2d\uff0c\u6837\u672c\u4ee5\u7279\u5f81\u503c\u77e9\u9635X\u548c\u76ee\u6807\u503c\u5411\u91cfY\u7684\u5f62\u5f0f\u8868\u793a\u3002 * \u5bb9\u91cf\u4e3an\uff0c\u6709m\u4e2a\u7279\u5f81\u7684\u6837\u672c\uff0c\u5176\u7279\u5f81\u503c\u77e9\u9635X\u7531n\u4e2a\u7ef4\u5ea6\u4e3am\u7684\u5217\u5411\u91cf\u7ec4\u6210\uff0c\u7b2cj\u4e2a\u5217\u5411\u91cf\u4e3a\u6837\u672c\u4e2d\u7b2cj\u4e2a\u4e2a\u4f53\u7684\u7279\u5f81\u503c\u5411\u91cf\uff1b * \u76ee\u6807\u503c\u5411\u91cfY\u7684\u7b2cj\u4e2a\u5206\u91cf\u4e3a\u6837\u672c\u4e2d\u7b2cj\u4e2a\u4e2a\u4f53\u7684\u76ee\u6807\u503c\u3002 How formulas work: https://patsy.readthedocs.io/en/latest/formulas.html?highlight=intercept Patsy\uff08https://patsy.readthedocs.io/\uff09\u662f\u4e00\u4e2a\u7528\u4e8e\u63cf\u8ff0\u7edf\u8ba1\u6a21\u578b\uff08\u5c24\u5176\u662f\u7ebf\u6027\u6a21\u578b\uff09\u7684Python\u5e93\u3002\\ \u5b83\u4f7f\u7528\u4e00\u79cd\u5c0f\u578b\u57fa\u4e8e\u5b57\u7b26\u4e32\u7684\"\u516c\u5f0f\u8bed\u6cd5\"\u3002\\ Patsy\u80fd\u591f\u5f88\u597d\u5730\u652f\u6301statsmodels\u4e2d\u7279\u5b9a\u7684\u7ebf\u6027\u6a21\u578b\u3002\\ \u50cf y ~ x0 + x1 \u8fd9\u79cd a + b\u7684\u8bed\u6cd5\u5e76\u4e0d\u4ee3\u8868\u5c06a\u548cb\u76f8\u52a0\uff0c\u800c\u662f\u4ee3\u8868\u4e3a\u6a21\u578b\u521b\u5efa\u7684\u8bbe\u8ba1\u77e9\u9635\u7684\u672f\u8bed\uff08terms in the design matrix\uff09\u3002\\ patsy.dmatrices\u51fd\u6570\uff0c\u53d6\u4e00\u4e2a\u516c\u5f0f\u5b57\u7b26\u4e32\u548c\u4e00\u4e2a\u6570\u636e\u96c6\uff08\u53ef\u4ee5\u4f7fDataFrame\u6216dict\uff09\uff0c\u7136\u540e\u4e3a\u7ebf\u6027\u6a21\u578b\u4ea7\u751f\u8bbe\u8ba1\u77e9\u9635\uff1a import pandas as pd import numpy as np import patsy from patsy import dmatrices, dmatrix, demo_data df = pd.DataFrame( { 'x0': [1, 2, 3, 4, 5], 'x1': [0.01, -0.01, 0.25, -4.1, 0.], 'y': [-1.5, 0., 3.6, 1.3, -2.] } ) print(df) # x0 x1 y # 0 1 0.01 -1.5 # 1 2 -0.01 0.0 # 2 3 0.25 3.6 # 3 4 -4.10 1.3 # 4 5 0.00 -2.0 y, X = patsy.dmatrices('y ~ x0 + x1', df) print(y) # [[-1.5] # [ 0. ] # [ 3.6] # [ 1.3] # [-2. ]] print(X) # [[ 1. 1. 0.01] # [ 1. 2. -0.01] # [ 1. 3. 0.25] # [ 1. 4. -4.1 ] # [ 1. 5. 0. ]] print(np.asarray(y)) # Patsy\u7684DesignMatrix\u5b9e\u4f8b\uff0c\u542b\u6709\u9644\u52a0\u5143\u6570\u636e\u7684NumPy.ndarray # [[-1.5] # [ 0. ] # [ 3.6] # [ 1.3] # [-2. ]] print(np.asarray(X)) # Patsy\u7684DesignMatrix\u5b9e\u4f8b\uff0c\u542b\u6709\u9644\u52a0\u5143\u6570\u636e\u7684NumPy.ndarray # [[ 1. 1. 0.01] # [ 1. 2. -0.01] # [ 1. 3. 0.25] # [ 1. 4. -4.1 ] # [ 1. 5. 0. ]] \u4e0a\u9762X\u8f93\u51fa\u4e2d\u7684Intercept(\u6700\u5de6\u8fb9\u4e00\u5217)\u662f\u4ece\u54ea\u91cc\u6765\u7684\u3002\\ \u8fd9\u5176\u5b9e\u662f\u7ebf\u6027\u6a21\u578b\u7684\u4e00\u4e2a\u60ef\u4f8b\uff0c\u6bd4\u5982\u666e\u901a\u6700\u5c0f\u4e8c\u4e58\u56de\u5f52\u6cd5\uff08ordinary least squares regression\uff09\u3002\\ \u53ef\u4ee5\u53bb\u6389\u8fd9\u4e2a\u622a\u8ddd\uff08intercept\uff09\uff0c\u901a\u8fc7\u52a0\u6dfb\u672f\u8bed+0\u7ed9\u6a21\u578b\u3002 y, X = patsy.dmatrices('y ~ x0 + x1 + 0', df) print(X) # [[ 1. 0.01] # [ 2. -0.01] # [ 3. 0.25] # [ 4. -4.1 ] # [ 5. 0. ]] \u8fd9\u79cdPatsy\u5bf9\u8c61\u53ef\u4ee5\u76f4\u63a5\u4f20\u5165\u4e00\u4e2a\u7b97\u6cd5\uff0c\u6bd4\u5982numpy.linalg.lstsq\uff0c\u6765\u8fdb\u884c\u666e\u901a\u6700\u5c0f\u4e8c\u4e58\u56de\u5f52\u7684\u8ba1\u7b97 coef, resid, _, _ =np.linalg.lstsq(X, y, rcond=1) # \u6700\u5c0f\u4e8c\u4e58\u6cd5 print(coef) # [[ 0.00925424] # [-0.25485421]] print(resid) # [19.72552896] coef = pd.Series(coef.squeeze(), index=X.design_info.column_names) print(coef) # x0 0.009254 # x1 -0.254854 # dtype: float64 Patsy\u516c\u5f0f\u4e2d\u7684\u6570\u636e\u8f6c\u6362 \u53ef\u4ee5\u5c06Python\u4ee3\u7801\u6df7\u5408\u5230\u4f60\u7684Patsy\u516c\u5f0f\u4e2d\uff0c\u5728\u6267\u884c\u516c\u5f0f\u65f6\uff0cPatsy\u5e93\u5c06\u5c1d\u8bd5\u5728\u5c01\u95ed\u4f5c\u7528\u57df\u4e2d\u5bfb\u627e\u4f60\u4f7f\u7528\u7684\u51fd\u6570\uff1a y, X = patsy.dmatrices('y ~ x0 + np.log(np.abs(x1) +1)', df) print(X) # [[1. 1. 0.00995033] # [1. 2. 0.00995033] # [1. 3. 0.22314355] # [1. 4. 1.62924054] # [1. 5. 0. ]] \u4e00\u4e9b\u5e38\u7528\u7684\u53d8\u91cf\u53d8\u6362\uff0c\u5305\u62ec\u6807\u51c6\u5316\uff08standardizing (\u5e73\u5747\u503c0\uff0c\u65b9\u5dee1\uff09\u548c\u4e2d\u5fc3\u5316\uff08\u51cf\u53bb\u5e73\u5747\u503c\uff09\u3002Patsy\u6709\u5185\u5efa\u7684\u51fd\u6570\u53ef\u4ee5\u505a\u5230\u8fd9\u4e9b\u3002 y, X = patsy.dmatrices('y ~ standardize(x0) + center(x1)', df) print(X) # [[ 1. -1.41421356 0.78 ] # [ 1. -0.70710678 0.76 ] # [ 1. 0. 1.02 ] # [ 1. 0.70710678 -3.33 ] # [ 1. 1.41421356 0.77 ]] \u4f5c\u4e3a\u5efa\u6a21\u7684\u4e00\u90e8\u5206\uff0c\u6211\u4eec\u53ef\u80fd\u4f1a\u5728\u4e00\u4e2a\u6570\u636e\u53ca\u4e0a\u8bad\u7ec3\u6a21\u578b\uff0c\u7136\u540e\u5728\u53e6\u4e00\u4e2a\u6570\u636e\u53ca\u4e0a\u8bc4\u4ef7\u6a21\u578b\u3002\\ \u5f53\u4f7f\u7528\u4e2d\u5fc3\u5316\u6216\u6807\u51c6\u5316\u8fd9\u6837\u7684\u8f6c\u6362\u65f6\uff0c\u6211\u4eec\u5fc5\u987b\u6ce8\u610f\uff0c\u5fc5\u987b\u7528\u6a21\u578b\u5728\u65b0\u6570\u636e\u96c6\u4e0a\u505a\u9884\u6d4b\u3002\\ \u8fd9\u53eb\u505a\u72b6\u6001\u53d8\u6362\uff08stateful transformations\uff09\u3002\\ \u56e0\u4e3a\u6211\u4eec\u5fc5\u987b\u7528\u539f\u672c\u5728\u8bad\u7ec3\u96c6\u4e0a\u5f97\u5230\u7684\u5e73\u5747\u503c\u548c\u6807\u51c6\u5dee\uff0c\u7528\u5728\u65b0\u7684\u6570\u636e\u96c6\u4e0a\u3002 new_df = pd.DataFrame( { 'x0': [6, 7, 8, 9], 'x1': [3.1, -0.5, 0, 2.3], 'y': [1, 2, 3, 4] } ) new_X = patsy.build_design_matrices([X.design_info], new_df) print(new_X) # [DesignMatrix with shape (4, 3) # Intercept standardize(x0) center(x1) # 1 2.12132 3.87 # 1 2.82843 0.27 # 1 3.53553 0.77 # 1 4.24264 3.07 # Terms: # 'Intercept' (column 0), 'standardize(x0)' (column 1), 'center(x1)' (column 2)] \u56e0\u4e3a\u52a0\u53f7\uff08+\uff09\u5728Patsy\u516c\u5f0f\u7684\u4e0a\u4e0b\u6587\u4e2d\u5e76\u4e0d\u662f\u52a0\u6cd5\u7684\u610f\u601d\uff0c\u5f53\u60f3\u8981\u5bf9\u6570\u636e\u96c6\u4e2d\u4e24\u5217\u6309\u5217\u540d\u76f8\u52a0\u65f6\uff0c\u5fc5\u987b\u5c06\u5217\u540d\u5c01\u88c5\u5230\u7279\u6b8a\u7684I\u51fd\u6570\u4e2d\uff1a y, X = patsy.dmatrices('y ~ I(x0 + x1)', df) print(X) # [[ 1. 1.01] # [ 1. 1.99] # [ 1. 3.25] # [ 1. -0.1 ] # [ 1. 5. ]] \u5206\u7c7b\u6570\u636eCategorical\u548cPatsy \u975e\u6570\u503c\u578b\u6570\u636e\u53ef\u4ee5\u901a\u8fc7\u5f88\u591a\u79cd\u65b9\u5f0f\u53d8\u4e3a\u4e00\u4e2a\u6a21\u578b\u8bbe\u8ba1\u77e9\u9635\u3002\\ \u5f53\u6211\u4eec\u5728Patsy\u516c\u5f0f\u4e2d\u4f7f\u7528\u975e\u6570\u503c\u672f\u8bed\u65f6\uff0c\u8fd9\u4e9b\u7c7b\u578b\u6570\u636e\u9ed8\u8ba4\u4f1a\u88ab\u8f6c\u6362\u4e3a\u54d1\u53d8\u91cf\u3002\u5982\u679c\u6709\u622a\u8ddd\uff0c\u4e00\u4e2a\u5c42\u7ea7\u4e0a\u7684\u622a\u8ddd\u4f1a\u88ab\u820d\u5f03\uff0c\u9632\u6b62\u51fa\u73b0\u5171\u7ebf\u6027 data = pd.DataFrame( { 'key1': ['a', 'a', 'b', 'b', 'a', 'b', 'a', 'b'], 'key2': [0, 1, 0, 1, 0, 1, 0, 0], 'v1': [1, 2, 3, 4, 5, 6, 7, 8], 'v2': [-1, 0, 2.5, -0.5, 4., -1.2, 0.2, -1.7] } ) y, X = patsy.dmatrices('v2 ~ key1', data) print(y) # [[-1. ] # [ 0. ] # [ 2.5] # [-0.5] # [ 4. ] # [-1.2] # [ 0.2] # [-1.7]] print(X) # [[1. 0.] # [1. 0.] # [1. 1.] # [1. 1.] # [1. 0.] # [1. 1.] # [1. 0.] # [1. 1.]] \u5982\u679c\u4ece\u6a21\u578b\u4e2d\u820d\u5f03\u622a\u8ddd\uff0c\u6bcf\u4e2a\u7c7b\u578b\u7684\u5217\u4f1a\u88ab\u5305\u542b\u5728\u6a21\u578b\u8bbe\u8ba1\u77e9\u9635\u4e2d y, X = patsy.dmatrices('v2 ~ key1 + 0', data) print(X) # [[1. 0.] # [1. 0.] # [0. 1.] # [0. 1.] # [1. 0.] # [0. 1.] # [1. 0.] # [0. 1.]] \u6570\u503c\u578b\u5217\u53ef\u4ee5\u901a\u8fc7C\u51fd\u6570\uff0c\u53d8\u4e3a\u7c7b\u578b\u5217\uff1a y, X = patsy.dmatrices('v2 ~ C(key2)', data) print(X) # [[1. 0.] # [1. 1.] # [1. 0.] # [1. 1.] # [1. 0.] # [1. 1.] # [1. 0.] # [1. 0.]] \u5f53\u6211\u4eec\u5728\u4e00\u4e2a\u6a21\u578b\u4e2d\u4f7f\u7528\u591a\u4e2a\u7c7b\u578b\u672f\u8bed\u65f6\uff0c\u4f1a\u53d8\u5f97\u66f4\u590d\u6742\u4e00\u4e9b\uff0c\u4e4b\u524d\u7528key1:key2\u7684\u5f62\u5f0f\u6765\u5305\u542b\u6709\u4ea4\u96c6\u7684\u672f\u8bed\uff0c\\ \u8fd9\u79cd\u65b9\u6cd5\u53ef\u4ee5\u7528\u4e8e\u4f7f\u7528\u591a\u4e2a\u672f\u8bed\uff0c\u4f8b\u5982\uff0c\u4e00\u4e2a\u65b9\u6cd5\u5206\u6790\u6a21\u578b\uff08analysis of variance (ANOVA) models\uff09\uff1a data['key2'] = data['key2'].map({0: 'zero', 1: 'one'}) print(data) # key1 key2 v1 v2 # 0 a zero 1 -1.0 # 1 a one 2 0.0 # 2 b zero 3 2.5 # 3 b one 4 -0.5 # 4 a zero 5 4.0 # 5 b one 6 -1.2 # 6 a zero 7 0.2 # 7 b zero 8 -1.7 y, X = patsy.dmatrices('v2 ~ key1 + key2', data) print(X) # [[1. 0. 1.] # [1. 0. 0.] # [1. 1. 1.] # [1. 1. 0.] # [1. 0. 1.] # [1. 1. 0.] # [1. 0. 1.] # [1. 1. 1.]] y, X = patsy.dmatrices('v2 ~ key1 + key2 + key1:key2', data) print(X) # [[1. 0. 1. 0.] # [1. 0. 0. 0.] # [1. 1. 1. 1.] # [1. 1. 0. 0.] # [1. 0. 1. 0.] # [1. 1. 0. 0.] # [1. 0. 1. 0.] # [1. 1. 1. 1.]] statsmodels\u4ecb\u7ecd statsmodels\uff08http://www.statsmodels.org\uff09\u662f\u4e00\u4e2aPython\u5e93\uff0c\u7528\u4e8e\u62df\u5408\u591a\u79cd\u7edf\u8ba1\u6a21\u578b\uff0c\u6267\u884c\u7edf\u8ba1\u6d4b\u8bd5\u4ee5\u53ca\u6570\u636e\u63a2\u7d22\u548c\u53ef\u89c6\u5316\u3002 statsmodels\u5305\u542b\u66f4\u591a\u7684\u201c\u7ecf\u5178\u201d\u9891\u7387\u5b66\u6d3e\u7edf\u8ba1\u65b9\u6cd5\uff0c\u800c\u8d1d\u53f6\u65af\u65b9\u6cd5\u548c\u673a\u5668\u5b66\u4e60\u6a21\u578b\u53ef\u5728\u5176\u4ed6\u5e93\u4e2d\u627e\u5230\u3002 \u5305\u542b\u5728statsmodels\u4e2d\u7684\u4e00\u4e9b\u6a21\u578b\uff1a * \u7ebf\u6027\u6a21\u578b\uff0c\u5e7f\u4e49\u7ebf\u6027\u6a21\u578b\u548c\u9c81\u68d2\u7ebf\u6027\u6a21\u578b * \u7ebf\u6027\u6df7\u5408\u6548\u5e94\u6a21\u578b * \u65b9\u5dee\u5206\u6790\uff08ANOVA\uff09\u65b9\u6cd5 * \u65f6\u95f4\u5e8f\u5217\u8fc7\u7a0b\u548c\u72b6\u6001\u7a7a\u95f4\u6a21\u578b * \u5e7f\u4e49\u7684\u77e9\u91cf\u6cd5 import pandas as pd import statsmodels.api as sm import statsmodels.formula.api as smf import numpy as np import random \u8bc4\u4f30\u7ebf\u6027\u6a21\u578b \u7edf\u8ba1\u6a21\u578b\u4e2d\u6709\u51e0\u79cd\u7ebf\u6027\u56de\u5f52\u6a21\u578b\uff0c\u4ece\u8f83\u57fa\u672c\u7684\uff08\u4f8b\u5982\uff0c\u666e\u901a\u6700\u5c0f\u4e8c\u4e58\uff09\u5230\u66f4\u590d\u6742\u7684\uff08\u4f8b\u5982\uff0c\u8fed\u4ee3\u91cd\u65b0\u52a0\u6743\u7684\u6700\u5c0f\u4e8c\u4e58\uff09\u3002\\ tatsmodels\u4e2d\u7684\u7ebf\u6027\u6a21\u578b\u6709\u4e24\u4e2a\u4e0d\u540c\u7684\u4e3b\u8981\u63a5\u53e3\uff0c\u8fd9\u4e9b\u63a5\u53e3\u901a\u8fc7\u8fd9\u4e9bAPI\u6a21\u5757\u5bfc\u5165\u6765\u8bbf\u95ee\uff1a * \u57fa\u4e8e\u6570\u7ec4 * \u57fa\u4e8e\u516c\u5f0f \u4e0b\u9762\u7684\u4f8b\u5b50\u662f\u8c03\u7528\u5df2\u77e5\u53c2\u6570beta\u7684\u6a21\u578b\u3002\\ \u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0cdnorm\u662f\u7528\u4e8e\u751f\u6210\u5177\u6709\u7279\u5b9a\u5747\u503c\u548c\u65b9\u5dee\u7684\u6b63\u6001\u5206\u5e03\u6570\u636e\u7684\u8f85\u52a9\u51fd\u6570\u3002 def dnorm (mean, variance, size=1): if isinstance(size, int): size = size, return mean + np.sqrt(variance) * np.random.randn(*size) np.random.seed(12345) N = 100 X = np.c_[ dnorm(0, 0.4, size=N), dnorm(0, 0.6, size=N), dnorm(0, 0.2, size=N) ] eps = dnorm(0, 0.1, size=N) beta = [0.1, 0.3, 0.5] y = np.dot(X, beta) + eps print(X[:5]) # [[-0.12946849 -1.21275292 0.50422488] # [ 0.30291036 -0.43574176 -0.25417986] # [-0.32852189 -0.02530153 0.13835097] # [-0.35147471 -0.71960511 -0.25821463] # [ 1.2432688 -0.37379916 -0.52262905]] print(y[:5]) # [ 0.42786349 -0.67348041 -0.09087764 -0.48949442 -0.12894109] \u7ebf\u6027\u6a21\u578b\u901a\u5e38\u4e0e\u6211\u4eec\u5728Patsy\u4e2d\u770b\u5230\u7684\u622a\u8ddd\u9879\u76f8\u5339\u914d\u3002sm.add_constant\u51fd\u6570\u53ef\u4ee5\u5c06\u622a\u8ddd\u5217\u6dfb\u52a0\u5230\u73b0\u6709\u77e9\u9635\uff1a X_model = sm.add_constant(X) print(X_model[:5]) # [[ 1. -0.12946849 -1.21275292 0.50422488] # [ 1. 0.30291036 -0.43574176 -0.25417986] # [ 1. -0.32852189 -0.02530153 0.13835097] # [ 1. -0.35147471 -0.71960511 -0.25821463] # [ 1. 1.2432688 -0.37379916 -0.52262905]] sm.OLS\u7c7b\u53ef\u4ee5\u62df\u5408\u4e00\u4e2a\u6700\u5c0f\u4e8c\u4e58\u7ebf\u6027\u56de\u5f52\uff1a model = sm.OLS(y, X) \u6a21\u578b\u7684fit\u65b9\u6cd5\u8fd4\u56de\u4e00\u4e2a\u56de\u5f52\u7ed3\u679c\u5bf9\u8c61\uff0c\u8be5\u5bf9\u8c61\u5305\u542b\u4e86\u4f30\u8ba1\u7684\u6a21\u578b\u53c2\u6570\u548c\u5176\u4ed6\u7684\u8bca\u65ad\uff1a results = model.fit() print(results.params) # [0.17826108 0.22303962 0.50095093] \u8c03\u7528summary\u65b9\u6cd5\u53ef\u4ee5\u6253\u5370\u51fa\u4e00\u4e2a\u6a21\u578b\u7684\u8bca\u65ad\u7ec6\u8282\uff0c\u6b64\u5904\u7684\u53c2\u6570\u540d\u79f0\u5df2\u88ab\u8d4b\u4e88\u901a\u7528\u540d\u79f0x1\u3001x2\u7b49\uff1a print(results.summary()) # OLS Regression Results # ======================================================================================= # Dep. Variable: y R-squared (uncentered): 0.430 # Model: OLS Adj. R-squared (uncentered): 0.413 # Method: Least Squares F-statistic: 24.42 # Date: Sat, 16 Oct 2021 Prob (F-statistic): 7.44e-12 # Time: 14:21:45 Log-Likelihood: -34.305 # No. Observations: 100 AIC: 74.61 # Df Residuals: 97 BIC: 82.42 # Df Model: 3 # Covariance Type: nonrobust # ============================================================================== # coef std err t P>|t| [0.025 0.975] # ------------------------------------------------------------------------------ # x1 0.1783 0.053 3.364 0.001 0.073 0.283 # x2 0.2230 0.046 4.818 0.000 0.131 0.315 # x3 0.5010 0.080 6.237 0.000 0.342 0.660 # ============================================================================== # Omnibus: 4.662 Durbin-Watson: 0 -0.002327 # Prob(Omnibus): 0.097 Jarque-Bera (JB): 4.098 # Skew: 0.481 Prob(JB): 0.129 # Kurtosis: 3.243 Cond. No. 1.74 # ============================================================================== # # Notes: # [1] R\u00b2 is computed without centering (uncentered) since the model does not contain a constant. # [2] Standard Errors assume that the covariance matrix of the errors is correctly specified. \u5047\u8bbe\u6240\u6709\u6a21\u578b\u53c2\u6570\u90fd\u5728DataFrame\u4e2d\uff1a data = pd.DataFrame(X, columns=['col0', 'col1', 'col2']) data['y'] = y print(data[:5]) # col0 col1 col2 y # 0 -0.129468 -1.212753 0.504225 0.427863 # 1 0.302910 -0.435742 -0.254180 -0.673480 # 2 -0.328522 -0.025302 0.138351 -0.090878 # 3 -0.351475 -0.719605 -0.258215 -0.489494 # 4 1.243269 -0.373799 -0.522629 -0.128941 \u73b0\u5728\u53ef\u4ee5\u4f7f\u7528statsmodels\u516c\u5f0fAPI\u548cPatsy\u516c\u5f0f\u5b57\u7b26\u4e32\uff1a\\ \u89c2\u5bdfstatsmodels\u5982\u4f55\u5c06\u7ed3\u679c\u4f5c\u4e3a\u5e26\u6709DataFrame\u5217\u540d\u79f0\u7684Series\u8fd4\u56de\u3002 results = smf.ols('y ~ col0 + col1 + col2', data=data).fit() print(results.params) # Intercept 0.033559 # col0 0.176149 # col1 0.224826 # col2 0.514808 # dtype: float64 \u7ed9\u5b9a\u65b0\u7684\u6837\u672c\u5916\u6570\u636e\u540e\uff0c\u53ef\u4ee5\u6839\u636e\u4f30\u8ba1\u7684\u6a21\u578b\u53c2\u6570\u8ba1\u7b97\u9884\u6d4b\u503c\uff1a print(results.predict(data[:5])) # 0 -0.002327 # 1 -0.141904 # 2 0.041226 # 3 -0.323070 # 4 -0.100535 # dtype: float64 \u8bc4\u4f30\u65f6\u95f4\u5e8f\u5217\u5904\u7406 statsmodels\u4e2d\u7684\u53e6\u4e00\u7c7b\u6a21\u578b\u7528\u4e8e\u65f6\u95f4\u5e8f\u5217\u5206\u6790\u3002\u5176\u4e2d\u5305\u62ec\u81ea\u56de\u5f52\u8fc7\u7a0b\uff0c\u5361\u5c14\u66fc\u6ee4\u6ce2\u548c\u5176\u4ed6\u72b6\u6001\u7a7a\u95f4\u6a21\u578b\uff0c\u4ee5\u53ca\u591a\u53d8\u91cf\u81ea\u56de\u5f52\u6a21\u578b\u3002 \u4e0b\u4f8b\u6a21\u62df\u4e00\u4e9b\u5177\u6709\u81ea\u56de\u5f52\u7ed3\u6784\u548c\u566a\u58f0\u7684\u65f6\u95f4\u5e8f\u5217\u6570\u636e\uff0c\u8be5\u6570\u636e\u5177\u6709\u53c2\u6570\u4e3a0.8\u548c-0.4\u7684AR\uff082\uff09\u7ed3\u6784\uff08\u4e24\u4e2a\u6ede\u540e\uff09\u3002 init_x = 4 values = [init_x, init_x] N = 1000 b0 = 0.8 b1 = -0.4 noise = dnorm(0, 0.1, N) for i in range(N): new_x = values[-1] * b0 + values[-2] * b1 + noise[i] values.append(new_x) \u5f53\u62df\u5408\u4e00\u4e2aAR\u6a21\u578b\u65f6\uff0c\u4f60\u53ef\u80fd\u4e0d\u77e5\u9053\u5305\u542b\u7684\u6ede\u540e\u9879\u7684\u6570\u91cf\uff0c\u6240\u4ee5\u53ef\u4ee5\u7528\u66f4\u5927\u7684\u6ede\u540e\u6570\u6765\u62df\u5408\u8be5\u6a21\u578b\uff1a MAXLAGS = 5 model = sm.tsa.AR(values) results = model.fit(MAXLAGS) print(results.params) # NotImplementedError: AR has been removed from statsmodels and replaced with statsmodels.tsa.ar_model.AutoReg. sikit-learn\u4ecb\u7ecd scikit-learn\uff08http://scikit-learn.org\uff09\u662f\u4f7f\u7528\u6700\u5e7f\u6cdb\u4e14\u6700\u53d7\u4fe1\u4efb\u7684\u901a\u7528Python\u673a\u5668\u5b66\u4e60\u5e93\u3002\\ \u5b83\u5305\u542b\u5e7f\u6cdb\u7684\u6807\u51c6\u76d1\u7763\u7684\u548c\u65e0\u76d1\u7763\u7684\u673a\u5668\u5b66\u4e60\u65b9\u6cd5\uff0c\u5305\u62ec\u7528\u4e8e\u6a21\u578b\u9009\u62e9\u548c\u8bc4\u4f30\u3001\u6570\u636e\u8f6c\u6362\u3001\u6570\u636e\u52a0\u8f7d\u548c\u6a21\u578b\u6301\u4e45\u5316\u7684\u5de5\u5177\u3002\\ \u8fd9\u4e9b\u6a21\u578b\u53ef\u7528\u4e8e\u5206\u7c7b\u3001\u805a\u7c7b\u3001\u9884\u6d4b\u548c\u5176\u4ed6\u5e38\u89c1\u4efb\u52a1\u3002\\ pandas\u975e\u5e38\u9002\u5408\u5728\u6a21\u578b\u62df\u5408\u524d\u5904\u7406\u6570\u636e\u96c6\u3002 \u4e3e\u4e2a\u4f8b\u5b50\uff0c\u7528\u4e00\u4e2aKaggle\u7ade\u8d5b\u7684\u7ecf\u5178\u6570\u636e\u96c6\uff0c\u5173\u4e8e\u6cf0\u5766\u5c3c\u514b\u53f7\u4e58\u5ba2\u7684\u751f\u8fd8\u7387\u3002\u6211\u4eec\u7528pandas\u52a0\u8f7d\u6d4b\u8bd5\u548c\u8bad\u7ec3\u6570\u636e\u96c6\uff1a import pandas as pd from sklearn.linear_model import LogisticRegression from sklearn.linear_model import LogisticRegressionCV from sklearn.model_selection import cross_val_score train = pd.read_csv('../datasets/titanic/train.csv') test = pd.read_csv('../datasets/titanic/test.csv') print(train[:4]) # PassengerId Survived Pclass ... Fare Cabin Embarked # 0 1 0 3 ... 7.2500 NaN S # 1 2 1 1 ... 71.2833 C85 C # 2 3 1 3 ... 7.9250 NaN S # 3 4 1 1 ... 53.1000 C123 S \u50cfstatsmodels\u548cscikit-learn\u901a\u5e38\u4e0d\u80fd\u63d0\u4f9b\u7f3a\u5931\u6570\u636e\uff0c\u56e0\u6b64\u6211\u4eec\u8981\u68c0\u67e5\u5404\u5217\uff0c\u770b\u770b\u662f\u5426\u6709\u5305\u542b\u7f3a\u5931\u6570\u636e\uff1a print(train.isnull().sum()) # PassengerId 0 # Survived 0 # Pclass 0 # Name 0 # Sex 0 # Age 177 # SibSp 0 # Parch 0 # Ticket 0 # Fare 0 # Cabin 687 # Embarked 2 # dtype: int64 print(test.isnull().sum()) # PassengerId 0 # Pclass 0 # Name 0 # Sex 0 # Age 86 # SibSp 0 # Parch 0 # Ticket 0 # Fare 1 # Cabin 327 # Embarked 0 # dtype: int64 \u5728\u50cf\u8fd9\u6837\u7684\u7edf\u8ba1\u548c\u673a\u5668\u5b66\u4e60\u7684\u4f8b\u5b50\u4e2d\uff0c\u4e00\u4e2a\u5178\u578b\u7684\u4efb\u52a1\u662f\u6839\u636e\u6570\u636e\u4e2d\u7684\u7279\u5f81\u6765\u9884\u6d4b\u4e58\u5ba2\u662f\u5426\u80fd\u5e78\u5b58\u4e0b\u6765\u3002\\ \u5c06\u6a21\u578b\u62df\u5408\u5230\u8bad\u7ec3\u6570\u636e\u96c6\u4e0a\uff0c\u7136\u540e\u5728\u6837\u672c\u5916\u6d4b\u8bd5\u6570\u636e\u96c6\u4e0a\u8fdb\u884c\u8bc4\u4f30\u3002\\ \u5982\u679c\u7528Age\u4f5c\u4e3a\u9884\u6d4b\uff0c\u4f46\u5b83\u7f3a\u5c11\u6570\u636e\u3002\u9700\u8981\u8fdb\u884c\u7f3a\u5931\u6570\u636e\u63d2\u8865\uff08imputation\uff09\uff0c\u5e76\u4f7f\u7528\u8bad\u7ec3\u6570\u636e\u96c6\u7684\u4e2d\u95f4\u503c\u586b\u5145\u4e24\u4e2a\u8868\u4e2d\u7684\u7a7a\u503c\uff1a impute_value = train['Age'].median() train['Age'] = train['Age'].fillna(impute_value) test['Age'] = test['Age'].fillna(impute_value) \u73b0\u5728\u5efa\u7acb\u6a21\u578b\u3002\\ \u6dfb\u52a0\u4e00\u5217IsFemale\u4f5c\u4e3a\u2019Sex\u2019\u5217\u7684\u7f16\u7801\u7248\u672c\uff1a train['IsFemale'] = (train['Sex'] == 'female').astype(int) test['IsFemale'] = (test['Sex'] == 'female').astype(int) \u786e\u5b9a\u4e00\u4e9b\u6a21\u578b\u53d8\u91cf\u5e76\u521b\u5efaNumPy\u6570\u7ec4\uff1a predictors = ['Pclass', 'IsFemale', 'Age'] X_train = train[predictors].values X_test = test[predictors].values y_train = train['Survived'].values print(X_train[:5]) # [[ 3. 0. 22.] # [ 1. 1. 38.] # [ 3. 1. 26.] # [ 1. 1. 35.] # [ 3. 0. 35.]] print(y_train[:5]) # [0 1 1 1 0] \u4f7f\u7528scikit-learn\u7684LogisticRegression\u6a21\u578b\u521b\u5efa\u4e00\u4e2a\u6a21\u578b\u5b9e\u4f8b\uff1a model = LogisticRegression() \u4e0estatsmodels\u7c7b\u4f3c\uff0c\u4f7f\u7528\u6a21\u578b\u7684fit\u65b9\u6cd5\u5728\u8bad\u7ec3\u6570\u636e\u4e0a\u62df\u5408\u6a21\u578b\uff1a result = model.fit(X_train, y_train) print(result) # LogisticRegression() \u4f7f\u7528model.predict\u4e3a\u6d4b\u8bd5\u6570\u636e\u96c6\u5f62\u6210\u9884\u6d4b\uff1a y_predict = model.predict(X_test) print(y_predict[:10]) # [0 0 0 0 1 0 1 0 1 0] \u5b9e\u9645\u4e0a\uff0c\u6a21\u578b\u8bad\u7ec3\u4e2d\u7ecf\u5e38\u5b58\u5728\u8bb8\u591a\u9644\u52a0\u7684\u590d\u6742\u5c42\u6b21\u3002\\ \u8bb8\u591a\u6a21\u578b\u5177\u6709\u53ef\u4ee5\u8c03\u6574\u7684\u53c2\u6570\uff0c\u5e76\u4e14\u5b58\u5728\u53ef\u7528\u4e8e\u53c2\u6570\u8c03\u6574\u7684\u4ea4\u53c9\u9a8c\u8bc1\u7b49\u6280\u672f\u4ee5\u907f\u514d\u8fc7\u5ea6\u62df\u5408\u8bad\u7ec3\u6570\u636e\u3002\\ \u8fd9\u901a\u5e38\u53ef\u4ee5\u5728\u65b0\u6570\u636e\u4e0a\u4ea7\u751f\u66f4\u597d\u7684\u9884\u6d4b\u6027\u80fd\u6216\u7a33\u5065\u6027\u3002\u4ea4\u53c9\u9a8c\u8bc1\u901a\u8fc7\u5206\u5272\u8bad\u7ec3\u6570\u636e\u6765\u6a21\u62df\u6837\u672c\u5916\u9884\u6d4b\u3002\\ \u57fa\u4e8e\u50cf\u5747\u65b9\u8bef\u5dee\u4e4b\u7c7b\u7684\u6a21\u578b\u51c6\u786e\u5ea6\u5206\u6570\uff0c\u53ef\u4ee5\u5bf9\u6a21\u578b\u53c2\u6570\u6267\u884c\u7f51\u683c\u641c\u7d22\u3002\\ \u4e00\u4e9b\u6a21\u578b\uff0c\u5982\u903b\u8f91\u56de\u5f52\uff0c\u5177\u6709\u5185\u7f6e\u4ea4\u53c9\u9a8c\u8bc1\u7684\u4f30\u8ba1\u7c7b\u3002\\ \u4f8b\u5982\uff0cLogisticRegressionCV\u7c7b\u53ef\u4ee5\u4e0e\u4e00\u4e2a\u53c2\u6570\u4e00\u8d77\u4f7f\u7528\uff0c\u8be5\u53c2\u6570\u8868\u793a\u7f51\u683c\u641c\u7d22\u5728\u6a21\u578b\u6b63\u5219\u5316\u53c2\u6570C\u4e0a\u7684\u7ec6\u81f4\u5ea6\uff1a model_cv = LogisticRegressionCV() result = model_cv.fit(X_train, y_train) print(result) # LogisticRegressionCV() \u8981\u624b\u52a8\u8fdb\u884c\u4ea4\u53c9\u9a8c\u8bc1\uff0c\u53ef\u4ee5\u4f7f\u7528cross_val_score\u51fd\u6570\uff0c\u8be5\u51fd\u6570\u5904\u7406\u6570\u636e\u62c6\u5206\u8fc7\u7a0b\u3002\\ \u4f8b\u5982\uff0c\u4e3a\u4e86\u7528\u6211\u4eec\u7684\u6a21\u578b\u4e0e\u8bad\u7ec3\u6570\u636e\u7684\u56db\u4e2a\u975e\u91cd\u53e0\u5206\u5272\u8fdb\u884c\u4ea4\u53c9\u9a8c\u8bc1\uff0c\u53ef\u4ee5\u8fd9\u6837\u505a\uff1a model = LogisticRegression(C=10) scores = cross_val_score(model, X_train, y_train, cv=4) print(scores) # [0.77578475 0.79820628 0.77578475 0.78828829] \u9ed8\u8ba4\u8bc4\u5206\u6307\u6807\u662f\u4f9d\u8d56\u4e8e\u6a21\u578b\u7684\uff0c\u4f46\u53ef\u4ee5\u9009\u62e9\u660e\u786e\u7684\u8bc4\u5206\u51fd\u6570\u3002\u7ecf\u8fc7\u4ea4\u53c9\u9a8c\u8bc1\u7684\u6a21\u578b\u9700\u8981\u66f4\u957f\u65f6\u95f4\u7684\u8bad\u7ec3\uff0c\u4f46\u901a\u5e38\u53ef\u4ee5\u4ea7\u751f\u66f4\u597d\u7684\u6a21\u578b\u6027\u80fd\u3002","title":"Ch11"},{"location":"python/DataAnalysis/ch11/#pandas","text":"\u4ecb\u7ecd\u4e24\u4e2a\u6d41\u884c\u7684\u5efa\u6a21\u5de5\u5177\u5305 * statsmodels\uff08http://statsmodels.org\uff09 * scikit-learn\uff08http://scikit-learn.org\uff09\u3002 import pandas as pd import numpy as np \u4f7f\u7528pandas\u7528\u4e8e\u6570\u636e\u8f7d\u5165\u548c\u6570\u636e\u6e05\u6d17\uff0c\u4e4b\u540e\u5207\u6362\u5230\u6a21\u578b\u5e93\u53bb\u5efa\u7acb\u6a21\u578b\u662f\u4e00\u4e2a\u5e38\u89c1\u7684\u6a21\u578b\u5f00\u53d1\u5de5\u4f5c\u6d41\u3002\\ \u5728\u673a\u5668\u5b66\u4e60\u4e2d\uff0c\u7279\u5f81\u5de5\u7a0b\u662f\u6a21\u578b\u5f00\u53d1\u7684\u91cd\u8981\u90e8\u5206\u4e4b\u4e00\u3002\\ \u7279\u5f81\u5de5\u7a0b\u662f\u6307\u4ece\u539f\u751f\u6570\u636e\u96c6\u4e2d\u63d0\u53d6\u53ef\u7528\u4e8e\u6a21\u578b\u4e0a\u4e0b\u6587\u7684\u6709\u6548\u4fe1\u606f\u7684\u6570\u636e\u8f6c\u6362\u8fc7\u7a0b\u6216\u5206\u6790\u3002 pandas\u548c\u5176\u4ed6\u5206\u6790\u5e93\u7684\u7ed3\u5408\u70b9\u901a\u5e38\u662fNumPy\u6570\u7ec4\u3002\\ \u8981\u5c06DataFrame\u8f6c\u6362\u4e3aNumPy\u6570\u7ec4\uff0c\u4f7f\u7528\uff0evalues\u5c5e\u6027\uff1a df = pd.DataFrame( { 'x0': [1, 2, 3, 4, 5], 'x1': [0.01, -0.01, 0.25, -4.1, 0.], 'y': [-1.5, 0., 3.6, 1.3, -2.] } ) print(df) # x0 x1 y # 0 1 0.01 -1.5 # 1 2 -0.01 0.0 # 2 3 0.25 3.6 # 3 4 -4.10 1.3 # 4 5 0.00 -2.0 print(df.columns) # Index(['x0', 'x1', 'y'], dtype='object') print(df.values) # [[ 1. 0.01 -1.5 ] # [ 2. -0.01 0. ] # [ 3. 0.25 3.6 ] # [ 4. -4.1 1.3 ] # [ 5. 0. -2. ]] \u5c06\u6570\u7ec4\u518d\u8f6c\u6362\u4e3aDataFrame\uff1a df2 = pd.DataFrame(df.values, columns=['one', 'two', 'three']) # \u9012\u4e00\u4e2a\u542b\u6709\u5217\u540d\u7684\u4e8c\u7ef4ndarray print(df2) # one two three # 0 1.0 0.01 -1.5 # 1 2.0 -0.01 0.0 # 2 3.0 0.25 3.6 # 3 4.0 -4.10 1.3 # 4 5.0 0.00 -2.0 .values\u5c5e\u6027\u4e00\u822c\u5728\u6570\u636e\u662f\u540c\u6784\u5316\u7684\u65f6\u5019\u4f7f\u7528\u2014\u2014\u4f8b\u5982\uff0c\u90fd\u662f\u6570\u5b57\u7c7b\u578b\u7684\u65f6\u5019\u3002\\ \u5982\u679c\u6570\u636e\u662f\u5f02\u6784\u5316\u7684\uff0c\u7ed3\u679c\u5c06\u662fPython\u5bf9\u8c61\u7684 ndarray\uff1a\\ \u6dfb\u52a0\u4e00\u4e2a\u975e\u6570\u5b57\u7c7b\u578b\u7684\u5217 df3 = df.copy() df3['category'] = pd.Categorical(['a', 'b', 'a', 'a', 'b'], categories=['a', 'b']) print(df3) # x0 x1 y category # 0 1 0.01 -1.5 a # 1 2 -0.01 0.0 b # 2 3 0.25 3.6 a # 3 4 -4.10 1.3 a # 4 5 0.00 -2.0 b print(df3.values) # [[1 0.01 -1.5 'a'] # [2 -0.01 0.0 'b'] # [3 0.25 3.6 'a'] # [4 -4.1 1.3 'a'] # [5 0.0 -2.0 'b']] \u901a\u8fc7loc\u7d22\u5f15\u548cvalues\u4f7f\u7528\u4e00\u90e8\u5206\u5217\u6570\u636e model_cols = ['x0', 'x1'] result = df.loc[:, model_cols].values print(result) # [[ 1. 0.01] # [ 2. -0.01] # [ 3. 0.25] # [ 4. -4.1 ] # [ 5. 0. ]] \u5982\u679c\u6211\u4f7f\u7528\u865a\u62df\u53d8\u91cf\u66ff\u4ee3df3\u7684'category'\u5217\uff0c\u5148\u521b\u5efa\u865a\u62df\u53d8\u91cf\uff0c\u4e4b\u540e\u5220\u9664\u2019categroy\u2019\u5217\uff0c\u7136\u540e\u8fde\u63a5\u7ed3\u679c\uff1a dummies = pd.get_dummies(df3.category, prefix='category') print(dummies) # category_a category_b # 0 1 0 # 1 0 1 # 2 1 0 # 3 1 0 # 4 0 1 data_with_dummies = df3.drop('category', axis=1).join(dummies) print(data_with_dummies) # x0 x1 y category_a category_b # 0 1 0.01 -1.5 1 0 # 1 2 -0.01 0.0 0 1 # 2 3 0.25 3.6 1 0 # 3 4 -4.10 1.3 1 0 # 4 5 0.00 -2.0 0 1","title":"pandas\u4e0e\u5efa\u6a21\u4ee3\u7801\u7684\u7ed3\u5408"},{"location":"python/DataAnalysis/ch11/#patsy","text":"\u6837\u672c\u7684\u8868\u793a\u5f62\u5f0f * \u5728\u6570\u636e\u6316\u6398\u8fc7\u7a0b\u4e2d\uff0c\u6837\u672c\u4ee5\u7279\u5f81\u503c\u77e9\u9635X\u548c\u76ee\u6807\u503c\u5411\u91cfY\u7684\u5f62\u5f0f\u8868\u793a\u3002 * \u5bb9\u91cf\u4e3an\uff0c\u6709m\u4e2a\u7279\u5f81\u7684\u6837\u672c\uff0c\u5176\u7279\u5f81\u503c\u77e9\u9635X\u7531n\u4e2a\u7ef4\u5ea6\u4e3am\u7684\u5217\u5411\u91cf\u7ec4\u6210\uff0c\u7b2cj\u4e2a\u5217\u5411\u91cf\u4e3a\u6837\u672c\u4e2d\u7b2cj\u4e2a\u4e2a\u4f53\u7684\u7279\u5f81\u503c\u5411\u91cf\uff1b * \u76ee\u6807\u503c\u5411\u91cfY\u7684\u7b2cj\u4e2a\u5206\u91cf\u4e3a\u6837\u672c\u4e2d\u7b2cj\u4e2a\u4e2a\u4f53\u7684\u76ee\u6807\u503c\u3002 How formulas work: https://patsy.readthedocs.io/en/latest/formulas.html?highlight=intercept Patsy\uff08https://patsy.readthedocs.io/\uff09\u662f\u4e00\u4e2a\u7528\u4e8e\u63cf\u8ff0\u7edf\u8ba1\u6a21\u578b\uff08\u5c24\u5176\u662f\u7ebf\u6027\u6a21\u578b\uff09\u7684Python\u5e93\u3002\\ \u5b83\u4f7f\u7528\u4e00\u79cd\u5c0f\u578b\u57fa\u4e8e\u5b57\u7b26\u4e32\u7684\"\u516c\u5f0f\u8bed\u6cd5\"\u3002\\ Patsy\u80fd\u591f\u5f88\u597d\u5730\u652f\u6301statsmodels\u4e2d\u7279\u5b9a\u7684\u7ebf\u6027\u6a21\u578b\u3002\\ \u50cf y ~ x0 + x1 \u8fd9\u79cd a + b\u7684\u8bed\u6cd5\u5e76\u4e0d\u4ee3\u8868\u5c06a\u548cb\u76f8\u52a0\uff0c\u800c\u662f\u4ee3\u8868\u4e3a\u6a21\u578b\u521b\u5efa\u7684\u8bbe\u8ba1\u77e9\u9635\u7684\u672f\u8bed\uff08terms in the design matrix\uff09\u3002\\ patsy.dmatrices\u51fd\u6570\uff0c\u53d6\u4e00\u4e2a\u516c\u5f0f\u5b57\u7b26\u4e32\u548c\u4e00\u4e2a\u6570\u636e\u96c6\uff08\u53ef\u4ee5\u4f7fDataFrame\u6216dict\uff09\uff0c\u7136\u540e\u4e3a\u7ebf\u6027\u6a21\u578b\u4ea7\u751f\u8bbe\u8ba1\u77e9\u9635\uff1a import pandas as pd import numpy as np import patsy from patsy import dmatrices, dmatrix, demo_data df = pd.DataFrame( { 'x0': [1, 2, 3, 4, 5], 'x1': [0.01, -0.01, 0.25, -4.1, 0.], 'y': [-1.5, 0., 3.6, 1.3, -2.] } ) print(df) # x0 x1 y # 0 1 0.01 -1.5 # 1 2 -0.01 0.0 # 2 3 0.25 3.6 # 3 4 -4.10 1.3 # 4 5 0.00 -2.0 y, X = patsy.dmatrices('y ~ x0 + x1', df) print(y) # [[-1.5] # [ 0. ] # [ 3.6] # [ 1.3] # [-2. ]] print(X) # [[ 1. 1. 0.01] # [ 1. 2. -0.01] # [ 1. 3. 0.25] # [ 1. 4. -4.1 ] # [ 1. 5. 0. ]] print(np.asarray(y)) # Patsy\u7684DesignMatrix\u5b9e\u4f8b\uff0c\u542b\u6709\u9644\u52a0\u5143\u6570\u636e\u7684NumPy.ndarray # [[-1.5] # [ 0. ] # [ 3.6] # [ 1.3] # [-2. ]] print(np.asarray(X)) # Patsy\u7684DesignMatrix\u5b9e\u4f8b\uff0c\u542b\u6709\u9644\u52a0\u5143\u6570\u636e\u7684NumPy.ndarray # [[ 1. 1. 0.01] # [ 1. 2. -0.01] # [ 1. 3. 0.25] # [ 1. 4. -4.1 ] # [ 1. 5. 0. ]] \u4e0a\u9762X\u8f93\u51fa\u4e2d\u7684Intercept(\u6700\u5de6\u8fb9\u4e00\u5217)\u662f\u4ece\u54ea\u91cc\u6765\u7684\u3002\\ \u8fd9\u5176\u5b9e\u662f\u7ebf\u6027\u6a21\u578b\u7684\u4e00\u4e2a\u60ef\u4f8b\uff0c\u6bd4\u5982\u666e\u901a\u6700\u5c0f\u4e8c\u4e58\u56de\u5f52\u6cd5\uff08ordinary least squares regression\uff09\u3002\\ \u53ef\u4ee5\u53bb\u6389\u8fd9\u4e2a\u622a\u8ddd\uff08intercept\uff09\uff0c\u901a\u8fc7\u52a0\u6dfb\u672f\u8bed+0\u7ed9\u6a21\u578b\u3002 y, X = patsy.dmatrices('y ~ x0 + x1 + 0', df) print(X) # [[ 1. 0.01] # [ 2. -0.01] # [ 3. 0.25] # [ 4. -4.1 ] # [ 5. 0. ]] \u8fd9\u79cdPatsy\u5bf9\u8c61\u53ef\u4ee5\u76f4\u63a5\u4f20\u5165\u4e00\u4e2a\u7b97\u6cd5\uff0c\u6bd4\u5982numpy.linalg.lstsq\uff0c\u6765\u8fdb\u884c\u666e\u901a\u6700\u5c0f\u4e8c\u4e58\u56de\u5f52\u7684\u8ba1\u7b97 coef, resid, _, _ =np.linalg.lstsq(X, y, rcond=1) # \u6700\u5c0f\u4e8c\u4e58\u6cd5 print(coef) # [[ 0.00925424] # [-0.25485421]] print(resid) # [19.72552896] coef = pd.Series(coef.squeeze(), index=X.design_info.column_names) print(coef) # x0 0.009254 # x1 -0.254854 # dtype: float64","title":"\u4f7f\u7528Patsy\u521b\u5efa\u6a21\u578b\u63cf\u8ff0"},{"location":"python/DataAnalysis/ch11/#patsy_1","text":"\u53ef\u4ee5\u5c06Python\u4ee3\u7801\u6df7\u5408\u5230\u4f60\u7684Patsy\u516c\u5f0f\u4e2d\uff0c\u5728\u6267\u884c\u516c\u5f0f\u65f6\uff0cPatsy\u5e93\u5c06\u5c1d\u8bd5\u5728\u5c01\u95ed\u4f5c\u7528\u57df\u4e2d\u5bfb\u627e\u4f60\u4f7f\u7528\u7684\u51fd\u6570\uff1a y, X = patsy.dmatrices('y ~ x0 + np.log(np.abs(x1) +1)', df) print(X) # [[1. 1. 0.00995033] # [1. 2. 0.00995033] # [1. 3. 0.22314355] # [1. 4. 1.62924054] # [1. 5. 0. ]] \u4e00\u4e9b\u5e38\u7528\u7684\u53d8\u91cf\u53d8\u6362\uff0c\u5305\u62ec\u6807\u51c6\u5316\uff08standardizing (\u5e73\u5747\u503c0\uff0c\u65b9\u5dee1\uff09\u548c\u4e2d\u5fc3\u5316\uff08\u51cf\u53bb\u5e73\u5747\u503c\uff09\u3002Patsy\u6709\u5185\u5efa\u7684\u51fd\u6570\u53ef\u4ee5\u505a\u5230\u8fd9\u4e9b\u3002 y, X = patsy.dmatrices('y ~ standardize(x0) + center(x1)', df) print(X) # [[ 1. -1.41421356 0.78 ] # [ 1. -0.70710678 0.76 ] # [ 1. 0. 1.02 ] # [ 1. 0.70710678 -3.33 ] # [ 1. 1.41421356 0.77 ]] \u4f5c\u4e3a\u5efa\u6a21\u7684\u4e00\u90e8\u5206\uff0c\u6211\u4eec\u53ef\u80fd\u4f1a\u5728\u4e00\u4e2a\u6570\u636e\u53ca\u4e0a\u8bad\u7ec3\u6a21\u578b\uff0c\u7136\u540e\u5728\u53e6\u4e00\u4e2a\u6570\u636e\u53ca\u4e0a\u8bc4\u4ef7\u6a21\u578b\u3002\\ \u5f53\u4f7f\u7528\u4e2d\u5fc3\u5316\u6216\u6807\u51c6\u5316\u8fd9\u6837\u7684\u8f6c\u6362\u65f6\uff0c\u6211\u4eec\u5fc5\u987b\u6ce8\u610f\uff0c\u5fc5\u987b\u7528\u6a21\u578b\u5728\u65b0\u6570\u636e\u96c6\u4e0a\u505a\u9884\u6d4b\u3002\\ \u8fd9\u53eb\u505a\u72b6\u6001\u53d8\u6362\uff08stateful transformations\uff09\u3002\\ \u56e0\u4e3a\u6211\u4eec\u5fc5\u987b\u7528\u539f\u672c\u5728\u8bad\u7ec3\u96c6\u4e0a\u5f97\u5230\u7684\u5e73\u5747\u503c\u548c\u6807\u51c6\u5dee\uff0c\u7528\u5728\u65b0\u7684\u6570\u636e\u96c6\u4e0a\u3002 new_df = pd.DataFrame( { 'x0': [6, 7, 8, 9], 'x1': [3.1, -0.5, 0, 2.3], 'y': [1, 2, 3, 4] } ) new_X = patsy.build_design_matrices([X.design_info], new_df) print(new_X) # [DesignMatrix with shape (4, 3) # Intercept standardize(x0) center(x1) # 1 2.12132 3.87 # 1 2.82843 0.27 # 1 3.53553 0.77 # 1 4.24264 3.07 # Terms: # 'Intercept' (column 0), 'standardize(x0)' (column 1), 'center(x1)' (column 2)] \u56e0\u4e3a\u52a0\u53f7\uff08+\uff09\u5728Patsy\u516c\u5f0f\u7684\u4e0a\u4e0b\u6587\u4e2d\u5e76\u4e0d\u662f\u52a0\u6cd5\u7684\u610f\u601d\uff0c\u5f53\u60f3\u8981\u5bf9\u6570\u636e\u96c6\u4e2d\u4e24\u5217\u6309\u5217\u540d\u76f8\u52a0\u65f6\uff0c\u5fc5\u987b\u5c06\u5217\u540d\u5c01\u88c5\u5230\u7279\u6b8a\u7684I\u51fd\u6570\u4e2d\uff1a y, X = patsy.dmatrices('y ~ I(x0 + x1)', df) print(X) # [[ 1. 1.01] # [ 1. 1.99] # [ 1. 3.25] # [ 1. -0.1 ] # [ 1. 5. ]]","title":"Patsy\u516c\u5f0f\u4e2d\u7684\u6570\u636e\u8f6c\u6362"},{"location":"python/DataAnalysis/ch11/#categoricalpatsy","text":"\u975e\u6570\u503c\u578b\u6570\u636e\u53ef\u4ee5\u901a\u8fc7\u5f88\u591a\u79cd\u65b9\u5f0f\u53d8\u4e3a\u4e00\u4e2a\u6a21\u578b\u8bbe\u8ba1\u77e9\u9635\u3002\\ \u5f53\u6211\u4eec\u5728Patsy\u516c\u5f0f\u4e2d\u4f7f\u7528\u975e\u6570\u503c\u672f\u8bed\u65f6\uff0c\u8fd9\u4e9b\u7c7b\u578b\u6570\u636e\u9ed8\u8ba4\u4f1a\u88ab\u8f6c\u6362\u4e3a\u54d1\u53d8\u91cf\u3002\u5982\u679c\u6709\u622a\u8ddd\uff0c\u4e00\u4e2a\u5c42\u7ea7\u4e0a\u7684\u622a\u8ddd\u4f1a\u88ab\u820d\u5f03\uff0c\u9632\u6b62\u51fa\u73b0\u5171\u7ebf\u6027 data = pd.DataFrame( { 'key1': ['a', 'a', 'b', 'b', 'a', 'b', 'a', 'b'], 'key2': [0, 1, 0, 1, 0, 1, 0, 0], 'v1': [1, 2, 3, 4, 5, 6, 7, 8], 'v2': [-1, 0, 2.5, -0.5, 4., -1.2, 0.2, -1.7] } ) y, X = patsy.dmatrices('v2 ~ key1', data) print(y) # [[-1. ] # [ 0. ] # [ 2.5] # [-0.5] # [ 4. ] # [-1.2] # [ 0.2] # [-1.7]] print(X) # [[1. 0.] # [1. 0.] # [1. 1.] # [1. 1.] # [1. 0.] # [1. 1.] # [1. 0.] # [1. 1.]] \u5982\u679c\u4ece\u6a21\u578b\u4e2d\u820d\u5f03\u622a\u8ddd\uff0c\u6bcf\u4e2a\u7c7b\u578b\u7684\u5217\u4f1a\u88ab\u5305\u542b\u5728\u6a21\u578b\u8bbe\u8ba1\u77e9\u9635\u4e2d y, X = patsy.dmatrices('v2 ~ key1 + 0', data) print(X) # [[1. 0.] # [1. 0.] # [0. 1.] # [0. 1.] # [1. 0.] # [0. 1.] # [1. 0.] # [0. 1.]] \u6570\u503c\u578b\u5217\u53ef\u4ee5\u901a\u8fc7C\u51fd\u6570\uff0c\u53d8\u4e3a\u7c7b\u578b\u5217\uff1a y, X = patsy.dmatrices('v2 ~ C(key2)', data) print(X) # [[1. 0.] # [1. 1.] # [1. 0.] # [1. 1.] # [1. 0.] # [1. 1.] # [1. 0.] # [1. 0.]] \u5f53\u6211\u4eec\u5728\u4e00\u4e2a\u6a21\u578b\u4e2d\u4f7f\u7528\u591a\u4e2a\u7c7b\u578b\u672f\u8bed\u65f6\uff0c\u4f1a\u53d8\u5f97\u66f4\u590d\u6742\u4e00\u4e9b\uff0c\u4e4b\u524d\u7528key1:key2\u7684\u5f62\u5f0f\u6765\u5305\u542b\u6709\u4ea4\u96c6\u7684\u672f\u8bed\uff0c\\ \u8fd9\u79cd\u65b9\u6cd5\u53ef\u4ee5\u7528\u4e8e\u4f7f\u7528\u591a\u4e2a\u672f\u8bed\uff0c\u4f8b\u5982\uff0c\u4e00\u4e2a\u65b9\u6cd5\u5206\u6790\u6a21\u578b\uff08analysis of variance (ANOVA) models\uff09\uff1a data['key2'] = data['key2'].map({0: 'zero', 1: 'one'}) print(data) # key1 key2 v1 v2 # 0 a zero 1 -1.0 # 1 a one 2 0.0 # 2 b zero 3 2.5 # 3 b one 4 -0.5 # 4 a zero 5 4.0 # 5 b one 6 -1.2 # 6 a zero 7 0.2 # 7 b zero 8 -1.7 y, X = patsy.dmatrices('v2 ~ key1 + key2', data) print(X) # [[1. 0. 1.] # [1. 0. 0.] # [1. 1. 1.] # [1. 1. 0.] # [1. 0. 1.] # [1. 1. 0.] # [1. 0. 1.] # [1. 1. 1.]] y, X = patsy.dmatrices('v2 ~ key1 + key2 + key1:key2', data) print(X) # [[1. 0. 1. 0.] # [1. 0. 0. 0.] # [1. 1. 1. 1.] # [1. 1. 0. 0.] # [1. 0. 1. 0.] # [1. 1. 0. 0.] # [1. 0. 1. 0.] # [1. 1. 1. 1.]]","title":"\u5206\u7c7b\u6570\u636eCategorical\u548cPatsy"},{"location":"python/DataAnalysis/ch11/#statsmodels","text":"statsmodels\uff08http://www.statsmodels.org\uff09\u662f\u4e00\u4e2aPython\u5e93\uff0c\u7528\u4e8e\u62df\u5408\u591a\u79cd\u7edf\u8ba1\u6a21\u578b\uff0c\u6267\u884c\u7edf\u8ba1\u6d4b\u8bd5\u4ee5\u53ca\u6570\u636e\u63a2\u7d22\u548c\u53ef\u89c6\u5316\u3002 statsmodels\u5305\u542b\u66f4\u591a\u7684\u201c\u7ecf\u5178\u201d\u9891\u7387\u5b66\u6d3e\u7edf\u8ba1\u65b9\u6cd5\uff0c\u800c\u8d1d\u53f6\u65af\u65b9\u6cd5\u548c\u673a\u5668\u5b66\u4e60\u6a21\u578b\u53ef\u5728\u5176\u4ed6\u5e93\u4e2d\u627e\u5230\u3002 \u5305\u542b\u5728statsmodels\u4e2d\u7684\u4e00\u4e9b\u6a21\u578b\uff1a * \u7ebf\u6027\u6a21\u578b\uff0c\u5e7f\u4e49\u7ebf\u6027\u6a21\u578b\u548c\u9c81\u68d2\u7ebf\u6027\u6a21\u578b * \u7ebf\u6027\u6df7\u5408\u6548\u5e94\u6a21\u578b * \u65b9\u5dee\u5206\u6790\uff08ANOVA\uff09\u65b9\u6cd5 * \u65f6\u95f4\u5e8f\u5217\u8fc7\u7a0b\u548c\u72b6\u6001\u7a7a\u95f4\u6a21\u578b * \u5e7f\u4e49\u7684\u77e9\u91cf\u6cd5 import pandas as pd import statsmodels.api as sm import statsmodels.formula.api as smf import numpy as np import random","title":"statsmodels\u4ecb\u7ecd"},{"location":"python/DataAnalysis/ch11/#_1","text":"\u7edf\u8ba1\u6a21\u578b\u4e2d\u6709\u51e0\u79cd\u7ebf\u6027\u56de\u5f52\u6a21\u578b\uff0c\u4ece\u8f83\u57fa\u672c\u7684\uff08\u4f8b\u5982\uff0c\u666e\u901a\u6700\u5c0f\u4e8c\u4e58\uff09\u5230\u66f4\u590d\u6742\u7684\uff08\u4f8b\u5982\uff0c\u8fed\u4ee3\u91cd\u65b0\u52a0\u6743\u7684\u6700\u5c0f\u4e8c\u4e58\uff09\u3002\\ tatsmodels\u4e2d\u7684\u7ebf\u6027\u6a21\u578b\u6709\u4e24\u4e2a\u4e0d\u540c\u7684\u4e3b\u8981\u63a5\u53e3\uff0c\u8fd9\u4e9b\u63a5\u53e3\u901a\u8fc7\u8fd9\u4e9bAPI\u6a21\u5757\u5bfc\u5165\u6765\u8bbf\u95ee\uff1a * \u57fa\u4e8e\u6570\u7ec4 * \u57fa\u4e8e\u516c\u5f0f \u4e0b\u9762\u7684\u4f8b\u5b50\u662f\u8c03\u7528\u5df2\u77e5\u53c2\u6570beta\u7684\u6a21\u578b\u3002\\ \u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0cdnorm\u662f\u7528\u4e8e\u751f\u6210\u5177\u6709\u7279\u5b9a\u5747\u503c\u548c\u65b9\u5dee\u7684\u6b63\u6001\u5206\u5e03\u6570\u636e\u7684\u8f85\u52a9\u51fd\u6570\u3002 def dnorm (mean, variance, size=1): if isinstance(size, int): size = size, return mean + np.sqrt(variance) * np.random.randn(*size) np.random.seed(12345) N = 100 X = np.c_[ dnorm(0, 0.4, size=N), dnorm(0, 0.6, size=N), dnorm(0, 0.2, size=N) ] eps = dnorm(0, 0.1, size=N) beta = [0.1, 0.3, 0.5] y = np.dot(X, beta) + eps print(X[:5]) # [[-0.12946849 -1.21275292 0.50422488] # [ 0.30291036 -0.43574176 -0.25417986] # [-0.32852189 -0.02530153 0.13835097] # [-0.35147471 -0.71960511 -0.25821463] # [ 1.2432688 -0.37379916 -0.52262905]] print(y[:5]) # [ 0.42786349 -0.67348041 -0.09087764 -0.48949442 -0.12894109] \u7ebf\u6027\u6a21\u578b\u901a\u5e38\u4e0e\u6211\u4eec\u5728Patsy\u4e2d\u770b\u5230\u7684\u622a\u8ddd\u9879\u76f8\u5339\u914d\u3002sm.add_constant\u51fd\u6570\u53ef\u4ee5\u5c06\u622a\u8ddd\u5217\u6dfb\u52a0\u5230\u73b0\u6709\u77e9\u9635\uff1a X_model = sm.add_constant(X) print(X_model[:5]) # [[ 1. -0.12946849 -1.21275292 0.50422488] # [ 1. 0.30291036 -0.43574176 -0.25417986] # [ 1. -0.32852189 -0.02530153 0.13835097] # [ 1. -0.35147471 -0.71960511 -0.25821463] # [ 1. 1.2432688 -0.37379916 -0.52262905]] sm.OLS\u7c7b\u53ef\u4ee5\u62df\u5408\u4e00\u4e2a\u6700\u5c0f\u4e8c\u4e58\u7ebf\u6027\u56de\u5f52\uff1a model = sm.OLS(y, X) \u6a21\u578b\u7684fit\u65b9\u6cd5\u8fd4\u56de\u4e00\u4e2a\u56de\u5f52\u7ed3\u679c\u5bf9\u8c61\uff0c\u8be5\u5bf9\u8c61\u5305\u542b\u4e86\u4f30\u8ba1\u7684\u6a21\u578b\u53c2\u6570\u548c\u5176\u4ed6\u7684\u8bca\u65ad\uff1a results = model.fit() print(results.params) # [0.17826108 0.22303962 0.50095093] \u8c03\u7528summary\u65b9\u6cd5\u53ef\u4ee5\u6253\u5370\u51fa\u4e00\u4e2a\u6a21\u578b\u7684\u8bca\u65ad\u7ec6\u8282\uff0c\u6b64\u5904\u7684\u53c2\u6570\u540d\u79f0\u5df2\u88ab\u8d4b\u4e88\u901a\u7528\u540d\u79f0x1\u3001x2\u7b49\uff1a print(results.summary()) # OLS Regression Results # ======================================================================================= # Dep. Variable: y R-squared (uncentered): 0.430 # Model: OLS Adj. R-squared (uncentered): 0.413 # Method: Least Squares F-statistic: 24.42 # Date: Sat, 16 Oct 2021 Prob (F-statistic): 7.44e-12 # Time: 14:21:45 Log-Likelihood: -34.305 # No. Observations: 100 AIC: 74.61 # Df Residuals: 97 BIC: 82.42 # Df Model: 3 # Covariance Type: nonrobust # ============================================================================== # coef std err t P>|t| [0.025 0.975] # ------------------------------------------------------------------------------ # x1 0.1783 0.053 3.364 0.001 0.073 0.283 # x2 0.2230 0.046 4.818 0.000 0.131 0.315 # x3 0.5010 0.080 6.237 0.000 0.342 0.660 # ============================================================================== # Omnibus: 4.662 Durbin-Watson: 0 -0.002327 # Prob(Omnibus): 0.097 Jarque-Bera (JB): 4.098 # Skew: 0.481 Prob(JB): 0.129 # Kurtosis: 3.243 Cond. No. 1.74 # ============================================================================== # # Notes: # [1] R\u00b2 is computed without centering (uncentered) since the model does not contain a constant. # [2] Standard Errors assume that the covariance matrix of the errors is correctly specified. \u5047\u8bbe\u6240\u6709\u6a21\u578b\u53c2\u6570\u90fd\u5728DataFrame\u4e2d\uff1a data = pd.DataFrame(X, columns=['col0', 'col1', 'col2']) data['y'] = y print(data[:5]) # col0 col1 col2 y # 0 -0.129468 -1.212753 0.504225 0.427863 # 1 0.302910 -0.435742 -0.254180 -0.673480 # 2 -0.328522 -0.025302 0.138351 -0.090878 # 3 -0.351475 -0.719605 -0.258215 -0.489494 # 4 1.243269 -0.373799 -0.522629 -0.128941 \u73b0\u5728\u53ef\u4ee5\u4f7f\u7528statsmodels\u516c\u5f0fAPI\u548cPatsy\u516c\u5f0f\u5b57\u7b26\u4e32\uff1a\\ \u89c2\u5bdfstatsmodels\u5982\u4f55\u5c06\u7ed3\u679c\u4f5c\u4e3a\u5e26\u6709DataFrame\u5217\u540d\u79f0\u7684Series\u8fd4\u56de\u3002 results = smf.ols('y ~ col0 + col1 + col2', data=data).fit() print(results.params) # Intercept 0.033559 # col0 0.176149 # col1 0.224826 # col2 0.514808 # dtype: float64 \u7ed9\u5b9a\u65b0\u7684\u6837\u672c\u5916\u6570\u636e\u540e\uff0c\u53ef\u4ee5\u6839\u636e\u4f30\u8ba1\u7684\u6a21\u578b\u53c2\u6570\u8ba1\u7b97\u9884\u6d4b\u503c\uff1a print(results.predict(data[:5])) # 0 -0.002327 # 1 -0.141904 # 2 0.041226 # 3 -0.323070 # 4 -0.100535 # dtype: float64","title":"\u8bc4\u4f30\u7ebf\u6027\u6a21\u578b"},{"location":"python/DataAnalysis/ch11/#_2","text":"statsmodels\u4e2d\u7684\u53e6\u4e00\u7c7b\u6a21\u578b\u7528\u4e8e\u65f6\u95f4\u5e8f\u5217\u5206\u6790\u3002\u5176\u4e2d\u5305\u62ec\u81ea\u56de\u5f52\u8fc7\u7a0b\uff0c\u5361\u5c14\u66fc\u6ee4\u6ce2\u548c\u5176\u4ed6\u72b6\u6001\u7a7a\u95f4\u6a21\u578b\uff0c\u4ee5\u53ca\u591a\u53d8\u91cf\u81ea\u56de\u5f52\u6a21\u578b\u3002 \u4e0b\u4f8b\u6a21\u62df\u4e00\u4e9b\u5177\u6709\u81ea\u56de\u5f52\u7ed3\u6784\u548c\u566a\u58f0\u7684\u65f6\u95f4\u5e8f\u5217\u6570\u636e\uff0c\u8be5\u6570\u636e\u5177\u6709\u53c2\u6570\u4e3a0.8\u548c-0.4\u7684AR\uff082\uff09\u7ed3\u6784\uff08\u4e24\u4e2a\u6ede\u540e\uff09\u3002 init_x = 4 values = [init_x, init_x] N = 1000 b0 = 0.8 b1 = -0.4 noise = dnorm(0, 0.1, N) for i in range(N): new_x = values[-1] * b0 + values[-2] * b1 + noise[i] values.append(new_x) \u5f53\u62df\u5408\u4e00\u4e2aAR\u6a21\u578b\u65f6\uff0c\u4f60\u53ef\u80fd\u4e0d\u77e5\u9053\u5305\u542b\u7684\u6ede\u540e\u9879\u7684\u6570\u91cf\uff0c\u6240\u4ee5\u53ef\u4ee5\u7528\u66f4\u5927\u7684\u6ede\u540e\u6570\u6765\u62df\u5408\u8be5\u6a21\u578b\uff1a MAXLAGS = 5 model = sm.tsa.AR(values) results = model.fit(MAXLAGS) print(results.params) # NotImplementedError: AR has been removed from statsmodels and replaced with statsmodels.tsa.ar_model.AutoReg.","title":"\u8bc4\u4f30\u65f6\u95f4\u5e8f\u5217\u5904\u7406"},{"location":"python/DataAnalysis/ch11/#sikit-learn","text":"scikit-learn\uff08http://scikit-learn.org\uff09\u662f\u4f7f\u7528\u6700\u5e7f\u6cdb\u4e14\u6700\u53d7\u4fe1\u4efb\u7684\u901a\u7528Python\u673a\u5668\u5b66\u4e60\u5e93\u3002\\ \u5b83\u5305\u542b\u5e7f\u6cdb\u7684\u6807\u51c6\u76d1\u7763\u7684\u548c\u65e0\u76d1\u7763\u7684\u673a\u5668\u5b66\u4e60\u65b9\u6cd5\uff0c\u5305\u62ec\u7528\u4e8e\u6a21\u578b\u9009\u62e9\u548c\u8bc4\u4f30\u3001\u6570\u636e\u8f6c\u6362\u3001\u6570\u636e\u52a0\u8f7d\u548c\u6a21\u578b\u6301\u4e45\u5316\u7684\u5de5\u5177\u3002\\ \u8fd9\u4e9b\u6a21\u578b\u53ef\u7528\u4e8e\u5206\u7c7b\u3001\u805a\u7c7b\u3001\u9884\u6d4b\u548c\u5176\u4ed6\u5e38\u89c1\u4efb\u52a1\u3002\\ pandas\u975e\u5e38\u9002\u5408\u5728\u6a21\u578b\u62df\u5408\u524d\u5904\u7406\u6570\u636e\u96c6\u3002 \u4e3e\u4e2a\u4f8b\u5b50\uff0c\u7528\u4e00\u4e2aKaggle\u7ade\u8d5b\u7684\u7ecf\u5178\u6570\u636e\u96c6\uff0c\u5173\u4e8e\u6cf0\u5766\u5c3c\u514b\u53f7\u4e58\u5ba2\u7684\u751f\u8fd8\u7387\u3002\u6211\u4eec\u7528pandas\u52a0\u8f7d\u6d4b\u8bd5\u548c\u8bad\u7ec3\u6570\u636e\u96c6\uff1a import pandas as pd from sklearn.linear_model import LogisticRegression from sklearn.linear_model import LogisticRegressionCV from sklearn.model_selection import cross_val_score train = pd.read_csv('../datasets/titanic/train.csv') test = pd.read_csv('../datasets/titanic/test.csv') print(train[:4]) # PassengerId Survived Pclass ... Fare Cabin Embarked # 0 1 0 3 ... 7.2500 NaN S # 1 2 1 1 ... 71.2833 C85 C # 2 3 1 3 ... 7.9250 NaN S # 3 4 1 1 ... 53.1000 C123 S \u50cfstatsmodels\u548cscikit-learn\u901a\u5e38\u4e0d\u80fd\u63d0\u4f9b\u7f3a\u5931\u6570\u636e\uff0c\u56e0\u6b64\u6211\u4eec\u8981\u68c0\u67e5\u5404\u5217\uff0c\u770b\u770b\u662f\u5426\u6709\u5305\u542b\u7f3a\u5931\u6570\u636e\uff1a print(train.isnull().sum()) # PassengerId 0 # Survived 0 # Pclass 0 # Name 0 # Sex 0 # Age 177 # SibSp 0 # Parch 0 # Ticket 0 # Fare 0 # Cabin 687 # Embarked 2 # dtype: int64 print(test.isnull().sum()) # PassengerId 0 # Pclass 0 # Name 0 # Sex 0 # Age 86 # SibSp 0 # Parch 0 # Ticket 0 # Fare 1 # Cabin 327 # Embarked 0 # dtype: int64 \u5728\u50cf\u8fd9\u6837\u7684\u7edf\u8ba1\u548c\u673a\u5668\u5b66\u4e60\u7684\u4f8b\u5b50\u4e2d\uff0c\u4e00\u4e2a\u5178\u578b\u7684\u4efb\u52a1\u662f\u6839\u636e\u6570\u636e\u4e2d\u7684\u7279\u5f81\u6765\u9884\u6d4b\u4e58\u5ba2\u662f\u5426\u80fd\u5e78\u5b58\u4e0b\u6765\u3002\\ \u5c06\u6a21\u578b\u62df\u5408\u5230\u8bad\u7ec3\u6570\u636e\u96c6\u4e0a\uff0c\u7136\u540e\u5728\u6837\u672c\u5916\u6d4b\u8bd5\u6570\u636e\u96c6\u4e0a\u8fdb\u884c\u8bc4\u4f30\u3002\\ \u5982\u679c\u7528Age\u4f5c\u4e3a\u9884\u6d4b\uff0c\u4f46\u5b83\u7f3a\u5c11\u6570\u636e\u3002\u9700\u8981\u8fdb\u884c\u7f3a\u5931\u6570\u636e\u63d2\u8865\uff08imputation\uff09\uff0c\u5e76\u4f7f\u7528\u8bad\u7ec3\u6570\u636e\u96c6\u7684\u4e2d\u95f4\u503c\u586b\u5145\u4e24\u4e2a\u8868\u4e2d\u7684\u7a7a\u503c\uff1a impute_value = train['Age'].median() train['Age'] = train['Age'].fillna(impute_value) test['Age'] = test['Age'].fillna(impute_value) \u73b0\u5728\u5efa\u7acb\u6a21\u578b\u3002\\ \u6dfb\u52a0\u4e00\u5217IsFemale\u4f5c\u4e3a\u2019Sex\u2019\u5217\u7684\u7f16\u7801\u7248\u672c\uff1a train['IsFemale'] = (train['Sex'] == 'female').astype(int) test['IsFemale'] = (test['Sex'] == 'female').astype(int) \u786e\u5b9a\u4e00\u4e9b\u6a21\u578b\u53d8\u91cf\u5e76\u521b\u5efaNumPy\u6570\u7ec4\uff1a predictors = ['Pclass', 'IsFemale', 'Age'] X_train = train[predictors].values X_test = test[predictors].values y_train = train['Survived'].values print(X_train[:5]) # [[ 3. 0. 22.] # [ 1. 1. 38.] # [ 3. 1. 26.] # [ 1. 1. 35.] # [ 3. 0. 35.]] print(y_train[:5]) # [0 1 1 1 0] \u4f7f\u7528scikit-learn\u7684LogisticRegression\u6a21\u578b\u521b\u5efa\u4e00\u4e2a\u6a21\u578b\u5b9e\u4f8b\uff1a model = LogisticRegression() \u4e0estatsmodels\u7c7b\u4f3c\uff0c\u4f7f\u7528\u6a21\u578b\u7684fit\u65b9\u6cd5\u5728\u8bad\u7ec3\u6570\u636e\u4e0a\u62df\u5408\u6a21\u578b\uff1a result = model.fit(X_train, y_train) print(result) # LogisticRegression() \u4f7f\u7528model.predict\u4e3a\u6d4b\u8bd5\u6570\u636e\u96c6\u5f62\u6210\u9884\u6d4b\uff1a y_predict = model.predict(X_test) print(y_predict[:10]) # [0 0 0 0 1 0 1 0 1 0] \u5b9e\u9645\u4e0a\uff0c\u6a21\u578b\u8bad\u7ec3\u4e2d\u7ecf\u5e38\u5b58\u5728\u8bb8\u591a\u9644\u52a0\u7684\u590d\u6742\u5c42\u6b21\u3002\\ \u8bb8\u591a\u6a21\u578b\u5177\u6709\u53ef\u4ee5\u8c03\u6574\u7684\u53c2\u6570\uff0c\u5e76\u4e14\u5b58\u5728\u53ef\u7528\u4e8e\u53c2\u6570\u8c03\u6574\u7684\u4ea4\u53c9\u9a8c\u8bc1\u7b49\u6280\u672f\u4ee5\u907f\u514d\u8fc7\u5ea6\u62df\u5408\u8bad\u7ec3\u6570\u636e\u3002\\ \u8fd9\u901a\u5e38\u53ef\u4ee5\u5728\u65b0\u6570\u636e\u4e0a\u4ea7\u751f\u66f4\u597d\u7684\u9884\u6d4b\u6027\u80fd\u6216\u7a33\u5065\u6027\u3002\u4ea4\u53c9\u9a8c\u8bc1\u901a\u8fc7\u5206\u5272\u8bad\u7ec3\u6570\u636e\u6765\u6a21\u62df\u6837\u672c\u5916\u9884\u6d4b\u3002\\ \u57fa\u4e8e\u50cf\u5747\u65b9\u8bef\u5dee\u4e4b\u7c7b\u7684\u6a21\u578b\u51c6\u786e\u5ea6\u5206\u6570\uff0c\u53ef\u4ee5\u5bf9\u6a21\u578b\u53c2\u6570\u6267\u884c\u7f51\u683c\u641c\u7d22\u3002\\ \u4e00\u4e9b\u6a21\u578b\uff0c\u5982\u903b\u8f91\u56de\u5f52\uff0c\u5177\u6709\u5185\u7f6e\u4ea4\u53c9\u9a8c\u8bc1\u7684\u4f30\u8ba1\u7c7b\u3002\\ \u4f8b\u5982\uff0cLogisticRegressionCV\u7c7b\u53ef\u4ee5\u4e0e\u4e00\u4e2a\u53c2\u6570\u4e00\u8d77\u4f7f\u7528\uff0c\u8be5\u53c2\u6570\u8868\u793a\u7f51\u683c\u641c\u7d22\u5728\u6a21\u578b\u6b63\u5219\u5316\u53c2\u6570C\u4e0a\u7684\u7ec6\u81f4\u5ea6\uff1a model_cv = LogisticRegressionCV() result = model_cv.fit(X_train, y_train) print(result) # LogisticRegressionCV() \u8981\u624b\u52a8\u8fdb\u884c\u4ea4\u53c9\u9a8c\u8bc1\uff0c\u53ef\u4ee5\u4f7f\u7528cross_val_score\u51fd\u6570\uff0c\u8be5\u51fd\u6570\u5904\u7406\u6570\u636e\u62c6\u5206\u8fc7\u7a0b\u3002\\ \u4f8b\u5982\uff0c\u4e3a\u4e86\u7528\u6211\u4eec\u7684\u6a21\u578b\u4e0e\u8bad\u7ec3\u6570\u636e\u7684\u56db\u4e2a\u975e\u91cd\u53e0\u5206\u5272\u8fdb\u884c\u4ea4\u53c9\u9a8c\u8bc1\uff0c\u53ef\u4ee5\u8fd9\u6837\u505a\uff1a model = LogisticRegression(C=10) scores = cross_val_score(model, X_train, y_train, cv=4) print(scores) # [0.77578475 0.79820628 0.77578475 0.78828829] \u9ed8\u8ba4\u8bc4\u5206\u6307\u6807\u662f\u4f9d\u8d56\u4e8e\u6a21\u578b\u7684\uff0c\u4f46\u53ef\u4ee5\u9009\u62e9\u660e\u786e\u7684\u8bc4\u5206\u51fd\u6570\u3002\u7ecf\u8fc7\u4ea4\u53c9\u9a8c\u8bc1\u7684\u6a21\u578b\u9700\u8981\u66f4\u957f\u65f6\u95f4\u7684\u8bad\u7ec3\uff0c\u4f46\u901a\u5e38\u53ef\u4ee5\u4ea7\u751f\u66f4\u597d\u7684\u6a21\u578b\u6027\u80fd\u3002","title":"sikit-learn\u4ecb\u7ecd"},{"location":"python/DataAnalysis/ch12/","text":"\u4eceBitly\u83b7\u53d61.USA.gov\u6570\u636e MovieLens 1M\u6570\u636e\u96c6 \u7f8e\u56fd1880~2020\u5e74\u5a74\u513f\u540d\u5b57 \u7f8e\u56fd\u519c\u4e1a\u90e8\u98df\u54c1\u6570\u636e\u5e93 2012\u5e74\u8054\u90a6\u9009\u4e3e\u59d4\u5458\u4f1ai\u6570\u636e\u5e93","title":"Ch12"},{"location":"python/DataAnalysis/ch12/#bitly1usagov","text":"","title":"\u4eceBitly\u83b7\u53d61.USA.gov\u6570\u636e"},{"location":"python/DataAnalysis/ch12/#movielens-1m","text":"","title":"MovieLens 1M\u6570\u636e\u96c6"},{"location":"python/DataAnalysis/ch12/#18802020","text":"","title":"\u7f8e\u56fd1880~2020\u5e74\u5a74\u513f\u540d\u5b57"},{"location":"python/DataAnalysis/ch12/#_1","text":"","title":"\u7f8e\u56fd\u519c\u4e1a\u90e8\u98df\u54c1\u6570\u636e\u5e93"},{"location":"python/DataAnalysis/ch12/#2012i","text":"","title":"2012\u5e74\u8054\u90a6\u9009\u4e3e\u59d4\u5458\u4f1ai\u6570\u636e\u5e93"},{"location":"python/DataAnalysis/python_data_analysis_index/","text":"NumPy\u57fa\u7840\uff1a\u6570\u7ec4\u4e0e\u5411\u91cf\u5316\u8ba1\u7b97 \u9ad8\u9636NumPy Pandas\u5165\u95e8 \u6570\u636e\u8f7d\u5165\u3001\u5b58\u50a8\u53ca\u6587\u4ef6\u683c\u5f0f \u6570\u636e\u6e05\u6d17\u4e0e\u51c6\u5907 \u6570\u636e\u89c4\u6574\uff1a\u8fde\u63a5\u3001\u8054\u5408\u4e0e\u91cd\u5851 \u7ed8\u56fe\u4e0e\u53ef\u89c6\u5316 \u6570\u636e\u805a\u5408\u4e0e\u5206\u7ec4\u64cd\u4f5c \u65f6\u95f4\u5e8f\u5217 \u9ad8\u9636pandas Python\u5efa\u6a21\u5e93\u4ecb\u7ecd \u6570\u636e\u5206\u6790\u793a\u4f8b","title":"Python data analysis index"},{"location":"python/DataAnalysis/python_data_analysis_index/#numpy","text":"","title":"NumPy\u57fa\u7840\uff1a\u6570\u7ec4\u4e0e\u5411\u91cf\u5316\u8ba1\u7b97"},{"location":"python/DataAnalysis/python_data_analysis_index/#numpy_1","text":"","title":"\u9ad8\u9636NumPy"},{"location":"python/DataAnalysis/python_data_analysis_index/#pandas","text":"","title":"Pandas\u5165\u95e8"},{"location":"python/DataAnalysis/python_data_analysis_index/#_1","text":"","title":"\u6570\u636e\u8f7d\u5165\u3001\u5b58\u50a8\u53ca\u6587\u4ef6\u683c\u5f0f"},{"location":"python/DataAnalysis/python_data_analysis_index/#_2","text":"","title":"\u6570\u636e\u6e05\u6d17\u4e0e\u51c6\u5907"},{"location":"python/DataAnalysis/python_data_analysis_index/#_3","text":"","title":"\u6570\u636e\u89c4\u6574\uff1a\u8fde\u63a5\u3001\u8054\u5408\u4e0e\u91cd\u5851"},{"location":"python/DataAnalysis/python_data_analysis_index/#_4","text":"","title":"\u7ed8\u56fe\u4e0e\u53ef\u89c6\u5316"},{"location":"python/DataAnalysis/python_data_analysis_index/#_5","text":"","title":"\u6570\u636e\u805a\u5408\u4e0e\u5206\u7ec4\u64cd\u4f5c"},{"location":"python/DataAnalysis/python_data_analysis_index/#_6","text":"","title":"\u65f6\u95f4\u5e8f\u5217"},{"location":"python/DataAnalysis/python_data_analysis_index/#pandas_1","text":"","title":"\u9ad8\u9636pandas"},{"location":"python/DataAnalysis/python_data_analysis_index/#python","text":"","title":"Python\u5efa\u6a21\u5e93\u4ecb\u7ecd"},{"location":"python/DataAnalysis/python_data_analysis_index/#_7","text":"","title":"\u6570\u636e\u5206\u6790\u793a\u4f8b"},{"location":"python/Foundation/ch00/","text":"Python\u73af\u5883 \u8fd9\u91cc\u4f7f\u7528\u7cfb\u7edf\u81ea\u5e26\u7684Python\u73af\u5883\uff1a \u4e3b\u673a\uff1aVMWare\u865a\u62df\u673a \u64cd\u4f5c\u7cfb\u7edf(Guest)\uff1aopenSUSE 15.3 Python\u7248\u672c\uff1a3.6.15(openSUSE\u81ea\u5e26) \u68c0\u67e5Python\u7248\u672c james@lizard:/opt/myProject/mySite> python --version Python 2.7.18 james@lizard:/opt/myProject/mySite> python3 --version Python 3.6.15 \u5347\u7ea7pip james@lizard:/opt> pip3 install --upgrade pip james@lizard:~> pip --version pip 21.3.1 from /home/james/.local/lib/python3.6/site-packages/pip (python 3.6) james@lizard:~> pip3 --version pip 21.3.1 from /home/james/.local/lib/python3.6/site-packages/pip (python 3.6) pip\u56fd\u5185\u6e90 https://mirrors.aliyun.com/pypi/simple/ https://pypi.tuna.tsinghua.edu.cn/simple/ http://pypi.doubanio.com/simple/ https://mirrors.cloud.tencent.com/pypi/simple/ \u5b89\u88c5Python\u5305(\u6307\u5b9a\u6e90) james@lizard:/opt> pip3 install jinja2 -i https://mirrors.aliyun.com/pypi/simple/ james@lizard:/opt> pip3 install Django -i https://mirrors.aliyun.com/pypi/simple/ james@lizard:/opt> pip3 install sqlite_utils -i https://mirrors.aliyun.com/pypi/simple/ james@lizard:/opt> pip3 install pymongo -i https://mirrors.aliyun.com/pypi/simple/ james@lizard:/opt> pip3 install numpy -i https://mirrors.aliyun.com/pypi/simple/ james@lizard:/opt> pip3 install matplotlib -i https://mirrors.aliyun.com/pypi/simple/ james@lizard:/opt> pip3 install scikit-learn -i https://mirrors.aliyun.com/pypi/simple/ james@lizard:/opt> pip3 install xlrd -i https://mirrors.aliyun.com/pypi/simple/ james@lizard:/opt> pip3 install pandas -i https://mirrors.aliyun.com/pypi/simple/ james@lizard:/opt> pip3 install pydotplus -i https://mirrors.aliyun.com/pypi/simple/ james@lizard:/opt> pip3 install seaborn -i https://mirrors.aliyun.com/pypi/simple/ james@lizard:/opt> pip3 install selenium -i https://mirrors.aliyun.com/pypi/simple/ james@lizard:/opt> pip3 install mlxtend -i https://mirrors.aliyun.com/pypi/simple/ james@lizard:/opt> pip3 install pandas-datareader -i https://mirrors.aliyun.com/pypi/simple/ james@lizard:/opt> pip3 install lxml -i https://mirrors.aliyun.com/pypi/simple/ james@lizard:/opt> pip3 install beautifulsoup4 -i https://mirrors.aliyun.com/pypi/simple/ james@lizard:/opt> pip3 install html5lib -i https://mirrors.aliyun.com/pypi/simple/ james@lizard:/opt> pip3 install tables -i https://mirrors.aliyun.com/pypi/simple/ james@lizard:/opt> pip3 install openpyxl -i https://mirrors.aliyun.com/pypi/simple/ james@lizard:/opt> pip3 install sqlalchemy -i https://mirrors.aliyun.com/pypi/simple/ james@lizard:/opt> pip3 install statsmodels -i https://mirrors.aliyun.com/pypi/simple/ james@lizard:/opt> pip3 install patsy -i https://mirrors.aliyun.com/pypi/simple/ james@lizard:/opt> pip3 install numba -i https://mirrors.aliyun.com/pypi/simple/ james@lizard:/opt> pip3 install jason -i https://mirrors.aliyun.com/pypi/simple/ james@lizard:/opt> pip3 install openpyxl -i https://mirrors.aliyun.com/pypi/simple/ \u6e90\u7801\u7f16\u8bd1\u65b9\u6cd5 \u4e0b\u9762\u662f\u6e90\u7801\u7f16\u8bd1\u65b9\u5f0f\u81ea\u884c\u5b89\u88c5Python\u7684\u65b9\u6cd5\uff0c\u4ee53.9.6\u7248\u672c\u4e3a\u4f8b\u3002 \u5b98\u7f51\u4e0b\u8f7dpython3.9.6 \uff08 \u8fde\u63a5 \uff09 \u89e3\u538b\u5b89\u88c5\u5305 james@lizard:/opt> tar xvf Python-3.9.6.tgz \u5b89\u88c5\u8def\u5f84\u4e3a /opt/Python-3.9.6/ \uff0c\u9700\u8981\u628a\u5b89\u88c5\u8def\u5f84\u7684owner\u6539\u4e3a\u5f53\u524d\u7528\u6237\uff0c\u5426\u5219\u540e\u671fpython\u7f16\u8bd1\u4ee5\u53ca\u4f7f\u7528pip\u5b89\u88c5python\u5305\u4f1a\u62a5\u9519\u3002 james@lizard:/opt> chown -R james.wheel /opt/Python-3.9.6 \u5728\u5b89\u88c5\u524d\u7684\u4e00\u4e9b\u5efa\u8bae \u5728openSUSE\u4e2d\u628a\u5f00\u53d1\u5305\u90fd\u5b89\u88c5\u4e00\u4e0b\uff0c\u7279\u522b\u662fc\u548cc++\u7684\u5f00\u53d1\u5305\u3002\u8fd9\u4e9b\u90fd\u662fPython\u7f16\u8bd1\u7684\u4f9d\u8d56\u5305\u3002 \u5728openSUSE\u4e2d\u5b89\u88c5sqlite3. \u4f7f\u7528openSUSE\u81ea\u5e26\u7684openSSL\uff0c\u5982\u679c\u81ea\u884c\u7f16\u8bd1openSSL\uff0c\u5728\u7f16\u8bd1Python\u65f6\u4f1a\u9047\u5230\u4e00\u4e9b\u672a\u77e5\u95ee\u9898\u3002 \u7f16\u8bd1\u548c\u5b89\u88c5\uff1a james@lizard:/opt/Python-3.9.6> sudo ./configure --enable-optimizations --with-ensurepip=install james@lizard:/opt/Python-3.9.6> sudo make james@lizard:/opt/Python-3.9.6> sudo make test james@lizard:/opt/Python-3.9.6> sudo make install \u4fee\u6539\u7cfb\u7edf\u9ed8\u8ba4Python\u7684\u914d\u7f6e\uff0c\u5c06python3\u6307\u5411\u65b0\u5b89\u88c5\u7684Python\u3002\u9700\u8981\u4fee\u6539\u7684\u8def\u5f84\u67092\u4e2a\uff0c /usr/bin/python3 \u548c /usr/local/bin/ \u5c06/usr/bin/python3\u91cd\u65b0\u6307\u5411\u65b0\u5b89\u88c5\u7684Python\u3002 james@lizard:/opt/Python-3.9.6> sudo rm /usr/bin/python3 james@lizard:/opt/Python-3.9.6> sudo ln -s /opt/Python-3.9.6/python /usr/bin/python3 \u68c0\u67e5/usr/local/bin/\u76ee\u5f55\u4e0b\u7684python\u6587\u4ef6\u662f\u5426\u6307\u5411\u65b0\u5b89\u88c5\u7684Pyton\u3002\u9ed8\u8ba4\u662f\u7f16\u8bd1\u5b89\u88c5\u5b8c\u6210\u540e\u5df2\u7ecf\u88ab\u4fee\u6539\u4e86\u3002 james@lizard:/opt/Python-3.9.6> ls -l /usr/local/bin/python* lrwxrwxrwx 1 root root 9 Jul 25 02:15 python3 -> python3.9 -rwxr-xr-x 1 root root 17645928 Jul 25 02:14 python3.9 -rwxr-xr-x 1 root root 3087 Jul 25 02:15 python3.9-config lrwxrwxrwx 1 root root 16 Jul 25 02:15 python3-config -> python3.9-config \u9a8c\u8bc1python\u7684\u7248\u672c\u3002 james@lizard:/opt> python Python 2.7.18 (default, Mar 04 2021, 23:25:57) [GCC] on linux2 james@lizard:/opt> python3 Python 3.9.6 (default, Jul 25 2021, 02:13:27) [GCC 7.5.0] on linux \u6dfb\u52a0\u4e0b\u9762\u7684\u73af\u5883\u53d8\u91cf\u5230\u914d\u7f6e\u6587\u4ef6 /etc/profile.local \u3002 export PATH=/usr/local/bin:/home/$USER/.local/bin:$PATH \u5e76\u6267\u884c\u4e0b\u9762\u7684\u547d\u4ee4\u4f7f\u4e4b\u751f\u6548\u3002 james@lizard:/opt> source /etc/profile.local \u4e0b\u9762\u4fee\u6539pip\u7684\u914d\u7f6e\u3002 james@lizard:/opt/Python-3.9.6> whereis pip pip: /usr/bin/pip /usr/bin/pip3.6 /usr/local/bin/pip3.9 \u901a\u8fc7\u4e0b\u9762\u53ef\u4ee5\u770b\u5230pip\u5b9e\u9645\u6307\u5411\u7684\u662f\u7cfb\u7edf\u9ed8\u8ba4\u76843.6\u7248\u672c\u3002 james@lizard:/opt> l /usr/bin/pip* lrwxrwxrwx 1 root root 21 Dec 4 2020 /usr/bin/pip -> /etc/alternatives/pip* -rwxr-xr-x 1 root root 367 Dec 4 2020 /usr/bin/pip3* -rwxr-xr-x 1 root root 371 Dec 4 2020 /usr/bin/pip3.6* -rwxr-xr-x 1 root root 10608 Jun 10 06:15 /usr/bin/pipewire* -rwxr-xr-x 1 root root 720208 Jun 10 06:15 /usr/bin/pipewire-media-session* james@lizard:/opt> l /etc/alternatives/pip* lrwxrwxrwx 1 root root 15 Jul 24 20:24 /etc/alternatives/pip -> /usr/bin/pip3.6* \u68c0\u67e5\u4e00\u4e0b\u5f53\u524dpip\u5728alternative\u91cc\u9762\u7684\u8bbe\u7f6e\u3002 james@lizard:/opt> sudo update-alternatives --display pip pip - auto mode link best version is /usr/bin/pip3.6 link currently points to /usr/bin/pip3.6 link pip is /usr/bin/pip /usr/bin/pip3.6 - priority 36 \u5220\u9664\u8001\u7248\u672c\uff0c\u6dfb\u52a0\u65b0\u7248\u672c\u3002 james@lizard:/opt> sudo update-alternatives --remove pip /usr/bin/pip3.6 james@lizard:/opt/Python-3.9.6> sudo update-alternatives --install /usr/bin/pip pip /usr/bin/pip3.9 100 update-alternatives: using /usr/bin/pip3.9 to provide /usr/bin/pip (pip) in auto mode","title":"Python\u73af\u5883"},{"location":"python/Foundation/ch00/#python","text":"\u8fd9\u91cc\u4f7f\u7528\u7cfb\u7edf\u81ea\u5e26\u7684Python\u73af\u5883\uff1a \u4e3b\u673a\uff1aVMWare\u865a\u62df\u673a \u64cd\u4f5c\u7cfb\u7edf(Guest)\uff1aopenSUSE 15.3 Python\u7248\u672c\uff1a3.6.15(openSUSE\u81ea\u5e26)","title":"Python\u73af\u5883"},{"location":"python/Foundation/ch00/#python_1","text":"james@lizard:/opt/myProject/mySite> python --version Python 2.7.18 james@lizard:/opt/myProject/mySite> python3 --version Python 3.6.15","title":"\u68c0\u67e5Python\u7248\u672c"},{"location":"python/Foundation/ch00/#pip","text":"james@lizard:/opt> pip3 install --upgrade pip james@lizard:~> pip --version pip 21.3.1 from /home/james/.local/lib/python3.6/site-packages/pip (python 3.6) james@lizard:~> pip3 --version pip 21.3.1 from /home/james/.local/lib/python3.6/site-packages/pip (python 3.6)","title":"\u5347\u7ea7pip"},{"location":"python/Foundation/ch00/#pip_1","text":"https://mirrors.aliyun.com/pypi/simple/ https://pypi.tuna.tsinghua.edu.cn/simple/ http://pypi.doubanio.com/simple/ https://mirrors.cloud.tencent.com/pypi/simple/","title":"pip\u56fd\u5185\u6e90"},{"location":"python/Foundation/ch00/#python_2","text":"james@lizard:/opt> pip3 install jinja2 -i https://mirrors.aliyun.com/pypi/simple/ james@lizard:/opt> pip3 install Django -i https://mirrors.aliyun.com/pypi/simple/ james@lizard:/opt> pip3 install sqlite_utils -i https://mirrors.aliyun.com/pypi/simple/ james@lizard:/opt> pip3 install pymongo -i https://mirrors.aliyun.com/pypi/simple/ james@lizard:/opt> pip3 install numpy -i https://mirrors.aliyun.com/pypi/simple/ james@lizard:/opt> pip3 install matplotlib -i https://mirrors.aliyun.com/pypi/simple/ james@lizard:/opt> pip3 install scikit-learn -i https://mirrors.aliyun.com/pypi/simple/ james@lizard:/opt> pip3 install xlrd -i https://mirrors.aliyun.com/pypi/simple/ james@lizard:/opt> pip3 install pandas -i https://mirrors.aliyun.com/pypi/simple/ james@lizard:/opt> pip3 install pydotplus -i https://mirrors.aliyun.com/pypi/simple/ james@lizard:/opt> pip3 install seaborn -i https://mirrors.aliyun.com/pypi/simple/ james@lizard:/opt> pip3 install selenium -i https://mirrors.aliyun.com/pypi/simple/ james@lizard:/opt> pip3 install mlxtend -i https://mirrors.aliyun.com/pypi/simple/ james@lizard:/opt> pip3 install pandas-datareader -i https://mirrors.aliyun.com/pypi/simple/ james@lizard:/opt> pip3 install lxml -i https://mirrors.aliyun.com/pypi/simple/ james@lizard:/opt> pip3 install beautifulsoup4 -i https://mirrors.aliyun.com/pypi/simple/ james@lizard:/opt> pip3 install html5lib -i https://mirrors.aliyun.com/pypi/simple/ james@lizard:/opt> pip3 install tables -i https://mirrors.aliyun.com/pypi/simple/ james@lizard:/opt> pip3 install openpyxl -i https://mirrors.aliyun.com/pypi/simple/ james@lizard:/opt> pip3 install sqlalchemy -i https://mirrors.aliyun.com/pypi/simple/ james@lizard:/opt> pip3 install statsmodels -i https://mirrors.aliyun.com/pypi/simple/ james@lizard:/opt> pip3 install patsy -i https://mirrors.aliyun.com/pypi/simple/ james@lizard:/opt> pip3 install numba -i https://mirrors.aliyun.com/pypi/simple/ james@lizard:/opt> pip3 install jason -i https://mirrors.aliyun.com/pypi/simple/ james@lizard:/opt> pip3 install openpyxl -i https://mirrors.aliyun.com/pypi/simple/","title":"\u5b89\u88c5Python\u5305(\u6307\u5b9a\u6e90)"},{"location":"python/Foundation/ch00/#_1","text":"\u4e0b\u9762\u662f\u6e90\u7801\u7f16\u8bd1\u65b9\u5f0f\u81ea\u884c\u5b89\u88c5Python\u7684\u65b9\u6cd5\uff0c\u4ee53.9.6\u7248\u672c\u4e3a\u4f8b\u3002 \u5b98\u7f51\u4e0b\u8f7dpython3.9.6 \uff08 \u8fde\u63a5 \uff09 \u89e3\u538b\u5b89\u88c5\u5305 james@lizard:/opt> tar xvf Python-3.9.6.tgz \u5b89\u88c5\u8def\u5f84\u4e3a /opt/Python-3.9.6/ \uff0c\u9700\u8981\u628a\u5b89\u88c5\u8def\u5f84\u7684owner\u6539\u4e3a\u5f53\u524d\u7528\u6237\uff0c\u5426\u5219\u540e\u671fpython\u7f16\u8bd1\u4ee5\u53ca\u4f7f\u7528pip\u5b89\u88c5python\u5305\u4f1a\u62a5\u9519\u3002 james@lizard:/opt> chown -R james.wheel /opt/Python-3.9.6 \u5728\u5b89\u88c5\u524d\u7684\u4e00\u4e9b\u5efa\u8bae \u5728openSUSE\u4e2d\u628a\u5f00\u53d1\u5305\u90fd\u5b89\u88c5\u4e00\u4e0b\uff0c\u7279\u522b\u662fc\u548cc++\u7684\u5f00\u53d1\u5305\u3002\u8fd9\u4e9b\u90fd\u662fPython\u7f16\u8bd1\u7684\u4f9d\u8d56\u5305\u3002 \u5728openSUSE\u4e2d\u5b89\u88c5sqlite3. \u4f7f\u7528openSUSE\u81ea\u5e26\u7684openSSL\uff0c\u5982\u679c\u81ea\u884c\u7f16\u8bd1openSSL\uff0c\u5728\u7f16\u8bd1Python\u65f6\u4f1a\u9047\u5230\u4e00\u4e9b\u672a\u77e5\u95ee\u9898\u3002 \u7f16\u8bd1\u548c\u5b89\u88c5\uff1a james@lizard:/opt/Python-3.9.6> sudo ./configure --enable-optimizations --with-ensurepip=install james@lizard:/opt/Python-3.9.6> sudo make james@lizard:/opt/Python-3.9.6> sudo make test james@lizard:/opt/Python-3.9.6> sudo make install \u4fee\u6539\u7cfb\u7edf\u9ed8\u8ba4Python\u7684\u914d\u7f6e\uff0c\u5c06python3\u6307\u5411\u65b0\u5b89\u88c5\u7684Python\u3002\u9700\u8981\u4fee\u6539\u7684\u8def\u5f84\u67092\u4e2a\uff0c /usr/bin/python3 \u548c /usr/local/bin/ \u5c06/usr/bin/python3\u91cd\u65b0\u6307\u5411\u65b0\u5b89\u88c5\u7684Python\u3002 james@lizard:/opt/Python-3.9.6> sudo rm /usr/bin/python3 james@lizard:/opt/Python-3.9.6> sudo ln -s /opt/Python-3.9.6/python /usr/bin/python3 \u68c0\u67e5/usr/local/bin/\u76ee\u5f55\u4e0b\u7684python\u6587\u4ef6\u662f\u5426\u6307\u5411\u65b0\u5b89\u88c5\u7684Pyton\u3002\u9ed8\u8ba4\u662f\u7f16\u8bd1\u5b89\u88c5\u5b8c\u6210\u540e\u5df2\u7ecf\u88ab\u4fee\u6539\u4e86\u3002 james@lizard:/opt/Python-3.9.6> ls -l /usr/local/bin/python* lrwxrwxrwx 1 root root 9 Jul 25 02:15 python3 -> python3.9 -rwxr-xr-x 1 root root 17645928 Jul 25 02:14 python3.9 -rwxr-xr-x 1 root root 3087 Jul 25 02:15 python3.9-config lrwxrwxrwx 1 root root 16 Jul 25 02:15 python3-config -> python3.9-config \u9a8c\u8bc1python\u7684\u7248\u672c\u3002 james@lizard:/opt> python Python 2.7.18 (default, Mar 04 2021, 23:25:57) [GCC] on linux2 james@lizard:/opt> python3 Python 3.9.6 (default, Jul 25 2021, 02:13:27) [GCC 7.5.0] on linux \u6dfb\u52a0\u4e0b\u9762\u7684\u73af\u5883\u53d8\u91cf\u5230\u914d\u7f6e\u6587\u4ef6 /etc/profile.local \u3002 export PATH=/usr/local/bin:/home/$USER/.local/bin:$PATH \u5e76\u6267\u884c\u4e0b\u9762\u7684\u547d\u4ee4\u4f7f\u4e4b\u751f\u6548\u3002 james@lizard:/opt> source /etc/profile.local \u4e0b\u9762\u4fee\u6539pip\u7684\u914d\u7f6e\u3002 james@lizard:/opt/Python-3.9.6> whereis pip pip: /usr/bin/pip /usr/bin/pip3.6 /usr/local/bin/pip3.9 \u901a\u8fc7\u4e0b\u9762\u53ef\u4ee5\u770b\u5230pip\u5b9e\u9645\u6307\u5411\u7684\u662f\u7cfb\u7edf\u9ed8\u8ba4\u76843.6\u7248\u672c\u3002 james@lizard:/opt> l /usr/bin/pip* lrwxrwxrwx 1 root root 21 Dec 4 2020 /usr/bin/pip -> /etc/alternatives/pip* -rwxr-xr-x 1 root root 367 Dec 4 2020 /usr/bin/pip3* -rwxr-xr-x 1 root root 371 Dec 4 2020 /usr/bin/pip3.6* -rwxr-xr-x 1 root root 10608 Jun 10 06:15 /usr/bin/pipewire* -rwxr-xr-x 1 root root 720208 Jun 10 06:15 /usr/bin/pipewire-media-session* james@lizard:/opt> l /etc/alternatives/pip* lrwxrwxrwx 1 root root 15 Jul 24 20:24 /etc/alternatives/pip -> /usr/bin/pip3.6* \u68c0\u67e5\u4e00\u4e0b\u5f53\u524dpip\u5728alternative\u91cc\u9762\u7684\u8bbe\u7f6e\u3002 james@lizard:/opt> sudo update-alternatives --display pip pip - auto mode link best version is /usr/bin/pip3.6 link currently points to /usr/bin/pip3.6 link pip is /usr/bin/pip /usr/bin/pip3.6 - priority 36 \u5220\u9664\u8001\u7248\u672c\uff0c\u6dfb\u52a0\u65b0\u7248\u672c\u3002 james@lizard:/opt> sudo update-alternatives --remove pip /usr/bin/pip3.6 james@lizard:/opt/Python-3.9.6> sudo update-alternatives --install /usr/bin/pip pip /usr/bin/pip3.9 100 update-alternatives: using /usr/bin/pip3.9 to provide /usr/bin/pip (pip) in auto mode","title":"\u6e90\u7801\u7f16\u8bd1\u65b9\u6cd5"},{"location":"python/Foundation/ch01/","text":"Python\u8bed\u8a00\u57fa\u7840 1. Python\u6570\u636e\u7c7b\u578b\uff086\u4e2a\uff09 \u6570\u503c\u578b\uff08number\uff09\uff1a\u8868\u793a\u6570\u636e\u7ec4\u6210\u4e3a\u6570\u5b57 \u6574\u578b\uff08int\uff09 \u5341\u8fdb\u5236 \u516b\u8fdb\u5236 \u5341\u516d\u8fdb\u5236 \u6d6e\u70b9\u578b\uff08float\uff09 \u5e03\u5c14\u578b\uff08bool\uff09 \u590d\u6570\u6027\uff08complex\uff09 \u5b57\u7b26\u578b\uff08string\uff09\uff1a\u8868\u793a\u6570\u636e\u7ec4\u6210\u662f\u5b57\u7b26 \u5217\u8868\uff08list\uff09\uff1a\u7528\u6765\u8868\u793a\u4e00\u7ec4\u6709\u5e8f\u5143\u7d20\uff0c\u540e\u671f\u6570\u636e\u53ef\u4ee5\u4fee\u6539 ['A','B','C'] \u5143\u7ec4\uff08tuple\uff09\uff1a\u7528\u6765\u8868\u793a\u4e00\u7ec4\u6709\u5e8f\u5143\u7d20\uff0c\u540e\u671f\u6570\u636e\u4e0d\u53ef\u4fee\u6539 ('A','B','C','1') \u96c6\u5408\uff08set\uff09\uff1a\u4e00\u7ec4\u6570\u636e\u65e0\u5e8f\u4e0d\u91cd\u590d\u5143\u7d20 set([1,2,3,4]) \u5b57\u5178\uff08dictionary\uff09\uff1a\u7528\u952e\u503c\u5bf9\u7684\u5f62\u5f0f\u4fdd\u5b58\u4e00\u7ec4\u5143\u7d20 {'A':7,'B':1,'C':9} \u53ef\u8fed\u4ee3\u5bf9\u8c61\uff08Iterable\uff09 An object capable of returning its members one at a time. Examples of iterables include all sequence types (such as list, str, and tuple) and some non-sequence types like dict, file objects, and objects of any classes you define with an iter() method or with a getitem() method that implements Sequence semantics. \u5e8f\u5217\uff08Sequence\uff09 An iterable which supports efficient element access using integer indices via the getitem() special method and defines a len() method that returns the length of the sequence. Some built-in sequence types are list, str, tuple, and bytes. Note that dict also supports getitem() and len(), but is considered a mapping rather than a sequence because the lookups use arbitrary immutable keys rather than integers. \u8fed\u4ee3\u5668\uff08Iterator\uff09 An object representing a stream of data. Repeated calls to the iterator\u2019s next() method (or passing it to the built-in function next()) return successive items in the stream. When no more data are available a StopIteration exception is raised instead. At this point, the iterator object is exhausted and any further calls to its next() method just raise StopIteration again. Iterators are required to have an iter() method that returns the iterator object itself so every iterator is also iterable and may be used in most places where other iterables are accepted. One notable exception is code which attempts multiple iteration passes. A container object (such as a list) produces a fresh new iterator each time you pass it to the iter() function or use it in a for loop. Attempting this with an iterator will just return the same exhausted iterator object used in the previous iteration pass, making it appear like an empty container. \u53ef\u53d8\u6570\u636e\uff08immutable\uff09\uff1a \u5217\u8868\uff08list\uff09\uff0c\u5b57\u5178\uff08dictionary\uff09\uff0c\u96c6\u5408\uff08set\uff09\u3002 \u4e0d\u53ef\u53d8\u6570\u636e\uff08immutable\uff09\uff1a \u6570\u5b57\uff08number\uff09\uff0c\u5b57\u7b26\uff08string\uff09\uff0c\u5143\u7ec4\uff08tuple\uff09\u3002 \u53ef\u8fed\u4ee3\uff08iterable\uff09\uff1a \u5b57\u7b26\uff08string\uff09\uff0c\u5143\u7ec4\uff08tuple\uff09\uff0c\u5217\u8868\uff08list\uff09\uff0c\u5b57\u5178\uff08dictionary\uff09\uff0c\u96c6\u5408\uff08set\uff09 \u5e8f\u5217\uff1a \u6709\u5e8f\u5e8f\u5217\uff1a\u5b57\u7b26\uff08string\uff09\uff0c\u5143\u7ec4\uff08tuple\uff09\uff0c\u5217\u8868\uff08list\uff09 \u65e0\u5e8f\u5e8f\u5217\uff1a\u5b57\u5178\uff08dictionary\uff09\uff0c\u96c6\u5408\uff08set\uff09 1.1 \u6570\u503c\u578b\uff08number\uff09 \u4f8b\u5b50\uff1a a, b, c, d = 20, 5.5, True, 4+3j print(a, b, c, d) # 20 5.5 True (4+3j) print(type(a), type(b), type(c), type(d)) # <class 'int'> <class 'float'> <class 'bool'> <class 'complex'> Python\u4e5f\u53ef\u4ee5\u8fd9\u6837\u8d4b\u503c\uff1a a = b = c = d = 1 print(a, b, c, d) # 1 1 1 1 \u8fdb\u5236\u8f6c\u6362\uff1a a = -15 print(f'{a}\u5bf9\u5e94\u7684\u5341\u8fdb\u5236\u662f{a}, \u4e8c\u8fdb\u5236\u662f{a:b}, \u516b\u8fdb\u5236\u662f{a:o}, \u5341\u516d\u8fdb\u5236\u662f{a:x}') 1.2 \u5b57\u7b26\u578b\uff08string\uff09 \u5355\u5f15\u53f7\uff1a\u5185\u5bb9\u4e2d\u5305\u542b\u5927\u91cf\u53cc\u5f15\u53f7 \u53cc\u5f15\u53f7\uff1a\u5185\u5bb9\u4e2d\u5305\u542b\u5927\u91cf\u5355\u5f15\u53f7 \u4e09\u5f15\u53f7\uff1a\u5185\u5bb9\u4e2d\u540c\u65f6\u5305\u542b\u5355\u53cc\u5f15\u53f7\uff0c\u4e09\u4e2a\u5355\u5f15\u53f7\u6bd4\u8f83\u597d\u3002 a = 'string is \"special\"' b = \"string's value\" c = '''string's value is \"special\"''' d = \"\"\"string's context \"\"\" \u5b57\u7b26\u4e32\u5e38\u7528\u65b9\u6cd5 \u5b57\u7b26\u4e32\u5207\u7247 s = 'Python is very good' print(s[2:4]) # th print(s[5]) # n print(s[-1]) # d print(s[-3:-1]) # oo # \u975e\u8fed\u4ee3\u578b\uff0c\u4e0d\u53ef\u4fee\u6539 s[3] = 'b' # Traceback (most recent call last): # File \"<stdin>\", line 1, in <module> # TypeError: 'str' object does not support item assignment \u5b57\u7b26\u4e32\u5408\u5e76 print(s + '!!!') # Python is very good!!! replace( a,b \u5c06\u5b57\u7b26\u4e32\u4e2d\u7684 a \u66ff\u6362\u6210 b print(s.replace('is', 'we')) # Python we very good find(str) : \u8fd4\u56de str \u51fa\u73b0\u7684\u7d22\u5f15\u4f4d\u7f6e\uff0c\u5982\u679c\u627e\u4e0d\u5230\u8be5\u503c\uff0c\u5219 find() \u65b9\u6cd5\u5c06\u8fd4\u56de -1\u3002 print(s.find('a')) # -1 print(s.find('s')) # 8 str.index(a): \u67e5\u627e\u6307\u5b9a\u503c\u7684\u9996\u6b21\u51fa\u73b0\u3002\u5982\u679c\u627e\u4e0d\u5230\u8be5\u503c\uff0cindex() \u65b9\u6cd5\u5c06\u5f15\u53d1\u5f02\u5e38\u3002 print(s.index('s')) # 8 print(s.index('a')) # Traceback (most recent call last): # File \"<stdin>\", line 1, in <module> # ValueError: substring not found str.count(a): \u7edf\u8ba1\u5b57\u7b26\u4e32\u4e2d a \u51fa\u73b0\u7684\u6b21\u6570 print(s.count('a')) # 0 print(s.count('o')) # 3 split: \u5bf9\u5b57\u7b26\u4e32\u8fdb\u884c\u5206\u5272\u3002\u5982\u679c\u53c2\u6570 num \u6709\u6307\u5b9a\u503c\uff0c\u5219\u5206\u9694 num+1 \u4e2a\u5b50\u5b57\u7b26\u4e32\u3002 # \u6309\u7a7a\u683c\u5206\u5272 print(s.split(' ')) # ['Python', 'is', 'very', 'good'] # \u6309\u7a7a\u683c\u5206\u5272\u62102\u4e2a\u5b50\u5b57\u7b26\u4e32 print(s.split(' ', 1)) # ['Python', 'is very good'] strip: \u79fb\u9664\u5b57\u7b26\u4e32\u9996\u5c3e\u6307\u5b9a\u7684\u5b57\u7b26 \u9ed8\u8ba4\u4e3a\u7a7a\u683c\u3002\u8be5\u65b9\u6cd5\u53ea\u80fd\u5220\u9664\u5f00\u5934\u6216\u662f\u7ed3\u5c3e\u7684\u5b57\u7b26\uff0c\u4e0d\u80fd\u5220\u9664\u4e2d\u95f4\u90e8\u5206\u7684\u5b57\u7b26\u3002 print(s) # Python is very good # \u79fb\u9664\u672b\u5c3e\u5b57\u7b26d print(s.strip('d')) # Python is very goo endswith (str): \u5224\u65ad\u5b57\u7b26\u4e32\u662f\u5426\u4ee5 str \u7ed3\u5c3e print(s.endswith('d')) # True print(s.endswith('a')) # False startswith (str): \u5224\u65ad\u5b57\u7b26\u4e32\u662f\u5426\u4ee5 str \u5f00\u5934 print(s.startswith('p')) # False print(s.startswith('P')) # True isdigit \uff1a\u5224\u65ad\u5b57\u7b26\u4e32\u662f\u5426\u5168\u4e3a\u6570\u5b57 d = '+86-123' print(d.isdigit()) # False d = '86123' print(d.isdigit()) # True isalpha \uff1a\u5224\u65ad\u5b57\u7b26\u4e32\u662f\u5426\u5168\u4e3a\u5b57\u6bcd b = 'Ab?' print(b.isalpha()) # False c = 'Ab' print()c.isalpha() # True \u8f6c\u4e49\u5b57\u7b26 \u4f7f\u7528\u53cd\u659c\u6760\\\u8868\u793a\u8f6c\u4e49\u5b57\u7b26\u3002\u53cd\u659c\u6760\u524d\u9762\u52a0r\u4ee3\u8868\u539f\u59cb\u5b57\u7b26\u3002 a = 'str\\ning' print(a) # str # ing a = r'str\\ning' print(a) # str\\ning \u8f6c\u4e49\u7b26 \u63cf\u8ff0 \\\u5728\u884c\u5c3e \u7eed\u884c\u7b26 \\\\ \u53cd\u659c\u6760\u7b26\u53f7\\ \\' \u5355\u5f15\u53f7 \\b \u9000\u683c(Backspace) \\000 \u7a7a \\n \u6362\u884c \\v \u7eb5\u5411\u5236\u8868\u7b26 \\t \u6a2a\u5411\u5236\u8868\u7b26 \\r \u56de\u8f66\uff0c\u5c06 \\r \u540e\u9762\u7684\u5185\u5bb9\u79fb\u5230\u5b57\u7b26\u4e32\u5f00\u5934\uff0c\u5e76\u9010\u4e00\u66ff\u6362\u5f00\u5934\u90e8\u5206\u7684\u5b57\u7b26\uff0c\u76f4\u81f3\u5c06 \\r \u540e\u9762\u7684\u5185\u5bb9\u5b8c\u5168\u66ff\u6362\u5b8c\u6210\u3002 \\yyy \u516b\u8fdb\u5236\u6570\uff0cy \u4ee3\u8868 0~7 \u7684\u5b57\u7b26 \\xyy \u5341\u516d\u8fdb\u5236\u6570\uff0c\u4ee5 \\x \u5f00\u5934\uff0cy \u4ee3\u8868\u7684\u5b57\u7b26 \u53ef\u8fed\u4ee3\u6027 \u5b57\u7b26\u4e32\u662f\u53ef\u8fed\u4ee3\u7684\u3002\u7d22\u5f15\u503c\u4ece0\u5f00\u59cb\uff0c-1\u4ee3\u8868\u4ece\u672b\u5c3e\u5f00\u59cb\u3002\u7d22\u5f15\u533a\u95f4\u662f\u5de6\u95ed\u53f3\u5f00\u3002 a = 'string is \"special\"' print(a[2:4]) 'ri' print(a[-4:-1]) # ial f-string f-string\u662fPython3.6\u63a8\u51fa\u7684\u65b0\u529f\u80fd\u3002\u770b\u4e0b\u9762\u7684\u4f8b\u5b50\uff0c\u5bf9\u6bd4\u4f20\u7edf\u8868\u793a\u65b9\u6cd5\u548cf-string\u7684\u65b9\u6cd5\u3002 age = 32 name = 'Tom' fstring = f'My name is {name} and I am {age} years old.' print(fstring) # My name is Tom and I am 32 years old. \u5728f-string\u4e2d\u4f7f\u7528\u8868\u8fbe\u5f0f\u3002 height = 2 base = 3 fstring = f'The area of the triangle is {base*height/2}.' print(fstring) # The area of the triangle is 3.0. \u901a\u8fc7f-string\u5bf9\u5b57\u5178\u8fdb\u884c\u64cd\u4f5c\u3002 person1 = { 'name': 'Tom', 'age': 20, 'gender': 'male' } person2 = { 'name': 'Jerry', 'age': 20, 'gender': 'female' } # \u8bfb\u53d6\u5b57\u5178 fstring = f'{person1.get(\"name\")} is {person1.get(\"age\")} and is {person1.get(\"ender\")}' print(fstring) # Tom is 20 and is None # \u904d\u5386\u5b57\u5178 people = [person1, person2] for person in people: fstring = f'{person.get(\"name\")} is {person.get(\"age\")} and is {person.get(\"ender\")}' print(fstring) # Tom is 20 and is None # Jerry is 20 and is None \u5728f-string\u4e2d\u4f7f\u7528\u6761\u4ef6\u3002 person1 = { 'name': 'Tom', 'age': 20, 'gender': 'male' } person2 = { 'name': 'Jerry', 'age': 20, 'gender': 'female' } people = [person1, person2] for person in people: fstring = f'{\"She\" if person.get(\"gender\") == \"female\" else \"He\"} is watching TV.' print(fstring) # He is watching TV. # She is watching TV. \u4f7f\u7528f-string\u683c\u5f0f\u5316\u8f93\u51fa\u3002 \u5de6\u5bf9\u9f50\uff1a< \u53f3\u5bf9\u9f50\uff1a> \u5c45\u4e2d\u5bf9\u9f50\uff1a^ print(f'{\"apple\": >30}') print(f'{\"apple\": ^30}') print(f'{\"apple\": <30}') # apple # apple # apple \u4f7f\u7528f-string\u683c\u5f0f\u5316\u6570\u5b57\u3002 number = 0.9124325345 # \u767e\u5206\u6bd4 fstring = f'Percentage format for number with two decimal places: {number:.2%}' print(fstring) # Percentage format for number with two decimal places: 91.24% # \u4fdd\u7559\u5c0f\u6570\u70b9\u540e3\u4f4d fstring = f'Fixed point format for number with three decimal places: {number:.3f}' print(fstring) # Fixed point format for number with three decimal places: 0.912 # \u79d1\u5b66\u8ba1\u6570\u6cd5\u8868\u793a fstring = f'Exponent format for number: {number:e}' print(fstring) # Exponent format for number: 9.124325e-01 # \u5e26\u8d27\u5e01\u7b26\u53f7 number = 123456.78921 fstring = f'Currency format for number with two decimal places: ${number:.2f}' print(fstring) # Currency format for number with two decimal places: $123456.79 # \u5e26\u8d27\u5e01\u7b26\u53f7\u548c\u5343\u5206\u4f4d number = 123456.78921 fstring = f'Currency format for number with two decimal places and comma seperators: ${number:,.2f}' print(fstring) # Currency format for number with two decimal places and comma seperators: $123,456.79 # \u8f93\u51fa\u6570\u503c\u5e26\u6b63\u8d1f\u7b26\u5408 numbers = [1, -3, 5] for number in numbers: fstring = f'The number is {number:+}' print(fstring) # The number is +1 # The number is -3 # The number is +5 # Debug\u8c03\u8bd5 number = 2 print(f'{number = }') # number = 2 1.3 \u5217\u8868\uff08list\uff09 \u5217\u8868\u662f Python \u5185\u7f6e\u7684\u4e00\u79cd\u6570\u636e\u7ed3\u6784\uff0c\u662f\u4e00\u79cd\u6709\u5e8f\u7684\u96c6\u5408\uff0c\u7528\u6765\u5b58\u50a8\u4e00\u8fde\u4e32\u5143\u7d20\u7684\u5bb9\u5668\u3002\u5217\u8868\u4e2d\u5143\u7d20\u7c7b\u578b\u53ef\u4ee5\u4e0d\u76f8\u540c\uff0c\u5b83\u652f\u6301\u6570\u5b57\u3001\u5b57\u7b26\u4e32\u7b49\u3002 \u5217\u8868\u7684\u6bcf\u4e2a\u503c\u90fd\u6709\u5bf9\u5e94\u7684\u7d22\u5f15\u503c\uff0c\u7d22\u5f15\u503c\u4ece0\u5f00\u59cb\u3002 \u5217\u8868\u5207\u7247\uff1a \u4f7f\u7528\u5207\u7247\u7b26\u53f7\u53ef\u4ee5\u5bf9\u5927\u591a\u6570\u5e8f\u5217\u7c7b\u578b\u9009\u53d6\u5176\u5b50\u96c6\u3002 \u8d77\u59cb\u4f4d\u7f6estart\u7684\u7d22\u5f15\u662f\u5305\u542b\u7684\uff0c\u800c\u7ed3\u675f\u4f4d\u7f6estop\u7684\u7d22\u5f15\u5e76\u4e0d\u5305\u542b\uff08\u5de6\u95ed\u53f3\u5f00\uff09\u3002 \u6b65\u8fdb\u503cstep\u53ef\u4ee5\u5728\u7b2c\u4e8c\u4e2a\u5192\u53f7\u540e\u9762\u4f7f\u7528\uff0c\u610f\u601d\u662f\u6bcf\u9694\u591a\u5c11\u4e2a\u6570\u53d6\u4e00\u4e2a\u503c \u3002 color = ['red', 'green', 'blue', 'yellow', 'white', 'black'] # \u4ece0\u5f00\u59cb\u7edf\u8ba1\uff0c\u8bfb\u53d6\u7b2c1\uff0c2\u4f4d print(color[1: 3]) # ['green', 'blue'] # \u4ece0\u5f00\u59cb\u7edf\u8ba1\uff0c\u8bfb\u53d6\u4ece\u7b2c1\u4f4d\u5230\u5012\u6570\u7b2c3\u4f4d print(color[1: -2]) # ['green', 'blue', 'yellow'] # \u4ece0\u5f00\u59cb\u7edf\u8ba1\uff0c\u8bfb\u53d6\u4ece\u5012\u6570\u7b2c4\u4f4d\u5230\u5012\u6570\u7b2c3\u4f4d print(color[-4: -2]) # ['blue', 'yellow'] # \u5982\u679c\u5199\u6210\u4e0b\u9762\u8fd9\u6837\uff0c\u5219\u65e0\u8f93\u51fa\u3002 print(color[-2: -4]) # [] print(color[::2]) # ['red', 'blue', 'white'] \u5217\u8868\u5e38\u7528\u65b9\u6cd5\uff1a \u65b9\u6cd5\u540d\u79f0 \u4f5c\u7528 a.index() \u8fd4\u56dea\u4e2d\u9996\u4e2a\u5339\u914d\u9879\u7684\u4f4d\u7f6e a.pop() \u5220\u9664\u6307\u5b9a\u4f4d\u7f6e\u7684\u5143\u7d20 a.insert() \u5411\u6307\u5b9a\u4f4d\u7f6e\u63d2\u5165\u5143\u7d20 a.reverse() \u53cd\u5411\u6392\u5e8f a.append() \u5411\u672b\u5c3e\u6dfb\u52a0\u5143\u7d20 a.sort() \u5bf9\u5217\u8868\u8fdb\u884c\u6392\u5e8f a.remove() \u5220\u9664\u9996\u4e2a\u5339\u914d\u9879\u7684\u5143\u7d20 a.extend() \u5c06\u4e00\u4e2a\u5217\u8868\u6269\u5c55\u81f3\u53e6\u4e00\u4e2a\u5217\u8868 a.count() \u7edf\u8ba1\u67d0\u4e2a\u5143\u7d20\u51fa\u73b0\u7684\u6b21\u6570 \u521b\u5efa\u5217\u8868list a = [1, 2, 3, 4, 5] print(a) # [1, 2, 3, 4, 5] b = list('12345') print(b) # ['1', '2', '3', '4', '5'] c = list(12345) # Traceback (most recent call last): # File \"<stdin>\", line 1, in <module> # TypeError: 'int' object is not iterable \u5217\u8868\u5207\u7247\uff08\u4ece0\u5f00\u59cb\uff0c\u5de6\u95ed\u53f3\u5f00\uff09\uff1a print(a[2:3]) # [3] print(a[:3]) # [1, 2, 3] print(a[::-1]) # [5, 4, 3, 2, 1] print(a[::]) # [1, 2, 3, 4, 5] print(a[::1]) [1, 2, 3, 4, 5] \u5217\u8868\u662f\u53ef\u4fee\u6539\u7684\uff1a print(a[1]) # 2 a[1] = 'one' print(a) @ [1, 'one', 3, 4, 5] \u5217\u8868\u8ffd\u52a0\u548c\u63d2\u5165\u3002insert\u4e0eappend\u76f8\u6bd4\uff0c\u8ba1\u7b97\u4ee3\u4ef7\u66f4\u9ad8\u3002\u56e0\u4e3a\u5b50\u5e8f\u5217\u5143\u7d20\u9700\u8981\u5728\u5185\u90e8\u79fb\u52a8\u4e3a\u65b0\u5143\u7d20\u63d0\u4f9b\u7a7a\u95f4\u3002 a.append(6) # \u6ce8\u610f\uff0c\u76f4\u63a5\u4fee\u6539\u539f\u5217\u8868\uff0c\u4e0d\u662f\u521b\u5efa\u526f\u672c\u3002 print(a) # [1, 'one', 3, 4, 5, 6] a.extend([7, 8, 9]) print(a) # [1, 'one', 3, 4, 5, 6, 7, 8, 9] a.insert(0, 'Italy') print(a) # ['Italy', 1, 3, 5, 6, 7, 8] \u5217\u8868\u5220\u9664\u5143\u7d20\uff0c\u9ed8\u8ba4\u5220\u9664\u6700\u540e\u4e00\u4e2a\u3002insert\u7684\u53cd\u64cd\u4f5c\u662fpop\u3002 a.pop() # 9 print(a) # [1, 'one', 3, 4, 5, 6, 7, 8] a.pop(3) # 4 print(a) # [1, 'one', 3, 5, 6, 7, 8] \u5220\u9664\u5217\u8868\u4e2d\u67d0\u4e2a\u5143\u7d20\u3002 print(a[1]) # one del a[1] print(a) [1, 3, 5, 6, 7, 8] \u5220\u9664\u5217\u8868\u4e2d\u67d0\u4e2a\u5143\u7d20\u3002remove\u65b9\u6cd5\u4f1a\u5b9a\u4f4d\u7b2c\u4e00\u4e2a\u7b26\u5408\u8981\u6c42\u7684\u503c\u5e76\u79fb\u9664 a.remove('Italy') print(a) # [1, 3, 5, 6, 7, 8] \u7edf\u8ba1\u67d0\u4e2a\u5143\u7d20\u51fa\u73b0\u7684\u6b21\u6570\u3002 print(a.count(1)) # 1 \u8fd4\u56de\u5217\u8868\u4e2d\u5339\u914d\u9879\u7684\u7d22\u5f15\u4f4d\u7f6e\u3002\u5339\u914d\u4e0d\u5230\u629b\u51fa\u5f02\u5e38\u3002 print(a.index(2)) # Traceback (most recent call last): # File \"<stdin>\", line 1, in <module> # ValueError: 2 is not in list print(a.index(3)) # 1 \u5224\u65ad\u5143\u7d20\u662f\u5426\u5b58\u5728\u4e8e\u5217\u8868\u3002 print(3 in a) # True print('3' in a) # False \u53cd\u5411\u8f93\u51fa\u5217\u8868\u3002 a.reverse() print(a) # [8, 7, 6, 5, 3, 1] \u53d6\u5217\u8868\u4e2d\u6700\u5927\u503c\u3001\u6700\u5c0f\u503c\u3002 print(min(a)) # 1 print(max(a)) # 78 \u8ba1\u7b97\u5217\u8868\u957f\u5ea6\u3002 print(len(a)) # 6 \u5217\u8868\u6269\u5c55\uff1a a = [1, 2, 3] b = [4, 5, 6] print(a + b) # [1, 2, 3, 4, 5, 6] a.extend(b) # a\u5217\u8868\u88ab\u4fee\u6539 print(a) # [1, 2, 3, 4, 5, 6] print(b) # [4, 5, 6] \u4f7f\u7528extend\u6dfb\u52a0\u5143\u7d20\u6bd4\u4f7f\u7528\u52a0\u53f7\uff08+\uff09\u8fde\u63a5\u6548\u7387\u66f4\u9ad8\u3002\u56e0\u4e3a\u4f7f\u7528\u52a0\u53f7\uff08+\uff09\u8fde\u63a5\u8fc7\u7a0b\u4e2d\u521b\u5efa\u4e86\u65b0\u5217\u8868\uff0c\u5e76\u4e14\u8fd8\u8981\u590d\u5236\u5bf9\u8c61\u3002 a_list = [4, None, 'foo'] b_list = [7, 8, (2, 3)] print(a_list + b_list) # [4, None, 'foo', 7, 8, (2, 3)] \u4f7f\u7528+\u53f7\u8fde\u63a5 a_list.extend(b_list) print(a_list) # [4, None, 'foo', 7, 8, (2, 3)] \u5217\u8868\u590d\u5236 c = list('Python') print(a + c) # [1, 2, 3, 4, 5, 6, 'P', 'y', 't', 'h', 'o', 'n'] print(a * 3) # [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6] \u53cc\u7aef\u961f\u5217\uff0ccollections.deque\uff0c\u53ef\u4ee5\u6ee1\u8db3\u5217\u8868\u5934\u5c3e\u90e8\u90fd\u589e\u52a0\u7684\u8981\u6c42\u3002 from collections import deque d = deque([1, 2, 3]) d.extendleft(['a', 'b', 'c']) # \u6ce8\u610f\u63d2\u5165\u987a\u5e8f print(d) # deque(['c', 'b', 'a', 1, 2, 3]) print(len(d)) # 6 print(d[-2]) # 2 print(d.count('a')) # 1 print(d.index('a')) # 2 d.insert(0, 1) # \u7b2c0\u4f4d\u63d2\u5165\u6570\u5b571 print(d) # deque([1, 'c', 'b', 'a', 1, 2, 3]) d.rotate(2) # \u628a\u53f3\u8fb92\u4e2a\u5143\u7d20\u653e\u5230\u5de6\u8fb9\uff0c\u6ce8\u610f\u987a\u5e8f\uff0c\u548cextendleft\u4e0d\u4e00\u6837 print(d) # deque([2, 3, 1, 'c', 'b', 'a', 1]) d.rotate(-2) print(d) # deque([1, 'c', 'b', 'a', 1, 2, 3]) \u5217\u8868\u6392\u5e8f\u3002\u6392\u5e8f\u5bf9\u5217\u8868\u5143\u7d20\u7684\u6570\u636e\u7c7b\u578b\u662f\u6709\u8981\u6c42\u7684 a_list = [4, None, 'foo', 7, 8, (2, 3)] a_list.sort() # Traceback (most recent call last): # File \"<stdin>\", line 1, in <module> # TypeError: '<' not supported between instances of 'NoneType' and 'int' b_list = [7, 8, (2, 3)] b_list.sort() # Traceback (most recent call last): # File \"<stdin>\", line 1, in <module> # TypeError: '<' not supported between instances of 'tuple' and 'int' a_list = [7, 2, 5, 1, 3] a_list.sort() # \u6309\u6570\u503c\u5927\u5c0f\u6392\u5e8f print(a_list) # [1, 2, 3, 5, 7] b_list = ['saw', 'small', 'He', 'foxes', 'six'] b_list.sort(key=len) # \u901a\u8fc7\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u8fdb\u884c\u6392\u5e8f print(b_list) # ['He', 'saw', 'six', 'small', 'foxes'] \u5217\u8868\u4e8c\u5206\u641c\u7d22\u548c\u5df2\u6392\u5e8f\u5217\u8868\u7684\u7ef4\u62a4 bisect \u8fd4\u56de\u8981\u63d2\u5165\u5143\u7d20\u5728\u5217\u8868\u4e2d\u7684\u4e0b\u6807\u3002\u5047\u5b9a\u5217\u8868\u662f\u6709\u5e8f\u7684\u3002 bisect_left \u4e0e bisect \u7c7b\u4f3c\uff0c\u53ea\u4e0d\u8fc7\u5176\u9ed8\u8ba4\u5c06\u5143\u7d20\u63d2\u5230\u5de6\u8fb9\uff0c\u6240\u4ee5\u8fd4\u56de\u7684\u662f\u63d2\u5165\u5230\u5de6\u8fb9\u7684\u4e0b\u6807 bisect_right\u4e0e bisect_left \u76f8\u53cd\u3002 \u4ee5\u4e0a\u65b9\u6cd5\u82e5\u5217\u8868\u65e0\u5e8f\uff0c\u90a3\u4e48\u4f1a\u8fd4\u56de\u63d2\u5165\u5230\u5217\u8868\u6700\u540e\u4e00\u4e2a\u5408\u9002\u7684\u4f4d\u7f6e\u3002 insort \u4f1a\u5728\u5217\u8868\u4e2d\u63d2\u5165\u5143\u7d20\u5230\u6b63\u786e\u4f4d\u7f6e\uff0c\u5047\u5b9a\u5217\u8868\u6709\u5e8f\u3002\u5982\u679c\u5217\u8868\u65e0\u5e8f\uff0c\u90a3\u4e48\u4f1a\u8fd4\u56de\u7a7a\u3002\u9ed8\u8ba4\u63d2\u5165\u5230\u53f3\u8fb9\u3002 insort_left \u548cinsort_right \u7c7b\u4f3c\u3002 import bisect c = [1, 2, 3, 4, 7] print(bisect.bisect(c, 2)) # 2 bisect\u4f1a\u627e\u5230\u7b2c\u4e00\u4e2a2,\u5e76\u628a\u65b0\u76842\u63d2\u5165\u5b83\u540e\u9762 bisect.insort(c, 2) # [1, 2, 2, 3, 4, 7] print(bisect.bisect(c, 5)) # 5 bisect\u4f1a\u627e\u5230\u7b2c\u4e00\u4e2a4,\u5e76\u628a\u65b0\u76845\u63d2\u5165\u5b83\u540e\u9762 bisect.insort(c, 5) print(bisect.bisect(c, 6)) # 6 bisect\u4f1a\u627e\u5230\u7b2c\u4e00\u4e2a5,\u5e76\u628a\u65b0\u76846\u63d2\u5165\u5b83\u540e\u9762 bisect.insort(c, 6) print(c) # [1, 2, 2, 3, 4, 5, 6, 7] 1.4 \u5b57\u5178\uff08dictionary\uff09 \u5b57\u5178(dict)\u662f\u4f7f\u7528\u952e-\u503c\uff08key-value\uff09\u5b58\u50a8\uff0c\u952e\u662f\u4e0d\u53ef\u53d8\u5bf9\u8c61\uff0c\u4e14\u4e0d\u5141\u8bb8\u91cd\u590d\u3002 dict\uff08\u5b57\u5178\uff09\u66f4\u4e3a\u5e38\u7528\u7684\u540d\u5b57\u662f\u54c8\u5e0c\u8868\u6216\u8005\u662f\u5173\u8054\u6570\u7ec4\u3002 \u5b57\u5178\u662f\u62e5\u6709\u7075\u6d3b\u5c3a\u5bf8\u7684\u952e\u503c\u5bf9\u96c6\u5408\uff0c\u4e0d\u662f\u901a\u8fc7\u4f4d\u7f6e\u8fdb\u884c\u7d22\u5f15\uff0c\u5176\u4e2d\u952e\u548c\u503c\u90fd\u662fPython\u5bf9\u8c61\u3002\u7528\u5927\u62ec\u53f7{}\u662f\u521b\u5efa\u5b57\u5178\u7684\u4e00\u79cd\u65b9\u5f0f\uff0c\u5728\u5b57\u5178\u4e2d\u7528\u9017\u53f7\u5c06\u952e\u503c\u5bf9\u5206\u9694\u3002 \u5b57\u5178\u5e38\u7528\u65b9\u6cd5 \u65b9\u6cd5\u540d\u79f0 \u4f5c\u7528 a.items() \u8fd4\u56dea\u4e2d\u6240\u6709\u952e\u503c\u5bf9 a.values() \u8fd4\u56dea\u4e2d\u6240\u6709\u503c a.keys() \u8fd4\u56dea\u4e2d\u6240\u6709\u952e a.get() \u901a\u8fc7\u952e\u6765\u67e5\u503c\uff0c\u8fd4\u56de\u5bf9\u5e94\u7684\u503c a.clear() \u6e05\u7a7a\u5b57\u5178a\u7684\u503c a.setdefault \u901a\u8fc7\u952e\u503c\u6765\u67e5\u627e\u503c\uff0c\u627e\u4e0d\u5230\u5219\u63d2\u5165 a.update() \u952e\u548c\u503c\u66f4\u65b0\u5230\u65b0\u7684\u5b57\u5178 a.pop() \u5220\u9664\u6307\u5b9a\u4f4d\u7f6e\u7684\u5143\u7d20 \u751f\u6210\u4e00\u4e2a\u5b57\u5178 dict_a = {'name': 'Ming', 'id': 1001, 'age': 35} print(type(dict_a)) # <class 'dict'> dict_b = dict(city='Shanghai', strict='Xuhui', zip='200000') print(type(dict_b)) # <class 'dict'> \u901a\u8fc7\u952e\u67e5\u8be2\u503c\uff0c\u67e5\u8be2\u4e0d\u5230\u629b\u51fa\u5f02\u5e38 print(dict_a['name']) # Ming print(dict_a['Name']) # Traceback (most recent call last): # File \"<stdin>\", line 1, in <module> # KeyError: 'Name' \u63d2\u5165\u65b0\u7684\u952e\u503c\u5bf9 dict_a['city'] = 'Chengdu' print(dict_a) # {'name': 'Ming', 'id': 1001, 'city': 'Chengdu'} \u5220\u9664\u67d0\u4e2a\u952e\u503c\u5bf9\u3002pop\u65b9\u6cd5\u4f1a\u5728\u5220\u9664\u7684\u540c\u65f6\u8fd4\u56de\u88ab\u5220\u7684\u503c\uff0c\u5e76\u5220\u9664\u952e\u3002 dict_a.pop('city') # Chengdu print(dict_a) # {'name': 'Ming', 'id': 1001} \u53e6\u4e00\u79cd\u65b9\u5f0f\u5220\u9664\u67d0\u4e2a\u952e\u503c\u5bf9 del dict_a['age'] # Traceback (most recent call last): # File \"<stdin>\", line 1, in <module> # KeyError: 'age' del dict_a['id'] print(dict_a) # {'name': 'Ming'} \u5224\u65ad\u952e\u662f\u5426\u5b58\u5728 dict_a[23] = 'Hello World' print(dict_a) # {'name': 'Ming', 23: 'Hello World'} print(23 in dict_a) # True print(35 in dict_a) # False \u901a\u8fc7\u952e\u67e5\u8be2\u503c\u7684\u53e6\u4e00\u79cd\u65b9\u5f0f\uff0c\u67e5\u8be2\u4e0d\u5230\u4e0d\u629b\u5f02\u5e38 dict_a.get('hai') dict_a.get('hai', 1) # 1 dict_a.get('name', 1) # Ming dict_a['hai'] # Traceback (most recent call last): # File \"<stdin>\", line 1, in <module> # KeyError: 'hai' \u901a\u8fc7\u952e\u67e5\u8be2\u503c\u7684\u53e6\u4e00\u79cd\u65b9\u5f0f\uff0c\u67e5\u8be2\u4e0d\u5230\u5219\u6dfb\u52a0 dict_a.setdefault('name') # Ming dict_a.setdefault('hai', 1) # 1 print(dict_a) # {'name': 'Ming', 23: 'Hello World', 'hai': 1} dict_a.setdefault('go') print(dict_a) # {'name': 'Ming', 23: 'Hello World', 'hai': 1, 'go': None} \u8bfb\u53d6\u5b57\u5178\u6240\u6709\u952e\u503c\u5bf9\uff0c\u8fd4\u56de\u7684\u662f\u5217\u8868\u5f62\u5f0f print(dict_a.items()) # dict_items([('name', 'Ming'), (23, 'Hello World'), ('hai', 1), ('go', None)]) \u8bfb\u53d6\u5b57\u5178\u7684\u952e print(dict_a.keys()) # dict_keys(['name', 23, 'hai', 'go']) \u8bfb\u53d6\u5b57\u5178\u7684\u503c print(dict_a.values()) # dict_values(['Ming', 'Hello World', 1, None]) \u5c06\u5b57\u5178\u503c\u8f6c\u5316\u6210\u5217\u8868 print(list(dict_a.values())) # ['Ming', 'Hello World', 1, None] for key in dict_a.keys(): print(dict_a[key]) # Ming # Hello World # 1 # None \u6e05\u7a7a\u5b57\u5178 dict_a.clear() print(dict_a) # {} print(len(dict_a)) # 0 \u5bf9\u4e8e\u4efb\u4f55\u539f\u5b57\u5178\u4e2d\u5df2\u7ecf\u5b58\u5728\u7684\u952e\uff0c\u5982\u679c\u4f20\u7ed9update\u65b9\u6cd5\u7684\u6570\u636e\u4e5f\u542b\u6709\u76f8\u540c\u7684\u952e\uff0c\u5219\u5b83\u7684\u503c\u5c06\u4f1a\u88ab\u8986\u76d6\u3002 dict_a = {'name': 'Ming', 'id': 1001, 'age': 35} dict_b = dict(city='Shanghai', id=2001, zip='200000') dict_a.update(dict_b) print(dict_a) # {'name': 'Ming', 'id': 2001, 'age': 35, 'city': 'Shanghai', 'zip': '200000'} \u4ece\u5217\u8868\u751f\u6210\u5b57\u5178 \u5b57\u5178\u672c\u8d28\u4e0a\u662f2-\u5143\u7ec4\uff08\u542b\u67092\u4e2a\u5143\u7d20\u7684\u5143\u7ec4\uff09\u7684\u96c6\u5408\uff0c\u5b57\u5178\u662f\u53ef\u4ee5\u63a5\u53d7\u4e00\u4e2a2-\u5143\u7ec4\u7684\u5217\u8868\u4f5c\u4e3a\u53c2\u6570\u7684\u3002 # \u65b9\u6cd51 mapping = {} key_list = list(range(5)) value_list = list(reversed(range(5))) for key, value in zip(key_list, value_list): mapping[key] = value print(mapping) # {0: 4, 1: 3, 2: 2, 3: 1, 4: 0} # \u65b9\u6cd52\u3002 mapping = {} key_list = list(range(5)) value_list = list(reversed(range(5))) mapping = dict(zip(key_list, value_list)) print(mapping) # {0: 4, 1: 3, 2: 2, 3: 1, 4: 0} \u5b57\u5178\u9ed8\u8ba4\u503c \u4e0b\u9762\u7684\u4f8b\u5b50\uff0c\u5b9e\u73b0\u4e86\u5c06\u4e00\u4e2a\u5355\u8bcd\u7ec4\u6210\u7684\u5217\u8868\uff0c\u8f6c\u6362\u6210\u5355\u8bcd\u9996\u5b57\u6bcd\u548c\u5355\u8bcd\u4e3a\u952e\u503c\u5bf9\u7684\u5b57\u5178\u3002 \u5148\u7528\u4f20\u7edf\u65b9\u6cd5\u5b9e\u73b0\uff0c\u518d\u7528\u5b57\u5178\u7684setdefault\u65b9\u6cd5\u8fdb\u884c\u6539\u5199\u3002 words = ['apple', 'bat', 'bar', 'atom', 'book'] by_letter = {} for word in words: letter = word[0] # word[0]\u628a\u5217\u8868words\u7684\u6bcf\u4e2a\u5143\u7d20\u5217\u8868\u5316\uff0c\u5e76\u53d6\u9996\u5b57\u6bcd\u3002\u8f93\u51fa\u7684\u662fa, b, b, a, b\u8fd95\u4e2a\u5217\u8868\u5143\u7d20\u7684\u9996\u5b57\u6bcd if letter not in by_letter: # \u751f\u6210\u7b2c\u4e00\u4e2a\u952e\u503c\u5bf9 print(letter) by_letter[letter] = [word] # \u5bf9\u6bd4[word]\u548cword[]\u7684\u7528\u6cd5 print(by_letter) # a # {'a': ['apple']} # b # {'a': ['apple'], 'b': ['bat']} else: # append\u5176\u4ed6\u952e\u503c\u5bf9 print(letter) by_letter[letter].append(word) print(by_letter) # b # {'a': ['apple'], 'b': ['bat', 'bar']} # a # {'a': ['apple', 'atom'], 'b': ['bat', 'bar']} # b # {'a': ['apple', 'atom'], 'b': ['bat', 'bar', 'book']} print(by_letter) # {'a': ['apple', 'atom'], 'b': ['bat', 'bar', 'book']} \u7528\u5b57\u5178\u7684setdefault\u65b9\u6cd5\uff0c\u4e0a\u8ff0\u7684for\u5faa\u73af\u8bed\u53e5\u53ef\u4ee5\u88ab\u5199\u4e3a\u3002 words = ['apple', 'bat', 'bar', 'atom', 'book'] by_letter = {} for word in words: letter = word[0] # word[0]\u7684\u8f93\u51fa\u4f9d\u7136\u662f5\u4e2a\u5217\u8868\u5143\u7d20\u7684\u9996\u5b57\u6bcda, b, b, a, b by_letter.setdefault(letter, ['a']).append(word) # \u5982\u679cletter\u4e0d\u5728[]\u5219\u901a\u8fc7append\u6dfb\u52a0word print(by_letter) # {'a': ['apple', 'atom'], 'b': ['bat', 'bar', 'book']} \u5982\u679c\u6539\u4e3a by_letter.setdefault(letter, ['a']).append(word) \uff0c\u5219\u8f93\u51fa by_letter \u662f {'a': ['a', 'apple', 'atom'], 'b': ['a', 'bat', 'bar', 'book']} \u3002 \u4f53\u4f1asetdefault()\u7684\u6ce8\u91ca\u201cInsert key with a value of default if key is not in the dictionary. Return the value for key if key is in the dictionary, else default.\u201d \u901a\u8fc7defaultdict\u7c7b\u4f7f\u5f97\u4e0a\u8ff0\u76ee\u7684\u5b9e\u73b0\u66f4\u4e3a\u7b80\u5355\u3002 from collections import defaultdict by_letter = defaultdict(list) # list\u662f\u5185\u7f6e\u7684\u53ef\u53d8\u5e8f\u5217(Built-in mutable sequence) print(dict(by_letter)) # {} for word in words: by_letter[word[0]].append(word) print(by_letter) # defaultdict(<class 'list'>, {'a': ['apple', 'atom'], 'b': ['bat', 'bar', 'book']}) print(dict(by_letter)) # {'a': ['apple', 'atom'], 'b': ['bat', 'bar', 'book']} \u6709\u6548\u7684\u5b57\u5178\u952e\u7c7b\u578b \u5c3d\u7ba1\u5b57\u5178\u7684\u503c\u53ef\u4ee5\u662f\u4efb\u4f55Python\u5bf9\u8c61\uff0c\u4f46\u952e\u5fc5\u987b\u662f\u4e0d\u53ef\u53d8\u7684\u5bf9\u8c61\uff0c\u6bd4\u5982\u6807\u91cf\u7c7b\u578b\uff08\u6574\u6570\u3001\u6d6e\u70b9\u6570\u3001\u5b57\u7b26\u4e32\uff09\u6216\u5143\u7ec4\uff08\u4e14\u5143\u7ec4\u5185\u5bf9\u8c61\u4e5f\u5fc5\u987b\u662f\u4e0d\u53ef\u53d8\u5bf9\u8c61\uff09\u3002 \u901a\u8fc7hash\u51fd\u6570\u53ef\u4ee5\u68c0\u67e5\u4e00\u4e2a\u5bf9\u8c61\u662f\u5426\u53ef\u4ee5\u54c8\u5e0c\u5316\uff08\u5373\u662f\u5426\u53ef\u4ee5\u7528\u4f5c\u5b57\u5178\u7684\u952e\uff09\uff0c\u672f\u8bed\u53eb\u4f5c\u54c8\u5e0c\u5316\u3002 print(hash('string')) # -4368784820203065343 print(hash((1, 2, (2, 3)))) # -9209053662355515447 print(hash((1, 2, [2, 3]))) # TypeError: unhashable type: 'list' print(hash((1, 2, tuple([2, 3])))) # -9209053662355515447 \u4e3a\u4e86\u5c06\u5217\u8868\u4f5c\u4e3a\u952e\uff0c\u4e00\u79cd\u65b9\u5f0f\u5c31\u662f\u5c06\u5176\u8f6c\u6362\u4e3a\u5143\u7ec4 1.5 \u96c6\u5408\uff08set\uff09 \u96c6\u5408(set)\u662f\u4e00\u79cd\u65e0\u5e8f\u4e14\u5143\u7d20\u552f\u4e00\u7684\u5e8f\u5217\u3002 \u548c\u5b57\u5178\u7c7b\u4f3c\uff0c\u96c6\u5408\u7684\u5143\u7d20\u662f\u4e0d\u53ef\u53d8\u7684\u3002\u53ef\u4ee5\u8ba4\u4e3a\u96c6\u5408\u4e5f\u50cf\u5b57\u5178\uff0c\u4f46\u662f\u53ea\u6709\u952e\u6ca1\u6709\u503c\u3002\u57fa\u672c\u529f\u80fd\u662f\u8fdb\u884c\u6210\u5458\u5173\u7cfb\u6d4b\u8bd5\u548c\u5220\u9664\u91cd\u590d\u5143\u7d20\u3002\u6240\u4ee5\u96c6\u5408\u53e6\u4e00\u4e2a\u7528\u9014\u662f\u53bb\u91cd\u590d\u3002 \u96c6\u5408\u53ef\u4ee5\u6709\u4e24\u79cd\u521b\u5efa\u65b9\u5f0f\uff1a\u901a\u8fc7set()\u51fd\u6570\u6216\u8005{}\u6765\u521b\u5efa \u96c6\u5408\u4e0d\u5c5e\u4e8e\u5e8f\u5217\u7c7b\u6570\u636e\uff0c \u96c6\u5408\u4e0d\u652f\u6301\u901a\u8fc7\u7d22\u5f15\u8bbf\u95ee\u6307\u5b9a\u5143\u7d20\uff0c\u4f46\u53ef\u4ee5\u589e\u52a0\u548c\u5220\u9664\u5143\u7d20\u3002 \u96c6\u5408\u652f\u6301\u6570\u5b66\u4e0a\u7684\u96c6\u5408\u64cd\u4f5c\uff0c\u4f8b\u5982\u5e76\u96c6\u3001\u4ea4\u96c6\u3001\u5dee\u96c6\u3001\u5bf9\u79f0\u5dee\u96c6\u3002 \u65b9\u6cd5\u540d\u79f0 \u8bf4\u660e add() \u4e3a\u96c6\u5408\u6dfb\u52a0\u5143\u7d20 update() \u7ed9\u96c6\u5408\u6dfb\u52a0\u5143\u7d20 clear() \u79fb\u9664\u96c6\u5408\u4e2d\u7684\u6240\u6709\u5143\u7d20 copy() \u62f7\u8d1d\u4e00\u4e2a\u96c6\u5408 remove() \u79fb\u9664\u6307\u5b9a\u5143\u7d20 pop() \u968f\u673a\u79fb\u9664\u5143\u7d20 discard() \u5220\u9664\u96c6\u5408\u4e2d\u6307\u5b9a\u7684\u5143\u7d20 < \u6216\u8005issubset() \u5224\u65ad\u6307\u5b9a\u96c6\u5408\u662f\u5426\u4e3a\u8be5\u65b9\u6cd5\u53c2\u6570\u96c6\u5408\u7684\u5b50\u96c6 | \u6216\u8005union() \u8fd4\u56de\u4e24\u4e2a\u96c6\u5408\u7684\u5e76\u96c6 & \u6216\u8005intersection() \u8fd4\u56de\u96c6\u5408\u7684\u4ea4\u96c6 intersection_update() \u8fd4\u56de\u96c6\u5408\u7684\u4ea4\u96c6 - \u6216\u8005difference() \u8fd4\u56de\u591a\u4e2a\u96c6\u5408\u7684\u5dee\u96c6 difference_update() \u79fb\u9664\u96c6\u5408\u4e2d\u7684\u5143\u7d20\uff0c\u8be5\u5143\u7d20\u5728\u6307\u5b9a\u7684\u96c6\u5408\u4e5f\u5b58\u5728 ^ \u6216\u8005symmetric_difference() \u8fd4\u56de\u4e24\u4e2a\u96c6\u5408\u4e2d\u4e0d\u91cd\u590d\u7684\u5143\u7d20\u96c6\u5408(\u4e24\u96c6\u5408\u9664\u53bb\u4ea4\u96c6\u90e8\u5206\u7684\u5143\u7d20) symmetric_difference_update() \u79fb\u9664\u5f53\u524d\u96c6\u5408\u4e2d\u5728\u53e6\u5916\u4e00\u4e2a\u6307\u5b9a\u96c6\u5408\u76f8\u540c\u7684\u5143\u7d20\uff0c\u5e76\u5c06\u53e6\u5916\u4e00\u4e2a\u6307\u5b9a\u96c6\u5408\u4e2d\u4e0d\u540c\u7684\u5143\u7d20\u63d2\u5165\u5230\u5f53\u524d\u96c6\u5408\u4e2d isdisjoint() \u5224\u65ad\u4e24\u4e2a\u96c6\u5408\u662f\u5426\u5305\u542b\u76f8\u540c\u7684\u5143\u7d20\uff0c\u5982\u679c\u6ca1\u6709\u8fd4\u56de True\uff0c\u5426\u5219\u8fd4\u56de False issuperset() \u5224\u65ad\u8be5\u65b9\u6cd5\u7684\u53c2\u6570\u96c6\u5408\u662f\u5426\u4e3a\u6307\u5b9a\u96c6\u5408\u7684\u5b50\u96c6 \u4e3e\u4f8b a = {'a', 'b', 'c', 1, 2} b = {1, 'c', 'd'} \u5e76\u96c6(a\u548cb\u4e2d\u7684\u6240\u6709\u4e0d\u540c\u5143\u7d20) print(a.union(b)) # {'c', 1, 2, 'd', 'a', 'b'} print(a | b) # {'c', 1, 2, 'd', 'a', 'b'} \u4ea4\u96c6(a\u3001b\u4e2d\u540c\u65f6\u5305\u542b\u7684\u5143\u7d20) print(a.intersection(b)) # {'c', 1} print(a & b) # {'c', 1} \u5c06a\u7684\u5185\u5bb9\u8bbe\u7f6e\u4e3aa\u548cb\u7684\u4ea4\u96c6 a = {'a', 'b', 'c', 1, 2} b = {1, 'c', 'd'} a.intersection_update(b) print(a) # {1, 'c'} \u5728a\u4e0d\u5728b\u7684\u5143\u7d20 print(a.difference(b)) # {'a', 2, 'b'} print(a - b) # {2, 'a', 'b'} \u5c06a\u7684\u5185\u5bb9\u8bbe\u4e3a\u5728a\u4e0d\u5728b\u7684\u5143\u7d20 a = {'a', 'b', 'c', 1, 2} b = {1, 'c', 'd'} a.difference_update(b) print(a) # {2, 'b', 'a'} a = {'a', 'b', 'c', 1, 2} b = {1, 'c', 'd'} a -= b print(a) # {2, 'a', 'b'} \u5c06\u5143\u7d20\u52a0\u5165\u96c6\u5408a a.add(7) print(a) # {1, 2, 'c', 7, 'a', 'b'} \u6bcf\u6b21\u8f93\u51fa\u7684\u987a\u5e8f\u662f\u4e0d\u4e00\u6837\u7684 \u4ece\u96c6\u5408a\u79fb\u9664\u67d0\u4e2a\u5143\u7d20 a.remove(7) print(a) # {1, 2, 'c', 'a', 'b'} \u5982\u679ca\u88ab\u6e05\u7a7a\uff0c\u5219\u62a5\u9519 KeyError: 7 \u6240\u6709\u5728a\u6216b\u4e2d\uff0c\u4f46\u4e0d\u662f\u540c\u65f6\u5728a\u3001b\u4e2d\u7684\u5143\u7d20 print(a.symmetric_difference(b)) # {2, 'd', 'b', 'a'} print(a ^ b) # {2, 'd', 'b', 'a'} \u5c06a\u7684\u5185\u5bb9\u8bbe\u4e3a\u6240\u6709\u5728a\u6216b\u4e2d\uff0c\u4f46\u4e0d\u662f\u540c\u65f6\u5728a\u3001b\u4e2d\u7684\u5143\u7d20 a = {'a', 'b', 'c', 1, 2} b = {1, 'c', 'd'} a.symmetric_difference_update(b) print(a) # {'a', 2, 'd', 'b'} a = {'a', 'b', 'c', 1, 2} b = {1, 'c', 'd'} a ^= b print(a) # {2, 'd', 'a', 'b'} \u5982\u679ca\u5305\u542b\u4e8eb\uff0c\u8fd4\u56deTure print(a.issubset(b)) # False \u5c06a\u7684\u5185\u5bb9\u8bbe\u7f6e\u4e3aa\u548cb\u7684\u5e76\u96c6 print(a) # {'a', 2, 'd', 'b'} a = {'a', 'b', 'c', 1, 2} a.update(b) print(a) # {1, 2, 'a', 'b', 'd', 'c'} \u79fb\u9664\u4efb\u610f\u5143\u7d20\uff0c\u5982\u679c\u96c6\u5408\u662f\u7a7a\u7684\uff0c\u629b\u51fakeyError a.pop() # \u968f\u673a\u79fb\u9664\u67d0\u4e2a\u5143\u7d20\uff0c\u6ca1\u6709\u8f93\u5165\u53d8\u91cf\uff0c\u5982\u679c\u96c6\u5408\u662f\u7a7a\u7684\uff0c\u629b\u51faKeyError: 'pop from an empty set' print(a) # {2, 1, 'd', 'b', 'a'} \u5c06\u96c6\u5408\u91cd\u7f6e\u4e3a\u7a7a\uff0c\u6e05\u7a7a\u6240\u6709\u5143\u7d20 a.clear() print(a) # set() \u96c6\u5408\u7684\u5143\u7d20\u5fc5\u987b\u662f\u4e0d\u53ef\u53d8\u7684\uff0c\u5982\u679c\u60f3\u8981\u5305\u542b\u5217\u8868\u578b\u7684\u5143\u7d20\uff0c\u5fc5\u987b\u5148\u8f6c\u6362\u4e3a\u5143\u7ec4 my_data1 = [1, 2, 3, 4] my_data2 = [3, 4, 5, 6] my_set = {tuple(my_data1), tuple(my_data2)} print(my_set) # {(1, 2, 3, 4), (3, 4, 5, 6)} 1.6 \u5143\u7ec4\uff08tuple\uff09 Python \u7684\u5143\u7ec4\u4e0e\u5217\u8868\u7c7b\u4f3c\uff0c\u4e0d\u540c\u4e4b\u5904\u5728\u4e8e\u5143\u7ec4\u7684\u5143\u7d20\u4e0d\u80fd\u4fee\u6539\u3002 \u5143\u7ec4\u4f7f\u7528\u5c0f\u62ec\u53f7( )\uff0c\u5217\u8868\u4f7f\u7528\u65b9\u62ec\u53f7[ ]\u3002 \u5143\u7ec4\u4e2d\u53ea\u5305\u542b\u4e00\u4e2a\u5143\u7d20\u65f6\uff0c\u9700\u8981\u5728\u5143\u7d20\u540e\u9762\u6dfb\u52a0\u9017\u53f7 \uff0c\u5426\u5219\u62ec\u53f7\u4f1a\u88ab\u5f53\u4f5c\u8fd0\u7b97\u7b26\u4f7f\u7528\u3002 \u5143\u7ec4\u53ef\u4ee5\u4f7f\u7528\u4e0b\u6807\u7d22\u5f15\u6765\u8bbf\u95ee\u5143\u7ec4\u4e2d\u7684\u503c\u3002 \u5143\u7ec4\u4e2d\u7684\u5143\u7d20\u503c\u662f\u4e0d\u5141\u8bb8\u4fee\u6539\u7684\uff0c\u4f46\u6211\u4eec\u53ef\u4ee5\u5bf9\u5143\u7ec4\u8fdb\u884c\u8fde\u63a5\u7ec4\u5408\u3002 \u5143\u7ec4\u4e2d\u7684\u5143\u7d20\u503c\u662f\u4e0d\u5141\u8bb8\u5220\u9664\u7684\uff0c\u4f46\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528del\u8bed\u53e5\u6765\u5220\u9664\u6574\u4e2a\u5143\u7ec4\u3002 # \u6b64\u5904\u62ec\u53f7\u88ab\u89e3\u6790\u4e3a\u8fd0\u7b97\u7b26\uff0c\u9700\u8981\u5728\u540e\u9762\u52a0\u4e0a\u9017\u53f7\u624d\u4f1a\u88ab\u89e3\u91ca\u4e3a\u5143\u7ec4 tup1 = (10) print(type(tup1)) # <class 'int'> tup1 = (10,) print(type(tup1)) # <class 'tuple'> \u521b\u5efa\u5143\u7ec4\u6700\u7b80\u5355\u7684\u529e\u6cd5\u5c31\u662f\u7528\u9017\u53f7\u5206\u9694\u5e8f\u5217\u503c\u3002\u5143\u7ec4\u5bf9\u6570\u636e\u7c7b\u578b\u6ca1\u6709\u4e00\u81f4\u6027\u8981\u6c42\u3002 tup = 4, 5, 6 print(tup) # (4, 5, 6) nested_tup = (4, 5, 6), (7, 8) print(nested_tup) # # ((4, 5, 6), (7, 8)) tup = ('a', 'b', {'one': 1}) print(type(tup)) # <class 'tuple'> \u4f7f\u7528\u52a0\u53f7\uff08+\uff09\u8fdb\u884c\u5143\u7ec4\u8fde\u63a5\u5408\u5e76\u3002 tup = tuple((4, None, 'fool') + (6, 0) + ('bar',)) print(tup) # (4, None, 'fool', 6, 0, 'bar') \u5143\u7ec4\u7684\u4e0d\u53ef\u53d8\u6307\u7684\u662f\u5143\u7ec4\u6240\u6307\u5411\u7684\u5185\u5b58\u4e2d\u7684\u5185\u5bb9\u4e0d\u53ef\u53d8\u3002 tup = ('h', 'e', 'l', 'l', 'o') print(id(tup)) # 139820353350208 tup = (1, 2, 3, 4, 5) print(id(tup)) # 139820353298896 tup[0] = 'x' # Traceback (most recent call last): # File \"<stdin>\", line 1, in <module> # TypeError: 'tuple' object does not support item assignment \u5c06\u5143\u7ec4\u4e58\u4ee5\u6574\u6570\uff0c\u5219\u4f1a\u548c\u5217\u8868\u4e00\u6837\uff0c\u751f\u6210\u542b\u6709\u591a\u4efd\u62f7\u8d1d\u7684\u5143\u7ec4\u3002\u5bf9\u8c61\u81ea\u8eab\u5e76\u6ca1\u6709\u590d\u5236\uff0c\u53ea\u662f\u6307\u5411\u5b83\u4eec\u7684\u5f15\u7528\u8fdb\u884c\u4e86\u590d\u5236\u3002 tup = tuple(('fool', 'bar') * 4) print(tup) # ('fool', 'bar', 'fool', 'bar', 'fool', 'bar', 'fool', 'bar') \u5982\u679c\u5143\u7ec4\u4e2d\u7684\u4e00\u4e2a\u5bf9\u8c61\u662f\u53ef\u53d8\u7684\uff0c\u4f8b\u5982\u5217\u8868\uff0c\u4f60\u53ef\u4ee5\u5728\u5b83\u5185\u90e8\u8fdb\u884c\u4fee\u6539 tup = tuple(['foo', [4, 5, 6], True]) tup[1].append(0) print(tup) # ('foo', [4, 5, 6, 0], True) tup[1].append([9]) print(tup) # ('foo', [4, 5, 6, 0, [9]], True) \u4f7f\u7528tuple\u51fd\u6570\u5c06\u4efb\u610f\u5e8f\u5217\u6216\u8fed\u4ee3\u5668\u8f6c\u6362\u4e3a\u5143\u7ec4 tup = tuple([4, 5, 6]) print(tup) # (4, 5, 6) tup = tuple('string') print(tup) # ('s', 't', 'r', 'i', 'n', 'g') print(tup[2]) # r # \u5143\u7ec4\u7684\u5143\u7d20\u53ef\u4ee5\u901a\u8fc7\u4e2d\u62ec\u53f7[]\u6765\u83b7\u53d6 \u5982\u679c\u8981\u5c06\u5143\u7ec4\u578b\u7684\u8868\u8fbe\u5f0f\u8d4b\u503c\u7ed9\u53d8\u91cf\uff0cPython\u4f1a\u5bf9\u7b49\u53f7\u53f3\u8fb9\u7684\u503c\u8fdb\u884c \u62c6\u5305 tup = (9, 5, (8, 7)) a, b, c = tup print(a) # 9 print(b) # 5 print(c) # (8, 7) a, b, (c, d) = tup print(a) # 9 print(b) # 5 print(c) # 8 print(d) # 7 tup = (9, 5, (8, 7)) a, b, c = tup c, a = a, c # \u5229\u7528\u62c6\u5305\u5b9e\u73b0\u4ea4\u6362 print(a) # (8, 7) print(b) # 5 print(c) # 9 \u5229\u7528\u62c6\u5305\u5b9e\u73b0\u904d\u5386\u5143\u7ec4\u6216\u5217\u8868\u7ec4\u6210\u7684\u5e8f\u5217 seq = [(1, 2, 3), (4, 5, 6), (7, 8, 9)] for a, b, c in seq: print('a={0}, b={0}, c={0}'.format(a, b, c)) # \u5217\u8868\u6bcf\u4e2a\u5143\u7d20\u7684\u53d6\u503c\u987a\u5e8f # a=1, b=1, c=1 # a=4, b=4, c=4 # a=7, b=7, c=7 print('a={0}, b={1}, c={2}'.format(a, b, c)) # a=1, b=2, c=3 # a=4, b=5, c=6 # a=7, b=8, c=9 print('a={2}, b={0}, c={1}'.format(a, b, c)) # a=3, b=1, c=2 # a=6, b=4, c=5 # a=9, b=7, c=8 \u5143\u7ec4\u62c6\u5305\u529f\u80fd\u8fd8\u5305\u62ec\u7279\u6b8a\u7684\u8bed\u6cd5*rest\u3002\u5f88\u591aPython\u7f16\u7a0b\u8005\u4f1a\u4f7f\u7528\u4e0b\u5212\u7ebf\uff08_\uff09\u6765\u8868\u793a\u4e0d\u60f3\u8981\u7684\u53d8\u91cf values = 1, 2, 3, 4, 5 a, b, *rest = values print(a) # 1 print(b) # 2 print(*rest) # 3 4 5 a, b, *_ = values print(*_) # 3 4 5 2. \u52a8\u6001\u5f15\u7528\u3001\u5f3a\u7c7b\u578b \u661f\u53f7 * \u7684\u53c2\u6570\u4f1a\u4ee5\u5143\u7ec4(tuple)\u7684\u5f62\u5f0f\u5bfc\u5165\uff0c\u5b58\u653e\u6240\u6709\u672a\u547d\u540d\u7684\u53d8\u91cf\u53c2\u6570 def printinfo(arg1, *vartuple): print(\"\u8f93\u51fa\u4efb\u4f55\u4f20\u5165\u7684\u53c2\u6570: \") print(arg1) print(vartuple) for var in vartuple: print(var) return printinfo(10) # 10 # () printinfo(70, 60, 50) # 70 # (60, 50) # 60 # 50 \u4e24\u4e2a\u661f\u53f7 ** \u7684\u53c2\u6570\u4f1a\u4ee5\u5b57\u5178\u7684\u5f62\u5f0f\u5bfc\u5165 def printinfo(arg1, **vardict): print(\"\u8f93\u51fa\u4efb\u4f55\u4f20\u5165\u7684\u53c2\u6570: \") print(arg1) print(vardict) printinfo(1, a=2, b=3) # 1 # {'a': 2, 'b': 3} \u5b57\u5178\u683c\u5f0f\u8f93\u51fa Python\u4e2d\u7684\u5bf9\u8c61\u5f15\u7528\u5e76\u4e0d\u6d89\u53ca\u7c7b\u578b\u3002\u53d8\u91cf\u5bf9\u4e8e\u5bf9\u8c61\u6765\u8bf4\u53ea\u662f\u7279\u5b9a\u547d\u540d\u7a7a\u95f4\u4e2d\u7684\u540d\u79f0\uff1b\u7c7b\u578b\u4fe1\u606f\u662f\u5b58\u50a8\u5728\u5bf9\u8c61\u81ea\u8eab\u4e4b\u4e2d\u3002 a = 5 print(type(a)) # <class 'int'> a = 'foo' print(type(a)) # <class 'str'> Python\u662f\u5f3a\u7c7b\u578b\u8bed\u8a00\uff0c\u6240\u6709\u7684\u5bf9\u8c61\u90fd\u62e5\u6709\u4e00\u4e2a\u6307\u5b9a\u7684\u7c7b\u578b\uff08\u6216\u7c7b\uff09\uff0c\u9690\u5f0f\u7684\u8f6c\u6362\u53ea\u5728\u67d0\u4e9b\u7279\u5b9a\u3001\u660e\u663e\u7684\u60c5\u51b5\u4e0b\u53d1\u751f\u3002 a = 4.5 b = 2 print('a is {0}, b is {1}'.format(type(a), type(b))) # a is <class 'float'>, b is <class 'int'> \u5b57\u4e32\u683c\u5f0f\u5316\uff0c\u7528\u4e8e\u540e\u7eed\u8bbf\u95ee print(a / b) # 2.25 \u4f7f\u7528isinstance\u51fd\u6570\u6765\u68c0\u67e5\u4e00\u4e2a\u5bf9\u8c61\u662f\u5426\u662f\u7279\u5b9a\u7c7b\u578b\u7684\u5b9e\u4f8b\u3002isinstance\u63a5\u53d7\u4e00\u4e2a\u5305\u542b\u7c7b\u578b\u7684\u5143\u7ec4\uff0c\u53ef\u4ee5\u68c0\u67e5\u5bf9\u8c61\u7684\u7c7b\u578b\u662f\u5426\u5728\u5143\u7ec4\u4e2d\u7684\u7c7b\u578b\u4e2d\u3002 a = 5 b = 4.5 c = 'foo' print(isinstance(a, int)) # True print(isinstance(b, str)) # False print(isinstance(c, (str, int))) # True print(isinstance(c, (float, int))) # False \u5c5e\u6027\u548c\u65b9\u6cd5\u4e5f\u53ef\u4ee5\u901a\u8fc7getattr\u51fd\u6570\u83b7\u5f97\u3002\u5728\u5176\u4ed6\u7684\u8bed\u8a00\u4e2d\uff0c\u901a\u8fc7\u53d8\u91cf\u540d\u8bbf\u95ee\u5bf9\u8c61\u901a\u5e38\u88ab\u79f0\u4e3a\u201c\u53cd\u5c04\u201d\u3002 b = 'foo' print(getattr(b, 'split')) # <built-in method split of str object at 0x7f1d603ba430> 3. \u4e8c\u5143\u8fd0\u7b97\u7b26\u548c\u6bd4\u8f83\u8fd0\u7b97 \u68c0\u67e5\u4e24\u4e2a\u5f15\u7528\u662f\u5426\u6307\u5411\u540c\u4e00\u4e2a\u5bf9\u8c61\uff0c\u53ef\u4ee5\u4f7f\u7528is\u5173\u952e\u5b57\u3002 is\u548cis not\u7684\u5e38\u7528\u4e4b\u5904\u662f\u68c0\u67e5\u4e00\u4e2a\u53d8\u91cf\u662f\u5426\u4e3aNone\uff0c\u56e0\u4e3aNone\u53ea\u6709\u4e00\u4e2a\u5b9e\u4f8b\u3002 a = [1, 2, 3] b = a c = list(a) # list\u51fd\u6570\u603b\u662f\u521b\u5efa\u4e00\u4e2a\u65b0\u7684Python\u5217\u8868\uff08\u5373\u4e00\u4efd\u62f7\u8d1d\uff09 print(a is b) # True print(a is not c) # True print(a == c) # True d = None print(d is None) # True Python\u4e2d\u7684\u5927\u90e8\u5206\u5bf9\u8c61\uff0c\u4f8b\u5982\u5217\u8868\u3001\u5b57\u5178\u3001NumPy\u6570\u7ec4\u90fd\u662f\u53ef\u53d8\u5bf9\u8c61\uff0c\u5927\u591a\u6570\u7528\u6237\u5b9a\u4e49\u7684\u7c7b\u578b\uff08\u7c7b\uff09\u4e5f\u662f\u53ef\u53d8\u7684\u3002 \u53ef\u53d8\u5bf9\u8c61\u4e2d\u5305\u542b\u7684\u5bf9\u8c61\u548c\u503c\u662f\u53ef\u4ee5\u88ab\u4fee\u6539\u7684\u3002\u8fd8\u6709\u5176\u4ed6\u4e00\u4e9b\u5bf9\u8c61\u662f\u4e0d\u53ef\u53d8\u7684\uff0c\u6bd4\u5982\u5b57\u7b26\u4e32\u3001\u5143\u7ec4\u3002 a_list = ['foo', 2, [4, 5]] # \u5217\u8868 a_list[2] = (3, 4) print(a_list) # ['foo', 2, (3, 4)] a_tuple = (3, 5, (4, 5)) # \u5143\u7ec4 a_tuple[1] = 'four' # TypeError: 'tuple' object does not support item assignment \u4e0d\u53ef\u88ab\u4fee\u6539 print(a_tuple) # (3, 5, (4, 5)) 4. \u6807\u91cf\u7c7b\u578b Python\u6807\u91cf\u7c7b\u578b\uff1aNone, str, bytes, float, bool, int \u6570\u503c\u7c7b\u578b\u3002 \u57fa\u7840\u7684Python\u6570\u5b57\u7c7b\u578b\u5c31\u662fint\u548cfloat\u3002int\u53ef\u4ee5\u5b58\u50a8\u4efb\u610f\u5927\u5c0f\u6570\u5b57\u3002\u6d6e\u70b9\u6570\u5728Python\u4e2d\u7528float\u8868\u793a\uff0c\u6bcf\u4e00\u4e2a\u6d6e\u70b9\u6570\u90fd\u662f\u53cc\u7cbe\u5ea664\u4f4d\u6570\u503c\u3002 ival = 17338971 print(ival ** 6) # 27173145946003847721495630081806010734757321 fval = 17338971.0 print(fval ** 6) # 2.7173145946003847e+43 print(3 / 2) # 1.5 print(3 // 2) # 1 \u5b57\u7b26\u4e32\u3002 Python\u7684\u5b57\u7b26\u4e32\u662f\u4e0d\u53ef\u53d8\u7684\u3002 a = 5.6 s = str(a) print(s) # 5.6 b = 'python' print(list(b)) # ['p', 'y', 't', 'h', 'o', 'n'] print(b[2]) # t b[2] = 'f' # TypeError: 'str' object does not support item assignment \u5b57\u7b26\u4e32\u662f\u4e0d\u53ef\u53d8\u7684 \u53cd\u659c\u6760\u7b26\u53f7\\\u662f\u4e00\u79cd\u8f6c\u4e49\u7b26\u53f7\uff0c\u5b83\u7528\u6765\u6307\u660e\u7279\u6b8a\u7b26\u53f7\u3002 \u5982\u679c\u4f60\u6709\u4e00\u4e2a\u4e0d\u542b\u7279\u6b8a\u7b26\u53f7\u4f46\u542b\u6709\u5927\u91cf\u53cd\u659c\u6760\u7684\u5b57\u7b26\u4e32\u65f6\uff0c\u53ef\u4ee5\u5728\u5b57\u7b26\u4e32\u524d\u9762\u52a0\u4e00\u4e2a\u524d\u7f00\u7b26\u53f7r\uff0c\u8868\u660e\u8fd9\u4e9b\u5b57\u7b26\u662f\u539f\u751f\u5b57\u7b26\uff0cr\u662fraw\u7684\u7b80\u5199\uff0c\u8868\u793a\u539f\u751f\u7684\u3002 x = '12\\\\34' y = r'this\\has\\no\\special\\characters' print(x) # 12\\34 print(y) # this\\has\\no\\special\\characters \u5b57\u7b26\u4e32\u683c\u5f0f\u5316 {0:.2f}\u8868\u793a\u5c06\u7b2c\u4e00\u4e2a\u53c2\u6570\u683c\u5f0f\u5316\u4e3a2\u4f4d\u5c0f\u6570\u7684\u6d6e\u70b9\u6570 {1:s}\u8868\u793a\u5c06\u7b2c\u4e8c\u4e2a\u53c2\u6570\u683c\u5f0f\u5316\u4e3a\u5b57\u7b26\u4e32 {2:d}\u8868\u793a\u5c06\u7b2c\u4e09\u4e2a\u53c2\u6570\u683c\u5f0f\u5316\u6574\u6570 \u53c2\u8003Python\u5b98\u65b9\u6587\u6863 https://docs.python.org/3.6/library/string.html template = '{0:.2f} {1:s} are worth US${2:d}' print(template.format(4.5560, 'Argentine Pesos', 1)) # 4.56 Argentine Pesos are worth US$1 \u65e5\u671f\u548c\u65f6\u95f4 from datetime import datetime, date, time dt = datetime(2011, 10, 29, 20, 30, 21) print(dt.day) # 29 print(dt.minute) # 30 print(dt.date()) # 2011-10-29 print(dt.time()) # 20:30:21 print(dt.replace(minute=0, second=0)) # 2011-10-29 20:00:00 \u5c06\u5206\u949f\u3001\u79d2\u66ff\u6362\u4e3a0 print(datetime.strptime('20091021', '%Y%m%d')) # 2009-10-21 00:00:00 \u5b57\u7b26\u4e32\u53ef\u4ee5\u901a\u8fc7 strptime \u51fd\u6570\u8f6c\u6362\u4e3adatetime\u5bf9\u8c61 dt2 = datetime(2011, 11, 15, 22, 30) delta = dt2 - dt print(delta) # 17 days, 1:59:39 print(dt + delta) # 2011-11-15 22:30:00 range\u51fd\u6570\u8fd4\u56de\u4e00\u4e2a\u8fed\u4ee3\u5668\uff0c\u8be5\u8fed\u4ee3\u5668\u751f\u6210\u4e00\u4e2a\u7b49\u5dee\u6574\u6570\u5e8f\u5217\u3002 print(range(10)) # range(0, 10) print(list(range(10))) # [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] print(list(range(0, 20, 2))) # [0, 2, 4, 6, 8, 10, 12, 14, 16, 18] 5. \u4e09\u5143\u8868\u8fbe\u5f0f value = true-expr if condition else false-expr x = 5 print('non-negative' if x >= 0 else 'negative') # non-negative","title":"Python\u8bed\u8a00\u57fa\u7840"},{"location":"python/Foundation/ch01/#python","text":"","title":"Python\u8bed\u8a00\u57fa\u7840"},{"location":"python/Foundation/ch01/#1-python6","text":"\u6570\u503c\u578b\uff08number\uff09\uff1a\u8868\u793a\u6570\u636e\u7ec4\u6210\u4e3a\u6570\u5b57 \u6574\u578b\uff08int\uff09 \u5341\u8fdb\u5236 \u516b\u8fdb\u5236 \u5341\u516d\u8fdb\u5236 \u6d6e\u70b9\u578b\uff08float\uff09 \u5e03\u5c14\u578b\uff08bool\uff09 \u590d\u6570\u6027\uff08complex\uff09 \u5b57\u7b26\u578b\uff08string\uff09\uff1a\u8868\u793a\u6570\u636e\u7ec4\u6210\u662f\u5b57\u7b26 \u5217\u8868\uff08list\uff09\uff1a\u7528\u6765\u8868\u793a\u4e00\u7ec4\u6709\u5e8f\u5143\u7d20\uff0c\u540e\u671f\u6570\u636e\u53ef\u4ee5\u4fee\u6539 ['A','B','C'] \u5143\u7ec4\uff08tuple\uff09\uff1a\u7528\u6765\u8868\u793a\u4e00\u7ec4\u6709\u5e8f\u5143\u7d20\uff0c\u540e\u671f\u6570\u636e\u4e0d\u53ef\u4fee\u6539 ('A','B','C','1') \u96c6\u5408\uff08set\uff09\uff1a\u4e00\u7ec4\u6570\u636e\u65e0\u5e8f\u4e0d\u91cd\u590d\u5143\u7d20 set([1,2,3,4]) \u5b57\u5178\uff08dictionary\uff09\uff1a\u7528\u952e\u503c\u5bf9\u7684\u5f62\u5f0f\u4fdd\u5b58\u4e00\u7ec4\u5143\u7d20 {'A':7,'B':1,'C':9} \u53ef\u8fed\u4ee3\u5bf9\u8c61\uff08Iterable\uff09 An object capable of returning its members one at a time. Examples of iterables include all sequence types (such as list, str, and tuple) and some non-sequence types like dict, file objects, and objects of any classes you define with an iter() method or with a getitem() method that implements Sequence semantics. \u5e8f\u5217\uff08Sequence\uff09 An iterable which supports efficient element access using integer indices via the getitem() special method and defines a len() method that returns the length of the sequence. Some built-in sequence types are list, str, tuple, and bytes. Note that dict also supports getitem() and len(), but is considered a mapping rather than a sequence because the lookups use arbitrary immutable keys rather than integers. \u8fed\u4ee3\u5668\uff08Iterator\uff09 An object representing a stream of data. Repeated calls to the iterator\u2019s next() method (or passing it to the built-in function next()) return successive items in the stream. When no more data are available a StopIteration exception is raised instead. At this point, the iterator object is exhausted and any further calls to its next() method just raise StopIteration again. Iterators are required to have an iter() method that returns the iterator object itself so every iterator is also iterable and may be used in most places where other iterables are accepted. One notable exception is code which attempts multiple iteration passes. A container object (such as a list) produces a fresh new iterator each time you pass it to the iter() function or use it in a for loop. Attempting this with an iterator will just return the same exhausted iterator object used in the previous iteration pass, making it appear like an empty container. \u53ef\u53d8\u6570\u636e\uff08immutable\uff09\uff1a \u5217\u8868\uff08list\uff09\uff0c\u5b57\u5178\uff08dictionary\uff09\uff0c\u96c6\u5408\uff08set\uff09\u3002 \u4e0d\u53ef\u53d8\u6570\u636e\uff08immutable\uff09\uff1a \u6570\u5b57\uff08number\uff09\uff0c\u5b57\u7b26\uff08string\uff09\uff0c\u5143\u7ec4\uff08tuple\uff09\u3002 \u53ef\u8fed\u4ee3\uff08iterable\uff09\uff1a \u5b57\u7b26\uff08string\uff09\uff0c\u5143\u7ec4\uff08tuple\uff09\uff0c\u5217\u8868\uff08list\uff09\uff0c\u5b57\u5178\uff08dictionary\uff09\uff0c\u96c6\u5408\uff08set\uff09 \u5e8f\u5217\uff1a \u6709\u5e8f\u5e8f\u5217\uff1a\u5b57\u7b26\uff08string\uff09\uff0c\u5143\u7ec4\uff08tuple\uff09\uff0c\u5217\u8868\uff08list\uff09 \u65e0\u5e8f\u5e8f\u5217\uff1a\u5b57\u5178\uff08dictionary\uff09\uff0c\u96c6\u5408\uff08set\uff09","title":"1. Python\u6570\u636e\u7c7b\u578b\uff086\u4e2a\uff09"},{"location":"python/Foundation/ch01/#11-number","text":"\u4f8b\u5b50\uff1a a, b, c, d = 20, 5.5, True, 4+3j print(a, b, c, d) # 20 5.5 True (4+3j) print(type(a), type(b), type(c), type(d)) # <class 'int'> <class 'float'> <class 'bool'> <class 'complex'> Python\u4e5f\u53ef\u4ee5\u8fd9\u6837\u8d4b\u503c\uff1a a = b = c = d = 1 print(a, b, c, d) # 1 1 1 1 \u8fdb\u5236\u8f6c\u6362\uff1a a = -15 print(f'{a}\u5bf9\u5e94\u7684\u5341\u8fdb\u5236\u662f{a}, \u4e8c\u8fdb\u5236\u662f{a:b}, \u516b\u8fdb\u5236\u662f{a:o}, \u5341\u516d\u8fdb\u5236\u662f{a:x}')","title":"1.1 \u6570\u503c\u578b\uff08number\uff09"},{"location":"python/Foundation/ch01/#12-string","text":"\u5355\u5f15\u53f7\uff1a\u5185\u5bb9\u4e2d\u5305\u542b\u5927\u91cf\u53cc\u5f15\u53f7 \u53cc\u5f15\u53f7\uff1a\u5185\u5bb9\u4e2d\u5305\u542b\u5927\u91cf\u5355\u5f15\u53f7 \u4e09\u5f15\u53f7\uff1a\u5185\u5bb9\u4e2d\u540c\u65f6\u5305\u542b\u5355\u53cc\u5f15\u53f7\uff0c\u4e09\u4e2a\u5355\u5f15\u53f7\u6bd4\u8f83\u597d\u3002 a = 'string is \"special\"' b = \"string's value\" c = '''string's value is \"special\"''' d = \"\"\"string's context \"\"\"","title":"1.2 \u5b57\u7b26\u578b\uff08string\uff09"},{"location":"python/Foundation/ch01/#_1","text":"\u5b57\u7b26\u4e32\u5207\u7247 s = 'Python is very good' print(s[2:4]) # th print(s[5]) # n print(s[-1]) # d print(s[-3:-1]) # oo # \u975e\u8fed\u4ee3\u578b\uff0c\u4e0d\u53ef\u4fee\u6539 s[3] = 'b' # Traceback (most recent call last): # File \"<stdin>\", line 1, in <module> # TypeError: 'str' object does not support item assignment \u5b57\u7b26\u4e32\u5408\u5e76 print(s + '!!!') # Python is very good!!! replace( a,b \u5c06\u5b57\u7b26\u4e32\u4e2d\u7684 a \u66ff\u6362\u6210 b print(s.replace('is', 'we')) # Python we very good find(str) : \u8fd4\u56de str \u51fa\u73b0\u7684\u7d22\u5f15\u4f4d\u7f6e\uff0c\u5982\u679c\u627e\u4e0d\u5230\u8be5\u503c\uff0c\u5219 find() \u65b9\u6cd5\u5c06\u8fd4\u56de -1\u3002 print(s.find('a')) # -1 print(s.find('s')) # 8 str.index(a): \u67e5\u627e\u6307\u5b9a\u503c\u7684\u9996\u6b21\u51fa\u73b0\u3002\u5982\u679c\u627e\u4e0d\u5230\u8be5\u503c\uff0cindex() \u65b9\u6cd5\u5c06\u5f15\u53d1\u5f02\u5e38\u3002 print(s.index('s')) # 8 print(s.index('a')) # Traceback (most recent call last): # File \"<stdin>\", line 1, in <module> # ValueError: substring not found str.count(a): \u7edf\u8ba1\u5b57\u7b26\u4e32\u4e2d a \u51fa\u73b0\u7684\u6b21\u6570 print(s.count('a')) # 0 print(s.count('o')) # 3 split: \u5bf9\u5b57\u7b26\u4e32\u8fdb\u884c\u5206\u5272\u3002\u5982\u679c\u53c2\u6570 num \u6709\u6307\u5b9a\u503c\uff0c\u5219\u5206\u9694 num+1 \u4e2a\u5b50\u5b57\u7b26\u4e32\u3002 # \u6309\u7a7a\u683c\u5206\u5272 print(s.split(' ')) # ['Python', 'is', 'very', 'good'] # \u6309\u7a7a\u683c\u5206\u5272\u62102\u4e2a\u5b50\u5b57\u7b26\u4e32 print(s.split(' ', 1)) # ['Python', 'is very good'] strip: \u79fb\u9664\u5b57\u7b26\u4e32\u9996\u5c3e\u6307\u5b9a\u7684\u5b57\u7b26 \u9ed8\u8ba4\u4e3a\u7a7a\u683c\u3002\u8be5\u65b9\u6cd5\u53ea\u80fd\u5220\u9664\u5f00\u5934\u6216\u662f\u7ed3\u5c3e\u7684\u5b57\u7b26\uff0c\u4e0d\u80fd\u5220\u9664\u4e2d\u95f4\u90e8\u5206\u7684\u5b57\u7b26\u3002 print(s) # Python is very good # \u79fb\u9664\u672b\u5c3e\u5b57\u7b26d print(s.strip('d')) # Python is very goo endswith (str): \u5224\u65ad\u5b57\u7b26\u4e32\u662f\u5426\u4ee5 str \u7ed3\u5c3e print(s.endswith('d')) # True print(s.endswith('a')) # False startswith (str): \u5224\u65ad\u5b57\u7b26\u4e32\u662f\u5426\u4ee5 str \u5f00\u5934 print(s.startswith('p')) # False print(s.startswith('P')) # True isdigit \uff1a\u5224\u65ad\u5b57\u7b26\u4e32\u662f\u5426\u5168\u4e3a\u6570\u5b57 d = '+86-123' print(d.isdigit()) # False d = '86123' print(d.isdigit()) # True isalpha \uff1a\u5224\u65ad\u5b57\u7b26\u4e32\u662f\u5426\u5168\u4e3a\u5b57\u6bcd b = 'Ab?' print(b.isalpha()) # False c = 'Ab' print()c.isalpha() # True","title":"\u5b57\u7b26\u4e32\u5e38\u7528\u65b9\u6cd5"},{"location":"python/Foundation/ch01/#_2","text":"\u4f7f\u7528\u53cd\u659c\u6760\\\u8868\u793a\u8f6c\u4e49\u5b57\u7b26\u3002\u53cd\u659c\u6760\u524d\u9762\u52a0r\u4ee3\u8868\u539f\u59cb\u5b57\u7b26\u3002 a = 'str\\ning' print(a) # str # ing a = r'str\\ning' print(a) # str\\ning \u8f6c\u4e49\u7b26 \u63cf\u8ff0 \\\u5728\u884c\u5c3e \u7eed\u884c\u7b26 \\\\ \u53cd\u659c\u6760\u7b26\u53f7\\ \\' \u5355\u5f15\u53f7 \\b \u9000\u683c(Backspace) \\000 \u7a7a \\n \u6362\u884c \\v \u7eb5\u5411\u5236\u8868\u7b26 \\t \u6a2a\u5411\u5236\u8868\u7b26 \\r \u56de\u8f66\uff0c\u5c06 \\r \u540e\u9762\u7684\u5185\u5bb9\u79fb\u5230\u5b57\u7b26\u4e32\u5f00\u5934\uff0c\u5e76\u9010\u4e00\u66ff\u6362\u5f00\u5934\u90e8\u5206\u7684\u5b57\u7b26\uff0c\u76f4\u81f3\u5c06 \\r \u540e\u9762\u7684\u5185\u5bb9\u5b8c\u5168\u66ff\u6362\u5b8c\u6210\u3002 \\yyy \u516b\u8fdb\u5236\u6570\uff0cy \u4ee3\u8868 0~7 \u7684\u5b57\u7b26 \\xyy \u5341\u516d\u8fdb\u5236\u6570\uff0c\u4ee5 \\x \u5f00\u5934\uff0cy \u4ee3\u8868\u7684\u5b57\u7b26","title":"\u8f6c\u4e49\u5b57\u7b26"},{"location":"python/Foundation/ch01/#_3","text":"\u5b57\u7b26\u4e32\u662f\u53ef\u8fed\u4ee3\u7684\u3002\u7d22\u5f15\u503c\u4ece0\u5f00\u59cb\uff0c-1\u4ee3\u8868\u4ece\u672b\u5c3e\u5f00\u59cb\u3002\u7d22\u5f15\u533a\u95f4\u662f\u5de6\u95ed\u53f3\u5f00\u3002 a = 'string is \"special\"' print(a[2:4]) 'ri' print(a[-4:-1]) # ial","title":"\u53ef\u8fed\u4ee3\u6027"},{"location":"python/Foundation/ch01/#f-string","text":"f-string\u662fPython3.6\u63a8\u51fa\u7684\u65b0\u529f\u80fd\u3002\u770b\u4e0b\u9762\u7684\u4f8b\u5b50\uff0c\u5bf9\u6bd4\u4f20\u7edf\u8868\u793a\u65b9\u6cd5\u548cf-string\u7684\u65b9\u6cd5\u3002 age = 32 name = 'Tom' fstring = f'My name is {name} and I am {age} years old.' print(fstring) # My name is Tom and I am 32 years old. \u5728f-string\u4e2d\u4f7f\u7528\u8868\u8fbe\u5f0f\u3002 height = 2 base = 3 fstring = f'The area of the triangle is {base*height/2}.' print(fstring) # The area of the triangle is 3.0. \u901a\u8fc7f-string\u5bf9\u5b57\u5178\u8fdb\u884c\u64cd\u4f5c\u3002 person1 = { 'name': 'Tom', 'age': 20, 'gender': 'male' } person2 = { 'name': 'Jerry', 'age': 20, 'gender': 'female' } # \u8bfb\u53d6\u5b57\u5178 fstring = f'{person1.get(\"name\")} is {person1.get(\"age\")} and is {person1.get(\"ender\")}' print(fstring) # Tom is 20 and is None # \u904d\u5386\u5b57\u5178 people = [person1, person2] for person in people: fstring = f'{person.get(\"name\")} is {person.get(\"age\")} and is {person.get(\"ender\")}' print(fstring) # Tom is 20 and is None # Jerry is 20 and is None \u5728f-string\u4e2d\u4f7f\u7528\u6761\u4ef6\u3002 person1 = { 'name': 'Tom', 'age': 20, 'gender': 'male' } person2 = { 'name': 'Jerry', 'age': 20, 'gender': 'female' } people = [person1, person2] for person in people: fstring = f'{\"She\" if person.get(\"gender\") == \"female\" else \"He\"} is watching TV.' print(fstring) # He is watching TV. # She is watching TV. \u4f7f\u7528f-string\u683c\u5f0f\u5316\u8f93\u51fa\u3002 \u5de6\u5bf9\u9f50\uff1a< \u53f3\u5bf9\u9f50\uff1a> \u5c45\u4e2d\u5bf9\u9f50\uff1a^ print(f'{\"apple\": >30}') print(f'{\"apple\": ^30}') print(f'{\"apple\": <30}') # apple # apple # apple \u4f7f\u7528f-string\u683c\u5f0f\u5316\u6570\u5b57\u3002 number = 0.9124325345 # \u767e\u5206\u6bd4 fstring = f'Percentage format for number with two decimal places: {number:.2%}' print(fstring) # Percentage format for number with two decimal places: 91.24% # \u4fdd\u7559\u5c0f\u6570\u70b9\u540e3\u4f4d fstring = f'Fixed point format for number with three decimal places: {number:.3f}' print(fstring) # Fixed point format for number with three decimal places: 0.912 # \u79d1\u5b66\u8ba1\u6570\u6cd5\u8868\u793a fstring = f'Exponent format for number: {number:e}' print(fstring) # Exponent format for number: 9.124325e-01 # \u5e26\u8d27\u5e01\u7b26\u53f7 number = 123456.78921 fstring = f'Currency format for number with two decimal places: ${number:.2f}' print(fstring) # Currency format for number with two decimal places: $123456.79 # \u5e26\u8d27\u5e01\u7b26\u53f7\u548c\u5343\u5206\u4f4d number = 123456.78921 fstring = f'Currency format for number with two decimal places and comma seperators: ${number:,.2f}' print(fstring) # Currency format for number with two decimal places and comma seperators: $123,456.79 # \u8f93\u51fa\u6570\u503c\u5e26\u6b63\u8d1f\u7b26\u5408 numbers = [1, -3, 5] for number in numbers: fstring = f'The number is {number:+}' print(fstring) # The number is +1 # The number is -3 # The number is +5 # Debug\u8c03\u8bd5 number = 2 print(f'{number = }') # number = 2","title":"f-string"},{"location":"python/Foundation/ch01/#13-list","text":"\u5217\u8868\u662f Python \u5185\u7f6e\u7684\u4e00\u79cd\u6570\u636e\u7ed3\u6784\uff0c\u662f\u4e00\u79cd\u6709\u5e8f\u7684\u96c6\u5408\uff0c\u7528\u6765\u5b58\u50a8\u4e00\u8fde\u4e32\u5143\u7d20\u7684\u5bb9\u5668\u3002\u5217\u8868\u4e2d\u5143\u7d20\u7c7b\u578b\u53ef\u4ee5\u4e0d\u76f8\u540c\uff0c\u5b83\u652f\u6301\u6570\u5b57\u3001\u5b57\u7b26\u4e32\u7b49\u3002 \u5217\u8868\u7684\u6bcf\u4e2a\u503c\u90fd\u6709\u5bf9\u5e94\u7684\u7d22\u5f15\u503c\uff0c\u7d22\u5f15\u503c\u4ece0\u5f00\u59cb\u3002 \u5217\u8868\u5207\u7247\uff1a \u4f7f\u7528\u5207\u7247\u7b26\u53f7\u53ef\u4ee5\u5bf9\u5927\u591a\u6570\u5e8f\u5217\u7c7b\u578b\u9009\u53d6\u5176\u5b50\u96c6\u3002 \u8d77\u59cb\u4f4d\u7f6estart\u7684\u7d22\u5f15\u662f\u5305\u542b\u7684\uff0c\u800c\u7ed3\u675f\u4f4d\u7f6estop\u7684\u7d22\u5f15\u5e76\u4e0d\u5305\u542b\uff08\u5de6\u95ed\u53f3\u5f00\uff09\u3002 \u6b65\u8fdb\u503cstep\u53ef\u4ee5\u5728\u7b2c\u4e8c\u4e2a\u5192\u53f7\u540e\u9762\u4f7f\u7528\uff0c\u610f\u601d\u662f\u6bcf\u9694\u591a\u5c11\u4e2a\u6570\u53d6\u4e00\u4e2a\u503c \u3002 color = ['red', 'green', 'blue', 'yellow', 'white', 'black'] # \u4ece0\u5f00\u59cb\u7edf\u8ba1\uff0c\u8bfb\u53d6\u7b2c1\uff0c2\u4f4d print(color[1: 3]) # ['green', 'blue'] # \u4ece0\u5f00\u59cb\u7edf\u8ba1\uff0c\u8bfb\u53d6\u4ece\u7b2c1\u4f4d\u5230\u5012\u6570\u7b2c3\u4f4d print(color[1: -2]) # ['green', 'blue', 'yellow'] # \u4ece0\u5f00\u59cb\u7edf\u8ba1\uff0c\u8bfb\u53d6\u4ece\u5012\u6570\u7b2c4\u4f4d\u5230\u5012\u6570\u7b2c3\u4f4d print(color[-4: -2]) # ['blue', 'yellow'] # \u5982\u679c\u5199\u6210\u4e0b\u9762\u8fd9\u6837\uff0c\u5219\u65e0\u8f93\u51fa\u3002 print(color[-2: -4]) # [] print(color[::2]) # ['red', 'blue', 'white'] \u5217\u8868\u5e38\u7528\u65b9\u6cd5\uff1a \u65b9\u6cd5\u540d\u79f0 \u4f5c\u7528 a.index() \u8fd4\u56dea\u4e2d\u9996\u4e2a\u5339\u914d\u9879\u7684\u4f4d\u7f6e a.pop() \u5220\u9664\u6307\u5b9a\u4f4d\u7f6e\u7684\u5143\u7d20 a.insert() \u5411\u6307\u5b9a\u4f4d\u7f6e\u63d2\u5165\u5143\u7d20 a.reverse() \u53cd\u5411\u6392\u5e8f a.append() \u5411\u672b\u5c3e\u6dfb\u52a0\u5143\u7d20 a.sort() \u5bf9\u5217\u8868\u8fdb\u884c\u6392\u5e8f a.remove() \u5220\u9664\u9996\u4e2a\u5339\u914d\u9879\u7684\u5143\u7d20 a.extend() \u5c06\u4e00\u4e2a\u5217\u8868\u6269\u5c55\u81f3\u53e6\u4e00\u4e2a\u5217\u8868 a.count() \u7edf\u8ba1\u67d0\u4e2a\u5143\u7d20\u51fa\u73b0\u7684\u6b21\u6570 \u521b\u5efa\u5217\u8868list a = [1, 2, 3, 4, 5] print(a) # [1, 2, 3, 4, 5] b = list('12345') print(b) # ['1', '2', '3', '4', '5'] c = list(12345) # Traceback (most recent call last): # File \"<stdin>\", line 1, in <module> # TypeError: 'int' object is not iterable \u5217\u8868\u5207\u7247\uff08\u4ece0\u5f00\u59cb\uff0c\u5de6\u95ed\u53f3\u5f00\uff09\uff1a print(a[2:3]) # [3] print(a[:3]) # [1, 2, 3] print(a[::-1]) # [5, 4, 3, 2, 1] print(a[::]) # [1, 2, 3, 4, 5] print(a[::1]) [1, 2, 3, 4, 5] \u5217\u8868\u662f\u53ef\u4fee\u6539\u7684\uff1a print(a[1]) # 2 a[1] = 'one' print(a) @ [1, 'one', 3, 4, 5] \u5217\u8868\u8ffd\u52a0\u548c\u63d2\u5165\u3002insert\u4e0eappend\u76f8\u6bd4\uff0c\u8ba1\u7b97\u4ee3\u4ef7\u66f4\u9ad8\u3002\u56e0\u4e3a\u5b50\u5e8f\u5217\u5143\u7d20\u9700\u8981\u5728\u5185\u90e8\u79fb\u52a8\u4e3a\u65b0\u5143\u7d20\u63d0\u4f9b\u7a7a\u95f4\u3002 a.append(6) # \u6ce8\u610f\uff0c\u76f4\u63a5\u4fee\u6539\u539f\u5217\u8868\uff0c\u4e0d\u662f\u521b\u5efa\u526f\u672c\u3002 print(a) # [1, 'one', 3, 4, 5, 6] a.extend([7, 8, 9]) print(a) # [1, 'one', 3, 4, 5, 6, 7, 8, 9] a.insert(0, 'Italy') print(a) # ['Italy', 1, 3, 5, 6, 7, 8] \u5217\u8868\u5220\u9664\u5143\u7d20\uff0c\u9ed8\u8ba4\u5220\u9664\u6700\u540e\u4e00\u4e2a\u3002insert\u7684\u53cd\u64cd\u4f5c\u662fpop\u3002 a.pop() # 9 print(a) # [1, 'one', 3, 4, 5, 6, 7, 8] a.pop(3) # 4 print(a) # [1, 'one', 3, 5, 6, 7, 8] \u5220\u9664\u5217\u8868\u4e2d\u67d0\u4e2a\u5143\u7d20\u3002 print(a[1]) # one del a[1] print(a) [1, 3, 5, 6, 7, 8] \u5220\u9664\u5217\u8868\u4e2d\u67d0\u4e2a\u5143\u7d20\u3002remove\u65b9\u6cd5\u4f1a\u5b9a\u4f4d\u7b2c\u4e00\u4e2a\u7b26\u5408\u8981\u6c42\u7684\u503c\u5e76\u79fb\u9664 a.remove('Italy') print(a) # [1, 3, 5, 6, 7, 8] \u7edf\u8ba1\u67d0\u4e2a\u5143\u7d20\u51fa\u73b0\u7684\u6b21\u6570\u3002 print(a.count(1)) # 1 \u8fd4\u56de\u5217\u8868\u4e2d\u5339\u914d\u9879\u7684\u7d22\u5f15\u4f4d\u7f6e\u3002\u5339\u914d\u4e0d\u5230\u629b\u51fa\u5f02\u5e38\u3002 print(a.index(2)) # Traceback (most recent call last): # File \"<stdin>\", line 1, in <module> # ValueError: 2 is not in list print(a.index(3)) # 1 \u5224\u65ad\u5143\u7d20\u662f\u5426\u5b58\u5728\u4e8e\u5217\u8868\u3002 print(3 in a) # True print('3' in a) # False \u53cd\u5411\u8f93\u51fa\u5217\u8868\u3002 a.reverse() print(a) # [8, 7, 6, 5, 3, 1] \u53d6\u5217\u8868\u4e2d\u6700\u5927\u503c\u3001\u6700\u5c0f\u503c\u3002 print(min(a)) # 1 print(max(a)) # 78 \u8ba1\u7b97\u5217\u8868\u957f\u5ea6\u3002 print(len(a)) # 6 \u5217\u8868\u6269\u5c55\uff1a a = [1, 2, 3] b = [4, 5, 6] print(a + b) # [1, 2, 3, 4, 5, 6] a.extend(b) # a\u5217\u8868\u88ab\u4fee\u6539 print(a) # [1, 2, 3, 4, 5, 6] print(b) # [4, 5, 6] \u4f7f\u7528extend\u6dfb\u52a0\u5143\u7d20\u6bd4\u4f7f\u7528\u52a0\u53f7\uff08+\uff09\u8fde\u63a5\u6548\u7387\u66f4\u9ad8\u3002\u56e0\u4e3a\u4f7f\u7528\u52a0\u53f7\uff08+\uff09\u8fde\u63a5\u8fc7\u7a0b\u4e2d\u521b\u5efa\u4e86\u65b0\u5217\u8868\uff0c\u5e76\u4e14\u8fd8\u8981\u590d\u5236\u5bf9\u8c61\u3002 a_list = [4, None, 'foo'] b_list = [7, 8, (2, 3)] print(a_list + b_list) # [4, None, 'foo', 7, 8, (2, 3)] \u4f7f\u7528+\u53f7\u8fde\u63a5 a_list.extend(b_list) print(a_list) # [4, None, 'foo', 7, 8, (2, 3)] \u5217\u8868\u590d\u5236 c = list('Python') print(a + c) # [1, 2, 3, 4, 5, 6, 'P', 'y', 't', 'h', 'o', 'n'] print(a * 3) # [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6] \u53cc\u7aef\u961f\u5217\uff0ccollections.deque\uff0c\u53ef\u4ee5\u6ee1\u8db3\u5217\u8868\u5934\u5c3e\u90e8\u90fd\u589e\u52a0\u7684\u8981\u6c42\u3002 from collections import deque d = deque([1, 2, 3]) d.extendleft(['a', 'b', 'c']) # \u6ce8\u610f\u63d2\u5165\u987a\u5e8f print(d) # deque(['c', 'b', 'a', 1, 2, 3]) print(len(d)) # 6 print(d[-2]) # 2 print(d.count('a')) # 1 print(d.index('a')) # 2 d.insert(0, 1) # \u7b2c0\u4f4d\u63d2\u5165\u6570\u5b571 print(d) # deque([1, 'c', 'b', 'a', 1, 2, 3]) d.rotate(2) # \u628a\u53f3\u8fb92\u4e2a\u5143\u7d20\u653e\u5230\u5de6\u8fb9\uff0c\u6ce8\u610f\u987a\u5e8f\uff0c\u548cextendleft\u4e0d\u4e00\u6837 print(d) # deque([2, 3, 1, 'c', 'b', 'a', 1]) d.rotate(-2) print(d) # deque([1, 'c', 'b', 'a', 1, 2, 3]) \u5217\u8868\u6392\u5e8f\u3002\u6392\u5e8f\u5bf9\u5217\u8868\u5143\u7d20\u7684\u6570\u636e\u7c7b\u578b\u662f\u6709\u8981\u6c42\u7684 a_list = [4, None, 'foo', 7, 8, (2, 3)] a_list.sort() # Traceback (most recent call last): # File \"<stdin>\", line 1, in <module> # TypeError: '<' not supported between instances of 'NoneType' and 'int' b_list = [7, 8, (2, 3)] b_list.sort() # Traceback (most recent call last): # File \"<stdin>\", line 1, in <module> # TypeError: '<' not supported between instances of 'tuple' and 'int' a_list = [7, 2, 5, 1, 3] a_list.sort() # \u6309\u6570\u503c\u5927\u5c0f\u6392\u5e8f print(a_list) # [1, 2, 3, 5, 7] b_list = ['saw', 'small', 'He', 'foxes', 'six'] b_list.sort(key=len) # \u901a\u8fc7\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u8fdb\u884c\u6392\u5e8f print(b_list) # ['He', 'saw', 'six', 'small', 'foxes'] \u5217\u8868\u4e8c\u5206\u641c\u7d22\u548c\u5df2\u6392\u5e8f\u5217\u8868\u7684\u7ef4\u62a4 bisect \u8fd4\u56de\u8981\u63d2\u5165\u5143\u7d20\u5728\u5217\u8868\u4e2d\u7684\u4e0b\u6807\u3002\u5047\u5b9a\u5217\u8868\u662f\u6709\u5e8f\u7684\u3002 bisect_left \u4e0e bisect \u7c7b\u4f3c\uff0c\u53ea\u4e0d\u8fc7\u5176\u9ed8\u8ba4\u5c06\u5143\u7d20\u63d2\u5230\u5de6\u8fb9\uff0c\u6240\u4ee5\u8fd4\u56de\u7684\u662f\u63d2\u5165\u5230\u5de6\u8fb9\u7684\u4e0b\u6807 bisect_right\u4e0e bisect_left \u76f8\u53cd\u3002 \u4ee5\u4e0a\u65b9\u6cd5\u82e5\u5217\u8868\u65e0\u5e8f\uff0c\u90a3\u4e48\u4f1a\u8fd4\u56de\u63d2\u5165\u5230\u5217\u8868\u6700\u540e\u4e00\u4e2a\u5408\u9002\u7684\u4f4d\u7f6e\u3002 insort \u4f1a\u5728\u5217\u8868\u4e2d\u63d2\u5165\u5143\u7d20\u5230\u6b63\u786e\u4f4d\u7f6e\uff0c\u5047\u5b9a\u5217\u8868\u6709\u5e8f\u3002\u5982\u679c\u5217\u8868\u65e0\u5e8f\uff0c\u90a3\u4e48\u4f1a\u8fd4\u56de\u7a7a\u3002\u9ed8\u8ba4\u63d2\u5165\u5230\u53f3\u8fb9\u3002 insort_left \u548cinsort_right \u7c7b\u4f3c\u3002 import bisect c = [1, 2, 3, 4, 7] print(bisect.bisect(c, 2)) # 2 bisect\u4f1a\u627e\u5230\u7b2c\u4e00\u4e2a2,\u5e76\u628a\u65b0\u76842\u63d2\u5165\u5b83\u540e\u9762 bisect.insort(c, 2) # [1, 2, 2, 3, 4, 7] print(bisect.bisect(c, 5)) # 5 bisect\u4f1a\u627e\u5230\u7b2c\u4e00\u4e2a4,\u5e76\u628a\u65b0\u76845\u63d2\u5165\u5b83\u540e\u9762 bisect.insort(c, 5) print(bisect.bisect(c, 6)) # 6 bisect\u4f1a\u627e\u5230\u7b2c\u4e00\u4e2a5,\u5e76\u628a\u65b0\u76846\u63d2\u5165\u5b83\u540e\u9762 bisect.insort(c, 6) print(c) # [1, 2, 2, 3, 4, 5, 6, 7]","title":"1.3 \u5217\u8868\uff08list\uff09"},{"location":"python/Foundation/ch01/#14-dictionary","text":"\u5b57\u5178(dict)\u662f\u4f7f\u7528\u952e-\u503c\uff08key-value\uff09\u5b58\u50a8\uff0c\u952e\u662f\u4e0d\u53ef\u53d8\u5bf9\u8c61\uff0c\u4e14\u4e0d\u5141\u8bb8\u91cd\u590d\u3002 dict\uff08\u5b57\u5178\uff09\u66f4\u4e3a\u5e38\u7528\u7684\u540d\u5b57\u662f\u54c8\u5e0c\u8868\u6216\u8005\u662f\u5173\u8054\u6570\u7ec4\u3002 \u5b57\u5178\u662f\u62e5\u6709\u7075\u6d3b\u5c3a\u5bf8\u7684\u952e\u503c\u5bf9\u96c6\u5408\uff0c\u4e0d\u662f\u901a\u8fc7\u4f4d\u7f6e\u8fdb\u884c\u7d22\u5f15\uff0c\u5176\u4e2d\u952e\u548c\u503c\u90fd\u662fPython\u5bf9\u8c61\u3002\u7528\u5927\u62ec\u53f7{}\u662f\u521b\u5efa\u5b57\u5178\u7684\u4e00\u79cd\u65b9\u5f0f\uff0c\u5728\u5b57\u5178\u4e2d\u7528\u9017\u53f7\u5c06\u952e\u503c\u5bf9\u5206\u9694\u3002 \u5b57\u5178\u5e38\u7528\u65b9\u6cd5 \u65b9\u6cd5\u540d\u79f0 \u4f5c\u7528 a.items() \u8fd4\u56dea\u4e2d\u6240\u6709\u952e\u503c\u5bf9 a.values() \u8fd4\u56dea\u4e2d\u6240\u6709\u503c a.keys() \u8fd4\u56dea\u4e2d\u6240\u6709\u952e a.get() \u901a\u8fc7\u952e\u6765\u67e5\u503c\uff0c\u8fd4\u56de\u5bf9\u5e94\u7684\u503c a.clear() \u6e05\u7a7a\u5b57\u5178a\u7684\u503c a.setdefault \u901a\u8fc7\u952e\u503c\u6765\u67e5\u627e\u503c\uff0c\u627e\u4e0d\u5230\u5219\u63d2\u5165 a.update() \u952e\u548c\u503c\u66f4\u65b0\u5230\u65b0\u7684\u5b57\u5178 a.pop() \u5220\u9664\u6307\u5b9a\u4f4d\u7f6e\u7684\u5143\u7d20 \u751f\u6210\u4e00\u4e2a\u5b57\u5178 dict_a = {'name': 'Ming', 'id': 1001, 'age': 35} print(type(dict_a)) # <class 'dict'> dict_b = dict(city='Shanghai', strict='Xuhui', zip='200000') print(type(dict_b)) # <class 'dict'> \u901a\u8fc7\u952e\u67e5\u8be2\u503c\uff0c\u67e5\u8be2\u4e0d\u5230\u629b\u51fa\u5f02\u5e38 print(dict_a['name']) # Ming print(dict_a['Name']) # Traceback (most recent call last): # File \"<stdin>\", line 1, in <module> # KeyError: 'Name' \u63d2\u5165\u65b0\u7684\u952e\u503c\u5bf9 dict_a['city'] = 'Chengdu' print(dict_a) # {'name': 'Ming', 'id': 1001, 'city': 'Chengdu'} \u5220\u9664\u67d0\u4e2a\u952e\u503c\u5bf9\u3002pop\u65b9\u6cd5\u4f1a\u5728\u5220\u9664\u7684\u540c\u65f6\u8fd4\u56de\u88ab\u5220\u7684\u503c\uff0c\u5e76\u5220\u9664\u952e\u3002 dict_a.pop('city') # Chengdu print(dict_a) # {'name': 'Ming', 'id': 1001} \u53e6\u4e00\u79cd\u65b9\u5f0f\u5220\u9664\u67d0\u4e2a\u952e\u503c\u5bf9 del dict_a['age'] # Traceback (most recent call last): # File \"<stdin>\", line 1, in <module> # KeyError: 'age' del dict_a['id'] print(dict_a) # {'name': 'Ming'} \u5224\u65ad\u952e\u662f\u5426\u5b58\u5728 dict_a[23] = 'Hello World' print(dict_a) # {'name': 'Ming', 23: 'Hello World'} print(23 in dict_a) # True print(35 in dict_a) # False \u901a\u8fc7\u952e\u67e5\u8be2\u503c\u7684\u53e6\u4e00\u79cd\u65b9\u5f0f\uff0c\u67e5\u8be2\u4e0d\u5230\u4e0d\u629b\u5f02\u5e38 dict_a.get('hai') dict_a.get('hai', 1) # 1 dict_a.get('name', 1) # Ming dict_a['hai'] # Traceback (most recent call last): # File \"<stdin>\", line 1, in <module> # KeyError: 'hai' \u901a\u8fc7\u952e\u67e5\u8be2\u503c\u7684\u53e6\u4e00\u79cd\u65b9\u5f0f\uff0c\u67e5\u8be2\u4e0d\u5230\u5219\u6dfb\u52a0 dict_a.setdefault('name') # Ming dict_a.setdefault('hai', 1) # 1 print(dict_a) # {'name': 'Ming', 23: 'Hello World', 'hai': 1} dict_a.setdefault('go') print(dict_a) # {'name': 'Ming', 23: 'Hello World', 'hai': 1, 'go': None} \u8bfb\u53d6\u5b57\u5178\u6240\u6709\u952e\u503c\u5bf9\uff0c\u8fd4\u56de\u7684\u662f\u5217\u8868\u5f62\u5f0f print(dict_a.items()) # dict_items([('name', 'Ming'), (23, 'Hello World'), ('hai', 1), ('go', None)]) \u8bfb\u53d6\u5b57\u5178\u7684\u952e print(dict_a.keys()) # dict_keys(['name', 23, 'hai', 'go']) \u8bfb\u53d6\u5b57\u5178\u7684\u503c print(dict_a.values()) # dict_values(['Ming', 'Hello World', 1, None]) \u5c06\u5b57\u5178\u503c\u8f6c\u5316\u6210\u5217\u8868 print(list(dict_a.values())) # ['Ming', 'Hello World', 1, None] for key in dict_a.keys(): print(dict_a[key]) # Ming # Hello World # 1 # None \u6e05\u7a7a\u5b57\u5178 dict_a.clear() print(dict_a) # {} print(len(dict_a)) # 0 \u5bf9\u4e8e\u4efb\u4f55\u539f\u5b57\u5178\u4e2d\u5df2\u7ecf\u5b58\u5728\u7684\u952e\uff0c\u5982\u679c\u4f20\u7ed9update\u65b9\u6cd5\u7684\u6570\u636e\u4e5f\u542b\u6709\u76f8\u540c\u7684\u952e\uff0c\u5219\u5b83\u7684\u503c\u5c06\u4f1a\u88ab\u8986\u76d6\u3002 dict_a = {'name': 'Ming', 'id': 1001, 'age': 35} dict_b = dict(city='Shanghai', id=2001, zip='200000') dict_a.update(dict_b) print(dict_a) # {'name': 'Ming', 'id': 2001, 'age': 35, 'city': 'Shanghai', 'zip': '200000'} \u4ece\u5217\u8868\u751f\u6210\u5b57\u5178 \u5b57\u5178\u672c\u8d28\u4e0a\u662f2-\u5143\u7ec4\uff08\u542b\u67092\u4e2a\u5143\u7d20\u7684\u5143\u7ec4\uff09\u7684\u96c6\u5408\uff0c\u5b57\u5178\u662f\u53ef\u4ee5\u63a5\u53d7\u4e00\u4e2a2-\u5143\u7ec4\u7684\u5217\u8868\u4f5c\u4e3a\u53c2\u6570\u7684\u3002 # \u65b9\u6cd51 mapping = {} key_list = list(range(5)) value_list = list(reversed(range(5))) for key, value in zip(key_list, value_list): mapping[key] = value print(mapping) # {0: 4, 1: 3, 2: 2, 3: 1, 4: 0} # \u65b9\u6cd52\u3002 mapping = {} key_list = list(range(5)) value_list = list(reversed(range(5))) mapping = dict(zip(key_list, value_list)) print(mapping) # {0: 4, 1: 3, 2: 2, 3: 1, 4: 0} \u5b57\u5178\u9ed8\u8ba4\u503c \u4e0b\u9762\u7684\u4f8b\u5b50\uff0c\u5b9e\u73b0\u4e86\u5c06\u4e00\u4e2a\u5355\u8bcd\u7ec4\u6210\u7684\u5217\u8868\uff0c\u8f6c\u6362\u6210\u5355\u8bcd\u9996\u5b57\u6bcd\u548c\u5355\u8bcd\u4e3a\u952e\u503c\u5bf9\u7684\u5b57\u5178\u3002 \u5148\u7528\u4f20\u7edf\u65b9\u6cd5\u5b9e\u73b0\uff0c\u518d\u7528\u5b57\u5178\u7684setdefault\u65b9\u6cd5\u8fdb\u884c\u6539\u5199\u3002 words = ['apple', 'bat', 'bar', 'atom', 'book'] by_letter = {} for word in words: letter = word[0] # word[0]\u628a\u5217\u8868words\u7684\u6bcf\u4e2a\u5143\u7d20\u5217\u8868\u5316\uff0c\u5e76\u53d6\u9996\u5b57\u6bcd\u3002\u8f93\u51fa\u7684\u662fa, b, b, a, b\u8fd95\u4e2a\u5217\u8868\u5143\u7d20\u7684\u9996\u5b57\u6bcd if letter not in by_letter: # \u751f\u6210\u7b2c\u4e00\u4e2a\u952e\u503c\u5bf9 print(letter) by_letter[letter] = [word] # \u5bf9\u6bd4[word]\u548cword[]\u7684\u7528\u6cd5 print(by_letter) # a # {'a': ['apple']} # b # {'a': ['apple'], 'b': ['bat']} else: # append\u5176\u4ed6\u952e\u503c\u5bf9 print(letter) by_letter[letter].append(word) print(by_letter) # b # {'a': ['apple'], 'b': ['bat', 'bar']} # a # {'a': ['apple', 'atom'], 'b': ['bat', 'bar']} # b # {'a': ['apple', 'atom'], 'b': ['bat', 'bar', 'book']} print(by_letter) # {'a': ['apple', 'atom'], 'b': ['bat', 'bar', 'book']} \u7528\u5b57\u5178\u7684setdefault\u65b9\u6cd5\uff0c\u4e0a\u8ff0\u7684for\u5faa\u73af\u8bed\u53e5\u53ef\u4ee5\u88ab\u5199\u4e3a\u3002 words = ['apple', 'bat', 'bar', 'atom', 'book'] by_letter = {} for word in words: letter = word[0] # word[0]\u7684\u8f93\u51fa\u4f9d\u7136\u662f5\u4e2a\u5217\u8868\u5143\u7d20\u7684\u9996\u5b57\u6bcda, b, b, a, b by_letter.setdefault(letter, ['a']).append(word) # \u5982\u679cletter\u4e0d\u5728[]\u5219\u901a\u8fc7append\u6dfb\u52a0word print(by_letter) # {'a': ['apple', 'atom'], 'b': ['bat', 'bar', 'book']} \u5982\u679c\u6539\u4e3a by_letter.setdefault(letter, ['a']).append(word) \uff0c\u5219\u8f93\u51fa by_letter \u662f {'a': ['a', 'apple', 'atom'], 'b': ['a', 'bat', 'bar', 'book']} \u3002 \u4f53\u4f1asetdefault()\u7684\u6ce8\u91ca\u201cInsert key with a value of default if key is not in the dictionary. Return the value for key if key is in the dictionary, else default.\u201d \u901a\u8fc7defaultdict\u7c7b\u4f7f\u5f97\u4e0a\u8ff0\u76ee\u7684\u5b9e\u73b0\u66f4\u4e3a\u7b80\u5355\u3002 from collections import defaultdict by_letter = defaultdict(list) # list\u662f\u5185\u7f6e\u7684\u53ef\u53d8\u5e8f\u5217(Built-in mutable sequence) print(dict(by_letter)) # {} for word in words: by_letter[word[0]].append(word) print(by_letter) # defaultdict(<class 'list'>, {'a': ['apple', 'atom'], 'b': ['bat', 'bar', 'book']}) print(dict(by_letter)) # {'a': ['apple', 'atom'], 'b': ['bat', 'bar', 'book']} \u6709\u6548\u7684\u5b57\u5178\u952e\u7c7b\u578b \u5c3d\u7ba1\u5b57\u5178\u7684\u503c\u53ef\u4ee5\u662f\u4efb\u4f55Python\u5bf9\u8c61\uff0c\u4f46\u952e\u5fc5\u987b\u662f\u4e0d\u53ef\u53d8\u7684\u5bf9\u8c61\uff0c\u6bd4\u5982\u6807\u91cf\u7c7b\u578b\uff08\u6574\u6570\u3001\u6d6e\u70b9\u6570\u3001\u5b57\u7b26\u4e32\uff09\u6216\u5143\u7ec4\uff08\u4e14\u5143\u7ec4\u5185\u5bf9\u8c61\u4e5f\u5fc5\u987b\u662f\u4e0d\u53ef\u53d8\u5bf9\u8c61\uff09\u3002 \u901a\u8fc7hash\u51fd\u6570\u53ef\u4ee5\u68c0\u67e5\u4e00\u4e2a\u5bf9\u8c61\u662f\u5426\u53ef\u4ee5\u54c8\u5e0c\u5316\uff08\u5373\u662f\u5426\u53ef\u4ee5\u7528\u4f5c\u5b57\u5178\u7684\u952e\uff09\uff0c\u672f\u8bed\u53eb\u4f5c\u54c8\u5e0c\u5316\u3002 print(hash('string')) # -4368784820203065343 print(hash((1, 2, (2, 3)))) # -9209053662355515447 print(hash((1, 2, [2, 3]))) # TypeError: unhashable type: 'list' print(hash((1, 2, tuple([2, 3])))) # -9209053662355515447 \u4e3a\u4e86\u5c06\u5217\u8868\u4f5c\u4e3a\u952e\uff0c\u4e00\u79cd\u65b9\u5f0f\u5c31\u662f\u5c06\u5176\u8f6c\u6362\u4e3a\u5143\u7ec4","title":"1.4 \u5b57\u5178\uff08dictionary\uff09"},{"location":"python/Foundation/ch01/#15-set","text":"\u96c6\u5408(set)\u662f\u4e00\u79cd\u65e0\u5e8f\u4e14\u5143\u7d20\u552f\u4e00\u7684\u5e8f\u5217\u3002 \u548c\u5b57\u5178\u7c7b\u4f3c\uff0c\u96c6\u5408\u7684\u5143\u7d20\u662f\u4e0d\u53ef\u53d8\u7684\u3002\u53ef\u4ee5\u8ba4\u4e3a\u96c6\u5408\u4e5f\u50cf\u5b57\u5178\uff0c\u4f46\u662f\u53ea\u6709\u952e\u6ca1\u6709\u503c\u3002\u57fa\u672c\u529f\u80fd\u662f\u8fdb\u884c\u6210\u5458\u5173\u7cfb\u6d4b\u8bd5\u548c\u5220\u9664\u91cd\u590d\u5143\u7d20\u3002\u6240\u4ee5\u96c6\u5408\u53e6\u4e00\u4e2a\u7528\u9014\u662f\u53bb\u91cd\u590d\u3002 \u96c6\u5408\u53ef\u4ee5\u6709\u4e24\u79cd\u521b\u5efa\u65b9\u5f0f\uff1a\u901a\u8fc7set()\u51fd\u6570\u6216\u8005{}\u6765\u521b\u5efa \u96c6\u5408\u4e0d\u5c5e\u4e8e\u5e8f\u5217\u7c7b\u6570\u636e\uff0c \u96c6\u5408\u4e0d\u652f\u6301\u901a\u8fc7\u7d22\u5f15\u8bbf\u95ee\u6307\u5b9a\u5143\u7d20\uff0c\u4f46\u53ef\u4ee5\u589e\u52a0\u548c\u5220\u9664\u5143\u7d20\u3002 \u96c6\u5408\u652f\u6301\u6570\u5b66\u4e0a\u7684\u96c6\u5408\u64cd\u4f5c\uff0c\u4f8b\u5982\u5e76\u96c6\u3001\u4ea4\u96c6\u3001\u5dee\u96c6\u3001\u5bf9\u79f0\u5dee\u96c6\u3002 \u65b9\u6cd5\u540d\u79f0 \u8bf4\u660e add() \u4e3a\u96c6\u5408\u6dfb\u52a0\u5143\u7d20 update() \u7ed9\u96c6\u5408\u6dfb\u52a0\u5143\u7d20 clear() \u79fb\u9664\u96c6\u5408\u4e2d\u7684\u6240\u6709\u5143\u7d20 copy() \u62f7\u8d1d\u4e00\u4e2a\u96c6\u5408 remove() \u79fb\u9664\u6307\u5b9a\u5143\u7d20 pop() \u968f\u673a\u79fb\u9664\u5143\u7d20 discard() \u5220\u9664\u96c6\u5408\u4e2d\u6307\u5b9a\u7684\u5143\u7d20 < \u6216\u8005issubset() \u5224\u65ad\u6307\u5b9a\u96c6\u5408\u662f\u5426\u4e3a\u8be5\u65b9\u6cd5\u53c2\u6570\u96c6\u5408\u7684\u5b50\u96c6 | \u6216\u8005union() \u8fd4\u56de\u4e24\u4e2a\u96c6\u5408\u7684\u5e76\u96c6 & \u6216\u8005intersection() \u8fd4\u56de\u96c6\u5408\u7684\u4ea4\u96c6 intersection_update() \u8fd4\u56de\u96c6\u5408\u7684\u4ea4\u96c6 - \u6216\u8005difference() \u8fd4\u56de\u591a\u4e2a\u96c6\u5408\u7684\u5dee\u96c6 difference_update() \u79fb\u9664\u96c6\u5408\u4e2d\u7684\u5143\u7d20\uff0c\u8be5\u5143\u7d20\u5728\u6307\u5b9a\u7684\u96c6\u5408\u4e5f\u5b58\u5728 ^ \u6216\u8005symmetric_difference() \u8fd4\u56de\u4e24\u4e2a\u96c6\u5408\u4e2d\u4e0d\u91cd\u590d\u7684\u5143\u7d20\u96c6\u5408(\u4e24\u96c6\u5408\u9664\u53bb\u4ea4\u96c6\u90e8\u5206\u7684\u5143\u7d20) symmetric_difference_update() \u79fb\u9664\u5f53\u524d\u96c6\u5408\u4e2d\u5728\u53e6\u5916\u4e00\u4e2a\u6307\u5b9a\u96c6\u5408\u76f8\u540c\u7684\u5143\u7d20\uff0c\u5e76\u5c06\u53e6\u5916\u4e00\u4e2a\u6307\u5b9a\u96c6\u5408\u4e2d\u4e0d\u540c\u7684\u5143\u7d20\u63d2\u5165\u5230\u5f53\u524d\u96c6\u5408\u4e2d isdisjoint() \u5224\u65ad\u4e24\u4e2a\u96c6\u5408\u662f\u5426\u5305\u542b\u76f8\u540c\u7684\u5143\u7d20\uff0c\u5982\u679c\u6ca1\u6709\u8fd4\u56de True\uff0c\u5426\u5219\u8fd4\u56de False issuperset() \u5224\u65ad\u8be5\u65b9\u6cd5\u7684\u53c2\u6570\u96c6\u5408\u662f\u5426\u4e3a\u6307\u5b9a\u96c6\u5408\u7684\u5b50\u96c6 \u4e3e\u4f8b a = {'a', 'b', 'c', 1, 2} b = {1, 'c', 'd'} \u5e76\u96c6(a\u548cb\u4e2d\u7684\u6240\u6709\u4e0d\u540c\u5143\u7d20) print(a.union(b)) # {'c', 1, 2, 'd', 'a', 'b'} print(a | b) # {'c', 1, 2, 'd', 'a', 'b'} \u4ea4\u96c6(a\u3001b\u4e2d\u540c\u65f6\u5305\u542b\u7684\u5143\u7d20) print(a.intersection(b)) # {'c', 1} print(a & b) # {'c', 1} \u5c06a\u7684\u5185\u5bb9\u8bbe\u7f6e\u4e3aa\u548cb\u7684\u4ea4\u96c6 a = {'a', 'b', 'c', 1, 2} b = {1, 'c', 'd'} a.intersection_update(b) print(a) # {1, 'c'} \u5728a\u4e0d\u5728b\u7684\u5143\u7d20 print(a.difference(b)) # {'a', 2, 'b'} print(a - b) # {2, 'a', 'b'} \u5c06a\u7684\u5185\u5bb9\u8bbe\u4e3a\u5728a\u4e0d\u5728b\u7684\u5143\u7d20 a = {'a', 'b', 'c', 1, 2} b = {1, 'c', 'd'} a.difference_update(b) print(a) # {2, 'b', 'a'} a = {'a', 'b', 'c', 1, 2} b = {1, 'c', 'd'} a -= b print(a) # {2, 'a', 'b'} \u5c06\u5143\u7d20\u52a0\u5165\u96c6\u5408a a.add(7) print(a) # {1, 2, 'c', 7, 'a', 'b'} \u6bcf\u6b21\u8f93\u51fa\u7684\u987a\u5e8f\u662f\u4e0d\u4e00\u6837\u7684 \u4ece\u96c6\u5408a\u79fb\u9664\u67d0\u4e2a\u5143\u7d20 a.remove(7) print(a) # {1, 2, 'c', 'a', 'b'} \u5982\u679ca\u88ab\u6e05\u7a7a\uff0c\u5219\u62a5\u9519 KeyError: 7 \u6240\u6709\u5728a\u6216b\u4e2d\uff0c\u4f46\u4e0d\u662f\u540c\u65f6\u5728a\u3001b\u4e2d\u7684\u5143\u7d20 print(a.symmetric_difference(b)) # {2, 'd', 'b', 'a'} print(a ^ b) # {2, 'd', 'b', 'a'} \u5c06a\u7684\u5185\u5bb9\u8bbe\u4e3a\u6240\u6709\u5728a\u6216b\u4e2d\uff0c\u4f46\u4e0d\u662f\u540c\u65f6\u5728a\u3001b\u4e2d\u7684\u5143\u7d20 a = {'a', 'b', 'c', 1, 2} b = {1, 'c', 'd'} a.symmetric_difference_update(b) print(a) # {'a', 2, 'd', 'b'} a = {'a', 'b', 'c', 1, 2} b = {1, 'c', 'd'} a ^= b print(a) # {2, 'd', 'a', 'b'} \u5982\u679ca\u5305\u542b\u4e8eb\uff0c\u8fd4\u56deTure print(a.issubset(b)) # False \u5c06a\u7684\u5185\u5bb9\u8bbe\u7f6e\u4e3aa\u548cb\u7684\u5e76\u96c6 print(a) # {'a', 2, 'd', 'b'} a = {'a', 'b', 'c', 1, 2} a.update(b) print(a) # {1, 2, 'a', 'b', 'd', 'c'} \u79fb\u9664\u4efb\u610f\u5143\u7d20\uff0c\u5982\u679c\u96c6\u5408\u662f\u7a7a\u7684\uff0c\u629b\u51fakeyError a.pop() # \u968f\u673a\u79fb\u9664\u67d0\u4e2a\u5143\u7d20\uff0c\u6ca1\u6709\u8f93\u5165\u53d8\u91cf\uff0c\u5982\u679c\u96c6\u5408\u662f\u7a7a\u7684\uff0c\u629b\u51faKeyError: 'pop from an empty set' print(a) # {2, 1, 'd', 'b', 'a'} \u5c06\u96c6\u5408\u91cd\u7f6e\u4e3a\u7a7a\uff0c\u6e05\u7a7a\u6240\u6709\u5143\u7d20 a.clear() print(a) # set() \u96c6\u5408\u7684\u5143\u7d20\u5fc5\u987b\u662f\u4e0d\u53ef\u53d8\u7684\uff0c\u5982\u679c\u60f3\u8981\u5305\u542b\u5217\u8868\u578b\u7684\u5143\u7d20\uff0c\u5fc5\u987b\u5148\u8f6c\u6362\u4e3a\u5143\u7ec4 my_data1 = [1, 2, 3, 4] my_data2 = [3, 4, 5, 6] my_set = {tuple(my_data1), tuple(my_data2)} print(my_set) # {(1, 2, 3, 4), (3, 4, 5, 6)}","title":"1.5 \u96c6\u5408\uff08set\uff09"},{"location":"python/Foundation/ch01/#16-tuple","text":"Python \u7684\u5143\u7ec4\u4e0e\u5217\u8868\u7c7b\u4f3c\uff0c\u4e0d\u540c\u4e4b\u5904\u5728\u4e8e\u5143\u7ec4\u7684\u5143\u7d20\u4e0d\u80fd\u4fee\u6539\u3002 \u5143\u7ec4\u4f7f\u7528\u5c0f\u62ec\u53f7( )\uff0c\u5217\u8868\u4f7f\u7528\u65b9\u62ec\u53f7[ ]\u3002 \u5143\u7ec4\u4e2d\u53ea\u5305\u542b\u4e00\u4e2a\u5143\u7d20\u65f6\uff0c\u9700\u8981\u5728\u5143\u7d20\u540e\u9762\u6dfb\u52a0\u9017\u53f7 \uff0c\u5426\u5219\u62ec\u53f7\u4f1a\u88ab\u5f53\u4f5c\u8fd0\u7b97\u7b26\u4f7f\u7528\u3002 \u5143\u7ec4\u53ef\u4ee5\u4f7f\u7528\u4e0b\u6807\u7d22\u5f15\u6765\u8bbf\u95ee\u5143\u7ec4\u4e2d\u7684\u503c\u3002 \u5143\u7ec4\u4e2d\u7684\u5143\u7d20\u503c\u662f\u4e0d\u5141\u8bb8\u4fee\u6539\u7684\uff0c\u4f46\u6211\u4eec\u53ef\u4ee5\u5bf9\u5143\u7ec4\u8fdb\u884c\u8fde\u63a5\u7ec4\u5408\u3002 \u5143\u7ec4\u4e2d\u7684\u5143\u7d20\u503c\u662f\u4e0d\u5141\u8bb8\u5220\u9664\u7684\uff0c\u4f46\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528del\u8bed\u53e5\u6765\u5220\u9664\u6574\u4e2a\u5143\u7ec4\u3002 # \u6b64\u5904\u62ec\u53f7\u88ab\u89e3\u6790\u4e3a\u8fd0\u7b97\u7b26\uff0c\u9700\u8981\u5728\u540e\u9762\u52a0\u4e0a\u9017\u53f7\u624d\u4f1a\u88ab\u89e3\u91ca\u4e3a\u5143\u7ec4 tup1 = (10) print(type(tup1)) # <class 'int'> tup1 = (10,) print(type(tup1)) # <class 'tuple'> \u521b\u5efa\u5143\u7ec4\u6700\u7b80\u5355\u7684\u529e\u6cd5\u5c31\u662f\u7528\u9017\u53f7\u5206\u9694\u5e8f\u5217\u503c\u3002\u5143\u7ec4\u5bf9\u6570\u636e\u7c7b\u578b\u6ca1\u6709\u4e00\u81f4\u6027\u8981\u6c42\u3002 tup = 4, 5, 6 print(tup) # (4, 5, 6) nested_tup = (4, 5, 6), (7, 8) print(nested_tup) # # ((4, 5, 6), (7, 8)) tup = ('a', 'b', {'one': 1}) print(type(tup)) # <class 'tuple'> \u4f7f\u7528\u52a0\u53f7\uff08+\uff09\u8fdb\u884c\u5143\u7ec4\u8fde\u63a5\u5408\u5e76\u3002 tup = tuple((4, None, 'fool') + (6, 0) + ('bar',)) print(tup) # (4, None, 'fool', 6, 0, 'bar') \u5143\u7ec4\u7684\u4e0d\u53ef\u53d8\u6307\u7684\u662f\u5143\u7ec4\u6240\u6307\u5411\u7684\u5185\u5b58\u4e2d\u7684\u5185\u5bb9\u4e0d\u53ef\u53d8\u3002 tup = ('h', 'e', 'l', 'l', 'o') print(id(tup)) # 139820353350208 tup = (1, 2, 3, 4, 5) print(id(tup)) # 139820353298896 tup[0] = 'x' # Traceback (most recent call last): # File \"<stdin>\", line 1, in <module> # TypeError: 'tuple' object does not support item assignment \u5c06\u5143\u7ec4\u4e58\u4ee5\u6574\u6570\uff0c\u5219\u4f1a\u548c\u5217\u8868\u4e00\u6837\uff0c\u751f\u6210\u542b\u6709\u591a\u4efd\u62f7\u8d1d\u7684\u5143\u7ec4\u3002\u5bf9\u8c61\u81ea\u8eab\u5e76\u6ca1\u6709\u590d\u5236\uff0c\u53ea\u662f\u6307\u5411\u5b83\u4eec\u7684\u5f15\u7528\u8fdb\u884c\u4e86\u590d\u5236\u3002 tup = tuple(('fool', 'bar') * 4) print(tup) # ('fool', 'bar', 'fool', 'bar', 'fool', 'bar', 'fool', 'bar') \u5982\u679c\u5143\u7ec4\u4e2d\u7684\u4e00\u4e2a\u5bf9\u8c61\u662f\u53ef\u53d8\u7684\uff0c\u4f8b\u5982\u5217\u8868\uff0c\u4f60\u53ef\u4ee5\u5728\u5b83\u5185\u90e8\u8fdb\u884c\u4fee\u6539 tup = tuple(['foo', [4, 5, 6], True]) tup[1].append(0) print(tup) # ('foo', [4, 5, 6, 0], True) tup[1].append([9]) print(tup) # ('foo', [4, 5, 6, 0, [9]], True) \u4f7f\u7528tuple\u51fd\u6570\u5c06\u4efb\u610f\u5e8f\u5217\u6216\u8fed\u4ee3\u5668\u8f6c\u6362\u4e3a\u5143\u7ec4 tup = tuple([4, 5, 6]) print(tup) # (4, 5, 6) tup = tuple('string') print(tup) # ('s', 't', 'r', 'i', 'n', 'g') print(tup[2]) # r # \u5143\u7ec4\u7684\u5143\u7d20\u53ef\u4ee5\u901a\u8fc7\u4e2d\u62ec\u53f7[]\u6765\u83b7\u53d6 \u5982\u679c\u8981\u5c06\u5143\u7ec4\u578b\u7684\u8868\u8fbe\u5f0f\u8d4b\u503c\u7ed9\u53d8\u91cf\uff0cPython\u4f1a\u5bf9\u7b49\u53f7\u53f3\u8fb9\u7684\u503c\u8fdb\u884c \u62c6\u5305 tup = (9, 5, (8, 7)) a, b, c = tup print(a) # 9 print(b) # 5 print(c) # (8, 7) a, b, (c, d) = tup print(a) # 9 print(b) # 5 print(c) # 8 print(d) # 7 tup = (9, 5, (8, 7)) a, b, c = tup c, a = a, c # \u5229\u7528\u62c6\u5305\u5b9e\u73b0\u4ea4\u6362 print(a) # (8, 7) print(b) # 5 print(c) # 9 \u5229\u7528\u62c6\u5305\u5b9e\u73b0\u904d\u5386\u5143\u7ec4\u6216\u5217\u8868\u7ec4\u6210\u7684\u5e8f\u5217 seq = [(1, 2, 3), (4, 5, 6), (7, 8, 9)] for a, b, c in seq: print('a={0}, b={0}, c={0}'.format(a, b, c)) # \u5217\u8868\u6bcf\u4e2a\u5143\u7d20\u7684\u53d6\u503c\u987a\u5e8f # a=1, b=1, c=1 # a=4, b=4, c=4 # a=7, b=7, c=7 print('a={0}, b={1}, c={2}'.format(a, b, c)) # a=1, b=2, c=3 # a=4, b=5, c=6 # a=7, b=8, c=9 print('a={2}, b={0}, c={1}'.format(a, b, c)) # a=3, b=1, c=2 # a=6, b=4, c=5 # a=9, b=7, c=8 \u5143\u7ec4\u62c6\u5305\u529f\u80fd\u8fd8\u5305\u62ec\u7279\u6b8a\u7684\u8bed\u6cd5*rest\u3002\u5f88\u591aPython\u7f16\u7a0b\u8005\u4f1a\u4f7f\u7528\u4e0b\u5212\u7ebf\uff08_\uff09\u6765\u8868\u793a\u4e0d\u60f3\u8981\u7684\u53d8\u91cf values = 1, 2, 3, 4, 5 a, b, *rest = values print(a) # 1 print(b) # 2 print(*rest) # 3 4 5 a, b, *_ = values print(*_) # 3 4 5","title":"1.6 \u5143\u7ec4\uff08tuple\uff09"},{"location":"python/Foundation/ch01/#2","text":"\u661f\u53f7 * \u7684\u53c2\u6570\u4f1a\u4ee5\u5143\u7ec4(tuple)\u7684\u5f62\u5f0f\u5bfc\u5165\uff0c\u5b58\u653e\u6240\u6709\u672a\u547d\u540d\u7684\u53d8\u91cf\u53c2\u6570 def printinfo(arg1, *vartuple): print(\"\u8f93\u51fa\u4efb\u4f55\u4f20\u5165\u7684\u53c2\u6570: \") print(arg1) print(vartuple) for var in vartuple: print(var) return printinfo(10) # 10 # () printinfo(70, 60, 50) # 70 # (60, 50) # 60 # 50 \u4e24\u4e2a\u661f\u53f7 ** \u7684\u53c2\u6570\u4f1a\u4ee5\u5b57\u5178\u7684\u5f62\u5f0f\u5bfc\u5165 def printinfo(arg1, **vardict): print(\"\u8f93\u51fa\u4efb\u4f55\u4f20\u5165\u7684\u53c2\u6570: \") print(arg1) print(vardict) printinfo(1, a=2, b=3) # 1 # {'a': 2, 'b': 3} \u5b57\u5178\u683c\u5f0f\u8f93\u51fa Python\u4e2d\u7684\u5bf9\u8c61\u5f15\u7528\u5e76\u4e0d\u6d89\u53ca\u7c7b\u578b\u3002\u53d8\u91cf\u5bf9\u4e8e\u5bf9\u8c61\u6765\u8bf4\u53ea\u662f\u7279\u5b9a\u547d\u540d\u7a7a\u95f4\u4e2d\u7684\u540d\u79f0\uff1b\u7c7b\u578b\u4fe1\u606f\u662f\u5b58\u50a8\u5728\u5bf9\u8c61\u81ea\u8eab\u4e4b\u4e2d\u3002 a = 5 print(type(a)) # <class 'int'> a = 'foo' print(type(a)) # <class 'str'> Python\u662f\u5f3a\u7c7b\u578b\u8bed\u8a00\uff0c\u6240\u6709\u7684\u5bf9\u8c61\u90fd\u62e5\u6709\u4e00\u4e2a\u6307\u5b9a\u7684\u7c7b\u578b\uff08\u6216\u7c7b\uff09\uff0c\u9690\u5f0f\u7684\u8f6c\u6362\u53ea\u5728\u67d0\u4e9b\u7279\u5b9a\u3001\u660e\u663e\u7684\u60c5\u51b5\u4e0b\u53d1\u751f\u3002 a = 4.5 b = 2 print('a is {0}, b is {1}'.format(type(a), type(b))) # a is <class 'float'>, b is <class 'int'> \u5b57\u4e32\u683c\u5f0f\u5316\uff0c\u7528\u4e8e\u540e\u7eed\u8bbf\u95ee print(a / b) # 2.25 \u4f7f\u7528isinstance\u51fd\u6570\u6765\u68c0\u67e5\u4e00\u4e2a\u5bf9\u8c61\u662f\u5426\u662f\u7279\u5b9a\u7c7b\u578b\u7684\u5b9e\u4f8b\u3002isinstance\u63a5\u53d7\u4e00\u4e2a\u5305\u542b\u7c7b\u578b\u7684\u5143\u7ec4\uff0c\u53ef\u4ee5\u68c0\u67e5\u5bf9\u8c61\u7684\u7c7b\u578b\u662f\u5426\u5728\u5143\u7ec4\u4e2d\u7684\u7c7b\u578b\u4e2d\u3002 a = 5 b = 4.5 c = 'foo' print(isinstance(a, int)) # True print(isinstance(b, str)) # False print(isinstance(c, (str, int))) # True print(isinstance(c, (float, int))) # False \u5c5e\u6027\u548c\u65b9\u6cd5\u4e5f\u53ef\u4ee5\u901a\u8fc7getattr\u51fd\u6570\u83b7\u5f97\u3002\u5728\u5176\u4ed6\u7684\u8bed\u8a00\u4e2d\uff0c\u901a\u8fc7\u53d8\u91cf\u540d\u8bbf\u95ee\u5bf9\u8c61\u901a\u5e38\u88ab\u79f0\u4e3a\u201c\u53cd\u5c04\u201d\u3002 b = 'foo' print(getattr(b, 'split')) # <built-in method split of str object at 0x7f1d603ba430>","title":"2. \u52a8\u6001\u5f15\u7528\u3001\u5f3a\u7c7b\u578b"},{"location":"python/Foundation/ch01/#3","text":"\u68c0\u67e5\u4e24\u4e2a\u5f15\u7528\u662f\u5426\u6307\u5411\u540c\u4e00\u4e2a\u5bf9\u8c61\uff0c\u53ef\u4ee5\u4f7f\u7528is\u5173\u952e\u5b57\u3002 is\u548cis not\u7684\u5e38\u7528\u4e4b\u5904\u662f\u68c0\u67e5\u4e00\u4e2a\u53d8\u91cf\u662f\u5426\u4e3aNone\uff0c\u56e0\u4e3aNone\u53ea\u6709\u4e00\u4e2a\u5b9e\u4f8b\u3002 a = [1, 2, 3] b = a c = list(a) # list\u51fd\u6570\u603b\u662f\u521b\u5efa\u4e00\u4e2a\u65b0\u7684Python\u5217\u8868\uff08\u5373\u4e00\u4efd\u62f7\u8d1d\uff09 print(a is b) # True print(a is not c) # True print(a == c) # True d = None print(d is None) # True Python\u4e2d\u7684\u5927\u90e8\u5206\u5bf9\u8c61\uff0c\u4f8b\u5982\u5217\u8868\u3001\u5b57\u5178\u3001NumPy\u6570\u7ec4\u90fd\u662f\u53ef\u53d8\u5bf9\u8c61\uff0c\u5927\u591a\u6570\u7528\u6237\u5b9a\u4e49\u7684\u7c7b\u578b\uff08\u7c7b\uff09\u4e5f\u662f\u53ef\u53d8\u7684\u3002 \u53ef\u53d8\u5bf9\u8c61\u4e2d\u5305\u542b\u7684\u5bf9\u8c61\u548c\u503c\u662f\u53ef\u4ee5\u88ab\u4fee\u6539\u7684\u3002\u8fd8\u6709\u5176\u4ed6\u4e00\u4e9b\u5bf9\u8c61\u662f\u4e0d\u53ef\u53d8\u7684\uff0c\u6bd4\u5982\u5b57\u7b26\u4e32\u3001\u5143\u7ec4\u3002 a_list = ['foo', 2, [4, 5]] # \u5217\u8868 a_list[2] = (3, 4) print(a_list) # ['foo', 2, (3, 4)] a_tuple = (3, 5, (4, 5)) # \u5143\u7ec4 a_tuple[1] = 'four' # TypeError: 'tuple' object does not support item assignment \u4e0d\u53ef\u88ab\u4fee\u6539 print(a_tuple) # (3, 5, (4, 5))","title":"3. \u4e8c\u5143\u8fd0\u7b97\u7b26\u548c\u6bd4\u8f83\u8fd0\u7b97"},{"location":"python/Foundation/ch01/#4","text":"Python\u6807\u91cf\u7c7b\u578b\uff1aNone, str, bytes, float, bool, int \u6570\u503c\u7c7b\u578b\u3002 \u57fa\u7840\u7684Python\u6570\u5b57\u7c7b\u578b\u5c31\u662fint\u548cfloat\u3002int\u53ef\u4ee5\u5b58\u50a8\u4efb\u610f\u5927\u5c0f\u6570\u5b57\u3002\u6d6e\u70b9\u6570\u5728Python\u4e2d\u7528float\u8868\u793a\uff0c\u6bcf\u4e00\u4e2a\u6d6e\u70b9\u6570\u90fd\u662f\u53cc\u7cbe\u5ea664\u4f4d\u6570\u503c\u3002 ival = 17338971 print(ival ** 6) # 27173145946003847721495630081806010734757321 fval = 17338971.0 print(fval ** 6) # 2.7173145946003847e+43 print(3 / 2) # 1.5 print(3 // 2) # 1 \u5b57\u7b26\u4e32\u3002 Python\u7684\u5b57\u7b26\u4e32\u662f\u4e0d\u53ef\u53d8\u7684\u3002 a = 5.6 s = str(a) print(s) # 5.6 b = 'python' print(list(b)) # ['p', 'y', 't', 'h', 'o', 'n'] print(b[2]) # t b[2] = 'f' # TypeError: 'str' object does not support item assignment \u5b57\u7b26\u4e32\u662f\u4e0d\u53ef\u53d8\u7684 \u53cd\u659c\u6760\u7b26\u53f7\\\u662f\u4e00\u79cd\u8f6c\u4e49\u7b26\u53f7\uff0c\u5b83\u7528\u6765\u6307\u660e\u7279\u6b8a\u7b26\u53f7\u3002 \u5982\u679c\u4f60\u6709\u4e00\u4e2a\u4e0d\u542b\u7279\u6b8a\u7b26\u53f7\u4f46\u542b\u6709\u5927\u91cf\u53cd\u659c\u6760\u7684\u5b57\u7b26\u4e32\u65f6\uff0c\u53ef\u4ee5\u5728\u5b57\u7b26\u4e32\u524d\u9762\u52a0\u4e00\u4e2a\u524d\u7f00\u7b26\u53f7r\uff0c\u8868\u660e\u8fd9\u4e9b\u5b57\u7b26\u662f\u539f\u751f\u5b57\u7b26\uff0cr\u662fraw\u7684\u7b80\u5199\uff0c\u8868\u793a\u539f\u751f\u7684\u3002 x = '12\\\\34' y = r'this\\has\\no\\special\\characters' print(x) # 12\\34 print(y) # this\\has\\no\\special\\characters \u5b57\u7b26\u4e32\u683c\u5f0f\u5316 {0:.2f}\u8868\u793a\u5c06\u7b2c\u4e00\u4e2a\u53c2\u6570\u683c\u5f0f\u5316\u4e3a2\u4f4d\u5c0f\u6570\u7684\u6d6e\u70b9\u6570 {1:s}\u8868\u793a\u5c06\u7b2c\u4e8c\u4e2a\u53c2\u6570\u683c\u5f0f\u5316\u4e3a\u5b57\u7b26\u4e32 {2:d}\u8868\u793a\u5c06\u7b2c\u4e09\u4e2a\u53c2\u6570\u683c\u5f0f\u5316\u6574\u6570 \u53c2\u8003Python\u5b98\u65b9\u6587\u6863 https://docs.python.org/3.6/library/string.html template = '{0:.2f} {1:s} are worth US${2:d}' print(template.format(4.5560, 'Argentine Pesos', 1)) # 4.56 Argentine Pesos are worth US$1 \u65e5\u671f\u548c\u65f6\u95f4 from datetime import datetime, date, time dt = datetime(2011, 10, 29, 20, 30, 21) print(dt.day) # 29 print(dt.minute) # 30 print(dt.date()) # 2011-10-29 print(dt.time()) # 20:30:21 print(dt.replace(minute=0, second=0)) # 2011-10-29 20:00:00 \u5c06\u5206\u949f\u3001\u79d2\u66ff\u6362\u4e3a0 print(datetime.strptime('20091021', '%Y%m%d')) # 2009-10-21 00:00:00 \u5b57\u7b26\u4e32\u53ef\u4ee5\u901a\u8fc7 strptime \u51fd\u6570\u8f6c\u6362\u4e3adatetime\u5bf9\u8c61 dt2 = datetime(2011, 11, 15, 22, 30) delta = dt2 - dt print(delta) # 17 days, 1:59:39 print(dt + delta) # 2011-11-15 22:30:00 range\u51fd\u6570\u8fd4\u56de\u4e00\u4e2a\u8fed\u4ee3\u5668\uff0c\u8be5\u8fed\u4ee3\u5668\u751f\u6210\u4e00\u4e2a\u7b49\u5dee\u6574\u6570\u5e8f\u5217\u3002 print(range(10)) # range(0, 10) print(list(range(10))) # [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] print(list(range(0, 20, 2))) # [0, 2, 4, 6, 8, 10, 12, 14, 16, 18]","title":"4. \u6807\u91cf\u7c7b\u578b"},{"location":"python/Foundation/ch01/#5","text":"value = true-expr if condition else false-expr x = 5 print('non-negative' if x >= 0 else 'negative') # non-negative","title":"5. \u4e09\u5143\u8868\u8fbe\u5f0f"},{"location":"python/Foundation/ch02/","text":"Python\u4e2d\u7684\u6253\u5305Packing\u548c\u89e3\u5305Unpacking \u89e3\u5305Unpacking Python \u5141\u8bb8\u53d8\u91cf\u7684\u5143\u7ec4\uff08\u6216\u5217\u8868\uff09\u51fa\u73b0\u5728\u8d4b\u503c\u64cd\u4f5c\u7684\u5de6\u4fa7\u3002 \u5143\u7ec4\u4e2d\u7684\u6bcf\u4e2a\u53d8\u91cf\u90fd\u53ef\u4ee5\u4ece\u8d4b\u503c\u53f3\u4fa7\u7684\u53ef\u8fed\u4ee3\u5bf9\u8c61\uff08iterable\uff09\u4e2d\u63a5\u6536\u4e00\u4e2a\u503c\uff08\u6216\u8005\u66f4\u591a\uff0c\u5982\u679c\u6211\u4eec\u4f7f\u7528 * \u8fd0\u7b97\u7b26\uff09\u3002 Python \u4e2d\u7684\u89e3\u5305\u662f\u6307\u4e00\u79cd\u64cd\u4f5c\uff0c\u8be5\u64cd\u4f5c\u5305\u62ec\u5728\u5355\u4e2a\u8d4b\u503c\u8bed\u53e5\u4e2d\u5c06\u53ef\u8fed\u4ee3\u7684\u503c\u5206\u914d\u7ed9\u53d8\u91cf\u7684\u5143\u7ec4\uff08\u6216\u5217\u8868\uff09\u3002 \u5728 Python \u4e2d\uff0c\u53ef\u4ee5\u5728\u8d4b\u503c\u8fd0\u7b97\u7b26 (=) \u7684\u5de6\u4fa7\u653e\u7f6e\u4e00\u4e2a\u53d8\u91cf\u5143\u7ec4\uff0c\u5728\u53f3\u4fa7\u653e\u7f6e\u4e00\u4e2a\u503c\u5143\u7ec4\u3002 \u53f3\u8fb9\u7684\u503c\u5c06\u6839\u636e\u5b83\u4eec\u5728\u5143\u7ec4\u4e2d\u7684\u4f4d\u7f6e\u81ea\u52a8\u5206\u914d\u7ed9\u5de6\u8fb9\u7684\u53d8\u91cf\u3002 \u8fd9\u5728 Python \u4e2d\u901a\u5e38\u79f0\u4e3a\u5143\u7ec4\u89e3\u5305\u3002 \u5982\u4e0b\u793a\u4f8b\uff1a >>> (a, b, c) = (1, 2, 3) >>> a 1 >>> b 2 >>> c 3 >>> birthday = ('April', 5, 2001) >>> month, day, year = birthday >>> month 'April' >>> day 5 >>> year 2001 \u5143\u7ec4\u89e3\u5305\u529f\u80fd\u5728 Python \u4e2d\u53ef\u4ee5\u6269\u5c55\u4e3a\u9002\u7528\u4e8e\u4efb\u4f55\u53ef\u8fed\u4ee3\u5bf9\u8c61\u3002 \u552f\u4e00\u7684\u8981\u6c42\u662f\u53ef\u8fed\u4ee3\u7684\u63a5\u6536\u5143\u7ec4\uff08\u6216\u5217\u8868\uff09\u4e2d\u7684\u6bcf\u4e2a\u53d8\u91cf\u6070\u597d\u5bf9\u5e94\u53ef\u8fed\u4ee3\u5bf9\u8c61\u7684\u4e00\u4e2a\u5143\u7d20\uff08item\uff09\u3002 \u4e0b\u9762\u7684\u793a\u4f8b\u4ecb\u7ecd\u4e86 Python \u4e2d\u53ef\u8fed\u4ee3\u89e3\u5305\u7684\u5de5\u4f5c\u539f\u7406\uff1a >>> # Unpackage strings >>> a, b, c = '123' >>> a '1' >>> b '2' >>> c '3' >>> # Unpacking lists >>> a, b, c = [1, 2, 3] >>> a 1 >>> b 2 >>> c 3 >>> # Unpacking generators >>> gen = (i ** 2 for i in range(3)) >>> a, b, c = gen >>> a 0 >>> b 1 >>> c 4 >>> # Upacking dictionaries (keys, values, and items) >>> my_dict = {'one': 1, 'two': 2, 'three': 3} >>> a, b, c = my_dict >>> a 'one' >>> b 'two' >>> c 'three' >>> a, b, c = my_dict.values() >>> a 1 >>> b 2 >>> c 3 >>> a, b, c = my_dict.items() >>> a ('one', 1) >>> b ('two', 2) >>> c ('three', 3) >>> # Use a tuple on the right side of assignment statement >>> [a, b, c] = 1, 2, 3 >>> a 1 >>> b 2 >>> c 3 >>> # Use range() iterator >>> x, y, z = range(3) >>> x 0 >>> y 1 >>> z 2 \u6253\u5305Packing \u6253\u5305\u53ef\u4ee5\u7406\u89e3\u4e3a\u4f7f\u7528\u53ef\u8fed\u4ee3\u89e3\u5305\u8fd0\u7b97\u7b26\u5728\u5355\u4e2a\u53d8\u91cf\u4e2d\u6536\u96c6\u591a\u4e2a\u503c\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c * \u8fd0\u7b97\u7b26\u88ab\u79f0\u4e3a\u5143\u7ec4\uff08\u6216\u53ef\u8fed\u4ee3\uff09\u89e3\u5305\u8fd0\u7b97\u7b26\u3002 \u5b83\u6269\u5c55\u4e86\u89e3\u5305\u529f\u80fd\uff0c\u5141\u8bb8\u5728\u5355\u4e2a\u53d8\u91cf\u4e2d\u6536\u96c6\u6216\u6253\u5305\u591a\u4e2a\u503c\u3002 \u5728\u4ee5\u4e0b\u793a\u4f8b\u4e2d\u53ef\u4ee5\u770b\u5230 * \u8fd0\u7b97\u7b26\u5c06\u5143\u7ec4\u503c\u6253\u5305\u5230\u5355\u4e2a\u53d8\u91cf\u4e2d\uff1a >>> # The right side is a tuple, the left side is a list >>> *a, = 1, 2 >>> a [1, 2] >>> type(a) <class 'list'> \u5728\u4e0a\u9762\u7684\u4ee3\u7801\u4e2d\uff0c\u8d4b\u503c\u7684\u5de6\u4fa7\u5fc5\u987b\u662f\u5143\u7ec4\uff08\u6216\u5217\u8868\uff09\uff0c\u8fd9\u5c31\u662f\u4f7f\u7528\u5c3e\u968f\u9017\u53f7\u7684\u539f\u56e0\u3002\u8fd9\u4e2a\u5143\u7ec4\u53ef\u4ee5\u5305\u542b\u6240\u9700\u8981\u7684\u5c3d\u53ef\u80fd\u591a\u7684\u53d8\u91cf\uff0c\u4f46\u662f\uff0c\u5b83\u53ea\u80fd\u5305\u542b\u4e00\u4e2a\u661f\u53f7\u8868\u8fbe\u5f0f(starred expression)\u3002 >>> # Packing trailing values >>> a, *b = 1, 2, 3 >>> a 1 >>> b [2, 3] >>> type(a) <class 'int'> >>> type(b) <class 'list'> >>> >>> *a, b, c = 1, 2, 3 >>> a [1] >>> b 2 >>> c 3 >>> *a, b, c, d, e = 1, 2, 3 Traceback (most recent call last): File \"<stdin>\", line 1, in <module> ValueError: not enough values to unpack (expected at least 4, got 3) >>> *a, b, c, d = 1, 2, 3 >>> a [] >>> b 1 >>> c 2 >>> d 3 >>> >>> seq = [1, 2, 3, 4] >>> first, *body, last = seq >>> first, body, last (1, [2, 3], 4) >>> first, body, *last = seq >>> first, body, last (1, 2, [3, 4]) >>> >>> ran = range(10) >>> *r, = ran >>> r [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] \u4e0b\u9762\u662f\u4e00\u4e9b\u6253\u5305\u548c\u89e3\u5305\u7684\u4f8b\u5b50\u3002 >>> employee = ['John Doe', '40', 'Software Engineer'] >>> name = employee[0] >>> age = employee[1] >>> job = employee[2] >>> name 'John Doe' >>> age '40' >>> job 'Software Engineer' >>> >>> name, age, job = ['John Doe', '40', 'Software Engineer'] >>> name 'John Doe' >>> age '40' >>> job 'Software Engineer' >>> >>> a = 100 >>> b = 200 >>> a, b = b, a >>> a 200 >>> b 100 \u4f7f\u7528 * \u5220\u9664\u4e0d\u9700\u8981\u7684\u503c\u3002 >>> a, b, *_ = 1, 2, 0, 0, 0, 0 >>> a 1 >>> b 2 >>> _ [0, 0, 0, 0] \u5728\u4e0a\u4f8b\u4e2d\uff0c\u4e0d\u9700\u8981\u7684\u4fe1\u606f\u5b58\u50a8\u5728\u865a\u62df\u53d8\u91cf _ \u4e2d\uff0c\u5728\u540e\u7eed\u7684\u4f7f\u7528\u4e2d\u53ef\u4ee5\u5ffd\u7565\u5b83\u3002 \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0cPython \u89e3\u91ca\u5668\u4f7f\u7528\u4e0b\u5212\u7ebf\u5b57\u7b26 _ \u6765\u5b58\u50a8\u5728\u4ea4\u4e92\u5f0f\u4f1a\u8bdd\u4e2d\u8fd0\u884c\u7684\u8bed\u53e5\u7684\u7ed3\u679c\u503c\u3002 \u56e0\u6b64\uff0c\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u4f7f\u7528\u8fd9\u4e2a\u5b57\u7b26\u6765\u8bc6\u522b\u865a\u62df\u53d8\u91cf\u53ef\u80fd\u662f\u6a21\u68f1\u4e24\u53ef\u7684\u3002 \u5728\u51fd\u6570\u4e2d\u8fd4\u56de\u5143\u7ec4\u3002 >>> def powers(num): ... return num, num ** 2, num ** 3 ... >>> # Packaging returned values in a tuple >>> result = powers(3) >>> result (3, 9, 27) >>> # Unpacking returned values to multiple variables >>> number, square, cube = powers(3) >>> number 3 >>> square 9 >>> cube 27 >>> *_, cube = powers(3) >>> cube 27 \u4f7f\u7528 * \u548c ** \u8fd0\u7b97\u7b26 \u4f7f\u7528 * \u8fd0\u7b97\u7b26\u5408\u5e76\u8fed\u4ee3\u53d8\u91cf\uff08iterables\uff09\u3002\u4e0a\u9762\u4e24\u4e2a\u4f8b\u5b50\u8bf4\u660e\uff0c\u8fd9\u4e2d\u65b9\u6cd5\u4e5f\u662f\u8fde\u63a5\u8fed\u4ee3\u53d8\u91cf\uff08iterables\uff09\u7684\u4e00\u79cd\u66f4\u6613\u8bfb\u548c\u66f4\u6709\u6548\u7684\u65b9\u6cd5\u3002 \u8fd9\u4e2a\u65b9\u6cd5 (my_set) + my_list + list(my_tuple) + list(range(1, 4)) + list(my_str) \u53ef\u4ee5\u751f\u6210\u4e00\u4e2a\u5217\u8868 \uff0c\u4e5f\u53ef\u4ee5\u4f7f\u7528\u66f4\u7b80\u6d01\u7684\u65b9\u6cd5 [*my_set, *my_list, *my_tuple, *range(1, 4), *my_str] \u3002 >>> my_tuple = (1, 2, 3) >>> (0, *my_tuple, 4) (0, 1, 2, 3, 4) >>> my_list = [1, 2, 3] >>> [0, *my_list, 4] [0, 1, 2, 3, 4] >>> my_set = {1, 2, 3} >>> {0, *my_set, 4} {0, 1, 2, 3, 4} >>> [*my_set, *my_list, *my_tuple, *range(1, 4)] [1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3] >>> my_str = \"123\" >>> [*my_set, *my_list, *my_tuple, *range(1, 4), *my_str] [1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, '1', '2', '3'] \u4f7f\u7528 ** \u8fd0\u7b97\u7b26\u89e3\u5305\u5b57\u5178\u3002 >>> numbers = {'one': 1, 'two': 2, 'three': 3} >>> letters = {'a': 'A', 'b': 'B', 'c': 'C'} >>> combination = {**numbers, **letters} >>> combination {'one': 1, 'two': 2, 'three': 3, 'a': 'A', 'b': 'B', 'c': 'C'} \u9700\u8981\u6ce8\u610f\u7684\u91cd\u8981\u4e00\u70b9\u662f\uff0c\u5982\u679c\u6211\u4eec\u5408\u5e76\u7684\u5b57\u5178\u5177\u6709\u91cd\u590d\u952e\u6216\u516c\u5171\u952e\uff0c\u5219\u6700\u53f3\u4fa7\u5b57\u5178\u7684\u503c\u5c06\u8986\u76d6\u6700\u5de6\u4fa7\u5b57\u5178\u7684\u503c\u3002\u4f8b\u5982: >>> letters = {'a': 'A', 'b': 'B', 'c': 'C'} >>> vowels = {'a': 'a', 'e': 'e', 'i': 'i', 'o': 'o', 'u': 'u'} >>> {**letters, **vowels} {'a': 'a', 'b': 'B', 'c': 'C', 'e': 'e', 'i': 'i', 'o': 'o', 'u': 'u'} >>> {**vowels, **letters} {'a': 'A', 'e': 'e', 'i': 'i', 'o': 'o', 'u': 'u', 'b': 'B', 'c': 'C'} \u901a\u8fc7 For-Loops \u89e3\u5305 \u6211\u4eec\u8fd8\u53ef\u4ee5\u5728 for \u5faa\u73af\u7684\u4e0a\u4e0b\u6587\u4e2d\u4f7f\u7528\u53ef\u8fed\u4ee3\u89e3\u5305\u3002 \u5f53\u6211\u4eec\u8fd0\u884c for \u5faa\u73af\u65f6\uff0c\u5728\u6bcf\u6b21\u5faa\u73af\u8fed\u4ee3\u4e2d\u5c06\u5176\u53ef\u8fed\u4ee3\u5bf9\u8c61\u4e2d\u7684\u4e00\u9879(item)\u5206\u914d\u7ed9\u76ee\u6807\u53d8\u91cf\u3002 \u5982\u679c\u8981\u5206\u914d\u7684\u9879(item)\u662f\u53ef\u8fed\u4ee3\u7684\uff0c\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u5143\u7ec4\u4f5c\u4e3a\u76ee\u6807\u53d8\u91cf\uff0c\u901a\u8fc7\u5faa\u73af\u5c06\u53ef\u8fed\u4ee3\u5bf9\u8c61\u89e3\u5305\u5230\u76ee\u6807\u53d8\u91cf\u7684\u5143\u7ec4\u4e2d\u3002 \u4f8b\u5982\uff0c\u6211\u4eec\u53ef\u4ee5\u6784\u5efa\u4e00\u4e2a\u5305\u542b\u4e24\u4e2a\u5143\u7d20\u7684\u5143\u7ec4\u7684\u5217\u8868\u3002 \u6bcf\u4e2a\u5143\u7ec4\u5c06\u5305\u542b\u4ea7\u54c1\u540d\u79f0\u3001\u4ef7\u683c\u548c\u9500\u552e\u5355\u4f4d\uff0c\u6211\u4eec\u901a\u8fc7 for \u5faa\u73af\u904d\u5386\u6bcf\u4e2a\u5143\u7ec4\u5143\u7d20\u6765\u8ba1\u7b97\u6bcf\u4e2a\u4ea7\u54c1\u7684\u6536\u5165\u3002 >>> sales = [('Pencle', 0.22, 1500), ('Notebook', 1.30, 550), ('Eraser', 0.75, 1000)] >>> for items in sales: ... print(f\"Income for {items[0]} is: {items[1] * items[2]}\") ... Income for Pencle is: 330.0 Income for Notebook is: 715.0 Income for Eraser is: 750.0 \u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u7d22\u5f15\u6765\u8bbf\u95ee\u6bcf\u4e2a\u5143\u7ec4\u7684\u5404\u4e2a\u5143\u7d20\u3002\u4e0b\u9762\u7684\u793a\u4f8b\u4ee3\u7801\u4e2d\uff0c\u5728 for \u5faa\u73af\u4f7f\u7528\u89e3\u5305\uff0c\u8fd9\u4e5f\u662f Python \u4e2d\u89e3\u5305\u7684\u4e00\u79cd\u5b9e\u73b0\u3002 >>> sales = [('Pencle', 0.22, 1500), ('Notebook', 1.30, 550), ('Eraser', 0.75, 1000)] >>> for product, price, sold_units in sales: ... print(f\"Income for {product} is: {price * sold_units}\") ... Income for Pencle is: 330.0 Income for Notebook is: 715.0 Income for Eraser is: 750.0 \u4e5f\u53ef\u4ee5\u5728 for \u5faa\u73af\u4e2d\u4f7f\u7528 * \u8fd0\u7b97\u7b26\u5c06\u591a\u4e2a\u9879\u6253\u5305\u5230\u5355\u4e2a\u76ee\u6807\u53d8\u91cf\u4e2d\u3002 \u5728\u4e0b\u9762\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u6211\u4eec\u9996\u5148\u53d6\u5f97\u6bcf\u4e2a\u5e8f\u5217\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\u3002 \u5176\u4f59\u503c\u901a\u8fc7 * \u8fd0\u7b97\u7b26\u8d4b\u7ed9\u76ee\u6807\u53d8\u91cf rest\u3002 >>> for first, *rest in [(1, 2, 3),(4, 5, 6)]: ... print('First: ', first) ... print('Rest: ', rest) ... First: 1 Rest: [2, 3] First: 4 Rest: [5, 6] >>> \u76ee\u6807\u53d8\u91cf\u7684\u7ed3\u6784\u5fc5\u987b\u4e0e\u53ef\u8fed\u4ee3\u5bf9\u8c61\u7684\u7ed3\u6784\u4e00\u81f4\uff0c\u5426\u5219\u4f1a\u62a5\u9519\u3002\u770b\u4e0b\u9762\u7684\u4f8b\u5b50\u3002 >>> data = [((1, 2), 3), ((2, 3), 3)] >>> for (a, b), c in data: ... print(a, b, c) ... 1 2 3 2 3 3 >>> for a, b, c in data: ... print(a, b, c) ... Traceback (most recent call last): File \"<stdin>\", line 1, in <module> ValueError: not enough values to unpack (expected 3, got 2) \u7528 * \u548c ** \u5b9a\u4e49\u51fd\u6570 \u4e0b\u9762\u4f8b\u5b50\u4e2d\u7684\u51fd\u6570func\u81f3\u5c11\u9700\u8981\u4e00\u4e2a\u540d\u4e3a\u201crequired\u201d\u7684\u53c2\u6570\u3002 \u5b83\u4e5f\u53ef\u4ee5\u63a5\u53d7\u4e00\u4e2a\u6216\u591a\u4e2a\u4f4d\u7f6e\u53c2\u6570\u6216\u5173\u952e\u5b57\u53c2\u6570\u3002 \u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c * \u8fd0\u7b97\u7b26\u5728\u4e00\u4e2a\u53eb args \u7684\u5143\u7ec4\u4e2d\u6536\u96c6\u6216\u6253\u5305\u989d\u5916\u7684\u4f4d\u7f6e\u53c2\u6570\uff0c\u800c ** \u8fd0\u7b97\u7b26\u5728\u4e00\u4e2a\u53eb kwargs \u7684\u5b57\u5178\u4e2d\u6536\u96c6\u6216\u6253\u5305\u989d\u5916\u7684\u5173\u952e\u5b57\u53c2\u6570\u3002 args \u548c kwargs \u90fd\u662f\u53ef\u9009\u7684\uff0c\u5e76\u4e14\u5206\u522b\u81ea\u52a8\u9ed8\u8ba4\u4e3a\u5143\u7ec4()\u548c\u5b57\u5178{}\u3002 \u8fd9\u91cc args \u548c kwargs \u7684\u547d\u540d\u5e76\u4e0d\u662f\u5fc5\u987b\u7684\uff0c\u8bed\u6cd5\u4e0a\u53ea\u9700\u8981 * \u6216 ** \u540e\u8ddf\u6709\u6548\u6807\u8bc6\u7b26\u5373\u53ef\uff0c\u5efa\u8bae\u7ed9\u53d8\u91cf\u8d77\u4e2a\u6709\u610f\u4e49\u7684\u540d\u5b57\uff0c\u63d0\u9ad8\u4ee3\u7801\u7684\u53ef\u8bfb\u6027\u3002 >>> def func(required, *args, **kwargs): ... print(required) ... print(args) ... print(kwargs) ... >>> func('Welcome to ...', 1, 2, 3, site='CloudAcademy.com') Welcome to ... (1, 2, 3) {'site': 'CloudAcademy.com'} >>> func('Welcome to ...', 1, 2, 3, 4) Welcome to ... (1, 2, 3, 4) {} >>> func('Welcome to ...', 1, 2, 3, (1, 2)) Welcome to ... (1, 2, 3, (1, 2)) {} >>> func('Welcome to ...', 1, 2, 3, [1, 2]) Welcome to ... (1, 2, 3, [1, 2]) {} >>> func('Welcome to ...', 1, 2, 3, ([2, 3], [1, 2])) Welcome to ... (1, 2, 3, ([2, 3], [1, 2])) {} \u4f7f\u7528 * \u548c ** \u8c03\u7528\u51fd\u6570 \u8c03\u7528\u51fd\u6570\u65f6\uff0c\u6211\u4eec\u8fd8\u53ef\u4ee5\u53d7\u76ca\u4e8e\u4f7f\u7528 * \u548c \u8fd0\u7b97\u7b26\u5c06\u53c2\u6570\u96c6\u5408\u5206\u522b\u89e3\u538b\u7f29\u4e3a\u5355\u72ec\u7684\u4f4d\u7f6e\u53c2\u6570\u6216\u5173\u952e\u5b57\u53c2\u6570\u3002 \u8fd9\u4e0e\u5728\u51fd\u6570\u7b7e\u540d(signature of a function)\u4e2d\u4f7f\u7528 * \u548c \u662f\u76f8\u53cd\u7684\u3002 \u5728\u51fd\u6570\u7b7e\u540d\u4e2d\uff0c\u8fd0\u7b97\u7b26\u7684\u610f\u601d\u662f\u5728\u4e00\u4e2a\u6807\u8bc6\u7b26\u4e2d\u6536\u96c6\u6216\u6253\u5305\u53ef\u53d8\u6570\u91cf\u7684\u53c2\u6570\u3002 \u5728\u8c03\u7528(calling)\u4e2d\uff0c\u5b83\u4eec\u7684\u610f\u601d\u662f\u89e3\u5305(unpack)\u4e00\u4e2a\u53ef\u8fed\u4ee3\u5bf9\u8c61\u5230\u591a\u4e2a\u53c2\u6570\u4e2d\u3002 \u7eed\u4e0a\u4f8b\uff0c \u8fd0\u7b97\u7b26\u5c06\u50cf [\"Welcome\", \"to\"] \u8fd9\u6837\u7684\u5e8f\u5217\u89e3\u5305\u5230\u4f4d\u7f6e\u53c2\u6570\u4e2d\u3002 \u7c7b\u4f3c\u5730\uff0c * \u8fd0\u7b97\u7b26\u5c06\u5b57\u5178\u89e3\u5305\u4e3a\u4e0e\u5b57\u5178\u7684\u952e\u503c\u5339\u914d\u7684\u53c2\u6570\u540d\u3002 >>> def func(welcome, to, site): ... print(welcome, to, site) ... >>> func(*['Welcome', 'to'], **{'site': 'CloudAcademy.com'}) Welcome to CloudAcademy.com \u7efc\u5408\u8fd0\u7528\u524d\u9762\u7684\u65b9\u6cd5\u6765\u7f16\u5199\u975e\u5e38\u7075\u6d3b\u7684\u51fd\u6570\uff0c\u6bd4\u5982\uff0c\u5728\u5b9a\u4e49\u548c\u8c03\u7528 Python \u51fd\u6570\u65f6\uff0c\u66f4\u7075\u6d3b\u7684\u4f7f\u7528 * \u548c ** \u8fd0\u7b97\u7b26\u3002 \u4f8b\u5982\uff1a >>> def func(required, *args, **kwargs): ... print(required) ... print(args) ... print(kwargs) ... >>> func('Welcome to...', *(1, 2, 3), **{'Site': 'CloudAcademy.com'}) Welcome to... (1, 2, 3) {'Site': 'CloudAcademy.com'} \u603b\u7ed3 \u53ef\u8fed\u4ee3\u89e3\u5305\uff08iterable unpacking\uff09\u8fd9\u4e2a\u7279\u6027\u5141\u8bb8\u6211\u4eec\u5c06\u4e00\u4e2a\u53ef\u8fed\u4ee3\u5bf9\u8c61\u89e3\u5305\u6210\u51e0\u4e2a\u53d8\u91cf\u3002 \u53e6\u4e00\u65b9\u9762\uff0c\u6253\u5305\u5305\u62ec\u4f7f\u7528\u89e3\u5305\u8fd0\u7b97\u7b26 * \u5c06\u591a\u4e2a\u503c\u8d4b\u5230\u4e00\u4e2a\u53d8\u91cf\u4e2d\u3002 \u53ef\u8fed\u4ee3\u89e3\u5305\uff08iterable unpacking\uff09\u4e5f\u53ef\u4ee5\u7528\u6765\u8fdb\u884c\u5e76\u884c\u8d4b\u503c\u548c\u53d8\u91cf\u4e4b\u95f4\u7684\u503c\u4ea4\u6362\uff0c\u4e5f\u53ef\u4ee5\u7528\u5728 for \u5faa\u73af\u3001\u51fd\u6570\u8c03\u7528\u548c\u51fd\u6570\u5b9a\u4e49\u4e2d\u3002","title":"Python\u4e2d\u7684\u6253\u5305Packing\u548c\u89e3\u5305Unpacking"},{"location":"python/Foundation/ch02/#pythonpackingunpacking","text":"","title":"Python\u4e2d\u7684\u6253\u5305Packing\u548c\u89e3\u5305Unpacking"},{"location":"python/Foundation/ch02/#unpacking","text":"Python \u5141\u8bb8\u53d8\u91cf\u7684\u5143\u7ec4\uff08\u6216\u5217\u8868\uff09\u51fa\u73b0\u5728\u8d4b\u503c\u64cd\u4f5c\u7684\u5de6\u4fa7\u3002 \u5143\u7ec4\u4e2d\u7684\u6bcf\u4e2a\u53d8\u91cf\u90fd\u53ef\u4ee5\u4ece\u8d4b\u503c\u53f3\u4fa7\u7684\u53ef\u8fed\u4ee3\u5bf9\u8c61\uff08iterable\uff09\u4e2d\u63a5\u6536\u4e00\u4e2a\u503c\uff08\u6216\u8005\u66f4\u591a\uff0c\u5982\u679c\u6211\u4eec\u4f7f\u7528 * \u8fd0\u7b97\u7b26\uff09\u3002 Python \u4e2d\u7684\u89e3\u5305\u662f\u6307\u4e00\u79cd\u64cd\u4f5c\uff0c\u8be5\u64cd\u4f5c\u5305\u62ec\u5728\u5355\u4e2a\u8d4b\u503c\u8bed\u53e5\u4e2d\u5c06\u53ef\u8fed\u4ee3\u7684\u503c\u5206\u914d\u7ed9\u53d8\u91cf\u7684\u5143\u7ec4\uff08\u6216\u5217\u8868\uff09\u3002 \u5728 Python \u4e2d\uff0c\u53ef\u4ee5\u5728\u8d4b\u503c\u8fd0\u7b97\u7b26 (=) \u7684\u5de6\u4fa7\u653e\u7f6e\u4e00\u4e2a\u53d8\u91cf\u5143\u7ec4\uff0c\u5728\u53f3\u4fa7\u653e\u7f6e\u4e00\u4e2a\u503c\u5143\u7ec4\u3002 \u53f3\u8fb9\u7684\u503c\u5c06\u6839\u636e\u5b83\u4eec\u5728\u5143\u7ec4\u4e2d\u7684\u4f4d\u7f6e\u81ea\u52a8\u5206\u914d\u7ed9\u5de6\u8fb9\u7684\u53d8\u91cf\u3002 \u8fd9\u5728 Python \u4e2d\u901a\u5e38\u79f0\u4e3a\u5143\u7ec4\u89e3\u5305\u3002 \u5982\u4e0b\u793a\u4f8b\uff1a >>> (a, b, c) = (1, 2, 3) >>> a 1 >>> b 2 >>> c 3 >>> birthday = ('April', 5, 2001) >>> month, day, year = birthday >>> month 'April' >>> day 5 >>> year 2001 \u5143\u7ec4\u89e3\u5305\u529f\u80fd\u5728 Python \u4e2d\u53ef\u4ee5\u6269\u5c55\u4e3a\u9002\u7528\u4e8e\u4efb\u4f55\u53ef\u8fed\u4ee3\u5bf9\u8c61\u3002 \u552f\u4e00\u7684\u8981\u6c42\u662f\u53ef\u8fed\u4ee3\u7684\u63a5\u6536\u5143\u7ec4\uff08\u6216\u5217\u8868\uff09\u4e2d\u7684\u6bcf\u4e2a\u53d8\u91cf\u6070\u597d\u5bf9\u5e94\u53ef\u8fed\u4ee3\u5bf9\u8c61\u7684\u4e00\u4e2a\u5143\u7d20\uff08item\uff09\u3002 \u4e0b\u9762\u7684\u793a\u4f8b\u4ecb\u7ecd\u4e86 Python \u4e2d\u53ef\u8fed\u4ee3\u89e3\u5305\u7684\u5de5\u4f5c\u539f\u7406\uff1a >>> # Unpackage strings >>> a, b, c = '123' >>> a '1' >>> b '2' >>> c '3' >>> # Unpacking lists >>> a, b, c = [1, 2, 3] >>> a 1 >>> b 2 >>> c 3 >>> # Unpacking generators >>> gen = (i ** 2 for i in range(3)) >>> a, b, c = gen >>> a 0 >>> b 1 >>> c 4 >>> # Upacking dictionaries (keys, values, and items) >>> my_dict = {'one': 1, 'two': 2, 'three': 3} >>> a, b, c = my_dict >>> a 'one' >>> b 'two' >>> c 'three' >>> a, b, c = my_dict.values() >>> a 1 >>> b 2 >>> c 3 >>> a, b, c = my_dict.items() >>> a ('one', 1) >>> b ('two', 2) >>> c ('three', 3) >>> # Use a tuple on the right side of assignment statement >>> [a, b, c] = 1, 2, 3 >>> a 1 >>> b 2 >>> c 3 >>> # Use range() iterator >>> x, y, z = range(3) >>> x 0 >>> y 1 >>> z 2","title":"\u89e3\u5305Unpacking"},{"location":"python/Foundation/ch02/#packing","text":"\u6253\u5305\u53ef\u4ee5\u7406\u89e3\u4e3a\u4f7f\u7528\u53ef\u8fed\u4ee3\u89e3\u5305\u8fd0\u7b97\u7b26\u5728\u5355\u4e2a\u53d8\u91cf\u4e2d\u6536\u96c6\u591a\u4e2a\u503c\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c * \u8fd0\u7b97\u7b26\u88ab\u79f0\u4e3a\u5143\u7ec4\uff08\u6216\u53ef\u8fed\u4ee3\uff09\u89e3\u5305\u8fd0\u7b97\u7b26\u3002 \u5b83\u6269\u5c55\u4e86\u89e3\u5305\u529f\u80fd\uff0c\u5141\u8bb8\u5728\u5355\u4e2a\u53d8\u91cf\u4e2d\u6536\u96c6\u6216\u6253\u5305\u591a\u4e2a\u503c\u3002 \u5728\u4ee5\u4e0b\u793a\u4f8b\u4e2d\u53ef\u4ee5\u770b\u5230 * \u8fd0\u7b97\u7b26\u5c06\u5143\u7ec4\u503c\u6253\u5305\u5230\u5355\u4e2a\u53d8\u91cf\u4e2d\uff1a >>> # The right side is a tuple, the left side is a list >>> *a, = 1, 2 >>> a [1, 2] >>> type(a) <class 'list'> \u5728\u4e0a\u9762\u7684\u4ee3\u7801\u4e2d\uff0c\u8d4b\u503c\u7684\u5de6\u4fa7\u5fc5\u987b\u662f\u5143\u7ec4\uff08\u6216\u5217\u8868\uff09\uff0c\u8fd9\u5c31\u662f\u4f7f\u7528\u5c3e\u968f\u9017\u53f7\u7684\u539f\u56e0\u3002\u8fd9\u4e2a\u5143\u7ec4\u53ef\u4ee5\u5305\u542b\u6240\u9700\u8981\u7684\u5c3d\u53ef\u80fd\u591a\u7684\u53d8\u91cf\uff0c\u4f46\u662f\uff0c\u5b83\u53ea\u80fd\u5305\u542b\u4e00\u4e2a\u661f\u53f7\u8868\u8fbe\u5f0f(starred expression)\u3002 >>> # Packing trailing values >>> a, *b = 1, 2, 3 >>> a 1 >>> b [2, 3] >>> type(a) <class 'int'> >>> type(b) <class 'list'> >>> >>> *a, b, c = 1, 2, 3 >>> a [1] >>> b 2 >>> c 3 >>> *a, b, c, d, e = 1, 2, 3 Traceback (most recent call last): File \"<stdin>\", line 1, in <module> ValueError: not enough values to unpack (expected at least 4, got 3) >>> *a, b, c, d = 1, 2, 3 >>> a [] >>> b 1 >>> c 2 >>> d 3 >>> >>> seq = [1, 2, 3, 4] >>> first, *body, last = seq >>> first, body, last (1, [2, 3], 4) >>> first, body, *last = seq >>> first, body, last (1, 2, [3, 4]) >>> >>> ran = range(10) >>> *r, = ran >>> r [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] \u4e0b\u9762\u662f\u4e00\u4e9b\u6253\u5305\u548c\u89e3\u5305\u7684\u4f8b\u5b50\u3002 >>> employee = ['John Doe', '40', 'Software Engineer'] >>> name = employee[0] >>> age = employee[1] >>> job = employee[2] >>> name 'John Doe' >>> age '40' >>> job 'Software Engineer' >>> >>> name, age, job = ['John Doe', '40', 'Software Engineer'] >>> name 'John Doe' >>> age '40' >>> job 'Software Engineer' >>> >>> a = 100 >>> b = 200 >>> a, b = b, a >>> a 200 >>> b 100 \u4f7f\u7528 * \u5220\u9664\u4e0d\u9700\u8981\u7684\u503c\u3002 >>> a, b, *_ = 1, 2, 0, 0, 0, 0 >>> a 1 >>> b 2 >>> _ [0, 0, 0, 0] \u5728\u4e0a\u4f8b\u4e2d\uff0c\u4e0d\u9700\u8981\u7684\u4fe1\u606f\u5b58\u50a8\u5728\u865a\u62df\u53d8\u91cf _ \u4e2d\uff0c\u5728\u540e\u7eed\u7684\u4f7f\u7528\u4e2d\u53ef\u4ee5\u5ffd\u7565\u5b83\u3002 \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0cPython \u89e3\u91ca\u5668\u4f7f\u7528\u4e0b\u5212\u7ebf\u5b57\u7b26 _ \u6765\u5b58\u50a8\u5728\u4ea4\u4e92\u5f0f\u4f1a\u8bdd\u4e2d\u8fd0\u884c\u7684\u8bed\u53e5\u7684\u7ed3\u679c\u503c\u3002 \u56e0\u6b64\uff0c\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u4f7f\u7528\u8fd9\u4e2a\u5b57\u7b26\u6765\u8bc6\u522b\u865a\u62df\u53d8\u91cf\u53ef\u80fd\u662f\u6a21\u68f1\u4e24\u53ef\u7684\u3002 \u5728\u51fd\u6570\u4e2d\u8fd4\u56de\u5143\u7ec4\u3002 >>> def powers(num): ... return num, num ** 2, num ** 3 ... >>> # Packaging returned values in a tuple >>> result = powers(3) >>> result (3, 9, 27) >>> # Unpacking returned values to multiple variables >>> number, square, cube = powers(3) >>> number 3 >>> square 9 >>> cube 27 >>> *_, cube = powers(3) >>> cube 27","title":"\u6253\u5305Packing"},{"location":"python/Foundation/ch02/#_1","text":"\u4f7f\u7528 * \u8fd0\u7b97\u7b26\u5408\u5e76\u8fed\u4ee3\u53d8\u91cf\uff08iterables\uff09\u3002\u4e0a\u9762\u4e24\u4e2a\u4f8b\u5b50\u8bf4\u660e\uff0c\u8fd9\u4e2d\u65b9\u6cd5\u4e5f\u662f\u8fde\u63a5\u8fed\u4ee3\u53d8\u91cf\uff08iterables\uff09\u7684\u4e00\u79cd\u66f4\u6613\u8bfb\u548c\u66f4\u6709\u6548\u7684\u65b9\u6cd5\u3002 \u8fd9\u4e2a\u65b9\u6cd5 (my_set) + my_list + list(my_tuple) + list(range(1, 4)) + list(my_str) \u53ef\u4ee5\u751f\u6210\u4e00\u4e2a\u5217\u8868 \uff0c\u4e5f\u53ef\u4ee5\u4f7f\u7528\u66f4\u7b80\u6d01\u7684\u65b9\u6cd5 [*my_set, *my_list, *my_tuple, *range(1, 4), *my_str] \u3002 >>> my_tuple = (1, 2, 3) >>> (0, *my_tuple, 4) (0, 1, 2, 3, 4) >>> my_list = [1, 2, 3] >>> [0, *my_list, 4] [0, 1, 2, 3, 4] >>> my_set = {1, 2, 3} >>> {0, *my_set, 4} {0, 1, 2, 3, 4} >>> [*my_set, *my_list, *my_tuple, *range(1, 4)] [1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3] >>> my_str = \"123\" >>> [*my_set, *my_list, *my_tuple, *range(1, 4), *my_str] [1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, '1', '2', '3'] \u4f7f\u7528 ** \u8fd0\u7b97\u7b26\u89e3\u5305\u5b57\u5178\u3002 >>> numbers = {'one': 1, 'two': 2, 'three': 3} >>> letters = {'a': 'A', 'b': 'B', 'c': 'C'} >>> combination = {**numbers, **letters} >>> combination {'one': 1, 'two': 2, 'three': 3, 'a': 'A', 'b': 'B', 'c': 'C'} \u9700\u8981\u6ce8\u610f\u7684\u91cd\u8981\u4e00\u70b9\u662f\uff0c\u5982\u679c\u6211\u4eec\u5408\u5e76\u7684\u5b57\u5178\u5177\u6709\u91cd\u590d\u952e\u6216\u516c\u5171\u952e\uff0c\u5219\u6700\u53f3\u4fa7\u5b57\u5178\u7684\u503c\u5c06\u8986\u76d6\u6700\u5de6\u4fa7\u5b57\u5178\u7684\u503c\u3002\u4f8b\u5982: >>> letters = {'a': 'A', 'b': 'B', 'c': 'C'} >>> vowels = {'a': 'a', 'e': 'e', 'i': 'i', 'o': 'o', 'u': 'u'} >>> {**letters, **vowels} {'a': 'a', 'b': 'B', 'c': 'C', 'e': 'e', 'i': 'i', 'o': 'o', 'u': 'u'} >>> {**vowels, **letters} {'a': 'A', 'e': 'e', 'i': 'i', 'o': 'o', 'u': 'u', 'b': 'B', 'c': 'C'}","title":"\u4f7f\u7528 * \u548c ** \u8fd0\u7b97\u7b26"},{"location":"python/Foundation/ch02/#for-loops","text":"\u6211\u4eec\u8fd8\u53ef\u4ee5\u5728 for \u5faa\u73af\u7684\u4e0a\u4e0b\u6587\u4e2d\u4f7f\u7528\u53ef\u8fed\u4ee3\u89e3\u5305\u3002 \u5f53\u6211\u4eec\u8fd0\u884c for \u5faa\u73af\u65f6\uff0c\u5728\u6bcf\u6b21\u5faa\u73af\u8fed\u4ee3\u4e2d\u5c06\u5176\u53ef\u8fed\u4ee3\u5bf9\u8c61\u4e2d\u7684\u4e00\u9879(item)\u5206\u914d\u7ed9\u76ee\u6807\u53d8\u91cf\u3002 \u5982\u679c\u8981\u5206\u914d\u7684\u9879(item)\u662f\u53ef\u8fed\u4ee3\u7684\uff0c\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u5143\u7ec4\u4f5c\u4e3a\u76ee\u6807\u53d8\u91cf\uff0c\u901a\u8fc7\u5faa\u73af\u5c06\u53ef\u8fed\u4ee3\u5bf9\u8c61\u89e3\u5305\u5230\u76ee\u6807\u53d8\u91cf\u7684\u5143\u7ec4\u4e2d\u3002 \u4f8b\u5982\uff0c\u6211\u4eec\u53ef\u4ee5\u6784\u5efa\u4e00\u4e2a\u5305\u542b\u4e24\u4e2a\u5143\u7d20\u7684\u5143\u7ec4\u7684\u5217\u8868\u3002 \u6bcf\u4e2a\u5143\u7ec4\u5c06\u5305\u542b\u4ea7\u54c1\u540d\u79f0\u3001\u4ef7\u683c\u548c\u9500\u552e\u5355\u4f4d\uff0c\u6211\u4eec\u901a\u8fc7 for \u5faa\u73af\u904d\u5386\u6bcf\u4e2a\u5143\u7ec4\u5143\u7d20\u6765\u8ba1\u7b97\u6bcf\u4e2a\u4ea7\u54c1\u7684\u6536\u5165\u3002 >>> sales = [('Pencle', 0.22, 1500), ('Notebook', 1.30, 550), ('Eraser', 0.75, 1000)] >>> for items in sales: ... print(f\"Income for {items[0]} is: {items[1] * items[2]}\") ... Income for Pencle is: 330.0 Income for Notebook is: 715.0 Income for Eraser is: 750.0 \u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u7d22\u5f15\u6765\u8bbf\u95ee\u6bcf\u4e2a\u5143\u7ec4\u7684\u5404\u4e2a\u5143\u7d20\u3002\u4e0b\u9762\u7684\u793a\u4f8b\u4ee3\u7801\u4e2d\uff0c\u5728 for \u5faa\u73af\u4f7f\u7528\u89e3\u5305\uff0c\u8fd9\u4e5f\u662f Python \u4e2d\u89e3\u5305\u7684\u4e00\u79cd\u5b9e\u73b0\u3002 >>> sales = [('Pencle', 0.22, 1500), ('Notebook', 1.30, 550), ('Eraser', 0.75, 1000)] >>> for product, price, sold_units in sales: ... print(f\"Income for {product} is: {price * sold_units}\") ... Income for Pencle is: 330.0 Income for Notebook is: 715.0 Income for Eraser is: 750.0 \u4e5f\u53ef\u4ee5\u5728 for \u5faa\u73af\u4e2d\u4f7f\u7528 * \u8fd0\u7b97\u7b26\u5c06\u591a\u4e2a\u9879\u6253\u5305\u5230\u5355\u4e2a\u76ee\u6807\u53d8\u91cf\u4e2d\u3002 \u5728\u4e0b\u9762\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u6211\u4eec\u9996\u5148\u53d6\u5f97\u6bcf\u4e2a\u5e8f\u5217\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\u3002 \u5176\u4f59\u503c\u901a\u8fc7 * \u8fd0\u7b97\u7b26\u8d4b\u7ed9\u76ee\u6807\u53d8\u91cf rest\u3002 >>> for first, *rest in [(1, 2, 3),(4, 5, 6)]: ... print('First: ', first) ... print('Rest: ', rest) ... First: 1 Rest: [2, 3] First: 4 Rest: [5, 6] >>> \u76ee\u6807\u53d8\u91cf\u7684\u7ed3\u6784\u5fc5\u987b\u4e0e\u53ef\u8fed\u4ee3\u5bf9\u8c61\u7684\u7ed3\u6784\u4e00\u81f4\uff0c\u5426\u5219\u4f1a\u62a5\u9519\u3002\u770b\u4e0b\u9762\u7684\u4f8b\u5b50\u3002 >>> data = [((1, 2), 3), ((2, 3), 3)] >>> for (a, b), c in data: ... print(a, b, c) ... 1 2 3 2 3 3 >>> for a, b, c in data: ... print(a, b, c) ... Traceback (most recent call last): File \"<stdin>\", line 1, in <module> ValueError: not enough values to unpack (expected 3, got 2)","title":"\u901a\u8fc7 For-Loops \u89e3\u5305"},{"location":"python/Foundation/ch02/#_2","text":"\u4e0b\u9762\u4f8b\u5b50\u4e2d\u7684\u51fd\u6570func\u81f3\u5c11\u9700\u8981\u4e00\u4e2a\u540d\u4e3a\u201crequired\u201d\u7684\u53c2\u6570\u3002 \u5b83\u4e5f\u53ef\u4ee5\u63a5\u53d7\u4e00\u4e2a\u6216\u591a\u4e2a\u4f4d\u7f6e\u53c2\u6570\u6216\u5173\u952e\u5b57\u53c2\u6570\u3002 \u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c * \u8fd0\u7b97\u7b26\u5728\u4e00\u4e2a\u53eb args \u7684\u5143\u7ec4\u4e2d\u6536\u96c6\u6216\u6253\u5305\u989d\u5916\u7684\u4f4d\u7f6e\u53c2\u6570\uff0c\u800c ** \u8fd0\u7b97\u7b26\u5728\u4e00\u4e2a\u53eb kwargs \u7684\u5b57\u5178\u4e2d\u6536\u96c6\u6216\u6253\u5305\u989d\u5916\u7684\u5173\u952e\u5b57\u53c2\u6570\u3002 args \u548c kwargs \u90fd\u662f\u53ef\u9009\u7684\uff0c\u5e76\u4e14\u5206\u522b\u81ea\u52a8\u9ed8\u8ba4\u4e3a\u5143\u7ec4()\u548c\u5b57\u5178{}\u3002 \u8fd9\u91cc args \u548c kwargs \u7684\u547d\u540d\u5e76\u4e0d\u662f\u5fc5\u987b\u7684\uff0c\u8bed\u6cd5\u4e0a\u53ea\u9700\u8981 * \u6216 ** \u540e\u8ddf\u6709\u6548\u6807\u8bc6\u7b26\u5373\u53ef\uff0c\u5efa\u8bae\u7ed9\u53d8\u91cf\u8d77\u4e2a\u6709\u610f\u4e49\u7684\u540d\u5b57\uff0c\u63d0\u9ad8\u4ee3\u7801\u7684\u53ef\u8bfb\u6027\u3002 >>> def func(required, *args, **kwargs): ... print(required) ... print(args) ... print(kwargs) ... >>> func('Welcome to ...', 1, 2, 3, site='CloudAcademy.com') Welcome to ... (1, 2, 3) {'site': 'CloudAcademy.com'} >>> func('Welcome to ...', 1, 2, 3, 4) Welcome to ... (1, 2, 3, 4) {} >>> func('Welcome to ...', 1, 2, 3, (1, 2)) Welcome to ... (1, 2, 3, (1, 2)) {} >>> func('Welcome to ...', 1, 2, 3, [1, 2]) Welcome to ... (1, 2, 3, [1, 2]) {} >>> func('Welcome to ...', 1, 2, 3, ([2, 3], [1, 2])) Welcome to ... (1, 2, 3, ([2, 3], [1, 2])) {}","title":"\u7528 * \u548c ** \u5b9a\u4e49\u51fd\u6570"},{"location":"python/Foundation/ch02/#_3","text":"\u8c03\u7528\u51fd\u6570\u65f6\uff0c\u6211\u4eec\u8fd8\u53ef\u4ee5\u53d7\u76ca\u4e8e\u4f7f\u7528 * \u548c \u8fd0\u7b97\u7b26\u5c06\u53c2\u6570\u96c6\u5408\u5206\u522b\u89e3\u538b\u7f29\u4e3a\u5355\u72ec\u7684\u4f4d\u7f6e\u53c2\u6570\u6216\u5173\u952e\u5b57\u53c2\u6570\u3002 \u8fd9\u4e0e\u5728\u51fd\u6570\u7b7e\u540d(signature of a function)\u4e2d\u4f7f\u7528 * \u548c \u662f\u76f8\u53cd\u7684\u3002 \u5728\u51fd\u6570\u7b7e\u540d\u4e2d\uff0c\u8fd0\u7b97\u7b26\u7684\u610f\u601d\u662f\u5728\u4e00\u4e2a\u6807\u8bc6\u7b26\u4e2d\u6536\u96c6\u6216\u6253\u5305\u53ef\u53d8\u6570\u91cf\u7684\u53c2\u6570\u3002 \u5728\u8c03\u7528(calling)\u4e2d\uff0c\u5b83\u4eec\u7684\u610f\u601d\u662f\u89e3\u5305(unpack)\u4e00\u4e2a\u53ef\u8fed\u4ee3\u5bf9\u8c61\u5230\u591a\u4e2a\u53c2\u6570\u4e2d\u3002 \u7eed\u4e0a\u4f8b\uff0c \u8fd0\u7b97\u7b26\u5c06\u50cf [\"Welcome\", \"to\"] \u8fd9\u6837\u7684\u5e8f\u5217\u89e3\u5305\u5230\u4f4d\u7f6e\u53c2\u6570\u4e2d\u3002 \u7c7b\u4f3c\u5730\uff0c * \u8fd0\u7b97\u7b26\u5c06\u5b57\u5178\u89e3\u5305\u4e3a\u4e0e\u5b57\u5178\u7684\u952e\u503c\u5339\u914d\u7684\u53c2\u6570\u540d\u3002 >>> def func(welcome, to, site): ... print(welcome, to, site) ... >>> func(*['Welcome', 'to'], **{'site': 'CloudAcademy.com'}) Welcome to CloudAcademy.com \u7efc\u5408\u8fd0\u7528\u524d\u9762\u7684\u65b9\u6cd5\u6765\u7f16\u5199\u975e\u5e38\u7075\u6d3b\u7684\u51fd\u6570\uff0c\u6bd4\u5982\uff0c\u5728\u5b9a\u4e49\u548c\u8c03\u7528 Python \u51fd\u6570\u65f6\uff0c\u66f4\u7075\u6d3b\u7684\u4f7f\u7528 * \u548c ** \u8fd0\u7b97\u7b26\u3002 \u4f8b\u5982\uff1a >>> def func(required, *args, **kwargs): ... print(required) ... print(args) ... print(kwargs) ... >>> func('Welcome to...', *(1, 2, 3), **{'Site': 'CloudAcademy.com'}) Welcome to... (1, 2, 3) {'Site': 'CloudAcademy.com'}","title":"\u4f7f\u7528 * \u548c ** \u8c03\u7528\u51fd\u6570"},{"location":"python/Foundation/ch02/#_4","text":"\u53ef\u8fed\u4ee3\u89e3\u5305\uff08iterable unpacking\uff09\u8fd9\u4e2a\u7279\u6027\u5141\u8bb8\u6211\u4eec\u5c06\u4e00\u4e2a\u53ef\u8fed\u4ee3\u5bf9\u8c61\u89e3\u5305\u6210\u51e0\u4e2a\u53d8\u91cf\u3002 \u53e6\u4e00\u65b9\u9762\uff0c\u6253\u5305\u5305\u62ec\u4f7f\u7528\u89e3\u5305\u8fd0\u7b97\u7b26 * \u5c06\u591a\u4e2a\u503c\u8d4b\u5230\u4e00\u4e2a\u53d8\u91cf\u4e2d\u3002 \u53ef\u8fed\u4ee3\u89e3\u5305\uff08iterable unpacking\uff09\u4e5f\u53ef\u4ee5\u7528\u6765\u8fdb\u884c\u5e76\u884c\u8d4b\u503c\u548c\u53d8\u91cf\u4e4b\u95f4\u7684\u503c\u4ea4\u6362\uff0c\u4e5f\u53ef\u4ee5\u7528\u5728 for \u5faa\u73af\u3001\u51fd\u6570\u8c03\u7528\u548c\u51fd\u6570\u5b9a\u4e49\u4e2d\u3002","title":"\u603b\u7ed3"},{"location":"python/Foundation/ch03/","text":"\u5185\u7f6e\u51fd\u6570\u53ca\u6587\u4ef6 1. \u533f\u540d\uff08Lambda\uff09\u51fd\u6570 \u533f\u540d\u51fd\u6570\u662f\u4e00\u79cd\u901a\u8fc7\u5355\u4e2a\u8bed\u53e5\u751f\u6210\u51fd\u6570\u7684\u65b9\u5f0f\uff0c\u5176\u7ed3\u679c\u662f\u8fd4\u56de\u503c\u3002\u533f\u540d\u51fd\u6570\u4f7f\u7528lambda\u5173\u952e\u5b57\u5b9a\u4e49\uff0c\u8be5\u5173\u952e\u5b57\u4ec5\u8868\u8fbe\u201c\u6211\u4eec\u58f0\u660e\u4e00\u4e2a\u533f\u540d\u51fd\u6570\u201d\u7684\u610f\u601d\u3002 lambda \u51fd\u6570\u53ef\u4ee5\u63a5\u6536\u4efb\u610f\u591a\u4e2a\u53c2\u6570 (\u5305\u62ec\u53ef\u9009\u53c2\u6570) \u5e76\u4e14\u8fd4\u56de\u5355\u4e2a\u8868\u8fbe\u5f0f\u7684\u503c\u3002 lambda arg1,arg2,arg3\u2026 :<\u8868\u8fbe\u5f0f> f = lambda x, y: x * y print(f(2, 3)) # 6 f = [lambda a: a * 2, lambda b: b * 3] print(f[0](5)) # \u6267\u884cf\u5217\u8868\u7b2c\u4e00\u4e2a\u5143\u7d20 # 10 print(f[1](5)) # \u6267\u884cf\u5143\u7d20\u7b2c\u4e8c\u4e2a\u5143\u7d20 # 15 print(f[0, 1](5, 5)) # TypeError: list indices must be integers or slices, not tuple \u793a\u4f8b1\uff1a def short_func1(x): return x * 2 short_func2 = lambda x: x * 2 print(short_func1(5)) # 10 print(short_func2(5)) # 10 \u793a\u4f8b2\uff1a def apply_to_list(some_list, f): return [f(x) for x in some_list] ints = [4, 0, 1, 5, 6] result5 = apply_to_list(ints, lambda x: x * 2) print(result5) # [8, 0, 2, 10, 12] lambda: None \u51fd\u6570\u6ca1\u6709\u8f93\u5165\u53c2\u6570\uff0c\u8f93\u51fa\u662fNone\u3002 print(lambda: None) # <function <lambda> at 0x7fa5c4097670> lambda **kwargs: 1 \u8f93\u5165\u662f\u4efb\u610f\u952e\u503c\u5bf9\u53c2\u6570\uff0c\u8f93\u51fa\u662f1\u3002 print(lambda **kwargs: 1) # <function <lambda> at 0x7fa5c4097670> 2. \u5185\u7f6e\u5e8f\u5217\u51fd\u6570enumerate \u5f53\u9700\u8981\u5bf9\u6570\u636e\u5efa\u7acb\u7d22\u5f15\u65f6\uff0c\u4e00\u79cd\u6709\u6548\u7684\u6a21\u5f0f\u5c31\u662f\u4f7f\u7528enumerate\u6784\u9020\u4e00\u4e2a\u5b57\u5178\uff0c\u5c06\u5e8f\u5217\u503c\uff08\u5047\u8bbe\u662f\u552f\u4e00\u7684\uff09\u6620\u5c04\u5230\u7d22\u5f15\u4f4d\u7f6e\u4e0a\u3002 seasons = ['Spring', 'Summer', 'Fall', 'Winter'] print(list(enumerate(seasons))) # [(0, 'Spring'), (1, 'Summer'), (2, 'Fall'), (3, 'Winter')] \u5bf9\u6bd4\u4e0b\u97622\u4e2a\u5faa\u73af a_list = ['foo', 'bar', 'baz'] mapping = {} for i, v in enumerate(a_list): # enumerate\u751f\u6210\u7d22\u5f15\u503ci\u548c\u5e8f\u5217\u503cv mapping[v] = i print(mapping) # {'foo': 0, 'bar': 1, 'baz': 2} i = 0 mapping = {} for v in a_list: print(i, a_list[i]) mapping[v] = i # \u53ef\u4ee5\u628ai\u548cv\u4e92\u6362 i += 1 print(mapping) # {'foo': 0, 'bar': 1, 'baz': 2} \u5229\u7528 enumerate() \u6279\u91cf\u4fee\u6539\u5217\u8868\u5185\u7684\u5143\u7d20 a_list = ['01', '02', '03'] unit_element = '1' for i, element in enumerate(a_list): a_list[i] = unit_element + element print(a_list) # ['101', '102', '103'] sorted\u51fd\u6570\u8fd4\u56de\u4e00\u4e2a\u6839\u636e\u4efb\u610f\u5e8f\u5217\u4e2d\u7684\u5143\u7d20\u65b0\u5efa\u7684\u5df2\u6392\u5e8f\u5217\u8868\u3002sorted\u51fd\u6570\u63a5\u53d7\u7684\u53c2\u6570\u4e0e\u5217\u8868\u7684sort\u65b9\u6cd5\u4e00\u81f4\u3002 y = sorted([7, 1, 2, 6, 0, 3, 2]) print(y) # [0, 1, 2, 2, 3, 6, 7] \u7ed3\u679c\u5df2\u6392\u5e8f z = sorted('Hello World') print(z) # [' ', 'H', 'W', 'd', 'e', 'l', 'l', 'l', 'o', 'o', 'r'] zip\u5c06\u5217\u8868\u3001\u5143\u7ec4\u6216\u5176\u4ed6\u5e8f\u5217\u7684\u5143\u7d20\u914d\u5bf9\uff0c\u65b0\u5efa\u4e00\u4e2a\u5143\u7ec4\u6784\u6210\u7684\u5217\u8868\u3002 seq1 = ['foo', 'bar', 'baz'] seq2 = ['one', 'two', 'three'] seq3 = [False, True] zipped = zip(seq1, seq2) print(list(zipped)) # [('foo', 'one'), ('bar', 'two'), ('baz', 'three')] zipped = zip(seq1, seq2, seq3) print(list(zipped)) # [('foo', 'one', False), ('bar', 'two', True)] for i, (a, b) in enumerate(zip(seq1, seq2)): print('{0}: {1}, {2}'.format(i, a, b)) # \u65b9\u6cd51 {0}\u5217\u8868\u5143\u7d20\u7684\u7d22\u5f15, {1}\u5143\u7ec4\u4e2d\u7b2c\u4e00\u4e2a\u503c, {2}\u5143\u7ec4\u4e2d\u7b2c\u4e8c\u4e2a\u503c print(f'{i}: {a}, {b}') # \u65b9\u6cd52 # 0: foo, one # 1: bar, two # 2: baz, three \u7ed9\u5b9a\u4e00\u4e2a\u5df2\u201c\u914d\u5bf9\u201d\u7684\u5e8f\u5217\u65f6\uff0czip\u51fd\u6570\u53ef\u4ee5\u53bb\u201c\u62c6\u5206\u201d\u5e8f\u5217\u3002\u8fd9\u79cd\u65b9\u5f0f\u7684\u53e6\u4e00\u79cd\u601d\u8def\u5c31\u662f\u5c06\u884c\u7684\u5217\u8868\u8f6c\u6362\u4e3a\u5217\u7684\u5217\u8868\u3002\u53c2\u8003Python\u7684 Unpacking pitchers = [('Jack', 'Ma'), ('Tom', 'Li'), ('Jimmy', 'Zhang')] first_names, last_names = zip(*pitchers) print(first_names) # ('Jack', 'Tom', 'Jimmy') print(last_names) # ('Ma', 'Li', 'Zhang') reversed\u51fd\u6570\u5c06\u5e8f\u5217\u7684\u5143\u7d20\u5012\u5e8f\u6392\u5217 print(list(reversed(range(10)))) # [9, 8, 7, 6, 5, 4, 3, 2, 1, 0] 3. \u5217\u8868\u3001\u96c6\u5408\u548c\u5b57\u5178\u7684\u63a8\u5bfc\u5f0f \u63a8\u5bfc\u5f0fcomprehensions\uff08\u53c8\u79f0\u89e3\u6790\u5f0f\uff09\uff0c\u662fPython\u7684\u4e00\u79cd\u7279\u6027\u3002\u4f7f\u7528\u63a8\u5bfc\u5f0f\u53ef\u4ee5\u5feb\u901f\u751f\u6210\u5217\u8868\u3001\u5143\u7ec4\u3001\u96c6\u5408\u3001\u5b57\u5178\u7c7b\u578b\u7684\u6570\u636e\u3002\u63a8\u5bfc\u5f0f\u53c8\u5206\u4e3a\u5217\u8868\u63a8\u5bfc\u5f0f\u3001\u5143\u7ec4\u63a8\u5bfc\u5f0f\u3001\u96c6\u5408\u63a8\u5bfc\u5f0f\u3001\u5b57\u5178\u63a8\u5bfc\u5f0f\u3002 \u5217\u8868\u63a8\u5bfc\u5f0f(list comprehension) \u5217\u8868\u63a8\u5bfc\u5f0f(list comprehension)\u5141\u8bb8\u4f60\u8fc7\u6ee4\u4e00\u4e2a\u5bb9\u5668\u7684\u5143\u7d20\uff0c\u7528\u4e00\u79cd\u7b80\u660e\u7684\u8868\u8fbe\u5f0f\u8f6c\u6362\u4f20\u9012\u7ed9\u8fc7\u6ee4\u5668\u7684\u5143\u7d20\uff0c\u4ece\u800c\u751f\u6210\u4e00\u4e2a\u65b0\u7684\u5217\u8868\u3002 \u5217\u8868\u63a8\u5bfc\u5f0f\u7684\u57fa\u672c\u5f62\u5f0f\u4e3a\uff1a[expr for val in collection if condition]\uff0c\u6761\u4ef6if-condition\u4e0d\u662f\u5fc5\u987b\u7684\uff0c\u53ef\u4ee5\u53ea\u4fdd\u7559\u8868\u8fbe\u5f0f\u3002\u5217\u8868\u63a8\u5bfc\u5f0f\u4e0e\u4e0b\u9762\u7684for\u5faa\u73af\u662f\u7b49\u4ef7\u7684\uff1a result = [] for val in collection: if condition: result.append(expr) \u770b\u4e0b\u9762\u7684\u4f8b\u5b50\uff1a data = [] for i in range(-5, 5): if i >= -1: data.append(i**2) print(data) # [1, 0, 1, 4, 9, 16] data = [i**2 for i in range(-5, 5) if i >= -1] print(data) # [1, 0, 1, 4, 9, 16] \u4e0b\u9762\u7684\u4f8b\u5b50\u662f\u4f7f\u7528for\u53bb\u904d\u5386\u4e00\u4e2a\u53ef\u8fed\u4ee3\u7684\u5217\u8868\u3002 data = [] fruit = [ 'pomegranate', 'cherry', 'apricot', 'date', 'Apple', 'lemon', 'kiwi', 'ORANGE', 'lime', 'Watermelon', 'guava', 'papaya', 'FIG', 'pear', 'banana', 'Tamarind', 'persimmon', 'elderberry', 'peach', 'BLUEberry', 'lychee', 'grape' ] data = [x.upper() if x.startswith('p') else x.title() for x in fruit] print(data) # ['POMEGRANATE', 'Cherry', 'Apricot', 'Date', 'Apple', 'Lemon', 'Kiwi', 'Orange', 'Lime', 'Watermelon', 'Guava', 'PAPAYA', 'Fig', 'PEAR', 'Banana', 'Tamarind', 'PERSIMMON', 'Elderberry', 'PEACH', 'Blueberry', 'Lychee', 'Grape'] \u5957\u5217\u8868\u63a8\u5bfc\u5f0f \u4e0b\u9762\u7684\u4f8b\u5b50\u662f\u7528\u5d4c\u5957\u5217\u8868\u63a8\u5bfc\u5f0f\u4ee3\u66ff2\u5c42for\u5faa\u73af\u3002 data = [] for i in range(1, 3): if i >= 0: for j in range(1, 3): data.append((i, j)) print(data) # [(1, 1), (1, 2), (2, 1), (2, 2)] data = [(i, j) for i in range(1, 3) if i >= -1 for j in range(1, 3)] print(data) # [(1, 1), (1, 2), (2, 1), (2, 2)] \u518d\u4e3e\u4e00\u4e2a\u5d4c\u5957\u5217\u8868\u63a8\u5bfc\u5f0f\u7684\u4f8b\u5b50\u3002 all_data = [ ['John', 'Emily', 'Michael', 'Lee', 'Steven'], ['Maria', 'Juan', 'Javier', 'Natalia', 'Pilar'], ] names_of_interest = [] for names in all_data: enough_es = [name for name in names if name.count('e') >=2] names_of_interest.extend(enough_es) print(names_of_interest) # ['Lee', 'Steven'] result = [name for names in all_data for name in names if name.count('e') >= 2] print(result) # ['Lee', 'Steven'] \u7528\u5d4c\u5957\u5217\u8868\u63a8\u5bfc\u5f0f\u5c06\u77e9\u9635\u6241\u5e73\u5316\u3002 \u8003\u8651\u4e0b\u9762\u8fd9\u4e2a3x4\u7684\u77e9\u9635\uff0c\u5b83\u75313\u4e2a\u957f\u5ea6\u4e3a4\u7684\u5217\u8868\u7ec4\u6210\u3002\u4e0b\u9762\u4f8b\u5b50\u5bf9\u6bd4\u4e86\u7528\u4f20\u7edffor\u5faa\u73af\u5c06\u77e9\u9635\u6241\u5e73\u5316\uff0c\u548c\u7528\u5d4c\u5957\u5217\u8868\u63a8\u5bfc\u5f0f\u5c06\u77e9\u9635\u6241\u5e73\u5316\u3002\u5e76\u4e14\u901a\u8fc7\u5217\u8868\u63a8\u5bfc\u5f0f\u4e2d\u7684\u5217\u8868\u63a8\u5bfc\u5f0f\u5c06\u6241\u5e73\u77e9\u9635\u8fd8\u539f\u4e3a3x4\u77e9\u9635\u3002 matrix = [ [1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], ] flattened = [] # \u4f20\u7edffor\u5faa\u73af\u5d4c\u5957 for m in matrix: for x in m: flattened.append(x) print(flattened) # [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12] # \u5d4c\u5957\u5217\u8868\u63a8\u5bfc\u5f0f flattened = [x for m in matrix for x in m] print(flattened) # [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12] # \u5217\u8868\u63a8\u5bfc\u5f0f\u4e2d\u7684\u5217\u8868\u63a8\u5bfc\u5f0f z = [[x for x in m] for m in matrix] print(z) # [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]] \u5143\u7ec4\u63a8\u5bfc\u5f0f \u4e0b\u9762\u7684\u4f8b\u5b50\u751f\u6210\u4e00\u4e2a\u5305\u542b\u6570\u5b571~5\u7684\u5143\u7ec4\u3002\u4ece\u7ed3\u679c\u53ef\u4ee5\u770b\u5230\uff0c\u5143\u7ec4\u63a8\u5bfc\u5f0f\u751f\u6210\u7684\u7ed3\u679c\u5e76\u4e0d\u662f\u4e00\u4e2a\u5143\u7ec4\uff0c\u800c\u662f\u4e00\u4e2a\u751f\u6210\u5668\u5bf9\u8c61\uff0c\u9700\u8981\u901a\u8fc7tuple()\u51fd\u6570\uff0c\u5c06\u751f\u6210\u5668\u5bf9\u8c61\u8f6c\u6362\u6210\u5143\u7ec4\u3002 data = (x for x in range(5)) print(data) # <generator object <genexpr> at 0x7f87217a8e40> print(type(data)) # <class 'generator'> print(tuple(data)) # (0, 1, 2, 3, 4) \u96c6\u5408\u63a8\u5bfc\u5f0f \u4e0b\u9762\u662f\u4e00\u4e2a\u7b80\u5355\u7684\u96c6\u5408\u63a8\u5bfc\u5f0f\u4f8b\u5b50\u3002 data = {x**2 for x in range(5)} print(data) # {0, 1, 4, 9, 16} print(type(data)) # <class 'set'> \u96c6\u5408\u8981\u4fdd\u8bc1\u5143\u7d20\u5fc5\u987b\u662f\u552f\u4e00\u7684\u3002 data = (1, 1, 2, 2, 3, 3, 4, 5, 6) newset = {x**2 for x in data} print(newset) # {1, 4, 36, 9, 16, 25} print(type(newset) # <class 'set'> \u5b57\u5178\u63a8\u5bfc\u5f0f \u5b57\u5178\u63a8\u5bfc\u5f0f: dict_comp = {key-expr : value-expr for value in collection if condition} \u5b57\u5178\u63a8\u5bfc\u5f0f\u7684\u7b80\u5355\u793a\u4f8b\uff1a strings = ['a', 'as', 'bat', 'car', 'dove', 'python'] loc_mapping = {index: val for index, val in enumerate(strings)} print(loc_mapping) # {0: 'a', 1: 'as', 2: 'bat', 3: 'car', 4: 'dove', 5: 'python'} # \u4ea4\u6362\u952e\u548c\u503c loc_mapping = {index: val for val, index in enumerate(strings)} print(loc_mapping) # {'a': 0, 'as': 1, 'bat': 2, 'car': 3, 'dove': 4, 'python': 5} 4. \u51fd\u6570\u58f0\u660e \u5982\u679cPython\u8fbe\u5230\u51fd\u6570\u7684\u5c3e\u90e8\u65f6\u4ecd\u7136\u6ca1\u6709\u9047\u5230return\u8bed\u53e5\uff0c\u5c31\u4f1a\u81ea\u52a8\u8fd4\u56deNone\u3002 \u6bcf\u4e2a\u51fd\u6570\u90fd\u53ef\u4ee5\u6709\u4f4d\u7f6e\u53c2\u6570\u548c\u5173\u952e\u5b57\u53c2\u6570\u3002\u5173\u952e\u5b57\u53c2\u6570\u6700\u5e38\u7528\u4e8e\u6307\u5b9a\u9ed8\u8ba4\u503c\u6216\u53ef\u9009\u53c2\u6570\u3002\u5173\u952e\u5b57\u53c2\u6570\u5fc5\u987b\u8ddf\u5728\u4f4d\u7f6e\u53c2\u6570\u540e\uff0c\u53ef\u4ee5\u4f7f\u7528\u5173\u952e\u5b57\u53c2\u6570\u5411\u4f4d\u7f6e\u53c2\u6570\u4f20\u53c2\u3002 import sys def my_function1(x, y, z=1.5): if z > 1: return z * (x + y) else: return z / (x + y) result1 = my_function1(5, 6, z=0.7) print(result1) # 0.06363636363636363 result1 = my_function1(x=5, y=6, z=0.7) print(result1) # 0.06363636363636363 result1 = my_function1(3.14, 7, 3.5) print(result1) # 35.49 result1 = my_function1(10, 20) print(result1) # 45.0 5. \u547d\u540d\u7a7a\u95f4\u3001\u4f5c\u7528\u57df\u548c\u672c\u5730\u51fd\u6570 \u51fd\u6570\u6709\u4e24\u79cd\u8fde\u63a5\u53d8\u91cf\u7684\u65b9\u5f0f\uff1a\u5168\u5c40\u3001\u672c\u5730\u3002 def func1(): list1 = [] # \u672c\u5730\u53d8\u91cf for i in range(5): list1.append(i) print(list1) func1() # [0, 1, 2, 3, 4] list2 = [] # \u5168\u5c40\u53d8\u91cf def func2(): global list2 # \u5168\u5c40\u53d8\u91cf for i in range(5): list2.append(i) print(list2) func2() # [0, 1, 2, 3, 4] \u6570\u636e\u6e05\u6d17\u793a\u4f8b states = [' Alabama', 'Georgia!', 'georgia', 'Georgia', 'FlOrIda', 'south carolina##', 'West virginia? '] # \u65b9\u6cd51 import re def clean_string1(strings): result2 = [] for value in strings: value = value.strip() value = re.sub('[! #? ]', '', value) value = value.title() result2.append(value) return result2 print(clean_string1((states))) # ['Alabama', 'Georgia', 'Georgia', 'Georgia', 'Florida', 'Southcarolina', 'Westvirginia'] # \u65b9\u6cd52 def remove_punctuaion(value): return re.sub('[! #? ]', '', value) clean_ops = [str.strip, remove_punctuaion, str.title] def clean_string2(strings, ops): result3 = [] for value in strings: for function in ops: value = function(value) result3.append(value) return result3 result4 = clean_string2(states, clean_ops) print(result4) # ['Alabama', 'Georgia', 'Georgia', 'Georgia', 'Florida', 'Southcarolina', 'Westvirginia'] # \u53ef\u4ee5\u5c06\u51fd\u6570\u4f5c\u4e3a\u4e00\u4e2a\u53c2\u6570\u4f20\u7ed9\u5176\u4ed6\u7684\u51fd\u6570\u3002 for x in map(remove_punctuaion, states): print(x) # Alabama # Georgia # georgia # Georgia # FlOrIda # southcarolina # Westvirginia 6. \u67ef\u91cc\u5316\uff1a\u90e8\u5206\u53c2\u6570\u5e94\u7528 \u67ef\u91cc\u5316\u662f\u8ba1\u7b97\u673a\u79d1\u5b66\u672f\u8bed\uff08\u4ee5\u6570\u5b66\u5bb6Haskell Curry\u547d\u540d\uff09\uff0c\u5b83\u8868\u793a\u901a\u8fc7\u90e8\u5206\u53c2\u6570\u5e94\u7528\u7684\u65b9\u5f0f\u4ece\u5df2\u6709\u7684\u51fd\u6570\u4e2d\u884d\u751f\u51fa\u65b0\u7684\u51fd\u6570\u3002\u67ef\u91cc\u5316\u662f\u4e00\u79cd\u5c06\u591a\u53c2\u6570\u51fd\u6570\u8f6c\u5316\u4e3a\u5355\u53c2\u6570\u9ad8\u9636\u51fd\u6570\u7684\u6280\u672f\uff0c\u5982\u679c\u4f60\u56fa\u5b9a\u67d0\u4e9b\u53c2\u6570\uff0c\u4f60\u5c06\u5f97\u5230\u63a5\u53d7\u4f59\u4e0b\u53c2\u6570\u7684\u4e00\u4e2a\u51fd\u6570\u3002 \u5b9a\u4e49\u4e00\uff1a \u67ef\u91cc\u5316\uff1a\u4e00\u4e2a\u51fd\u6570\u4e2d\u6709\u4e2a\u591a\u4e2a\u53c2\u6570\uff0c\u60f3\u56fa\u5b9a\u5176\u4e2d\u67d0\u4e2a\u6216\u8005\u51e0\u4e2a\u53c2\u6570\u7684\u503c\uff0c\u800c\u53ea\u63a5\u53d7\u53e6\u5916\u51e0\u4e2a\u8fd8\u672a\u56fa\u5b9a\u7684\u53c2\u6570\uff0c\u8fd9\u6837\u51fd\u6570\u6f14\u53d8\u6210\u65b0\u7684\u51fd\u6570\u3002 \u5b9a\u4e49\u4e8c\uff1a \u51fd\u6570\u67ef\u91cc\u5316\uff08currying\uff09\u53c8\u79f0\u90e8\u5206\u6c42\u503c\u3002\u4e00\u4e2a currying \u7684\u51fd\u6570\u9996\u5148\u4f1a\u63a5\u53d7\u4e00\u4e9b\u53c2\u6570\uff0c\u63a5\u53d7\u4e86\u8fd9\u4e9b\u53c2\u6570\u4e4b\u540e\uff0c\u8be5\u51fd\u6570\u5e76\u4e0d\u4f1a\u7acb\u5373\u6c42\u503c\uff0c\u800c\u662f\u7ee7\u7eed\u8fd4\u56de\u53e6\u5916\u4e00\u4e2a\u51fd\u6570\uff0c\u521a\u624d\u4f20\u5165\u7684\u53c2\u6570\u5728\u51fd\u6570\u5f62\u6210\u7684\u95ed\u5305\u4e2d\u88ab\u4fdd\u5b58\u8d77\u6765\u3002\u5f85\u5230\u51fd\u6570\u88ab\u771f\u6b63\u9700\u8981\u6c42\u503c\u7684\u65f6\u5019\uff0c\u4e4b\u524d\u4f20\u5165\u7684\u6240\u6709\u53c2\u6570\u90fd\u4f1a\u88ab\u4e00\u6b21\u6027\u7528\u4e8e\u6c42\u503c\u3002 \u5b9a\u4e49\u4e09\uff1a \u4e00\u4e9b\u51fd\u6570\u5f0f\u8bed\u8a00\u7684\u5de5\u4f5c\u539f\u7406\u662f\u5c06\u591a\u53c2\u6570\u51fd\u6570\u8bed\u6cd5\u8f6c\u5316\u4e3a\u5355\u53c2\u6570\u51fd\u6570\u96c6\u5408\uff0c\u8fd9\u4e00\u8fc7\u7a0b\u79f0\u4e3a\u67ef\u91cc\u5316\uff0c\u5b83\u662f\u4ee5\u903b\u8f91\u5b66\u5bb6Haskell Curry\u7684\u540d\u5b57\u547d\u540d\u7684\u3002Haskell Curry\u4ece\u65e9\u671f\u6982\u5ff5\u4e2d\u53d1\u5c55\u51fa\u4e86\u8be5\u7406\u8bba\u3002\u5176\u5f62\u5f0f\u76f8\u5f53\u4e8e\u5c06z=f(x, y)\u8f6c\u6362\u6210z=f(x)(y)\u7684\u5f62\u5f0f\uff0c\u539f\u51fd\u6570\u7531\u4e24\u4e2a\u53c2\u6570\uff0c\u73b0\u5728\u53d8\u4e3a\u4e24\u4e2a\u63a5\u53d7\u5355\u53c2\u6570\u7684\u51fd\u6570\uff0c \u793a\u4f8b1\uff1a\u67ef\u91cc\u5316\u7684\u8fc7\u7a0b\u5c31\u662f\u628a\u539f\u6765\u5e26\u4e24\u4e2a\u53c2\u6570\u7684\u51fd\u6570add(x, y)\uff0c\u53d8\u6210\u4e86\u4e00\u4e2a\u5d4c\u5957\u51fd\u6570\uff0c\u5728add_currying\u51fd\u6570\u5185\uff0c\u53c8\u5b9a\u4e49\u4e86\u4e00\u4e2a_add\u51fd\u6570\uff0c\u5e76\u4e14_add\u51fd\u6570\u53c8\u5f15\u7528\u4e86\u5916\u90e8\u51fd\u6570add_currying\u7684\u53d8\u91cfx\uff0c\u8fd9\u5c31\u662f\u4e00\u4e2a\u95ed\u5305\u3002 \u95ed\u5305\uff0c\u4e00\u53e5\u8bdd\u8bf4\u5c31\u662f\u5728\u51fd\u6570\u4e2d\u518d\u5d4c\u5957\u4e00\u4e2a\u51fd\u6570\uff0c\u5e76\u4e14\u5f15\u7528\u5916\u90e8\u51fd\u6570\u7684\u53d8\u91cf\u3002 # \u666e\u901a\u5199\u6cd5 def add(x, y): return x + y print(add(1, 2)) # 3 # \u67ef\u91cc\u5316\u5199\u6cd5 def add_currying(x): def _add(y): return x + y return _add print(add_currying(1)(2)) # 3 \u793a\u4f8b2\uff0c\u901a\u8fc7\u56fa\u5b9a\u5176\u4e2d\u7684\u7b2c\u4e8c\u4e2a\u53c2\u6570\u4e0d\u53d8\u6765\u5b9e\u73b0\u67ef\u91cc\u5316\u3002 def add2(a, b): def add1(a, b, c): return a + b + c return add1(a, 666, b) result6 = add2(12, 13) print(result6) # 691 result6 = add2(12, 555, 13) # TypeError: add2() takes 2 positional arguments but 3 were given \u793a\u4f8b3\uff0c\u901a\u8fc7functools\u63d0\u4f9b\u7684\u504f\u51fd\u6570\u6765\u5b9e\u73b0\u67ef\u91cc\u5316\u3002 from functools import partial def add1(a, b, c): return a + b + c add3 = partial(add1, b=666) result7 = add3(a=12, c=13) print(result7) # 691 \u793a\u4f8b4\uff0c\u901a\u8fc7lambda\u8868\u8fbe\u5f0f\u6765\u5b9e\u73b0\u67ef\u91cc\u5316\u3002 def add1(a, b, c): return a + b + c add4 = lambda x, y: add1(x, 666, y) result8 = add4(12, 13) print(result8) # 691 \u793a\u4f8b5\uff0c\u901a\u8fc7python\u7684\u88c5\u9970\u5668\u6765\u5b9e\u73b0\u67ef\u91cc\u5316 def add1(a, b, c): return a + b + c def currying_add(func): def wrapper(a, c, b=666): return func(a, b, c) return wrapper result9 = currying_add(add1)(12, 13) print(result9) # 691 \u793a\u4f8b6\uff0c\u901a\u8fc7python\u7684\u88c5\u9970\u5668\u7b26\u53f7@\u6765\u5b9e\u73b0\u67ef\u91cc\u5316 def currying_add(func): def wrapper(a, c, b=666): return func(a, b, c) return wrapper @currying_add def add5(a, b, c): return a + b + c result10 = add5(12, 13) print(result10) # 691 7. \u8fed\u4ee3\u5668\u4e0e\u751f\u6210\u5668 \u8fed\u4ee3\u5668 \u8fed\u4ee3\u662fPython\u6700\u5f3a\u5927\u7684\u529f\u80fd\u4e4b\u4e00\uff0c\u662f\u8bbf\u95ee\u96c6\u5408\u5143\u7d20\u7684\u4e00\u79cd\u65b9\u5f0f\u3002\u8fed\u4ee3\u5668\u662f\u4e00\u4e2a\u53ef\u4ee5\u8bb0\u4f4f\u904d\u5386\u7684\u4f4d\u7f6e\u7684\u5bf9\u8c61\u3002 \u8fed\u4ee3\u5668\u5bf9\u8c61\u4ece\u96c6\u5408\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\u5f00\u59cb\u8bbf\u95ee\uff0c\u76f4\u5230\u6240\u6709\u7684\u5143\u7d20\u88ab\u8bbf\u95ee\u5b8c\u7ed3\u675f\u3002\u8fed\u4ee3\u5668\u53ea\u80fd\u5f80\u524d\u4e0d\u4f1a\u540e\u9000\u3002 \u8fed\u4ee3\u5668\u6709\u4e24\u4e2a\u57fa\u672c\u7684\u65b9\u6cd5\uff1aiter() \u548c next()\u3002 \u8fed\u4ee3\u5668\u793a\u4f8b\uff1a list_a = [1, 2, 3, 4] it = iter(list_a) # \u521b\u5efa\u8fed\u4ee3\u5668\u5bf9\u8c61 print(next(it)) # \u8f93\u51fa\u8fed\u4ee3\u5668\u7684\u4e0b\u4e00\u4e2a\u5143\u7d20 # 1 print(next(it)) # \u8f93\u51fa\u8fed\u4ee3\u5668\u7684\u4e0b\u4e00\u4e2a\u5143\u7d20 # 2 \u8fed\u4ee3\u5668\u5bf9\u8c61\u53ef\u4ee5\u4f7f\u7528\u5e38\u89c4for\u8bed\u53e5\u8fdb\u884c\u904d\u5386\u3002 list_a = [1, 2, 3, 4] it = iter(list_a) # \u521b\u5efa\u8fed\u4ee3\u5668\u5bf9\u8c61 for x in it: print(x, end=\" \") print(end=\"\\n\") # 1 2 3 4 \u751f\u6210\u5668 \u5728 Python \u4e2d\uff0c\u4f7f\u7528\u4e86 yield \u7684\u51fd\u6570\u88ab\u79f0\u4e3a\u751f\u6210\u5668\uff08generator\uff09\u3002\u8ddf\u666e\u901a\u51fd\u6570\u4e0d\u540c\u7684\u662f\uff0c\u751f\u6210\u5668\u662f\u4e00\u4e2a\u8fd4\u56de\u8fed\u4ee3\u5668\u7684\u51fd\u6570\uff0c\u53ea\u80fd\u7528\u4e8e\u8fed\u4ee3\u64cd\u4f5c\uff0c\u751f\u6210\u5668\u5c31\u662f\u4e00\u4e2a\u8fed\u4ee3\u5668\u3002 \u5728\u8c03\u7528\u751f\u6210\u5668\u8fd0\u884c\u7684\u8fc7\u7a0b\u4e2d\uff0c\u6bcf\u6b21\u9047\u5230 yield \u65f6\u51fd\u6570\u4f1a\u6682\u505c\u5e76\u4fdd\u5b58\u5f53\u524d\u6240\u6709\u7684\u8fd0\u884c\u4fe1\u606f\uff0c\u8fd4\u56de yield \u7684\u503c, \u5e76\u5728\u4e0b\u4e00\u6b21\u6267\u884c next() \u65b9\u6cd5\u65f6\u4ece\u5f53\u524d\u4f4d\u7f6e\u7ee7\u7eed\u8fd0\u884c\u3002 \u8c03\u7528\u4e00\u4e2a\u751f\u6210\u5668\u51fd\u6570\uff0c\u8fd4\u56de\u7684\u662f\u4e00\u4e2a\u8fed\u4ee3\u5668\u5bf9\u8c61\u3002 \u793a\u4f8b, \u6590\u6ce2\u90a3\u5951\u6570\u5217\uff1a def fibonacci(n): a, b, counter = 0, 1, 0 while True: if (counter > n): return yield a a, b = b, a + b counter += 1 f = fibonacci(10) # f \u662f\u4e00\u4e2a\u8fed\u4ee3\u5668\uff0c\u7531\u751f\u6210\u5668\u8fd4\u56de\u751f\u6210 print(f) # <generator object fibonacci at 0x7fbe8a7f7580> \u5b9e\u9645\u8c03\u7528\u751f\u6210\u5668\u65f6\uff0c\u4ee3\u7801\u5e76\u4e0d\u4f1a\u7acb\u5373\u6267\u884c for x in f: # \u8bf7\u6c42\u751f\u6210\u5668\u4e2d\u7684\u5143\u7d20\u65f6\uff0c\u5b83\u624d\u4f1a\u6267\u884c\u5b83\u7684\u4ee3\u7801 print(x, end=\" \") print(end=\"\\n\") # 0 1 1 2 3 5 8 13 21 34 55 \u751f\u6210\u5668\u8868\u8fbe\u5f0f\uff1a \u7528\u751f\u6210\u5668\u8868\u8fbe\u5f0f\u6765\u521b\u5efa\u751f\u6210\u5668\u66f4\u4e3a\u7b80\u5355\u3002\u751f\u6210\u5668\u8868\u8fbe\u5f0f\u4e0e\u5217\u8868\u3001\u5b57\u5178\u3001\u96c6\u5408\u7684\u63a8\u5bfc\u5f0f\u5f88\u7c7b\u4f3c\uff0c\u521b\u5efa\u4e00\u4e2a\u751f\u6210\u5668\u8868\u8fbe\u5f0f\uff0c\u53ea\u9700\u8981\u5c06\u5217\u8868\u63a8\u5bfc\u5f0f\u7684\u4e2d\u62ec\u53f7\u66ff\u6362\u4e3a\u5c0f\u62ec\u53f7\u5373\u53ef\u3002 gen1 = (x ** 2 for x in range(100)) print(gen1) # <generator object <genexpr> at 0x7fd3f30c9580> \u4e0a\u9762\u7684\u4ee3\u7801\u4e0e\u4e0b\u9762\u7684\u751f\u6210\u5668\u662f\u7b49\u4ef7\u7684 def _make_gen(): for x in range(100): yield x ** 2 gen2 = _make_gen() print(gen2) # <generator object _make_gen at 0x7fceb69ed580> \u751f\u6210\u5668\u8868\u8fbe\u5f0f\u53ef\u4ee5\u4f5c\u4e3a\u51fd\u6570\u53c2\u6570\u7528\u4e8e\u66ff\u4ee3\u5217\u8868\u63a8\u5bfc\u5f0f\u3002\u5bf9\u6bd4\u4e0b\u97622\u4e2a\u4f8b\u5b50\u3002 # \u793a\u4f8b1 result11 = sum(x ** 2 for x in range(100)) print(result11) # 328350 gen1 = (x ** 2 for x in range(100)) result11 = sum(gen1) print(result11) # 328350 # \u793a\u4f8b2 result12 = dict((i, i ** 2) for i in range(5)) print(result12) # {0: 0, 1: 1, 2: 4, 3: 9, 4: 16} gen2 = ((i, i ** 2) for i in range(5)) result12 = dict(gen2) print(result12) # {0: 0, 1: 1, 2: 4, 3: 9, 4: 16} \u751f\u6210\u5668\uff1aitertools\u6a21\u5757 \u6807\u51c6\u5e93\u4e2d\u7684itertools\u6a21\u5757\u662f\u9002\u7528\u4e8e\u5927\u591a\u6570\u6570\u636e\u7b97\u6cd5\u7684\u751f\u6210\u5668\u96c6\u5408\u3002 import itertools first_letter = lambda x: x[0] names = ['Alan', 'Adam', 'Wes', 'Will', 'Albert', 'Steven'] for letter, names in itertools.groupby(names, first_letter): print(letter) print(first_letter) print(letter, list(names)) # names is generator # A # <function <lambda> at 0x7fa598a7a0d0> # A ['Alan', 'Adam'] # W # <function <lambda> at 0x7fa598a7a0d0> # W ['Wes', 'Will'] # A # <function <lambda> at 0x7fa598a7a0d0> # A ['Albert'] # S # <function <lambda> at 0x7fa598a7a0d0> # S ['Steven'] 8. \u9519\u8bef\u548c\u5f02\u5e38\u5904\u7406 Python\u7528\u5f02\u5e38\u5bf9\u8c61(exception object)\u6765\u8868\u793a\u5f02\u5e38\u60c5\u51b5\u3002\u9047\u5230\u9519\u8bef\u540e\uff0c\u4f1a\u5f15\u53d1\u5f02\u5e38\u3002\u5982\u679c\u5f02\u5e38\u5bf9\u8c61\u5e76\u672a\u88ab\u5904\u7406\u6216\u6355\u6349\uff0c\u7a0b\u5e8f\u5c31\u4f1a\u7528\u6240\u8c13\u7684\u56de\u6eaf(traceback\uff0c \u4e00\u79cd\u9519\u8bef\u4fe1\u606f)\u7ec8\u6b62\u6267\u884c\u3002 \u5f02\u5e38\u548c\u8bed\u6cd5\u9519\u8bef\u662f\u6709\u533a\u522b\u7684\u3002 * \u9519\u8bef\uff1a\u662f\u6307\u4ee3\u7801\u4e0d\u7b26\u5408\u89e3\u91ca\u5668\u6216\u8005\u7f16\u8bd1\u5668\u8bed\u6cd5\u3002 * \u5f02\u5e38\uff1a\u662f\u6307\u4e0d\u5b8c\u6574\u3001\u4e0d\u5408\u6cd5\u8f93\u5165\uff0c\u6216\u8005\u8ba1\u7b97\u51fa\u73b0\u9519\u8bef\u3002 python\u91cc\u7528try...except...\u8bed\u53e5\u6765\u5904\u7406\u5f02\u5e38\u60c5\u51b5\u3002 def attempt_float(x): try: return float(x) except (TypeError, ValueError): return \"Type error, not numbers\" r1 = attempt_float('1.2256') print(r1) # 1.2256 r1 = attempt_float('friends') print(r1) # Type error, not numbers 9. \u6587\u4ef6\u4e0e\u64cd\u4f5c\u7cfb\u7edf f=open(path, 'w')\uff0c\u4e00\u4e2a\u65b0\u7684\u6587\u4ef6\u4f1a\u5728path\u6307\u5b9a\u7684\u8def\u5f84\u88ab\u521b\u5efa\uff0c\u5e76\u5728\u540c\u4e00\u8def\u5f84\u4e0b\u8986\u76d6\u540c\u540d\u6587\u4ef6\u3002\uff08\u8bf7\u5c0f\u5fc3\uff01\uff09 f=open(path, 'x')\uff0c\u4e00\u4e2a\u65b0\u7684\u6587\u4ef6\u4f1a\u5728path\u6307\u5b9a\u7684\u8def\u5f84\u88ab\u521b\u5efa\uff0c\u5982\u679c\u7ed9\u5b9a\u8def\u5f84\u4e0b\u5df2\u7ecf\u5b58\u5728\u540c\u540d\u6587\u4ef6\u5c31\u4f1a\u521b\u5efa\u5931\u8d25\u3002 import os # \u67e5\u770b\u5f53\u524d\u8def\u5f84 os.getcwd() # '/opt/myMemo' # \u66f4\u6539\u6587\u4ef6\u8bfb\u53d6\u9ed8\u8ba4\u8def\u5f84 os.chdir('/opt/myMemo/python/datasets/examples') # \u6307\u5b9a\u6587\u4ef6\u540d path = 'file01.txt' # \u6253\u5f00\u6587\u4ef6 f = open(path) # \u8bfb\u53d6\u6587\u4ef6\u6bcf\u4e00\u884c\uff0c\u6587\u4ef6\u6bcf\u4e00\u884c\u4f5c\u4e3a\u5217\u8868\u4e00\u4e2a\u5143\u7d20 lines = [x.rstrip() for x in open(path)] # \u8f93\u51fa\u5217\u8868 print(lines) # \u5173\u95ed\u6587\u4ef6\u4f1a\u5c06\u8d44\u6e90\u91ca\u653e\u56de\u64cd\u4f5c\u7cfb\u7edf f.close() \u53e6\u4e00\u79cd\u66f4\u7b80\u5355\u7684\u5173\u95ed\u6587\u4ef6\u7684\u65b9\u5f0f import os # \u67e5\u770b\u5f53\u524d\u8def\u5f84 os.getcwd() # '/opt/myMemo' # \u66f4\u6539\u6587\u4ef6\u8bfb\u53d6\u9ed8\u8ba4\u8def\u5f84 os.chdir('/opt/myMemo/python/datasets/examples') # \u6307\u5b9a\u6587\u4ef6\u540d path = 'file01.txt' # \u6253\u5f00\u6587\u4ef6 f = open(path) # \u4f7f\u7528with\u8bed\u53e5\u8bfb\u53d6\u6587\u4ef6\uff0c\u6587\u4ef6\u4f1a\u5728with\u4ee3\u7801\u5757\u7ed3\u675f\u540e\u81ea\u52a8\u5173\u95ed\u3002 with open(path) as f: lines = [x.rstrip() for x in open(path)] # \u8f93\u51fa\uff1a\u6587\u4ef6\u6bcf\u4e00\u884c\u4f5c\u4e3a\u5217\u8868\u4e00\u4e2a\u5143\u7d20 print(lines) \u5728\u6253\u5f00\u6587\u4ef6\u65f6\u4f7f\u7528seek\u8bfb\u53d6\u6587\u4ef6\u5185\u5bb9\u8981\u5f53\u5fc3\u3002\u5982\u679c\u6587\u4ef6\u7684\u53e5\u67c4\u4f4d\u7f6e\u6070\u597d\u5728\u4e00\u4e2aUnicode\u7b26\u53f7\u7684\u5b57\u8282\u4e2d\u95f4\u65f6\uff0c\u540e\u7eed\u7684\u8bfb\u53d6\u4f1a\u5bfc\u81f4\u9519\u8bef\u3002 import os # \u67e5\u770b\u5f53\u524d\u8def\u5f84 os.getcwd() # '/opt/myMemo' # \u66f4\u6539\u6587\u4ef6\u8bfb\u53d6\u9ed8\u8ba4\u8def\u5f84 os.chdir('/opt/myMemo/python/datasets/examples') # \u6307\u5b9a\u6587\u4ef6\u540d path = 'file01.txt' # \u6253\u5f00\u6587\u4ef6 f = open(path) # \u8bfb\u53d6\u6587\u4ef6\u3002 print(f.read(5)) # \u8f93\u51fa\u524d5\u4e2a\u5b57\u7b26\u3002 read\u65b9\u6cd5\u901a\u8fc7\u8bfb\u53d6\u7684\u5b57\u8282\u6570\u6765\u63a8\u8fdb\u6587\u4ef6\u53e5\u67c4\u7684\u4f4d\u7f6e\u3002 # I Thi print(f.tell()) # tell\u65b9\u6cd5\u53ef\u4ee5\u7ed9\u51fa\u53e5\u67c4\u5f53\u524d\u7684\u4f4d\u7f6e # 5 print(f.seek(6)) # seek\u65b9\u6cd5\u53ef\u4ee5\u5c06\u53e5\u67c4\u4f4d\u7f6e\u6539\u53d8\u5230\u6587\u4ef6\u4e2d\u7279\u5b9a\u7684\u5b57\u8282 # 6 print(f.read(1)) # \u4ece\u7b2c7\u4e2a\u5b57\u8282\u5f00\u59cb\uff0c\u8f93\u51fa1\u4e2a\u5b57\u8282 # k # \u5173\u95ed\u6587\u4ef6\u4f1a\u5c06\u8d44\u6e90\u91ca\u653e\u56de\u64cd\u4f5c\u7cfb\u7edf f.close() \u5982\u679c\u4f7f\u7528\u4e8c\u8fdb\u5236\u65b9\u5f0f\u6253\u5f00\u6587\u4ef6\uff0c\u5219\uff1a import os # \u67e5\u770b\u5f53\u524d\u8def\u5f84 os.getcwd() # '/opt/myMemo' # \u66f4\u6539\u6587\u4ef6\u8bfb\u53d6\u9ed8\u8ba4\u8def\u5f84 os.chdir('/opt/myMemo/python/datasets/examples') # \u6307\u5b9a\u6587\u4ef6\u540d path = 'file01.txt' # \u6253\u5f00\u6587\u4ef6 f2 = open(path, 'rb') # \u4e8c\u8fdb\u5236\u6a21\u5f0f # \u8bfb\u53d6\u6587\u4ef6 print(f2.read(5)) # \u7b2c\u4e00\u4e2ab\u4ee3\u8868\u4e8c\u8fdb\u5236\u683c\u5f0f # b'I Thi' print(f2.tell()) # 5 print(f2.seek(6)) # 6 print(f2.read(2)) # \u4ece\u7b2c7\u4e2a\u5b57\u8282\u5f00\u59cb\uff0c\u8f93\u51fa2\u4e2a\u5b57\u8282 # b'k ' # \u5173\u95ed\u6587\u4ef6\u4f1a\u5c06\u8d44\u6e90\u91ca\u653e\u56de\u64cd\u4f5c\u7cfb\u7edf f2.close() \u5c06\u672c\u6587\u5199\u5165\u6587\u4ef6\uff0c\u53ef\u4ee5\u4f7f\u7528\u6587\u4ef6\u5bf9\u8c61\u7684write\u6216wirtelines\u65b9\u6cd5\u3002 import os # \u67e5\u770b\u5f53\u524d\u8def\u5f84 os.getcwd() # '/opt/myMemo' # \u66f4\u6539\u6587\u4ef6\u8bfb\u53d6\u9ed8\u8ba4\u8def\u5f84 os.chdir('/opt/myMemo/python/datasets/examples') # \u6307\u5b9a\u6587\u4ef6\u540d path1 = 'file01.txt' path2 = 'file02.txt' # file02.txt\u662f\u4e00\u4e2a\u7a7a\u6587\u4ef6 with open(path2, 'r+', encoding='utf-8') as f: f.writelines(x for x in open(path1, 'r', encoding='utf-8') if len(x) > 1) # \u628afile01.txt\u7684\u5185\u5bb9\u5199\u5165file02.txt lines = f.readlines() print(lines)","title":"\u5185\u7f6e\u51fd\u6570\u53ca\u6587\u4ef6"},{"location":"python/Foundation/ch03/#_1","text":"","title":"\u5185\u7f6e\u51fd\u6570\u53ca\u6587\u4ef6"},{"location":"python/Foundation/ch03/#1-lambda","text":"\u533f\u540d\u51fd\u6570\u662f\u4e00\u79cd\u901a\u8fc7\u5355\u4e2a\u8bed\u53e5\u751f\u6210\u51fd\u6570\u7684\u65b9\u5f0f\uff0c\u5176\u7ed3\u679c\u662f\u8fd4\u56de\u503c\u3002\u533f\u540d\u51fd\u6570\u4f7f\u7528lambda\u5173\u952e\u5b57\u5b9a\u4e49\uff0c\u8be5\u5173\u952e\u5b57\u4ec5\u8868\u8fbe\u201c\u6211\u4eec\u58f0\u660e\u4e00\u4e2a\u533f\u540d\u51fd\u6570\u201d\u7684\u610f\u601d\u3002 lambda \u51fd\u6570\u53ef\u4ee5\u63a5\u6536\u4efb\u610f\u591a\u4e2a\u53c2\u6570 (\u5305\u62ec\u53ef\u9009\u53c2\u6570) \u5e76\u4e14\u8fd4\u56de\u5355\u4e2a\u8868\u8fbe\u5f0f\u7684\u503c\u3002 lambda arg1,arg2,arg3\u2026 :<\u8868\u8fbe\u5f0f> f = lambda x, y: x * y print(f(2, 3)) # 6 f = [lambda a: a * 2, lambda b: b * 3] print(f[0](5)) # \u6267\u884cf\u5217\u8868\u7b2c\u4e00\u4e2a\u5143\u7d20 # 10 print(f[1](5)) # \u6267\u884cf\u5143\u7d20\u7b2c\u4e8c\u4e2a\u5143\u7d20 # 15 print(f[0, 1](5, 5)) # TypeError: list indices must be integers or slices, not tuple \u793a\u4f8b1\uff1a def short_func1(x): return x * 2 short_func2 = lambda x: x * 2 print(short_func1(5)) # 10 print(short_func2(5)) # 10 \u793a\u4f8b2\uff1a def apply_to_list(some_list, f): return [f(x) for x in some_list] ints = [4, 0, 1, 5, 6] result5 = apply_to_list(ints, lambda x: x * 2) print(result5) # [8, 0, 2, 10, 12] lambda: None \u51fd\u6570\u6ca1\u6709\u8f93\u5165\u53c2\u6570\uff0c\u8f93\u51fa\u662fNone\u3002 print(lambda: None) # <function <lambda> at 0x7fa5c4097670> lambda **kwargs: 1 \u8f93\u5165\u662f\u4efb\u610f\u952e\u503c\u5bf9\u53c2\u6570\uff0c\u8f93\u51fa\u662f1\u3002 print(lambda **kwargs: 1) # <function <lambda> at 0x7fa5c4097670>","title":"1. \u533f\u540d\uff08Lambda\uff09\u51fd\u6570"},{"location":"python/Foundation/ch03/#2-enumerate","text":"\u5f53\u9700\u8981\u5bf9\u6570\u636e\u5efa\u7acb\u7d22\u5f15\u65f6\uff0c\u4e00\u79cd\u6709\u6548\u7684\u6a21\u5f0f\u5c31\u662f\u4f7f\u7528enumerate\u6784\u9020\u4e00\u4e2a\u5b57\u5178\uff0c\u5c06\u5e8f\u5217\u503c\uff08\u5047\u8bbe\u662f\u552f\u4e00\u7684\uff09\u6620\u5c04\u5230\u7d22\u5f15\u4f4d\u7f6e\u4e0a\u3002 seasons = ['Spring', 'Summer', 'Fall', 'Winter'] print(list(enumerate(seasons))) # [(0, 'Spring'), (1, 'Summer'), (2, 'Fall'), (3, 'Winter')] \u5bf9\u6bd4\u4e0b\u97622\u4e2a\u5faa\u73af a_list = ['foo', 'bar', 'baz'] mapping = {} for i, v in enumerate(a_list): # enumerate\u751f\u6210\u7d22\u5f15\u503ci\u548c\u5e8f\u5217\u503cv mapping[v] = i print(mapping) # {'foo': 0, 'bar': 1, 'baz': 2} i = 0 mapping = {} for v in a_list: print(i, a_list[i]) mapping[v] = i # \u53ef\u4ee5\u628ai\u548cv\u4e92\u6362 i += 1 print(mapping) # {'foo': 0, 'bar': 1, 'baz': 2} \u5229\u7528 enumerate() \u6279\u91cf\u4fee\u6539\u5217\u8868\u5185\u7684\u5143\u7d20 a_list = ['01', '02', '03'] unit_element = '1' for i, element in enumerate(a_list): a_list[i] = unit_element + element print(a_list) # ['101', '102', '103'] sorted\u51fd\u6570\u8fd4\u56de\u4e00\u4e2a\u6839\u636e\u4efb\u610f\u5e8f\u5217\u4e2d\u7684\u5143\u7d20\u65b0\u5efa\u7684\u5df2\u6392\u5e8f\u5217\u8868\u3002sorted\u51fd\u6570\u63a5\u53d7\u7684\u53c2\u6570\u4e0e\u5217\u8868\u7684sort\u65b9\u6cd5\u4e00\u81f4\u3002 y = sorted([7, 1, 2, 6, 0, 3, 2]) print(y) # [0, 1, 2, 2, 3, 6, 7] \u7ed3\u679c\u5df2\u6392\u5e8f z = sorted('Hello World') print(z) # [' ', 'H', 'W', 'd', 'e', 'l', 'l', 'l', 'o', 'o', 'r'] zip\u5c06\u5217\u8868\u3001\u5143\u7ec4\u6216\u5176\u4ed6\u5e8f\u5217\u7684\u5143\u7d20\u914d\u5bf9\uff0c\u65b0\u5efa\u4e00\u4e2a\u5143\u7ec4\u6784\u6210\u7684\u5217\u8868\u3002 seq1 = ['foo', 'bar', 'baz'] seq2 = ['one', 'two', 'three'] seq3 = [False, True] zipped = zip(seq1, seq2) print(list(zipped)) # [('foo', 'one'), ('bar', 'two'), ('baz', 'three')] zipped = zip(seq1, seq2, seq3) print(list(zipped)) # [('foo', 'one', False), ('bar', 'two', True)] for i, (a, b) in enumerate(zip(seq1, seq2)): print('{0}: {1}, {2}'.format(i, a, b)) # \u65b9\u6cd51 {0}\u5217\u8868\u5143\u7d20\u7684\u7d22\u5f15, {1}\u5143\u7ec4\u4e2d\u7b2c\u4e00\u4e2a\u503c, {2}\u5143\u7ec4\u4e2d\u7b2c\u4e8c\u4e2a\u503c print(f'{i}: {a}, {b}') # \u65b9\u6cd52 # 0: foo, one # 1: bar, two # 2: baz, three \u7ed9\u5b9a\u4e00\u4e2a\u5df2\u201c\u914d\u5bf9\u201d\u7684\u5e8f\u5217\u65f6\uff0czip\u51fd\u6570\u53ef\u4ee5\u53bb\u201c\u62c6\u5206\u201d\u5e8f\u5217\u3002\u8fd9\u79cd\u65b9\u5f0f\u7684\u53e6\u4e00\u79cd\u601d\u8def\u5c31\u662f\u5c06\u884c\u7684\u5217\u8868\u8f6c\u6362\u4e3a\u5217\u7684\u5217\u8868\u3002\u53c2\u8003Python\u7684 Unpacking pitchers = [('Jack', 'Ma'), ('Tom', 'Li'), ('Jimmy', 'Zhang')] first_names, last_names = zip(*pitchers) print(first_names) # ('Jack', 'Tom', 'Jimmy') print(last_names) # ('Ma', 'Li', 'Zhang') reversed\u51fd\u6570\u5c06\u5e8f\u5217\u7684\u5143\u7d20\u5012\u5e8f\u6392\u5217 print(list(reversed(range(10)))) # [9, 8, 7, 6, 5, 4, 3, 2, 1, 0]","title":"2. \u5185\u7f6e\u5e8f\u5217\u51fd\u6570enumerate"},{"location":"python/Foundation/ch03/#3","text":"\u63a8\u5bfc\u5f0fcomprehensions\uff08\u53c8\u79f0\u89e3\u6790\u5f0f\uff09\uff0c\u662fPython\u7684\u4e00\u79cd\u7279\u6027\u3002\u4f7f\u7528\u63a8\u5bfc\u5f0f\u53ef\u4ee5\u5feb\u901f\u751f\u6210\u5217\u8868\u3001\u5143\u7ec4\u3001\u96c6\u5408\u3001\u5b57\u5178\u7c7b\u578b\u7684\u6570\u636e\u3002\u63a8\u5bfc\u5f0f\u53c8\u5206\u4e3a\u5217\u8868\u63a8\u5bfc\u5f0f\u3001\u5143\u7ec4\u63a8\u5bfc\u5f0f\u3001\u96c6\u5408\u63a8\u5bfc\u5f0f\u3001\u5b57\u5178\u63a8\u5bfc\u5f0f\u3002","title":"3. \u5217\u8868\u3001\u96c6\u5408\u548c\u5b57\u5178\u7684\u63a8\u5bfc\u5f0f"},{"location":"python/Foundation/ch03/#list-comprehension","text":"\u5217\u8868\u63a8\u5bfc\u5f0f(list comprehension)\u5141\u8bb8\u4f60\u8fc7\u6ee4\u4e00\u4e2a\u5bb9\u5668\u7684\u5143\u7d20\uff0c\u7528\u4e00\u79cd\u7b80\u660e\u7684\u8868\u8fbe\u5f0f\u8f6c\u6362\u4f20\u9012\u7ed9\u8fc7\u6ee4\u5668\u7684\u5143\u7d20\uff0c\u4ece\u800c\u751f\u6210\u4e00\u4e2a\u65b0\u7684\u5217\u8868\u3002 \u5217\u8868\u63a8\u5bfc\u5f0f\u7684\u57fa\u672c\u5f62\u5f0f\u4e3a\uff1a[expr for val in collection if condition]\uff0c\u6761\u4ef6if-condition\u4e0d\u662f\u5fc5\u987b\u7684\uff0c\u53ef\u4ee5\u53ea\u4fdd\u7559\u8868\u8fbe\u5f0f\u3002\u5217\u8868\u63a8\u5bfc\u5f0f\u4e0e\u4e0b\u9762\u7684for\u5faa\u73af\u662f\u7b49\u4ef7\u7684\uff1a result = [] for val in collection: if condition: result.append(expr) \u770b\u4e0b\u9762\u7684\u4f8b\u5b50\uff1a data = [] for i in range(-5, 5): if i >= -1: data.append(i**2) print(data) # [1, 0, 1, 4, 9, 16] data = [i**2 for i in range(-5, 5) if i >= -1] print(data) # [1, 0, 1, 4, 9, 16] \u4e0b\u9762\u7684\u4f8b\u5b50\u662f\u4f7f\u7528for\u53bb\u904d\u5386\u4e00\u4e2a\u53ef\u8fed\u4ee3\u7684\u5217\u8868\u3002 data = [] fruit = [ 'pomegranate', 'cherry', 'apricot', 'date', 'Apple', 'lemon', 'kiwi', 'ORANGE', 'lime', 'Watermelon', 'guava', 'papaya', 'FIG', 'pear', 'banana', 'Tamarind', 'persimmon', 'elderberry', 'peach', 'BLUEberry', 'lychee', 'grape' ] data = [x.upper() if x.startswith('p') else x.title() for x in fruit] print(data) # ['POMEGRANATE', 'Cherry', 'Apricot', 'Date', 'Apple', 'Lemon', 'Kiwi', 'Orange', 'Lime', 'Watermelon', 'Guava', 'PAPAYA', 'Fig', 'PEAR', 'Banana', 'Tamarind', 'PERSIMMON', 'Elderberry', 'PEACH', 'Blueberry', 'Lychee', 'Grape']","title":"\u5217\u8868\u63a8\u5bfc\u5f0f(list comprehension)"},{"location":"python/Foundation/ch03/#_2","text":"\u4e0b\u9762\u7684\u4f8b\u5b50\u662f\u7528\u5d4c\u5957\u5217\u8868\u63a8\u5bfc\u5f0f\u4ee3\u66ff2\u5c42for\u5faa\u73af\u3002 data = [] for i in range(1, 3): if i >= 0: for j in range(1, 3): data.append((i, j)) print(data) # [(1, 1), (1, 2), (2, 1), (2, 2)] data = [(i, j) for i in range(1, 3) if i >= -1 for j in range(1, 3)] print(data) # [(1, 1), (1, 2), (2, 1), (2, 2)] \u518d\u4e3e\u4e00\u4e2a\u5d4c\u5957\u5217\u8868\u63a8\u5bfc\u5f0f\u7684\u4f8b\u5b50\u3002 all_data = [ ['John', 'Emily', 'Michael', 'Lee', 'Steven'], ['Maria', 'Juan', 'Javier', 'Natalia', 'Pilar'], ] names_of_interest = [] for names in all_data: enough_es = [name for name in names if name.count('e') >=2] names_of_interest.extend(enough_es) print(names_of_interest) # ['Lee', 'Steven'] result = [name for names in all_data for name in names if name.count('e') >= 2] print(result) # ['Lee', 'Steven'] \u7528\u5d4c\u5957\u5217\u8868\u63a8\u5bfc\u5f0f\u5c06\u77e9\u9635\u6241\u5e73\u5316\u3002 \u8003\u8651\u4e0b\u9762\u8fd9\u4e2a3x4\u7684\u77e9\u9635\uff0c\u5b83\u75313\u4e2a\u957f\u5ea6\u4e3a4\u7684\u5217\u8868\u7ec4\u6210\u3002\u4e0b\u9762\u4f8b\u5b50\u5bf9\u6bd4\u4e86\u7528\u4f20\u7edffor\u5faa\u73af\u5c06\u77e9\u9635\u6241\u5e73\u5316\uff0c\u548c\u7528\u5d4c\u5957\u5217\u8868\u63a8\u5bfc\u5f0f\u5c06\u77e9\u9635\u6241\u5e73\u5316\u3002\u5e76\u4e14\u901a\u8fc7\u5217\u8868\u63a8\u5bfc\u5f0f\u4e2d\u7684\u5217\u8868\u63a8\u5bfc\u5f0f\u5c06\u6241\u5e73\u77e9\u9635\u8fd8\u539f\u4e3a3x4\u77e9\u9635\u3002 matrix = [ [1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], ] flattened = [] # \u4f20\u7edffor\u5faa\u73af\u5d4c\u5957 for m in matrix: for x in m: flattened.append(x) print(flattened) # [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12] # \u5d4c\u5957\u5217\u8868\u63a8\u5bfc\u5f0f flattened = [x for m in matrix for x in m] print(flattened) # [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12] # \u5217\u8868\u63a8\u5bfc\u5f0f\u4e2d\u7684\u5217\u8868\u63a8\u5bfc\u5f0f z = [[x for x in m] for m in matrix] print(z) # [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]","title":"\u5957\u5217\u8868\u63a8\u5bfc\u5f0f"},{"location":"python/Foundation/ch03/#_3","text":"\u4e0b\u9762\u7684\u4f8b\u5b50\u751f\u6210\u4e00\u4e2a\u5305\u542b\u6570\u5b571~5\u7684\u5143\u7ec4\u3002\u4ece\u7ed3\u679c\u53ef\u4ee5\u770b\u5230\uff0c\u5143\u7ec4\u63a8\u5bfc\u5f0f\u751f\u6210\u7684\u7ed3\u679c\u5e76\u4e0d\u662f\u4e00\u4e2a\u5143\u7ec4\uff0c\u800c\u662f\u4e00\u4e2a\u751f\u6210\u5668\u5bf9\u8c61\uff0c\u9700\u8981\u901a\u8fc7tuple()\u51fd\u6570\uff0c\u5c06\u751f\u6210\u5668\u5bf9\u8c61\u8f6c\u6362\u6210\u5143\u7ec4\u3002 data = (x for x in range(5)) print(data) # <generator object <genexpr> at 0x7f87217a8e40> print(type(data)) # <class 'generator'> print(tuple(data)) # (0, 1, 2, 3, 4)","title":"\u5143\u7ec4\u63a8\u5bfc\u5f0f"},{"location":"python/Foundation/ch03/#_4","text":"\u4e0b\u9762\u662f\u4e00\u4e2a\u7b80\u5355\u7684\u96c6\u5408\u63a8\u5bfc\u5f0f\u4f8b\u5b50\u3002 data = {x**2 for x in range(5)} print(data) # {0, 1, 4, 9, 16} print(type(data)) # <class 'set'> \u96c6\u5408\u8981\u4fdd\u8bc1\u5143\u7d20\u5fc5\u987b\u662f\u552f\u4e00\u7684\u3002 data = (1, 1, 2, 2, 3, 3, 4, 5, 6) newset = {x**2 for x in data} print(newset) # {1, 4, 36, 9, 16, 25} print(type(newset) # <class 'set'>","title":"\u96c6\u5408\u63a8\u5bfc\u5f0f"},{"location":"python/Foundation/ch03/#_5","text":"\u5b57\u5178\u63a8\u5bfc\u5f0f: dict_comp = {key-expr : value-expr for value in collection if condition} \u5b57\u5178\u63a8\u5bfc\u5f0f\u7684\u7b80\u5355\u793a\u4f8b\uff1a strings = ['a', 'as', 'bat', 'car', 'dove', 'python'] loc_mapping = {index: val for index, val in enumerate(strings)} print(loc_mapping) # {0: 'a', 1: 'as', 2: 'bat', 3: 'car', 4: 'dove', 5: 'python'} # \u4ea4\u6362\u952e\u548c\u503c loc_mapping = {index: val for val, index in enumerate(strings)} print(loc_mapping) # {'a': 0, 'as': 1, 'bat': 2, 'car': 3, 'dove': 4, 'python': 5}","title":"\u5b57\u5178\u63a8\u5bfc\u5f0f"},{"location":"python/Foundation/ch03/#4","text":"\u5982\u679cPython\u8fbe\u5230\u51fd\u6570\u7684\u5c3e\u90e8\u65f6\u4ecd\u7136\u6ca1\u6709\u9047\u5230return\u8bed\u53e5\uff0c\u5c31\u4f1a\u81ea\u52a8\u8fd4\u56deNone\u3002 \u6bcf\u4e2a\u51fd\u6570\u90fd\u53ef\u4ee5\u6709\u4f4d\u7f6e\u53c2\u6570\u548c\u5173\u952e\u5b57\u53c2\u6570\u3002\u5173\u952e\u5b57\u53c2\u6570\u6700\u5e38\u7528\u4e8e\u6307\u5b9a\u9ed8\u8ba4\u503c\u6216\u53ef\u9009\u53c2\u6570\u3002\u5173\u952e\u5b57\u53c2\u6570\u5fc5\u987b\u8ddf\u5728\u4f4d\u7f6e\u53c2\u6570\u540e\uff0c\u53ef\u4ee5\u4f7f\u7528\u5173\u952e\u5b57\u53c2\u6570\u5411\u4f4d\u7f6e\u53c2\u6570\u4f20\u53c2\u3002 import sys def my_function1(x, y, z=1.5): if z > 1: return z * (x + y) else: return z / (x + y) result1 = my_function1(5, 6, z=0.7) print(result1) # 0.06363636363636363 result1 = my_function1(x=5, y=6, z=0.7) print(result1) # 0.06363636363636363 result1 = my_function1(3.14, 7, 3.5) print(result1) # 35.49 result1 = my_function1(10, 20) print(result1) # 45.0","title":"4. \u51fd\u6570\u58f0\u660e"},{"location":"python/Foundation/ch03/#5","text":"\u51fd\u6570\u6709\u4e24\u79cd\u8fde\u63a5\u53d8\u91cf\u7684\u65b9\u5f0f\uff1a\u5168\u5c40\u3001\u672c\u5730\u3002 def func1(): list1 = [] # \u672c\u5730\u53d8\u91cf for i in range(5): list1.append(i) print(list1) func1() # [0, 1, 2, 3, 4] list2 = [] # \u5168\u5c40\u53d8\u91cf def func2(): global list2 # \u5168\u5c40\u53d8\u91cf for i in range(5): list2.append(i) print(list2) func2() # [0, 1, 2, 3, 4] \u6570\u636e\u6e05\u6d17\u793a\u4f8b states = [' Alabama', 'Georgia!', 'georgia', 'Georgia', 'FlOrIda', 'south carolina##', 'West virginia? '] # \u65b9\u6cd51 import re def clean_string1(strings): result2 = [] for value in strings: value = value.strip() value = re.sub('[! #? ]', '', value) value = value.title() result2.append(value) return result2 print(clean_string1((states))) # ['Alabama', 'Georgia', 'Georgia', 'Georgia', 'Florida', 'Southcarolina', 'Westvirginia'] # \u65b9\u6cd52 def remove_punctuaion(value): return re.sub('[! #? ]', '', value) clean_ops = [str.strip, remove_punctuaion, str.title] def clean_string2(strings, ops): result3 = [] for value in strings: for function in ops: value = function(value) result3.append(value) return result3 result4 = clean_string2(states, clean_ops) print(result4) # ['Alabama', 'Georgia', 'Georgia', 'Georgia', 'Florida', 'Southcarolina', 'Westvirginia'] # \u53ef\u4ee5\u5c06\u51fd\u6570\u4f5c\u4e3a\u4e00\u4e2a\u53c2\u6570\u4f20\u7ed9\u5176\u4ed6\u7684\u51fd\u6570\u3002 for x in map(remove_punctuaion, states): print(x) # Alabama # Georgia # georgia # Georgia # FlOrIda # southcarolina # Westvirginia","title":"5. \u547d\u540d\u7a7a\u95f4\u3001\u4f5c\u7528\u57df\u548c\u672c\u5730\u51fd\u6570"},{"location":"python/Foundation/ch03/#6","text":"\u67ef\u91cc\u5316\u662f\u8ba1\u7b97\u673a\u79d1\u5b66\u672f\u8bed\uff08\u4ee5\u6570\u5b66\u5bb6Haskell Curry\u547d\u540d\uff09\uff0c\u5b83\u8868\u793a\u901a\u8fc7\u90e8\u5206\u53c2\u6570\u5e94\u7528\u7684\u65b9\u5f0f\u4ece\u5df2\u6709\u7684\u51fd\u6570\u4e2d\u884d\u751f\u51fa\u65b0\u7684\u51fd\u6570\u3002\u67ef\u91cc\u5316\u662f\u4e00\u79cd\u5c06\u591a\u53c2\u6570\u51fd\u6570\u8f6c\u5316\u4e3a\u5355\u53c2\u6570\u9ad8\u9636\u51fd\u6570\u7684\u6280\u672f\uff0c\u5982\u679c\u4f60\u56fa\u5b9a\u67d0\u4e9b\u53c2\u6570\uff0c\u4f60\u5c06\u5f97\u5230\u63a5\u53d7\u4f59\u4e0b\u53c2\u6570\u7684\u4e00\u4e2a\u51fd\u6570\u3002 \u5b9a\u4e49\u4e00\uff1a \u67ef\u91cc\u5316\uff1a\u4e00\u4e2a\u51fd\u6570\u4e2d\u6709\u4e2a\u591a\u4e2a\u53c2\u6570\uff0c\u60f3\u56fa\u5b9a\u5176\u4e2d\u67d0\u4e2a\u6216\u8005\u51e0\u4e2a\u53c2\u6570\u7684\u503c\uff0c\u800c\u53ea\u63a5\u53d7\u53e6\u5916\u51e0\u4e2a\u8fd8\u672a\u56fa\u5b9a\u7684\u53c2\u6570\uff0c\u8fd9\u6837\u51fd\u6570\u6f14\u53d8\u6210\u65b0\u7684\u51fd\u6570\u3002 \u5b9a\u4e49\u4e8c\uff1a \u51fd\u6570\u67ef\u91cc\u5316\uff08currying\uff09\u53c8\u79f0\u90e8\u5206\u6c42\u503c\u3002\u4e00\u4e2a currying \u7684\u51fd\u6570\u9996\u5148\u4f1a\u63a5\u53d7\u4e00\u4e9b\u53c2\u6570\uff0c\u63a5\u53d7\u4e86\u8fd9\u4e9b\u53c2\u6570\u4e4b\u540e\uff0c\u8be5\u51fd\u6570\u5e76\u4e0d\u4f1a\u7acb\u5373\u6c42\u503c\uff0c\u800c\u662f\u7ee7\u7eed\u8fd4\u56de\u53e6\u5916\u4e00\u4e2a\u51fd\u6570\uff0c\u521a\u624d\u4f20\u5165\u7684\u53c2\u6570\u5728\u51fd\u6570\u5f62\u6210\u7684\u95ed\u5305\u4e2d\u88ab\u4fdd\u5b58\u8d77\u6765\u3002\u5f85\u5230\u51fd\u6570\u88ab\u771f\u6b63\u9700\u8981\u6c42\u503c\u7684\u65f6\u5019\uff0c\u4e4b\u524d\u4f20\u5165\u7684\u6240\u6709\u53c2\u6570\u90fd\u4f1a\u88ab\u4e00\u6b21\u6027\u7528\u4e8e\u6c42\u503c\u3002 \u5b9a\u4e49\u4e09\uff1a \u4e00\u4e9b\u51fd\u6570\u5f0f\u8bed\u8a00\u7684\u5de5\u4f5c\u539f\u7406\u662f\u5c06\u591a\u53c2\u6570\u51fd\u6570\u8bed\u6cd5\u8f6c\u5316\u4e3a\u5355\u53c2\u6570\u51fd\u6570\u96c6\u5408\uff0c\u8fd9\u4e00\u8fc7\u7a0b\u79f0\u4e3a\u67ef\u91cc\u5316\uff0c\u5b83\u662f\u4ee5\u903b\u8f91\u5b66\u5bb6Haskell Curry\u7684\u540d\u5b57\u547d\u540d\u7684\u3002Haskell Curry\u4ece\u65e9\u671f\u6982\u5ff5\u4e2d\u53d1\u5c55\u51fa\u4e86\u8be5\u7406\u8bba\u3002\u5176\u5f62\u5f0f\u76f8\u5f53\u4e8e\u5c06z=f(x, y)\u8f6c\u6362\u6210z=f(x)(y)\u7684\u5f62\u5f0f\uff0c\u539f\u51fd\u6570\u7531\u4e24\u4e2a\u53c2\u6570\uff0c\u73b0\u5728\u53d8\u4e3a\u4e24\u4e2a\u63a5\u53d7\u5355\u53c2\u6570\u7684\u51fd\u6570\uff0c \u793a\u4f8b1\uff1a\u67ef\u91cc\u5316\u7684\u8fc7\u7a0b\u5c31\u662f\u628a\u539f\u6765\u5e26\u4e24\u4e2a\u53c2\u6570\u7684\u51fd\u6570add(x, y)\uff0c\u53d8\u6210\u4e86\u4e00\u4e2a\u5d4c\u5957\u51fd\u6570\uff0c\u5728add_currying\u51fd\u6570\u5185\uff0c\u53c8\u5b9a\u4e49\u4e86\u4e00\u4e2a_add\u51fd\u6570\uff0c\u5e76\u4e14_add\u51fd\u6570\u53c8\u5f15\u7528\u4e86\u5916\u90e8\u51fd\u6570add_currying\u7684\u53d8\u91cfx\uff0c\u8fd9\u5c31\u662f\u4e00\u4e2a\u95ed\u5305\u3002 \u95ed\u5305\uff0c\u4e00\u53e5\u8bdd\u8bf4\u5c31\u662f\u5728\u51fd\u6570\u4e2d\u518d\u5d4c\u5957\u4e00\u4e2a\u51fd\u6570\uff0c\u5e76\u4e14\u5f15\u7528\u5916\u90e8\u51fd\u6570\u7684\u53d8\u91cf\u3002 # \u666e\u901a\u5199\u6cd5 def add(x, y): return x + y print(add(1, 2)) # 3 # \u67ef\u91cc\u5316\u5199\u6cd5 def add_currying(x): def _add(y): return x + y return _add print(add_currying(1)(2)) # 3 \u793a\u4f8b2\uff0c\u901a\u8fc7\u56fa\u5b9a\u5176\u4e2d\u7684\u7b2c\u4e8c\u4e2a\u53c2\u6570\u4e0d\u53d8\u6765\u5b9e\u73b0\u67ef\u91cc\u5316\u3002 def add2(a, b): def add1(a, b, c): return a + b + c return add1(a, 666, b) result6 = add2(12, 13) print(result6) # 691 result6 = add2(12, 555, 13) # TypeError: add2() takes 2 positional arguments but 3 were given \u793a\u4f8b3\uff0c\u901a\u8fc7functools\u63d0\u4f9b\u7684\u504f\u51fd\u6570\u6765\u5b9e\u73b0\u67ef\u91cc\u5316\u3002 from functools import partial def add1(a, b, c): return a + b + c add3 = partial(add1, b=666) result7 = add3(a=12, c=13) print(result7) # 691 \u793a\u4f8b4\uff0c\u901a\u8fc7lambda\u8868\u8fbe\u5f0f\u6765\u5b9e\u73b0\u67ef\u91cc\u5316\u3002 def add1(a, b, c): return a + b + c add4 = lambda x, y: add1(x, 666, y) result8 = add4(12, 13) print(result8) # 691 \u793a\u4f8b5\uff0c\u901a\u8fc7python\u7684\u88c5\u9970\u5668\u6765\u5b9e\u73b0\u67ef\u91cc\u5316 def add1(a, b, c): return a + b + c def currying_add(func): def wrapper(a, c, b=666): return func(a, b, c) return wrapper result9 = currying_add(add1)(12, 13) print(result9) # 691 \u793a\u4f8b6\uff0c\u901a\u8fc7python\u7684\u88c5\u9970\u5668\u7b26\u53f7@\u6765\u5b9e\u73b0\u67ef\u91cc\u5316 def currying_add(func): def wrapper(a, c, b=666): return func(a, b, c) return wrapper @currying_add def add5(a, b, c): return a + b + c result10 = add5(12, 13) print(result10) # 691","title":"6. \u67ef\u91cc\u5316\uff1a\u90e8\u5206\u53c2\u6570\u5e94\u7528"},{"location":"python/Foundation/ch03/#7","text":"","title":"7. \u8fed\u4ee3\u5668\u4e0e\u751f\u6210\u5668"},{"location":"python/Foundation/ch03/#_6","text":"\u8fed\u4ee3\u662fPython\u6700\u5f3a\u5927\u7684\u529f\u80fd\u4e4b\u4e00\uff0c\u662f\u8bbf\u95ee\u96c6\u5408\u5143\u7d20\u7684\u4e00\u79cd\u65b9\u5f0f\u3002\u8fed\u4ee3\u5668\u662f\u4e00\u4e2a\u53ef\u4ee5\u8bb0\u4f4f\u904d\u5386\u7684\u4f4d\u7f6e\u7684\u5bf9\u8c61\u3002 \u8fed\u4ee3\u5668\u5bf9\u8c61\u4ece\u96c6\u5408\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\u5f00\u59cb\u8bbf\u95ee\uff0c\u76f4\u5230\u6240\u6709\u7684\u5143\u7d20\u88ab\u8bbf\u95ee\u5b8c\u7ed3\u675f\u3002\u8fed\u4ee3\u5668\u53ea\u80fd\u5f80\u524d\u4e0d\u4f1a\u540e\u9000\u3002 \u8fed\u4ee3\u5668\u6709\u4e24\u4e2a\u57fa\u672c\u7684\u65b9\u6cd5\uff1aiter() \u548c next()\u3002 \u8fed\u4ee3\u5668\u793a\u4f8b\uff1a list_a = [1, 2, 3, 4] it = iter(list_a) # \u521b\u5efa\u8fed\u4ee3\u5668\u5bf9\u8c61 print(next(it)) # \u8f93\u51fa\u8fed\u4ee3\u5668\u7684\u4e0b\u4e00\u4e2a\u5143\u7d20 # 1 print(next(it)) # \u8f93\u51fa\u8fed\u4ee3\u5668\u7684\u4e0b\u4e00\u4e2a\u5143\u7d20 # 2 \u8fed\u4ee3\u5668\u5bf9\u8c61\u53ef\u4ee5\u4f7f\u7528\u5e38\u89c4for\u8bed\u53e5\u8fdb\u884c\u904d\u5386\u3002 list_a = [1, 2, 3, 4] it = iter(list_a) # \u521b\u5efa\u8fed\u4ee3\u5668\u5bf9\u8c61 for x in it: print(x, end=\" \") print(end=\"\\n\") # 1 2 3 4","title":"\u8fed\u4ee3\u5668"},{"location":"python/Foundation/ch03/#_7","text":"\u5728 Python \u4e2d\uff0c\u4f7f\u7528\u4e86 yield \u7684\u51fd\u6570\u88ab\u79f0\u4e3a\u751f\u6210\u5668\uff08generator\uff09\u3002\u8ddf\u666e\u901a\u51fd\u6570\u4e0d\u540c\u7684\u662f\uff0c\u751f\u6210\u5668\u662f\u4e00\u4e2a\u8fd4\u56de\u8fed\u4ee3\u5668\u7684\u51fd\u6570\uff0c\u53ea\u80fd\u7528\u4e8e\u8fed\u4ee3\u64cd\u4f5c\uff0c\u751f\u6210\u5668\u5c31\u662f\u4e00\u4e2a\u8fed\u4ee3\u5668\u3002 \u5728\u8c03\u7528\u751f\u6210\u5668\u8fd0\u884c\u7684\u8fc7\u7a0b\u4e2d\uff0c\u6bcf\u6b21\u9047\u5230 yield \u65f6\u51fd\u6570\u4f1a\u6682\u505c\u5e76\u4fdd\u5b58\u5f53\u524d\u6240\u6709\u7684\u8fd0\u884c\u4fe1\u606f\uff0c\u8fd4\u56de yield \u7684\u503c, \u5e76\u5728\u4e0b\u4e00\u6b21\u6267\u884c next() \u65b9\u6cd5\u65f6\u4ece\u5f53\u524d\u4f4d\u7f6e\u7ee7\u7eed\u8fd0\u884c\u3002 \u8c03\u7528\u4e00\u4e2a\u751f\u6210\u5668\u51fd\u6570\uff0c\u8fd4\u56de\u7684\u662f\u4e00\u4e2a\u8fed\u4ee3\u5668\u5bf9\u8c61\u3002 \u793a\u4f8b, \u6590\u6ce2\u90a3\u5951\u6570\u5217\uff1a def fibonacci(n): a, b, counter = 0, 1, 0 while True: if (counter > n): return yield a a, b = b, a + b counter += 1 f = fibonacci(10) # f \u662f\u4e00\u4e2a\u8fed\u4ee3\u5668\uff0c\u7531\u751f\u6210\u5668\u8fd4\u56de\u751f\u6210 print(f) # <generator object fibonacci at 0x7fbe8a7f7580> \u5b9e\u9645\u8c03\u7528\u751f\u6210\u5668\u65f6\uff0c\u4ee3\u7801\u5e76\u4e0d\u4f1a\u7acb\u5373\u6267\u884c for x in f: # \u8bf7\u6c42\u751f\u6210\u5668\u4e2d\u7684\u5143\u7d20\u65f6\uff0c\u5b83\u624d\u4f1a\u6267\u884c\u5b83\u7684\u4ee3\u7801 print(x, end=\" \") print(end=\"\\n\") # 0 1 1 2 3 5 8 13 21 34 55 \u751f\u6210\u5668\u8868\u8fbe\u5f0f\uff1a \u7528\u751f\u6210\u5668\u8868\u8fbe\u5f0f\u6765\u521b\u5efa\u751f\u6210\u5668\u66f4\u4e3a\u7b80\u5355\u3002\u751f\u6210\u5668\u8868\u8fbe\u5f0f\u4e0e\u5217\u8868\u3001\u5b57\u5178\u3001\u96c6\u5408\u7684\u63a8\u5bfc\u5f0f\u5f88\u7c7b\u4f3c\uff0c\u521b\u5efa\u4e00\u4e2a\u751f\u6210\u5668\u8868\u8fbe\u5f0f\uff0c\u53ea\u9700\u8981\u5c06\u5217\u8868\u63a8\u5bfc\u5f0f\u7684\u4e2d\u62ec\u53f7\u66ff\u6362\u4e3a\u5c0f\u62ec\u53f7\u5373\u53ef\u3002 gen1 = (x ** 2 for x in range(100)) print(gen1) # <generator object <genexpr> at 0x7fd3f30c9580> \u4e0a\u9762\u7684\u4ee3\u7801\u4e0e\u4e0b\u9762\u7684\u751f\u6210\u5668\u662f\u7b49\u4ef7\u7684 def _make_gen(): for x in range(100): yield x ** 2 gen2 = _make_gen() print(gen2) # <generator object _make_gen at 0x7fceb69ed580> \u751f\u6210\u5668\u8868\u8fbe\u5f0f\u53ef\u4ee5\u4f5c\u4e3a\u51fd\u6570\u53c2\u6570\u7528\u4e8e\u66ff\u4ee3\u5217\u8868\u63a8\u5bfc\u5f0f\u3002\u5bf9\u6bd4\u4e0b\u97622\u4e2a\u4f8b\u5b50\u3002 # \u793a\u4f8b1 result11 = sum(x ** 2 for x in range(100)) print(result11) # 328350 gen1 = (x ** 2 for x in range(100)) result11 = sum(gen1) print(result11) # 328350 # \u793a\u4f8b2 result12 = dict((i, i ** 2) for i in range(5)) print(result12) # {0: 0, 1: 1, 2: 4, 3: 9, 4: 16} gen2 = ((i, i ** 2) for i in range(5)) result12 = dict(gen2) print(result12) # {0: 0, 1: 1, 2: 4, 3: 9, 4: 16}","title":"\u751f\u6210\u5668"},{"location":"python/Foundation/ch03/#itertools","text":"\u6807\u51c6\u5e93\u4e2d\u7684itertools\u6a21\u5757\u662f\u9002\u7528\u4e8e\u5927\u591a\u6570\u6570\u636e\u7b97\u6cd5\u7684\u751f\u6210\u5668\u96c6\u5408\u3002 import itertools first_letter = lambda x: x[0] names = ['Alan', 'Adam', 'Wes', 'Will', 'Albert', 'Steven'] for letter, names in itertools.groupby(names, first_letter): print(letter) print(first_letter) print(letter, list(names)) # names is generator # A # <function <lambda> at 0x7fa598a7a0d0> # A ['Alan', 'Adam'] # W # <function <lambda> at 0x7fa598a7a0d0> # W ['Wes', 'Will'] # A # <function <lambda> at 0x7fa598a7a0d0> # A ['Albert'] # S # <function <lambda> at 0x7fa598a7a0d0> # S ['Steven']","title":"\u751f\u6210\u5668\uff1aitertools\u6a21\u5757"},{"location":"python/Foundation/ch03/#8","text":"Python\u7528\u5f02\u5e38\u5bf9\u8c61(exception object)\u6765\u8868\u793a\u5f02\u5e38\u60c5\u51b5\u3002\u9047\u5230\u9519\u8bef\u540e\uff0c\u4f1a\u5f15\u53d1\u5f02\u5e38\u3002\u5982\u679c\u5f02\u5e38\u5bf9\u8c61\u5e76\u672a\u88ab\u5904\u7406\u6216\u6355\u6349\uff0c\u7a0b\u5e8f\u5c31\u4f1a\u7528\u6240\u8c13\u7684\u56de\u6eaf(traceback\uff0c \u4e00\u79cd\u9519\u8bef\u4fe1\u606f)\u7ec8\u6b62\u6267\u884c\u3002 \u5f02\u5e38\u548c\u8bed\u6cd5\u9519\u8bef\u662f\u6709\u533a\u522b\u7684\u3002 * \u9519\u8bef\uff1a\u662f\u6307\u4ee3\u7801\u4e0d\u7b26\u5408\u89e3\u91ca\u5668\u6216\u8005\u7f16\u8bd1\u5668\u8bed\u6cd5\u3002 * \u5f02\u5e38\uff1a\u662f\u6307\u4e0d\u5b8c\u6574\u3001\u4e0d\u5408\u6cd5\u8f93\u5165\uff0c\u6216\u8005\u8ba1\u7b97\u51fa\u73b0\u9519\u8bef\u3002 python\u91cc\u7528try...except...\u8bed\u53e5\u6765\u5904\u7406\u5f02\u5e38\u60c5\u51b5\u3002 def attempt_float(x): try: return float(x) except (TypeError, ValueError): return \"Type error, not numbers\" r1 = attempt_float('1.2256') print(r1) # 1.2256 r1 = attempt_float('friends') print(r1) # Type error, not numbers","title":"8. \u9519\u8bef\u548c\u5f02\u5e38\u5904\u7406"},{"location":"python/Foundation/ch03/#9","text":"f=open(path, 'w')\uff0c\u4e00\u4e2a\u65b0\u7684\u6587\u4ef6\u4f1a\u5728path\u6307\u5b9a\u7684\u8def\u5f84\u88ab\u521b\u5efa\uff0c\u5e76\u5728\u540c\u4e00\u8def\u5f84\u4e0b\u8986\u76d6\u540c\u540d\u6587\u4ef6\u3002\uff08\u8bf7\u5c0f\u5fc3\uff01\uff09 f=open(path, 'x')\uff0c\u4e00\u4e2a\u65b0\u7684\u6587\u4ef6\u4f1a\u5728path\u6307\u5b9a\u7684\u8def\u5f84\u88ab\u521b\u5efa\uff0c\u5982\u679c\u7ed9\u5b9a\u8def\u5f84\u4e0b\u5df2\u7ecf\u5b58\u5728\u540c\u540d\u6587\u4ef6\u5c31\u4f1a\u521b\u5efa\u5931\u8d25\u3002 import os # \u67e5\u770b\u5f53\u524d\u8def\u5f84 os.getcwd() # '/opt/myMemo' # \u66f4\u6539\u6587\u4ef6\u8bfb\u53d6\u9ed8\u8ba4\u8def\u5f84 os.chdir('/opt/myMemo/python/datasets/examples') # \u6307\u5b9a\u6587\u4ef6\u540d path = 'file01.txt' # \u6253\u5f00\u6587\u4ef6 f = open(path) # \u8bfb\u53d6\u6587\u4ef6\u6bcf\u4e00\u884c\uff0c\u6587\u4ef6\u6bcf\u4e00\u884c\u4f5c\u4e3a\u5217\u8868\u4e00\u4e2a\u5143\u7d20 lines = [x.rstrip() for x in open(path)] # \u8f93\u51fa\u5217\u8868 print(lines) # \u5173\u95ed\u6587\u4ef6\u4f1a\u5c06\u8d44\u6e90\u91ca\u653e\u56de\u64cd\u4f5c\u7cfb\u7edf f.close() \u53e6\u4e00\u79cd\u66f4\u7b80\u5355\u7684\u5173\u95ed\u6587\u4ef6\u7684\u65b9\u5f0f import os # \u67e5\u770b\u5f53\u524d\u8def\u5f84 os.getcwd() # '/opt/myMemo' # \u66f4\u6539\u6587\u4ef6\u8bfb\u53d6\u9ed8\u8ba4\u8def\u5f84 os.chdir('/opt/myMemo/python/datasets/examples') # \u6307\u5b9a\u6587\u4ef6\u540d path = 'file01.txt' # \u6253\u5f00\u6587\u4ef6 f = open(path) # \u4f7f\u7528with\u8bed\u53e5\u8bfb\u53d6\u6587\u4ef6\uff0c\u6587\u4ef6\u4f1a\u5728with\u4ee3\u7801\u5757\u7ed3\u675f\u540e\u81ea\u52a8\u5173\u95ed\u3002 with open(path) as f: lines = [x.rstrip() for x in open(path)] # \u8f93\u51fa\uff1a\u6587\u4ef6\u6bcf\u4e00\u884c\u4f5c\u4e3a\u5217\u8868\u4e00\u4e2a\u5143\u7d20 print(lines) \u5728\u6253\u5f00\u6587\u4ef6\u65f6\u4f7f\u7528seek\u8bfb\u53d6\u6587\u4ef6\u5185\u5bb9\u8981\u5f53\u5fc3\u3002\u5982\u679c\u6587\u4ef6\u7684\u53e5\u67c4\u4f4d\u7f6e\u6070\u597d\u5728\u4e00\u4e2aUnicode\u7b26\u53f7\u7684\u5b57\u8282\u4e2d\u95f4\u65f6\uff0c\u540e\u7eed\u7684\u8bfb\u53d6\u4f1a\u5bfc\u81f4\u9519\u8bef\u3002 import os # \u67e5\u770b\u5f53\u524d\u8def\u5f84 os.getcwd() # '/opt/myMemo' # \u66f4\u6539\u6587\u4ef6\u8bfb\u53d6\u9ed8\u8ba4\u8def\u5f84 os.chdir('/opt/myMemo/python/datasets/examples') # \u6307\u5b9a\u6587\u4ef6\u540d path = 'file01.txt' # \u6253\u5f00\u6587\u4ef6 f = open(path) # \u8bfb\u53d6\u6587\u4ef6\u3002 print(f.read(5)) # \u8f93\u51fa\u524d5\u4e2a\u5b57\u7b26\u3002 read\u65b9\u6cd5\u901a\u8fc7\u8bfb\u53d6\u7684\u5b57\u8282\u6570\u6765\u63a8\u8fdb\u6587\u4ef6\u53e5\u67c4\u7684\u4f4d\u7f6e\u3002 # I Thi print(f.tell()) # tell\u65b9\u6cd5\u53ef\u4ee5\u7ed9\u51fa\u53e5\u67c4\u5f53\u524d\u7684\u4f4d\u7f6e # 5 print(f.seek(6)) # seek\u65b9\u6cd5\u53ef\u4ee5\u5c06\u53e5\u67c4\u4f4d\u7f6e\u6539\u53d8\u5230\u6587\u4ef6\u4e2d\u7279\u5b9a\u7684\u5b57\u8282 # 6 print(f.read(1)) # \u4ece\u7b2c7\u4e2a\u5b57\u8282\u5f00\u59cb\uff0c\u8f93\u51fa1\u4e2a\u5b57\u8282 # k # \u5173\u95ed\u6587\u4ef6\u4f1a\u5c06\u8d44\u6e90\u91ca\u653e\u56de\u64cd\u4f5c\u7cfb\u7edf f.close() \u5982\u679c\u4f7f\u7528\u4e8c\u8fdb\u5236\u65b9\u5f0f\u6253\u5f00\u6587\u4ef6\uff0c\u5219\uff1a import os # \u67e5\u770b\u5f53\u524d\u8def\u5f84 os.getcwd() # '/opt/myMemo' # \u66f4\u6539\u6587\u4ef6\u8bfb\u53d6\u9ed8\u8ba4\u8def\u5f84 os.chdir('/opt/myMemo/python/datasets/examples') # \u6307\u5b9a\u6587\u4ef6\u540d path = 'file01.txt' # \u6253\u5f00\u6587\u4ef6 f2 = open(path, 'rb') # \u4e8c\u8fdb\u5236\u6a21\u5f0f # \u8bfb\u53d6\u6587\u4ef6 print(f2.read(5)) # \u7b2c\u4e00\u4e2ab\u4ee3\u8868\u4e8c\u8fdb\u5236\u683c\u5f0f # b'I Thi' print(f2.tell()) # 5 print(f2.seek(6)) # 6 print(f2.read(2)) # \u4ece\u7b2c7\u4e2a\u5b57\u8282\u5f00\u59cb\uff0c\u8f93\u51fa2\u4e2a\u5b57\u8282 # b'k ' # \u5173\u95ed\u6587\u4ef6\u4f1a\u5c06\u8d44\u6e90\u91ca\u653e\u56de\u64cd\u4f5c\u7cfb\u7edf f2.close() \u5c06\u672c\u6587\u5199\u5165\u6587\u4ef6\uff0c\u53ef\u4ee5\u4f7f\u7528\u6587\u4ef6\u5bf9\u8c61\u7684write\u6216wirtelines\u65b9\u6cd5\u3002 import os # \u67e5\u770b\u5f53\u524d\u8def\u5f84 os.getcwd() # '/opt/myMemo' # \u66f4\u6539\u6587\u4ef6\u8bfb\u53d6\u9ed8\u8ba4\u8def\u5f84 os.chdir('/opt/myMemo/python/datasets/examples') # \u6307\u5b9a\u6587\u4ef6\u540d path1 = 'file01.txt' path2 = 'file02.txt' # file02.txt\u662f\u4e00\u4e2a\u7a7a\u6587\u4ef6 with open(path2, 'r+', encoding='utf-8') as f: f.writelines(x for x in open(path1, 'r', encoding='utf-8') if len(x) > 1) # \u628afile01.txt\u7684\u5185\u5bb9\u5199\u5165file02.txt lines = f.readlines() print(lines)","title":"9. \u6587\u4ef6\u4e0e\u64cd\u4f5c\u7cfb\u7edf"},{"location":"python/Foundation/ch04/","text":"Python\u7684\u7c7b(Class) \u7c7b(class)\u628a\u6570\u636e\u4e0e\u529f\u80fd\u7ed1\u5b9a\u5728\u4e00\u8d77\u3002\u521b\u5efa\u65b0\u7c7b\u5c31\u662f\u521b\u5efa\u65b0\u7684\u5bf9\u8c61\u7c7b\u578b\uff08type of object\uff09\uff0c\u4ece\u800c\u521b\u5efa\u8be5\u7c7b\u578b\u7684\u65b0\u5b9e\u4f8b\uff08instances\uff09\u3002 \u7c7b\u5b9e\u4f8b\u5177\u6709\u591a\u79cd\u4fdd\u6301\u81ea\u8eab\u72b6\u6001\u7684\u5c5e\u6027\uff08attributes\uff09\u3002 \u7c7b\u5b9e\u4f8b\u8fd8\u652f\u6301\uff08\u7531\u7c7b\u5b9a\u4e49\u7684\uff09\u4fee\u6539\u81ea\u8eab\u72b6\u6001\u7684\u65b9\u6cd5\uff08methods\uff09\u3002 Python\u7684\u7c7b\u652f\u6301\u6240\u6709\u9762\u5411\u5bf9\u8c61\u7f16\u7a0b\uff08OOP\uff09\u7684\u6807\u51c6\u7279\u6027\uff1a \u7c7b\u7ee7\u627f\uff08class inheritance\uff09\u673a\u5236\u652f\u6301\u591a\u4e2a\u57fa\u7c7b\uff08base classes\uff09\uff1b \u6d3e\u751f\u7c7b\uff08derived class\uff09\u53ef\u4ee5\u8986\u76d6\u57fa\u7c7b\u7684\u4efb\u4f55\u65b9\u6cd5\uff08methods\uff09\uff1b \u7c7b\u7684\u65b9\u6cd5\u53ef\u4ee5\u8c03\u7528\u57fa\u7c7b\u4e2d\u76f8\u540c\u540d\u79f0\u7684\u65b9\u6cd5 \u5bf9\u8c61\u53ef\u4ee5\u5305\u542b\u4efb\u610f\u6570\u91cf\u548c\u7c7b\u578b\u7684\u6570\u636e\u3002 \u7c7b\uff08class\uff09\u548c\u6a21\u5757\uff08module\uff09\u90fd\u62e5\u6709\u52a8\u6001\u7279\u6027\uff08dynamic nature\uff09\uff1a\u5728\u8fd0\u884c\u65f6\u521b\u5efa\uff0c\u521b\u5efa\u540e\u4e5f\u53ef\u4ee5\u4fee\u6539\u3002 \u540d\u79f0Names\u548c\u5bf9\u8c61Objects \u5bf9\u8c61\u4e4b\u95f4\u76f8\u4e92\u72ec\u7acb\uff0c\u591a\u4e2a\u540d\u79f0\uff08names\uff09\uff08\u5728\u591a\u4e2a\u4f5c\u7528\u57df\u5185\uff09\u53ef\u4ee5\u7ed1\u5b9a\u5230\u540c\u4e00\u4e2a\u5bf9\u8c61\u3002 \u5176\u4ed6\u8bed\u8a00\u79f0\u4e4b\u4e3a\u522b\u540d\uff08alias\uff09\u3002 \u522b\u540d\u5728\u67d0\u4e9b\u65b9\u9762\u5c31\u50cf\u6307\u9488\u3002\u4f8b\u5982\uff0c\u4f20\u9012\u5bf9\u8c61\u7684\u4ee3\u4ef7\u5f88\u5c0f\uff0c\u56e0\u4e3a\u5b9e\u73b0\u53ea\u4f20\u9012\u4e00\u4e2a\u6307\u9488\uff1b\u5982\u679c\u51fd\u6570\u4fee\u6539\u4e86\u4f5c\u4e3a\u53c2\u6570\u4f20\u9012\u7684\u5bf9\u8c61\uff0c\u8c03\u7528\u8005\u5c31\u53ef\u4ee5\u770b\u5230\u66f4\u6539\u3002 \u4f5c\u7528\u57dfScopes\u548c\u547d\u540d\u7a7a\u95f4Namespaces \u547d\u540d\u7a7a\u95f4\uff08namespace\uff09 \u662f\u4e00\u4e2a\u4ece\u540d\u5b57\u5230\u5bf9\u8c61\u7684\u6620\u5c04\u3002 \u5f53\u524d\u5927\u90e8\u5206\u547d\u540d\u7a7a\u95f4\u90fd\u7531 Python \u5b57\u5178\u5b9e\u73b0\u3002 \u4e0b\u9762\u662f\u51e0\u4e2a\u547d\u540d\u7a7a\u95f4\u7684\u4f8b\u5b50\uff1a \u5b58\u653e\u5185\u7f6e\u51fd\u6570\u7684\u96c6\u5408\uff08\u5305\u542b abs() \u8fd9\u6837\u7684\u51fd\u6570\uff0c\u548c\u5185\u5efa\u7684\u5f02\u5e38\u7b49\uff09\uff1b \u6a21\u5757\u4e2d\u7684\u5168\u5c40\u540d\u79f0\uff1b \u51fd\u6570\u8c03\u7528\u4e2d\u7684\u5c40\u90e8\u540d\u79f0\uff1b \u4ece\u67d0\u79cd\u610f\u4e49\u4e0a\u8bf4\uff0c\u5bf9\u8c61\u7684\u5c5e\u6027\u96c6\u5408\uff08the set of attributes of an object\uff09\u4e5f\u662f\u4e00\u79cd\u547d\u540d\u7a7a\u95f4\u7684\u5f62\u5f0f\u3002 \u5173\u4e8e\u547d\u540d\u7a7a\u95f4\u7684\u91cd\u8981\u4e00\u70b9\u662f\uff0c\u4e0d\u540c\u547d\u540d\u7a7a\u95f4\u4e2d\u7684\u540d\u79f0\u4e4b\u95f4\u7edd\u5bf9\u6ca1\u6709\u5173\u7cfb\uff1b \u4f8b\u5982\uff0c\u5728\u4e24\u4e2a\u4e0d\u540c\u7684\u6a21\u5757\u4e2d\u90fd\u53ef\u4ee5\u5b9a\u4e49\u4e00\u4e2a maximize \u51fd\u6570\u800c\u4e0d\u4f1a\u4ea7\u751f\u6df7\u6dc6\uff0c\u4f46\u5728\u8c03\u7528 maximize \u51fd\u6570\u65f6\u5fc5\u987b\u5fc5\u987b\u5728\u5176\u524d\u9762\u52a0\u4e0a\u6a21\u5757\u540d\u79f0\u3002 \u4efb\u4f55\u8ddf\u5728\u4e00\u4e2a\u70b9\u53f7\u4e4b\u540e\u7684\u540d\u79f0\u90fd\u79f0\u4e3a \u5c5e\u6027\uff08attribute\uff09 \u3002\u4f8b\u5982\uff0c\u5728\u8868\u8fbe\u5f0f z.real \u4e2d\uff0c real \u662f\u5bf9\u8c61 z \u7684\u4e00\u4e2a\u5c5e\u6027\u3002 \u6309\u4e25\u683c\u7684\u8bf4\u6cd5\uff0c \u5bf9\u6a21\u5757\uff08module\uff09\u4e2d\u7684\u540d\u79f0\u7684\u5f15\u7528\uff08reference\uff09\u90fd\u5c5e\u4e8e\u5c5e\u6027\u5f15\u7528\uff08attribute reference\uff09 \uff1a \u5728\u8868\u8fbe\u5f0f modname.funcname \u4e2d\uff0c modname \u662f\u4e00\u4e2a\u6a21\u5757\u5bf9\u8c61\uff08module object\uff09\u800c funcname \u662f\u5b83\u7684\u4e00\u4e2a\u5c5e\u6027\u3002 \u5728\u6b64\u60c5\u51b5\u4e0b\u5728\u6a21\u5757\u7684\u5c5e\u6027\uff08module\u2019s attribute\uff09\u548c\u6a21\u5757\u4e2d\u5b9a\u4e49\u7684\u5168\u5c40\u540d\u79f0\u4e4b\u95f4\u6b63\u597d\u5b58\u5728\u4e00\u4e2a\u76f4\u89c2\u7684\u6620\u5c04\uff1a\u5b83\u4eec\u5171\u4eab\u76f8\u540c\u7684\u547d\u540d\u7a7a\u95f4\u3002 \u4f46\u5b58\u5728\u4e00\u4e2a\u4f8b\u5916\u3002 \u6a21\u5757\u5bf9\u8c61\u6709\u4e00\u4e2a\u53ea\u8bfb\u5c5e\u6027 __dict__ \uff0c\u5b83\u8fd4\u56de\u7528\u4e8e\u5b9e\u73b0\u6a21\u5757\u547d\u540d\u7a7a\u95f4\u7684\u5b57\u5178\uff1b __dict__ \u662f\u5c5e\u6027\u4f46\u4e0d\u662f\u5168\u5c40\u540d\u79f0\u3002 \u4f7f\u7528\u8fd9\u4e2a\u5c06\u8fdd\u53cd\u547d\u540d\u7a7a\u95f4\u5b9e\u73b0\u7684\u62bd\u8c61\uff0c\u5e94\u5f53\u4ec5\u88ab\u7528\u4e8e\u4e8b\u540e\u8c03\u8bd5\u5668\u4e4b\u7c7b\u7684\u573a\u5408\u3002 \u5c5e\u6027\uff08attribute\uff09 \u53ef\u4ee5\u662f\u53ea\u8bfb\u6216\u8005\u53ef\u5199\u7684\uff0c\u6240\u4ee5\u53ef\u4ee5\u5bf9\u5c5e\u6027\u8fdb\u884c\u8d4b\u503c\uff0c\u4f8b\u5982 modname.the_answer = 42 \u3002 \u5220\u9664\u5c5e\u6027\u53ef\u4ee5\u7528del\u8bed\u53e5\uff0c\u4f8b\u5982\uff0c del modname.the_answer \u5c06\u4f1a\u4ece\u540d\u4e3a modname \u7684\u5bf9\u8c61\u4e2d\u79fb\u9664 the_answer \u5c5e\u6027\u3002 \u547d\u540d\u7a7a\u95f4\u5728\u4e0d\u540c\u65f6\u523b\u88ab\u521b\u5efa\uff0c\u62e5\u6709\u4e0d\u540c\u7684\u751f\u5b58\u671f\uff08lifetimes\uff09\u3002\u5305\u542b\u5185\u7f6e\u540d\u79f0\uff08built-in names\uff09\u7684\u547d\u540d\u7a7a\u95f4\u662f\u5728Python\u89e3\u91ca\u5668\u542f\u52a8\u65f6\u521b\u5efa\u7684\uff0c\u6c38\u8fdc\u4e0d\u4f1a\u88ab\u5220\u9664\u3002 \u6a21\u5757\u7684\u5168\u5c40\u547d\u540d\u7a7a\u95f4\uff08global namespace\uff09\u5728\u6a21\u5757\u5b9a\u4e49\u88ab\u8bfb\u5165\u65f6\u521b\u5efa\uff1b\u901a\u5e38\uff0c\u6a21\u5757\u547d\u540d\u7a7a\u95f4\u4e5f\u4f1a\u6301\u7eed\u5230\u89e3\u91ca\u5668\u9000\u51fa\u3002 \u88ab\u89e3\u91ca\u5668\u7684\u9876\u5c42\u8c03\u7528\uff08top-level invocation\uff09\u6267\u884c\u7684\u8bed\u53e5\uff0c\u4ece\u4e00\u4e2a\u811a\u672c\u6587\u4ef6\u8bfb\u53d6\u6216\u4ea4\u4e92\u5f0f\u5730\u8bfb\u53d6\uff0c\u88ab\u8ba4\u4e3a\u662f __main__ \u6a21\u5757\u8c03\u7528\u7684\u4e00\u90e8\u5206\uff0c\u56e0\u6b64\u5b83\u4eec\u62e5\u6709\u81ea\u5df1\u7684\u5168\u5c40\u547d\u540d\u7a7a\u95f4\u3002 \u5185\u7f6e\u540d\u79f0\uff08built-in names\uff09\u5b9e\u9645\u4e0a\u4e5f\u5b58\u5728\u4e8e\u4e00\u4e2a\u6a21\u5757\u4e2d\uff0c\u8fd9\u4e2a\u6a21\u5757\u88ab\u79f0\u4f5c builtins \u3002 \u4e00\u4e2a\u51fd\u6570\u7684\u672c\u5730\u547d\u540d\u7a7a\u95f4\uff08local namespace\uff09\u5728\u8fd9\u4e2a\u51fd\u6570\u88ab\u8c03\u7528\u65f6\u521b\u5efa\uff0c\u5e76\u5728\u51fd\u6570\u8fd4\u56de\u6216\u629b\u51fa\u4e00\u4e2a\u65e0\u6cd5\u5728\u8be5\u51fd\u6570\u5185\u90e8\u5904\u7406\u7684\u9519\u8bef\u65f6\u88ab\u5220\u9664\u3002 \u6bcf\u6b21\u9012\u5f52\u8c03\u7528\uff08recursive invocations\uff09\u90fd\u4f1a\u6709\u5b83\u81ea\u5df1\u7684\u672c\u5730\u547d\u540d\u7a7a\u95f4\u3002 \u4e00\u4e2a \u4f5c\u7528\u57df\uff08scope\uff09 \u662f\u4e00\u4e2a\u547d\u540d\u7a7a\u95f4\u53ef\u76f4\u63a5\u8bbf\u95ee\uff08directly accessible\uff09\u7684Python\u7a0b\u5e8f\u7684\u4ee3\u7801\u533a\u57df\u3002 \u8fd9\u91cc\u7684 \u201c\u53ef\u76f4\u63a5\u8bbf\u95ee\u201d \u610f\u5473\u7740\u4e0d\u52a0\u4efb\u4f55\u9650\u5b9a\u7684\u540d\u79f0\u5f15\u7528\u4f1a\u5728\u547d\u540d\u7a7a\u95f4\u4e2d\u8fdb\u884c\u67e5\u627e\u3002 \u867d\u7136\u4f5c\u7528\u57df\u662f\u9759\u6001\u5730\u786e\u5b9a\u7684\uff0c\u4f46\u5b83\u4eec\u4f1a\u88ab\u52a8\u6001\u5730\u4f7f\u7528\u3002 \u5728\u4ee3\u7801\u6267\u884c\u671f\u95f4\u7684\u4efb\u4f55\u65f6\u523b\uff0c\u4f1a\u67093\u62164\u4e2a\u7684\u5d4c\u5957\u4f5c\u7528\u57df\u4f9b\u547d\u540d\u7a7a\u95f4\u76f4\u63a5\u8bbf\u95ee: \u6700\u5148\u641c\u7d22\u7684\u6700\u5185\u90e8\u4f5c\u7528\u57df\u5305\u542b\u5c40\u90e8\u540d\u79f0 \u4ece\u6700\u8fd1\u7684\u5c01\u95ed\u4f5c\u7528\u57df\u5f00\u59cb\u641c\u7d22\u7684\u4efb\u4f55\u5c01\u95ed\u51fd\u6570\u7684\u4f5c\u7528\u57df\u5305\u542b\u975e\u5c40\u90e8\u540d\u79f0\uff0c\u4e5f\u5305\u62ec\u975e\u5168\u5c40\u540d\u79f0 \u5012\u6570\u7b2c\u4e8c\u4e2a\u4f5c\u7528\u57df\u5305\u542b\u5f53\u524d\u6a21\u5757\u7684\u5168\u5c40\u540d\u79f0 \u6700\u5916\u9762\u7684\u4f5c\u7528\u57df\uff08\u6700\u540e\u641c\u7d22\uff09\u662f\u5305\u542b\u5185\u7f6e\u540d\u79f0\u7684\u547d\u540d\u7a7a\u95f4 \u5982\u679c\u4e00\u4e2a\u540d\u79f0\u88ab\u58f0\u660e\u4e3a\u5168\u5c40\u53d8\u91cf\uff0c\u5219\u6240\u6709\u5f15\u7528\u548c\u8d4b\u503c\u5c06\u76f4\u63a5\u6307\u5411\u8be5\u6a21\u5757\u5168\u5c40\u540d\u79f0\u6240\u5728\u7684\u4e2d\u95f4\u4f5c\u7528\u57df\u3002 \u5982\u679c\u8981\u91cd\u65b0\u7ed1\u5b9a\u5728\u6700\u5185\u5c42\u4f5c\u7528\u57df\u4ee5\u5916\u7684\u53d8\u91cf\uff0c\u53ef\u4ee5\u4f7f\u7528 nonlocal \u8bed\u53e5\u58f0\u660e\u4e3a\u975e\u672c\u5730\u53d8\u91cf\u3002 \u5982\u679c\u6ca1\u6709\u88ab\u58f0\u660e\u4e3a\u975e\u672c\u5730\u53d8\u91cf\uff0c\u8fd9\u4e9b\u53d8\u91cf\u5c06\u662f\u53ea\u8bfb\u7684\u3002\u7ed9\u8fd9\u6837\u7684\u53d8\u91cf\u8d4b\u65b0\u503c\u53ea\u4f1a\u5728\u6700\u5185\u5c42\u4f5c\u7528\u57df\u4e2d\u521b\u5efa\u4e00\u4e2a \u65b0\u7684 \u5c40\u90e8\u53d8\u91cf\uff0c\u800c\u540c\u540d\u7684\u5916\u90e8\u5168\u5c40\u53d8\u91cf\u5c06\u4fdd\u6301\u4e0d\u53d8\u3002 \u901a\u5e38\uff0c\u5f53\u524d\u5c40\u90e8\u4f5c\u7528\u57df\uff08local scope\uff09\u5c06\u5f15\u7528\u5f53\u524d\u51fd\u6570\u4f5c\u7528\u57df\u7684\u540d\u79f0\uff08local name\uff09\u3002 \u5728\u51fd\u6570\u4f5c\u7528\u57df\u4ee5\u5916\uff0c\u5f53\u524d\u5c40\u90e8\u4f5c\u7528\u57df\u5c06\u5f15\u7528\u4e0e\u5168\u5c40\u4f5c\u7528\u57df\u76f8\u4e00\u81f4\u7684\u547d\u540d\u7a7a\u95f4\uff1a\u6a21\u5757\u7684\u547d\u540d\u7a7a\u95f4\uff08the module\u2019s namespace\uff09\u3002 \u5b9a\u4e49\u4e00\u4e2a\u7c7b\uff0c\u662f\u5728\u672c\u5730\u5c40\u90e8\u547d\u540d\u7a7a\u95f4\u5185\u5efa\u4e00\u4e2a\u65b0\u7684\u547d\u540d\u7a7a\u95f4\u3002 \u5728\u4e00\u4e2a\u6a21\u5757\uff08module \uff09\u5185\u5b9a\u4e49\u7684\u51fd\u6570\u7684\u4f5c\u7528\u57df\u5c31\u662f\u8be5\u6a21\u5757\u7684\u547d\u540d\u7a7a\u95f4\uff0c\u65e0\u8bba\u8be5\u51fd\u6570\u4ece\u4ec0\u4e48\u5730\u65b9\u6216\u4ee5\u4ec0\u4e48\u522b\u540d\u88ab\u8c03\u7528\u3002 \u53e6\u4e00\u65b9\u9762\uff0c\u5b9e\u9645\u7684\u540d\u79f0\u641c\u7d22\u662f\u5728\u8fd0\u884c\u65f6\u52a8\u6001\u5b8c\u6210\u7684\u3002 \u4f46\u662f\uff0cPython\u6b63\u5728\u671d\u7740\u201c\u7f16\u8bd1\u65f6\u9759\u6001\u540d\u79f0\u89e3\u6790\u201d\u7684\u65b9\u5411\u53d1\u5c55\uff0c\u56e0\u6b64\u4e0d\u8981\u8fc7\u4e8e\u4f9d\u8d56\u52a8\u6001\u540d\u79f0\u89e3\u6790\uff01\u4e8b\u5b9e\u4e0a\uff0c\u5c40\u90e8\u53d8\u91cf\u5df2\u7ecf\u662f\u88ab\u9759\u6001\u786e\u5b9a\u4e86\u3002 \u5982\u679c\u4e0d\u5b58\u5728\u751f\u6548\u7684 global \u6216 nonlocal \u8bed\u53e5\uff0c\u5219\u5bf9\u540d\u79f0\u7684\u8d4b\u503c\u603b\u662f\u4f1a\u8fdb\u5165\u6700\u5185\u5c42\u4f5c\u7528\u57df\u3002\u8d4b\u503c\u4e0d\u4f1a\u590d\u5236\u6570\u636e\uff0c\u662f\u5c06\u540d\u79f0\u7ed1\u5b9a\u5230\u5bf9\u8c61\u3002 \u5220\u9664\u4e5f\u662f\u5982\u6b64\uff1a\u8bed\u53e5 del x \u4f1a\u4ece\u5c40\u90e8\u4f5c\u7528\u57df\u6240\u5f15\u7528\u7684\u547d\u540d\u7a7a\u95f4\u4e2d\u79fb\u9664\u5bf9 x \u7684\u7ed1\u5b9a\u3002\u4e8b\u5b9e\u4e0a\uff0c\u6240\u6709\u5f15\u5165\u65b0\u540d\u79f0\u7684\u64cd\u4f5c\u90fd\u662f\u4f7f\u7528\u5c40\u90e8\u4f5c\u7528\u57df\u3002\u7279\u522b\u5730\uff0c import \u8bed\u53e5\u548c\u51fd\u6570\u5b9a\u4e49\u4f1a\u5728\u5c40\u90e8\u4f5c\u7528\u57df\u4e2d\u7ed1\u5b9a\u6a21\u5757\u6216\u51fd\u6570\u540d\u79f0\u3002 global \u8bed\u53e5\u53ef\u88ab\u7528\u6765\u8868\u660e\u7279\u5b9a\u53d8\u91cf\u5b58\u5728\u4e8e\u5168\u5c40\u4f5c\u7528\u57df\uff0c\u5e76\u4e14\u5e94\u5f53\u5728\u5168\u5c40\u4f5c\u7528\u57df\u4e2d\u88ab \u91cd\u65b0 \u7ed1\u5b9a\uff1b nonlocal \u8bed\u53e5\u8868\u660e\u7279\u5b9a\u53d8\u91cf\u751f\u5b58\u4e8e\u5916\u5c42\u4f5c\u7528\u57df\u4e2d\uff0c\u5e76\u4e14\u5e94\u5f53\u5728\u5176\u6240\u5904\u7684\u5916\u5c42\u4f5c\u7528\u57df\u4e2d\u88ab \u91cd\u65b0 \u7ed1\u5b9a\u3002 \u770b\u4e0b\u9762\u7684\u4f8b\u5b50\uff1a \u5c40\u90e8\u8d4b\u503c\uff08local assignment\uff0c\u8fd9\u662f\u9ed8\u8ba4\u72b6\u6001\uff09\u4e0d\u4f1a\u6539\u53d8 scope_test \u5bf9 spam \u7684\u7ed1\u5b9a\u3002 nonlocal \u8d4b\u503c\u4f1a\u6539\u53d8 scope_test \u5bf9 spam \u7684\u7ed1\u5b9a\u3002 global \u8d4b\u503c\u4f1a\u6539\u53d8\u6a21\u5757\u5c42\u7ea7\u7684\u7ed1\u5b9a\uff0c\u5373\uff0c global spam \u91cd\u65b0\u7ed1\u5b9a\u4e86spam\u7684\u5168\u5c40\u5b9a\u4e49\uff0c\u4ece spam = \"spam out of func\" \u53d8\u6210\u4e86 spam = \"global spam\" \u3002\u5982\u679c\u6ce8\u91ca\u6389def do_global()\u8fd9\u4e00\u6bb5\u4ee3\u7801\uff0c\u5219 spam = \"spam out of func\" \u8d77\u4f5c\u7528\u3002 spam = \"spam out of func\" def scope_test(): def do_local(): spam = \"local spam\" def do_nonlocal(): nonlocal spam spam = \"nonlocal spam\" def do_global(): global spam spam = \"global spam\" spam = \"test spam\" do_local() print(\"After local assignment:\", spam) do_nonlocal() print(\"After nonlocal assignment:\", spam) do_global() print(\"After global assignment:\", spam) scope_test() print(\"In global scope:\", spam) # \u8fd0\u884c\u7ed3\u679c # scope_test() After local assignment: test spam After nonlocal assignment: nonlocal spam After global assignment: nonlocal spam # print(\"In global scope:\", spam) In global scope: global spam \u7c7bClass \u7c7b\u5b9a\u4e49 Class Definition \u7c7b\u5b9a\u4e49\u4e0e\u51fd\u6570\u5b9a\u4e49 (def \u8bed\u53e5) \u4e00\u6837\u5fc5\u987b\u88ab\u6267\u884c\u624d\u4f1a\u8d77\u4f5c\u7528\u3002 class ClassName: <statement-1> ... <statement-N> \u5728\u5b9e\u8df5\u4e2d\uff0c\u7c7b\u5b9a\u4e49\u5185\u7684\u8bed\u53e5\u901a\u5e38\u90fd\u662f\u51fd\u6570\u5b9a\u4e49\uff0c\u4f46\u4e5f\u5141\u8bb8\u6709\u5176\u4ed6\u8bed\u53e5\u3002\u5728\u7c7b\u5185\u90e8\u7684\u51fd\u6570\u5b9a\u4e49\u901a\u5e38\u5177\u6709\u4e00\u79cd\u7279\u6709\u5f62\u5f0f\u7684\u53c2\u6570\u5217\u8868\uff0c\u8fd9\u662f\u7ea6\u5b9a\u7684\u65b9\u6cd5\u89c4\u8303\uff08conventions for methods\uff09\u3002 \u7f16\u8bd1\u8fc7\u7a0b\u4e2d\uff0c\u8fdb\u5165\u4e00\u4e2a\u7c7b\u7684\u5185\u90e8\uff0c\u5c06\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u547d\u540d\u7a7a\u95f4\uff0c\u4e00\u4e2a\u5c40\u90e8\u4f5c\u7528\u57df\u3002\u56e0\u6b64\uff0c\u6240\u6709\u5bf9\u7c7b\u5185\u90e8\u5c40\u90e8\u53d8\u91cf\u7684\u8d4b\u503c\u90fd\u662f\u5728\u8fd9\u4e2a\u65b0\u7684\u547d\u540d\u7a7a\u95f4\u4e4b\u5185\uff0c\u5305\u62ec\u65b0\u5b9a\u4e49\u7684\u51fd\u6570\u540d\u79f0\u3002 \u5f53\u6b63\u5e38\u79bb\u5f00\u4e00\u4e2a\u7c7b\u65f6\uff0c\u7f16\u8bd1\u8fc7\u7a0b\u5c06\u521b\u5efa\u4e00\u4e2a\u7c7b\u5bf9\u8c61\uff08class object\uff09\uff0c\u5c01\u88c5\u4e86\u7c7b\u5b9a\u4e49\u6240\u521b\u5efa\u7684\u547d\u540d\u7a7a\u95f4\u91cc\u7684\u5185\u5bb9\u3002 \u6700\u521d\u7684\uff08\u5728\u8fdb\u5165\u7c7b\u5b9a\u4e49\u4e4b\u524d\u8d77\u4f5c\u7528\u7684\uff09\u5c40\u90e8\u4f5c\u7528\u57df\u5c06\u91cd\u65b0\u751f\u6548\uff0c\u7c7b\u5bf9\u8c61\uff08class object\uff09\u5c06\u5728\u8fd9\u91cc\u88ab\u7ed1\u5b9a\u5230\u7c7b\u5b9a\u4e49\u5934\u90e8\u6240\u58f0\u660e\u7684\u7c7b\u540d\u79f0 (\u5728\u4e0a\u9762\u7684\u793a\u4f8b\u4e2d\u662f ClassName )\u3002 \u7c7b\u5bf9\u8c61 Class Objects \u7c7b\u5bf9\u8c61\u652f\u6301\u4e24\u79cd\u64cd\u4f5c\uff1a\u5c5e\u6027\u5f15\u7528\uff08attribute references\uff09\u548c\u5b9e\u4f8b\u5316\uff08instantiation\uff09\u3002 \u5c5e\u6027\u5f15\u7528\uff08attribute references\uff09 \u4f7f\u7528Python\u4e2d\u5c5e\u6027\u5f15\u7528\u7684\u6807\u51c6\u8bed\u6cd5: obj.name \u3002 \u5b58\u5728\u4e8e\u7c7b\u547d\u540d\u7a7a\u95f4\u4e2d\u7684\u6240\u6709\u540d\u79f0\uff0c\u7c7b\u5bf9\u8c61\u88ab\u521b\u5efa\u65f6\u540c\u65f6\u88ab\u521b\u5efa\u4e86\uff0c\u8fd9\u4e9b\u5c31\u662f\u6709\u6548\u7684\u5c5e\u6027\u540d\u79f0\u3002\u56e0\u6b64\uff0c\u5982\u679c\u7c7b\u5b9a\u4e49\u662f\u5982\u4e0b\u6240\u793a\uff0c\u90a3\u4e48 MyClass.i \u548c MyClass.f \u5c31\u662f\u6709\u6548\u7684\u5c5e\u6027\u5f15\u7528\uff0c\u5c06\u5206\u522b\u8fd4\u56de\u4e00\u4e2a\u6574\u6570\u548c\u4e00\u4e2a\u51fd\u6570\u5bf9\u8c61\u3002 \u7c7b\u5c5e\u6027\u4e5f\u53ef\u4ee5\u88ab\u8d4b\u503c\uff0c\u56e0\u6b64\u53ef\u4ee5\u901a\u8fc7\u8d4b\u503c\u6765\u66f4\u6539 MyClass.i \u7684\u503c\u3002 __doc__ \u4e5f\u662f\u4e00\u4e2a\u6709\u6548\u7684\u5c5e\u6027\uff0c\u5c06\u8fd4\u56de\u6240\u5c5e\u7c7b\u7684\u6587\u6863\u5b57\u7b26\u4e32: \"A simple example class\"\u3002 class MyClass: \"\"\"A simple example class\"\"\" i = 12345 def f(self): return 'hello world' print(MyClass.i) # 12345 print(MyClass.__doc__) # A simple example class MyClass.i = 10 print(MyClass.i) # 10 \u7c7b\u7684 \u5b9e\u4f8b\u5316\uff08instantiation\uff09 \u4f7f\u7528\u51fd\u6570\u8868\u793a\u6cd5\u3002 \u53ef\u4ee5\u628a\u7c7b\u5bf9\u8c61\uff08class object\uff09\u770b\u4f5c\u662f\u4e00\u4e2a\u4e0d\u5e26\u53c2\u6570\u7684\u51fd\u6570\uff0c\u8fd9\u4e2a\u51fd\u6570\u8fd4\u56de\u4e86\u8be5\u7c7b\u7684\u4e00\u4e2a\u65b0\u5b9e\u4f8b\u3002 \u5728\u4e0b\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c x = MyClass() \u521b\u5efa\u4e86 MyClass() \u8fd9\u4e2a\u7c7b\u7684\u4e00\u4e2a\u5b9e\u4f8b\uff0c\u5e76\u8d4b\u503c\u7ed9\u5c40\u90e8\u53d8\u91cf x \u3002 \u5b9e\u4f8b\u5316\u64cd\u4f5c\uff08\u8c03\u7528\u7c7b\u5bf9\u8c61\uff09\u4f1a\u521b\u5efa\u4e00\u4e2a\u7a7a\u5bf9\u8c61\u3002\u8bb8\u591a\u7c7b\u4f1a\u521b\u5efa\u5e26\u6709\u7279\u5b9a\u521d\u59cb\u72b6\u6001\u7684\u81ea\u5b9a\u4e49\u5b9e\u4f8b\u3002\u4e3a\u6b64\u7c7b\u5b9a\u4e49\u4e2d\u9700\u8981\u5305\u542b\u4e00\u4e2a\u540d\u4e3a __init__() \u7684\u7279\u6b8a\u65b9\u6cd5\u3002 \u5f53\u4e00\u4e2a\u7c7b\u5b9a\u4e49\u4e86 __init__() \u65b9\u6cd5\u65f6\uff0c\u7c7b\u7684\u5b9e\u4f8b\u5316\u64cd\u4f5c\u4f1a\u81ea\u52a8\u4e3a\u65b0\u521b\u5efa\u7684\u7c7b\u5b9e\u4f8b\u8c03\u7528 __init__() \u3002 \u66f4\u65b0\u4e0a\u9762\u7684\u4f8b\u5b50\uff0c\u6ce8\u610f __dict__ \u4e24\u6b21\u8fd4\u56de\u7684\u4e0d\u540c\u7684\u5b57\u5178\u3002\u590d\u4e60\u4e00\u4e0b\uff0c\u5728\u547d\u540d\u7a7a\u95f4\u4e2d\u63d0\u5230\uff0c __dict__ \u662f\u5c5e\u6027\u4f46\u4e0d\u662f\u5168\u5c40\u540d\u79f0\uff0c\u8fd4\u56de\u7528\u4e8e\u5b9e\u73b0\u6a21\u5757\u547d\u540d\u7a7a\u95f4\u7684\u5b57\u5178\u3002 class MyClass: \"\"\"A simple example class\"\"\" i = 12345 def f(self): return 'hello world' def __init__(self): self.data = [] x = MyClass() print(x.__dict__) # {'data': []} x.i = 10 print(x.__dict__) # {'data': [], 'i': 10} __init__() \u65b9\u6cd5\u53ef\u4ee5\u6709\u989d\u5916\u7684\u53c2\u6570\u8f93\u5165\uff0c\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u7c7b\u5b9e\u4f8b\u5316\u7684\u53c2\u6570\u5c06\u88ab\u4f20\u9012\u7ed9 __init__() \u3002 \u5982\u4e0b\u4f8b: class Complex: def __init__(self, realpart, imagpart): self.r = realpart self.i = imagpart x = Complex(3.0, -4.5) print(x.r, x.i) # 3.0 -4.5 \u5b9e\u4f8b\u5bf9\u8c61 Instance Objects \u5bf9\u5b9e\u4f8b\u5bf9\u8c61\u552f\u4e00\u7684\u64cd\u4f5c\u662f\u5c5e\u6027\u5f15\u7528\u3002\u6709\u4e24\u79cd\u6709\u6548\u7684\u5c5e\u6027\u540d\u79f0\uff1a\u6570\u636e\u5c5e\u6027\uff08data attributes\uff09\u548c\u65b9\u6cd5\uff08methods\uff09\u3002 \u6570\u636e\u5c5e\u6027\uff08data attributes\uff09 \u7c7b\u4f3c\u4e8e\u5b9e\u4f8b\u53d8\u91cf\uff0c\u6570\u636e\u5c5e\u6027\u4e0d\u9700\u8981\u58f0\u660e\u3002\u50cf\u5c40\u90e8\u53d8\u91cf\u4e00\u6837\uff0c\u6570\u636e\u5c5e\u6027\u5c06\u5728\u7b2c\u4e00\u6b21\u88ab\u8d4b\u503c\u65f6\u4ea7\u751f\u3002 \u4f8b\u5982\uff0c\u5982\u679c x \u662f\u4e0a\u9762\u521b\u5efa\u7684 MyClass \u7684\u5b9e\u4f8b\uff0c\u5219\u4ee5\u4e0b\u4ee3\u7801\u6bb5\u5c06\u6253\u5370\u6570\u503c 16 \uff0c\u4e14\u6ca1\u6709\u7559\u4e0b\u5173\u4e8e x.counter \u7684\u75d5\u8ff9\u3002 class MyClass: \"\"\"A simple example class\"\"\" i = 12345 def f(self): return 'hello world' def __init__(self): self.data = [] x = MyClass() x.counter = 1 while x.counter < 10: x.counter = x.counter * 2 print(x.counter) # 16 print(x.__dict__) # {'data': [], 'counter': 16} del x.counter print(x.__dict__) # {'data': []} \u53e6\u4e00\u7c7b\u5b9e\u4f8b\u5c5e\u6027\u5f15\u7528\u79f0\u4e3a \u65b9\u6cd5\uff08methods\uff09 \u3002 \u65b9\u6cd5\u662f\u96b6\u5c5e\u4e8e\u5bf9\u8c61\u7684 \u51fd\u6570 \u3002 \u5728Python\u4e2d\uff0c\u65b9\u6cd5\u8fd9\u4e2a\u672f\u8bed\u5e76\u4e0d\u662f\u7c7b\u5b9e\u4f8b\u6240\u7279\u6709\u7684\uff0c\u5176\u4ed6\u5bf9\u8c61\u4e5f\u53ef\u4ee5\u6709\u65b9\u6cd5\u3002 \u4f8b\u5982\uff0c\u5217\u8868\u5bf9\u8c61\uff08list objects\uff09\u5177\u6709append, insert, remove, sort\u7b49\u65b9\u6cd5\u3002 \u5728\u4ee5\u4e0b\u8ba8\u8bba\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528\u65b9\u6cd5\u4e00\u8bcd\u5c06\u4e13\u6307\u7c7b\u5b9e\u4f8b\u5bf9\u8c61\u7684\u65b9\u6cd5\uff0c\u9664\u975e\u53e6\u5916\u660e\u786e\u8bf4\u660e\u3002 \u5b9e\u4f8b\u5bf9\u8c61\u7684\u6709\u6548\u65b9\u6cd5\u540d\u79f0\u4f9d\u8d56\u4e8e\u5176\u6240\u5c5e\u7684\u7c7b\u3002 \u6839\u636e\u5b9a\u4e49\uff0c\u4e00\u4e2a\u7c7b\u5b9a\u4e49\u4e2d\u6240\u5305\u542b\u7684\u6240\u6709\u51fd\u6570\u5bf9\u8c61\uff08function objects\uff09\u90fd\u79f0\u4e3a\u5c5e\u6027\u3002 \u56e0\u6b64\u5728\u4e0a\u9762\u7684\u793a\u4f8b\u4e2d\uff0c x.f \u662f\u6709\u6548\u7684\u65b9\u6cd5\u5f15\u7528\uff0c\u56e0\u4e3a MyClass.f \u662f\u4e00\u4e2a\u51fd\u6570\uff0c\u800c x.i \u4e0d\u662f\u65b9\u6cd5\uff0c\u56e0\u4e3a MyClass.i \u4e0d\u662f\u51fd\u6570\u3002\u4f46\u662f x.f \u4e0e MyClass.f \u5e76\u4e0d\u662f\u4e00\u56de\u4e8b\uff0c x.f \u662f\u4e00\u4e2a \u65b9\u6cd5\u5bf9\u8c61 \uff0c\u800c MyClass.f \u662f\u4e00\u4e2a \u51fd\u6570\u5bf9\u8c61 \u3002\u5dee\u522b\u5728\u4e8e f() \u662f\u5426\u4e0e\u5b9e\u4f8b\u7ed1\u5b9a\uff0c\u672a\u7ed1\u5b9a\uff0c\u5c31\u662f\u51fd\u6570\uff0c\u7ed1\u5b9a\uff0c\u5c31\u662f\u65b9\u6cd5\u3002 class MyClass: \"\"\"A simple example class\"\"\" i = 12345 def f(self): return 'hello world' def __init__(self): self.data = [] x = MyClass() print(MyClass.f(0)) # hello world print(x.f()) # hello world print(MyClass.f) # <function MyClass.f at 0x7ff9368b3488> print(x.f) # <bound method MyClass.f of <__main__.MyClass object at 0x7ff9368acbe0>> print(type(MyClass.f)) # <class 'function'> print(type(x.f)) # <class 'method'> \u8fd9\u91cc\u505a\u4e2a\u5c0f\u7ed3\uff1a \u51fd\u6570(function)\u662fPython\u4e2d\u4e00\u4e2a\u53ef\u8c03\u7528\u5bf9\u8c61(callable), \u65b9\u6cd5(method)\u662f\u4e00\u79cd\u7279\u6b8a\u7684\u51fd\u6570\u3002 \u4e00\u4e2a\u53ef\u8c03\u7528\u5bf9\u8c61\u662f\u65b9\u6cd5\u548c\u51fd\u6570\uff0c\u548c\u8fd9\u4e2a\u5bf9\u8c61\u65e0\u5173\uff0c\u4ec5\u548c\u8fd9\u4e2a\u5bf9\u8c61\u662f\u5426\u4e0e\u7c7b\u6216\u5b9e\u4f8b\u7ed1\u5b9a\u6709\u5173\uff08bound method\uff09\u3002 \u9759\u6001\u65b9\u6cd5\u6ca1\u6709\u548c\u4efb\u4f55\u7c7b\u6216\u5b9e\u4f8b\u7ed1\u5b9a\uff0c\u6240\u4ee5 \u9759\u6001\u65b9\u6cd5\u662f\u4e2a\u51fd\u6570 \u3002 \u65b9\u6cd5\u5bf9\u8c61 Method Objects \u5728 MyClass \u793a\u4f8b\u4e2d\uff0c x.f() \u662f\u4e00\u4e2a\u65b9\u6cd5\u5bf9\u8c61\uff0c\u88ab\u8c03\u7528\u540e\uff0c\u5c06\u8fd4\u56de\u5b57\u7b26\u4e32 'hello world' \u3002\u53ef\u4ee5\u7acb\u5373\u8c03\u7528\uff0c\u4e5f\u53ef\u4ee5\u4fdd\u5b58\u8d77\u6765\u4ee5\u540e\u518d\u8c03\u7528 xf = x.f \u3002 \u867d\u7136 f() \u7684\u51fd\u6570\u5b9a\u4e49\u6307\u5b9a\u4e86\u4e00\u4e2a\u53c2\u6570\uff0c\u4f46\u4e0a\u9762\u4f8b\u5b50\u4e2d\u8c03\u7528 x.f() \u65f6\u5e76\u6ca1\u6709\u5e26\u53c2\u6570\uff0c\u4e5f\u6ca1\u6709\u5f15\u53d1\u5f02\u5e38\u62a5\u9519\u3002\u539f\u56e0\u5728\u4e8e\uff0c \u65b9\u6cd5(method)\u7684\u7279\u6b8a\u4e4b\u5904\u5c31\u5728\u4e8e\u5b9e\u4f8b\u5bf9\u8c61\u4f1a\u4f5c\u4e3a\u51fd\u6570\u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\u88ab\u4f20\u5165\u3002 \u8c03\u7528 x.f() \u5176\u5b9e\u5c31\u76f8\u5f53\u4e8e MyClass.f(x) \u3002 \u603b\u4e4b\uff0c\u8c03\u7528\u4e00\u4e2a\u5177\u6709 n \u4e2a\u53c2\u6570\u7684\u65b9\u6cd5(method)\u5c31\u76f8\u5f53\u4e8e\u8c03\u7528\u518d\u591a\u4e00\u4e2a\u53c2\u6570\u7684\u5bf9\u5e94\u51fd\u6570\uff0c\u8fd9\u4e2a\u53c2\u6570\u503c\u4e3a\u65b9\u6cd5\u6240\u5c5e\u5b9e\u4f8b\u5bf9\u8c61\uff0c \u4f4d\u7f6e\u5728\u5176\u4ed6\u53c2\u6570\u4e4b\u524d \u3002 \u5f53\u4e00\u4e2a\u5b9e\u4f8b\u7684\u975e\u6570\u636e\u5c5e\u6027\u88ab\u5f15\u7528\u65f6\uff0c\u5c06\u641c\u7d22\u5b9e\u4f8b\u6240\u5c5e\u7684\u7c7b\u3002 \u5982\u679c\u88ab\u5f15\u7528\u7684\u5c5e\u6027\u540d\u79f0\u662f\u7c7b\u4e2d\u4e00\u4e2a\u6709\u6548\u7684\u51fd\u6570\u5bf9\u8c61\uff0c\u5219\u4f1a\u521b\u5efa\u4e00\u4e2a\u62bd\u8c61\u7684\u5bf9\u8c61\uff0c\u901a\u8fc7\u6253\u5305\uff08parking\uff0c\u5373\u6307\u5411\uff09\u5339\u914d\u5230\u7684\u5b9e\u4f8b\u5bf9\u8c61\u548c\u51fd\u6570\u5bf9\u8c61\uff0c\u8fd9\u4e2a\u62bd\u8c61\u5bf9\u8c61\u5c31\u662f\u65b9\u6cd5\u5bf9\u8c61\u3002 \u5f53\u5e26\u53c2\u6570\u8c03\u7528\u65b9\u6cd5\u5bf9\u8c61\u65f6\uff0c\u5c06\u57fa\u4e8e\u5b9e\u4f8b\u5bf9\u8c61\u548c\u53c2\u6570\u5217\u8868\u6784\u5efa\u4e00\u4e2a\u65b0\u7684\u53c2\u6570\u5217\u8868\uff0c\u5e76\u4f7f\u7528\u8fd9\u4e2a\u65b0\u53c2\u6570\u5217\u8868\u8c03\u7528\u76f8\u5e94\u7684\u51fd\u6570\u5bf9\u8c61\u3002 \u7c7b\u548c\u5b9e\u4f8b\u53d8\u91cf Class and Instance Variables \u4e00\u822c\u6765\u8bf4\uff0c \u5b9e\u4f8b\u53d8\u91cf \u7528\u4e8e\u6bcf\u4e2a\u5b9e\u4f8b\u7684\u552f\u4e00\u6570\u636e\uff0c\u800c \u7c7b\u53d8\u91cf \u7528\u4e8e\u7c7b\u7684\u6240\u6709\u5b9e\u4f8b\u5171\u4eab\u7684\u5c5e\u6027\u548c\u65b9\u6cd5: class Dog: kind = 'canine' # class variable shared by all instances def __init__(self, name): self.name = name # instance variable unique to each instance d = Dog('Fido') e = Dog('Buddy') print(d.kind) # shared by all dogs # 'canine' print(e.kind) # shared by all dogs # 'canine' print(d.name) # unique to d instance # 'Fido' print(e.name) # unique to e instance # 'Buddy' \u4e0b\u4ee3\u7801\u4e2d\u7684 tricks \u5217\u8868\u4e0d\u5e94\u8be5\u88ab\u7528\u4f5c\u7c7b\u53d8\u91cf\uff0c\u56e0\u4e3a\u6240\u6709\u7684 Dog \u5b9e\u4f8b\u5c06\u53ea\u5171\u4eab\u4e00\u4e2a\u5355\u72ec\u7684\u5217\u8868: class Dog: kind = 'canine' # class variable shared by all instances tricks = [] # mistaken use of a class variable def __init__(self, name): self.name = name # instance variable unique to each instance def add_trick(self, trick): self.tricks.append(trick) d = Dog('Fido') e = Dog('Buddy') d.add_trick('roll over') e.add_trick('play dead') print(d.tricks) # ['roll over', 'play dead'] \u6b63\u786e\u7684\u7c7b\u8bbe\u8ba1\u5e94\u8be5\u4f7f\u7528\u5b9e\u4f8b\u53d8\u91cf: class Dog: kind = 'canine' # class variable shared by all instances def __init__(self, name): self.name = name # instance variable unique to each instance self.tricks = [] # creates a new empty list for each dog def add_trick(self, trick): self.tricks.append(trick) d = Dog('Fido') e = Dog('Buddy') d.add_trick('roll over') e.add_trick('play dead') print(d.tricks) # ['roll over'] print(e.tricks) # ['play dead'] \u5982\u679c\u540c\u6837\u7684\u5c5e\u6027\u540d\u79f0\u540c\u65f6\u51fa\u73b0\u5728\u5b9e\u4f8b\u548c\u7c7b\u4e2d\uff0c\u5219\u5c5e\u6027\u67e5\u627e\u4f1a \u4f18\u5148\u9009\u62e9\u5b9e\u4f8b : class Warehouse: purpose = 'storage' region = 'west' w1 = Warehouse() print(w1.purpose, w1.region) # storage west w2 = Warehouse() w2.region = 'east' # Instance W2 has higher priority than class print(w2.purpose, w2.region) # storage east \u6570\u636e\u5c5e\u6027\uff08Data attributes\uff09\u53ef\u4ee5\u88ab\u65b9\u6cd5\uff08method\uff09\u4ee5\u53ca\u4e00\u4e2a\u5bf9\u8c61\u7684\u666e\u901a\u7528\u6237\uff08ordinary users\uff09\uff08\u201c\u5ba2\u6237\u7aefClient\u201d\uff09\u6240\u5f15\u7528\u3002 \u6362\u53e5\u8bdd\u8bf4\uff0c\u7c7b\u4e0d\u80fd\u7528\u4e8e\u5b9e\u73b0\u7eaf\u62bd\u8c61\u6570\u636e\u7c7b\u578b\u3002 \u65b9\u6cd5\u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\u5e38\u5e38\u88ab\u547d\u540d\u4e3a self \uff0c\u8fd9\u53ea\u662f\u4e00\u4e2a\u7ea6\u5b9a: self \u8fd9\u4e00\u540d\u79f0\u5728Python\u4e2d\u6ca1\u6709\u7279\u6b8a\u542b\u4e49\u3002 \u4f46\u662f\u9075\u5faa\u6b64\u7ea6\u5b9a\u4f1a\u4f7f\u5f97\u4ee3\u7801\u5177\u6709\u5f88\u597d\u7684\u53ef\u8bfb\u6027\u3002 \u4efb\u4f55\u4e00\u4e2a\u4f5c\u4e3a\u7c7b\u5c5e\u6027\uff08class attribute\uff09\u7684\u51fd\u6570\u5bf9\u8c61\uff08function object\uff09\u90fd\u4e3a\u8be5\u7c7b\u7684\u5b9e\u4f8b\u5b9a\u4e49\u4e86\u4e00\u4e2a\u76f8\u5e94\u65b9\u6cd5\u3002 \u51fd\u6570\u5b9a\u4e49\u7684\u6587\u672c\u5e76\u975e\u5fc5\u987b\u5305\u542b\u4e8e\u7c7b\u5b9a\u4e49\u4e4b\u5185\uff1a\u5c06\u4e00\u4e2a\u51fd\u6570\u5bf9\u8c61\u8d4b\u503c\u7ed9\u4e00\u4e2a\u5c40\u90e8\u53d8\u91cf\u4e5f\u662f\u53ef\u4ee5\u7684\u3002\u5982\u4e0b\u4f8b\u3002\u73b0\u5728 f , g \u548c h \u90fd\u662f\u7c7b C \u7684\u5f15\u7528\u51fd\u6570\u5bf9\u8c61\u7684\u5c5e\u6027\uff0c\u56e0\u800c\u5b83\u4eec\u5c31\u90fd\u662f\u7c7b C \u7684\u5b9e\u4f8b\u7684\u65b9\u6cd5\uff0c\u5176\u4e2d h \u5b8c\u5168\u7b49\u540c\u4e8e g \u3002\u4f46\u8bf7\u6ce8\u610f\uff0c\u4e0b\u9762\u8fd9\u4e2a\u4f8b\u5b50\u7684\u53ef\u8bfb\u6027\u975e\u5e38\u4e0d\u597d\u3002 # Function defined outside the class def f1(self, x, y): return min(x, x + y) class C: f = f1 # Assign a function object to a local variable in the class def g(self): return 'hello world' h = g \u65b9\u6cd5\uff08methods\uff09\u53ef\u4ee5\u901a\u8fc7\u4f7f\u7528 self \u53c2\u6570\u7684\u65b9\u6cd5\u5c5e\u6027\uff08method attributes\uff09\u8c03\u7528\u5176\u4ed6\u65b9\u6cd5\uff08method\uff09: class Bag: def __init__(self): self.data = [] def add(self, x): self.data.append(x) def addtwice(self, x): self.add(x) self.add(x) \u65b9\u6cd5\u53ef\u4ee5\u901a\u8fc7\u4e0e\u666e\u901a\u51fd\u6570\u76f8\u540c\u7684\u65b9\u5f0f\u5f15\u7528\u5168\u5c40\u540d\u79f0\u3002 \u4e0e\u65b9\u6cd5\u76f8\u5173\u8054\u7684\u5168\u5c40\u4f5c\u7528\u57df\u5c31\u662f\u5305\u542b\u5176\u5b9a\u4e49\u7684\u6a21\u5757\u3002 \uff08\u7c7b\u6c38\u8fdc\u4e0d\u4f1a\u88ab\u4f5c\u4e3a\u5168\u5c40\u4f5c\u7528\u57df\u3002\uff09 \u867d\u7136\u6211\u4eec\u5f88\u5c11\u4f1a\u6709\u5145\u5206\u7684\u7406\u7531\u5728\u65b9\u6cd5\u4e2d\u4f7f\u7528\u5168\u5c40\u4f5c\u7528\u57df\uff0c\u4f46\u5168\u5c40\u4f5c\u7528\u57df\u5b58\u5728\u8bb8\u591a\u5408\u7406\u7684\u4f7f\u7528\u573a\u666f\uff1a\u4e3e\u4e2a\u4f8b\u5b50\uff0c\u5bfc\u5165\u5230\u5168\u5c40\u4f5c\u7528\u57df\u7684\u51fd\u6570\u548c\u6a21\u5757\u53ef\u4ee5\u88ab\u65b9\u6cd5\u6240\u4f7f\u7528\uff0c\u5728\u5176\u4e2d\u5b9a\u4e49\u7684\u51fd\u6570\u548c\u7c7b\u4e5f\u4e00\u6837\u3002 \u901a\u5e38\uff0c\u5305\u542b\u8be5\u65b9\u6cd5\u7684\u7c7b\u672c\u8eab\u662f\u5728\u5168\u5c40\u4f5c\u7528\u57df\u4e2d\u5b9a\u4e49\u7684\u3002 \u7ee7\u627f Inheritance \u5982\u679c\u4e0d\u652f\u6301\u7ee7\u627f\uff0c\u5c31\u7b97\u4e0d\u4e0a\u771f\u6b63\u7684\u201c\u7c7b\u201d\u3002\u6d3e\u751f\u7c7b\uff08derived class\uff09\u5b9a\u4e49\u7684\u8bed\u6cd5\u5982\u4e0b\u6240\u793a: class DerivedClassName(BaseClassName): <statement-1> . . . <statement-N> \u540d\u79f0 BaseClassName \u5fc5\u987b\u5b9a\u4e49\u4e8e\u5305\u542b\u6d3e\u751f\u7c7b\u5b9a\u4e49\u7684\u4f5c\u7528\u57df\u4e2d\u3002 \u4e5f\u5141\u8bb8\u7528\u5176\u4ed6\u4efb\u610f\u8868\u8fbe\u5f0f\u4ee3\u66ff\u57fa\u7c7b\u540d\u79f0\u6240\u5728\u7684\u4f4d\u7f6e\uff0c\u4f8b\u5982\uff0c\u5f53\u57fa\u7c7b\u5b9a\u4e49\u5728\u53e6\u4e00\u4e2a\u6a21\u5757\u4e2d\u7684\u65f6\u5019: class DerivedClassName(modname.BaseClassName): \u6d3e\u751f\u7c7b\u5b9a\u4e49\u7684\u6267\u884c\u8fc7\u7a0b\u4e0e\u57fa\u7c7b\u76f8\u540c\u3002 \u5f53\u6784\u9020\u7c7b\u5bf9\u8c61\u65f6\uff0c\u57fa\u7c7b\u4f1a\u88ab\u8bb0\u4f4f\u3002 \u6b64\u4fe1\u606f\u5c06\u88ab\u7528\u6765\u89e3\u6790\u5c5e\u6027\u5f15\u7528\uff1a\u5982\u679c\u8bf7\u6c42\u7684\u5c5e\u6027\u5728\u7c7b\u4e2d\u627e\u4e0d\u5230\uff0c\u641c\u7d22\u5c06\u8f6c\u5f80\u57fa\u7c7b\u4e2d\u8fdb\u884c\u67e5\u627e\u3002 \u5982\u679c\u57fa\u7c7b\u672c\u8eab\u4e5f\u6d3e\u751f\u81ea\u5176\u4ed6\u67d0\u4e2a\u7c7b\uff0c\u5219\u6b64\u89c4\u5219\u5c06\u88ab\u9012\u5f52\u5730\uff08recursively\uff09\u5e94\u7528\u3002 \u6d3e\u751f\u7c7b\u7684\u5b9e\u4f8b\u5316\u6ca1\u6709\u4efb\u4f55\u7279\u6b8a\u4e4b\u5904: DerivedClassName() \u4f1a\u521b\u5efa\u8be5\u7c7b\u7684\u4e00\u4e2a \u65b0\u5b9e\u4f8b \u3002 \u65b9\u6cd5\u5f15\u7528\u5c06\u6309\u4ee5\u4e0b\u65b9\u5f0f\u89e3\u6790\uff1a\u641c\u7d22\u76f8\u5e94\u7684\u7c7b\u5c5e\u6027\uff0c\u5982\u6709\u5fc5\u8981\u5c06\u6309\u57fa\u7c7b\u7ee7\u627f\u94fe\u9010\u6b65\u5411\u4e0b\u67e5\u627e\uff0c\u5982\u679c\u4ea7\u751f\u4e86\u4e00\u4e2a\u51fd\u6570\u5bf9\u8c61\u5219\u65b9\u6cd5\u5f15\u7528\u5c31\u751f\u6548\u3002 \u6d3e\u751f\u7c7b\u53ef\u80fd\u4f1a\u91cd\u5199\uff08override\uff09\u5176\u57fa\u7c7b\u7684\u65b9\u6cd5\u3002 \u56e0\u4e3a\u65b9\u6cd5\u5728\u8c03\u7528\u540c\u4e00\u5bf9\u8c61\u7684\u5176\u4ed6\u65b9\u6cd5\u65f6\u6ca1\u6709\u7279\u6b8a\u6743\u9650\uff0c\u6240\u4ee5\u8c03\u7528\u540c\u4e00\u57fa\u7c7b\u4e2d\u5b9a\u4e49\u7684\u53e6\u4e00\u65b9\u6cd5\u7684\u57fa\u7c7b\u65b9\u6cd5\u6700\u7ec8\u53ef\u80fd\u4f1a\u8c03\u7528\u8986\u76d6\u5b83\u7684\u6d3e\u751f\u7c7b\u7684\u65b9\u6cd5\u3002 \u5728\u6d3e\u751f\u7c7b\u4e2d\u7684\u91cd\u8f7d\u65b9\u6cd5\uff08overriding method\uff09\u5b9e\u9645\u4e0a\u53ef\u80fd\u60f3\u8981\u6269\u5c55\u800c\u975e\u7b80\u5355\u5730\u66ff\u6362\u540c\u540d\u7684\u57fa\u7c7b\u65b9\u6cd5\u3002 \u6709\u4e00\u79cd\u65b9\u5f0f\u53ef\u4ee5\u7b80\u5355\u5730\u76f4\u63a5\u8c03\u7528\u57fa\u7c7b\u65b9\u6cd5\uff1a\u5373\u8c03\u7528 BaseClassName.methodname(self, arguments) \u3002\u8bf7\u6ce8\u610f\uff0c\u4ec5\u5f53\u6b64\u57fa\u7c7b\u53ef\u5728\u5168\u5c40\u4f5c\u7528\u57df\u4e2d\u4ee5 BaseClassName \u7684\u540d\u79f0\u88ab\u8bbf\u95ee\u65f6\u65b9\u53ef\u4f7f\u7528\u6b64\u65b9\u5f0f\u3002 Python\u6709\u4e24\u4e2a\u5185\u7f6e\u51fd\u6570\u53ef\u88ab\u7528\u4e8e\u7ee7\u627f\u673a\u5236\uff1a \u4f7f\u7528 isinstance() \u6765\u68c0\u67e5\u4e00\u4e2a\u5b9e\u4f8b\u7684\u7c7b\u578b: isinstance(obj, int) \u4ec5\u4f1a\u5728 obj.__class__ \u4e3a int \u6216\u67d0\u4e2a\u6d3e\u751f\u81ea int \u7684\u7c7b\u65f6\u4e3a True \u3002 \u4f7f\u7528 issubclass() \u6765\u68c0\u67e5\u7c7b\u7684\u7ee7\u627f\u5173\u7cfb: issubclass(bool, int) \u4e3a True \uff0c\u56e0\u4e3a bool \u662f int \u7684\u5b50\u7c7b\u3002 \u4f46\u662f\uff0c issubclass(float, int) \u4e3a False \uff0c\u56e0\u4e3a float \u4e0d\u662f int \u7684\u5b50\u7c7b\u3002 \u591a\u91cd\u7ee7\u627f Multiple Inheritance Python \u4e5f\u652f\u6301\u4e00\u79cd\u591a\u91cd\u7ee7\u627f\u3002 \u5e26\u6709\u591a\u4e2a\u57fa\u7c7b\u7684\u7c7b\u5b9a\u4e49\u8bed\u53e5\u5982\u4e0b\u6240\u793a: class DerivedClassName(Base1, Base2, Base3): <statement-1> . . . <statement-N> \u5728\u6700\u7b80\u5355\u7684\u60c5\u51b5\u4e0b\uff0c\u641c\u7d22\u4ece\u7236\u7c7b\u6240\u7ee7\u627f\u5c5e\u6027\u7684\u64cd\u4f5c\u662f\u6df1\u5ea6\u4f18\u5148\uff08depth-first\uff09\u3001\u4ece\u5de6\u81f3\u53f3\uff08left-to-right\uff09\u7684\uff0c\u5f53\u5c42\u6b21\u7ed3\u6784\u4e2d\u5b58\u5728\u91cd\u53e0\u65f6\u4e0d\u4f1a\u5728\u540c\u4e00\u4e2a\u7c7b\u4e2d\u641c\u7d22\u4e24\u6b21\u3002 \u56e0\u6b64\uff0c\u5982\u679c\u67d0\u4e00\u5c5e\u6027\u5728 DerivedClassName \u4e2d\u672a\u627e\u5230\uff0c\u5219\u4f1a\u5230 Base1 \u4e2d\u641c\u7d22\u5b83\uff0c\u7136\u540e\uff08\u9012\u5f52\u5730\uff09\u5230 Base1 \u7684\u57fa\u7c7b\u4e2d\u641c\u7d22\uff0c\u5982\u679c\u5728\u90a3\u91cc\u672a\u627e\u5230\uff0c\u518d\u5230 Base2 \u4e2d\u641c\u7d22\uff0c\u4f9d\u6b64\u7c7b\u63a8\u3002 \u771f\u5b9e\u60c5\u51b5\u66f4\u590d\u6742\uff1b\u65b9\u6cd5\u89e3\u6790\u987a\u5e8f\u4f1a\u52a8\u6001\u6539\u53d8\u4ee5\u652f\u6301\u5bf9 super() \u7684\u534f\u540c\u8c03\u7528\u3002 \u8fd9\u79cd\u65b9\u5f0f\u5728\u67d0\u4e9b\u5176\u4ed6\u591a\u91cd\u7ee7\u627f\u578b\u8bed\u8a00\u4e2d\u88ab\u79f0\u4e3a \u540e\u7eed\u65b9\u6cd5\u8c03\u7528\uff08call-next-method\uff09 \uff0c\u5b83\u6bd4\u5355\u7ee7\u627f\u578b\uff08single-inheritance\uff09\u8bed\u8a00\u4e2d\u7684 uper \u8c03\u7528\u66f4\u5f3a\u5927\u3002 \u52a8\u6001\u6539\u53d8\u987a\u5e8f\u662f\u6709\u5fc5\u8981\u7684\uff0c\u56e0\u4e3a\u6240\u6709\u591a\u91cd\u7ee7\u627f\u7684\u60c5\u51b5\u90fd\u4f1a\u663e\u793a\u51fa\u4e00\u4e2a\u6216\u66f4\u591a\u7684\u83f1\u5f62\u5173\u8054\uff08diamond relationships\uff09\uff08\u5373\u81f3\u5c11\u6709\u4e00\u4e2a\u7236\u7c7b\u53ef\u901a\u8fc7\u591a\u6761\u8def\u5f84\u88ab\u6700\u5e95\u5c42\u7c7b\u6240\u8bbf\u95ee\uff09\u3002 \u4f8b\u5982\uff0c\u6240\u6709\u7c7b\u90fd\u662f\u7ee7\u627f\u81ea object \uff0c\u56e0\u6b64\u4efb\u4f55\u591a\u91cd\u7ee7\u627f\u7684\u60c5\u51b5\u90fd\u63d0\u4f9b\u4e86\u4e00\u6761\u4ee5\u4e0a\u7684\u8def\u5f84\u53ef\u4ee5\u901a\u5411 object \u3002 \u4e3a\u4e86\u786e\u4fdd\u57fa\u7c7b\u4e0d\u4f1a\u88ab\u8bbf\u95ee\u4e00\u6b21\u4ee5\u4e0a\uff0c\u52a8\u6001\u7b97\u6cd5\u4f1a\u7528\u4e00\u79cd\u7279\u6b8a\u65b9\u5f0f\u5c06\u641c\u7d22\u987a\u5e8f\u7ebf\u6027\u5316\uff0c \u4fdd\u7559\u6bcf\u4e2a\u7c7b\u6240\u6307\u5b9a\u7684\u4ece\u5de6\u81f3\u53f3\u7684\u987a\u5e8f\uff0c\u53ea\u8c03\u7528\u6bcf\u4e2a\u7236\u7c7b\u4e00\u6b21\uff0c\u5e76\u4e14\u4fdd\u6301\u5355\u8c03\uff08monotonic\uff09\uff08\u5373\u4e00\u4e2a\u7c7b\u53ef\u4ee5\u88ab\u5b50\u7c7b\u5316\u800c\u4e0d\u5f71\u54cd\u5176\u7236\u7c7b\u7684\u4f18\u5148\u987a\u5e8f\uff09\u3002 \u603b\u800c\u8a00\u4e4b\uff0c\u8fd9\u4e9b\u7279\u6027\u4f7f\u5f97\u8bbe\u8ba1\u5177\u6709\u591a\u91cd\u7ee7\u627f\u7684\u53ef\u9760\u4e14\u53ef\u6269\u5c55\u7684\u7c7b\u6210\u4e3a\u53ef\u80fd\u3002 \u79c1\u6709\u53d8\u91cf Private Variables \u90a3\u79cd\u4ec5\u9650\u4ece\u4e00\u4e2a\u5bf9\u8c61\u5185\u90e8\u8bbf\u95ee\u7684\u201c\u79c1\u6709\u201d\u5b9e\u4f8b\u53d8\u91cf\uff08\u201cPrivate\u201d instance variables\uff09\u5728 Python \u4e2d\u5e76\u4e0d\u5b58\u5728\u3002 \u4f46\u662f\uff0c\u5927\u591a\u6570 Python \u4ee3\u7801\u90fd\u9075\u5faa\u8fd9\u6837\u4e00\u4e2a\u7ea6\u5b9a\uff1a\u5e26\u6709 \u4e00\u4e2a\u524d\u7f00\u4e0b\u5212\u7ebf \u7684\u540d\u79f0 (\u4f8b\u5982 _spam ) \u5e94\u8be5\u88ab\u5f53\u4f5c\u662f API \u7684\u975e\u516c\u6709\uff08non-public\uff09\u90e8\u5206 (\u65e0\u8bba\u5b83\u662f\u51fd\u6570\u3001\u65b9\u6cd5\u6216\u662f\u6570\u636e\u6210\u5458)\u3002 \u8fd9\u5e94\u5f53\u88ab\u89c6\u4e3a\u4e00\u4e2a\u5b9e\u73b0\u7ec6\u8282\uff0c\u53ef\u80fd\u4e0d\u7ecf\u901a\u77e5\u5373\u52a0\u4ee5\u6539\u53d8\u3002 \u7531\u4e8e\u5b58\u5728\u5bf9\u4e8e\u7c7b\u79c1\u6709\u6210\u5458\uff08class-private members\uff09\u7684\u6709\u6548\u4f7f\u7528\u573a\u666f\uff08\u4f8b\u5982\u907f\u514d\u540d\u79f0\u4e0e\u5b50\u7c7b\u6240\u5b9a\u4e49\u7684\u540d\u79f0\u76f8\u51b2\u7a81\uff09\uff0c\u56e0\u6b64\u5b58\u5728\u5bf9\u6b64\u79cd\u673a\u5236\u7684\u6709\u9650\u652f\u6301\uff0c\u79f0\u4e3a \u540d\u79f0\u6539\u5199\uff08name mangling\uff09 \u3002 \u4efb\u4f55\u5f62\u5f0f\u4e3a __spam \u7684\u6807\u8bc6\u7b26\uff08\u81f3\u5c11\u5e26\u6709 \u4e24\u4e2a\u524d\u7f00\u4e0b\u5212\u7ebf \uff0c\u81f3\u591a\u4e00\u4e2a\u540e\u7f00\u4e0b\u5212\u7ebf\uff09\u7684\u6587\u672c\u5c06\u88ab\u66ff\u6362\u4e3a _classname__spam \uff0c\u5176\u4e2d classname \u4e3a\u53bb\u9664\u4e86\u524d\u7f00\u4e0b\u5212\u7ebf\u7684\u5f53\u524d\u7c7b\u540d\u79f0\u3002 \u8fd9\u79cd\u6539\u5199\u4e0d\u8003\u8651\u6807\u8bc6\u7b26\u7684\u53e5\u6cd5\u4f4d\u7f6e\uff0c\u53ea\u8981\u5b83\u51fa\u73b0\u5728\u7c7b\u5b9a\u4e49\u5185\u90e8\u5c31\u4f1a\u8fdb\u884c\u3002 \u540d\u79f0\u6539\u5199\uff08Name mangling\uff09\u6709\u52a9\u4e8e\u8ba9\u5b50\u7c7b\u91cd\u8f7d\u65b9\u6cd5\uff08\uff09override methods\u800c\u4e0d\u7834\u574f\u7c7b\u5185\u65b9\u6cd5\uff08intraclass method\uff09\u8c03\u7528\u3002\u4f8b\u5982: class Mapping: def __init__(self, iterable): self.items_list = [] self.__update(iterable) def update(self, iterable): for item in iterable: self.items_list.append(item) __update = update # private copy of original update() method class MappingSubclass(Mapping): def update(self, keys, values): # provides new signature for update() # but does not break __init__() for item in zip(keys, values): self.items_list.append(item) \u4e0a\u9762\u7684\u793a\u4f8b\u5373\u4f7f\u5728 MappingSubclass \u5f15\u5165\u4e86\u4e00\u4e2a __update \u6807\u8bc6\u7b26\u7684\u60c5\u51b5\u4e0b\u4e5f\u4e0d\u4f1a\u51fa\u9519\uff0c\u56e0\u4e3a\u5b83\u4f1a\u5728 Mapping \u7c7b\u4e2d\u88ab\u66ff\u6362\u4e3a _Mapping__update \u800c\u5728 MappingSubclass \u7c7b\u4e2d\u88ab\u66ff\u6362\u4e3a _MappingSubclass__update \u3002 \u8bf7\u6ce8\u610f\uff0c\u6539\u5199\u89c4\u5219\uff08mangling rules\uff09\u7684\u8bbe\u8ba1\u4e3b\u8981\u662f\u4e3a\u4e86\u907f\u514d\u610f\u5916\u51b2\u7a81\uff1b\u8bbf\u95ee\u6216\u4fee\u6539\u79c1\u6709\u53d8\u91cf\u4ecd\u7136\u662f\u53ef\u80fd\u7684\u3002\u8fd9\u5728\u7279\u6b8a\u60c5\u51b5\u4e0b\u751a\u81f3\u4f1a\u5f88\u6709\u7528\uff0c\u4f8b\u5982\u5728\u8c03\u8bd5\u5668\uff08debugger\uff09\u4e2d\u3002 \u8bf7\u6ce8\u610f\u4f20\u9012\u7ed9 exec() \u6216 eval() \u7684\u4ee3\u7801\u4e0d\u4f1a\u628a\u53d1\u8d77\u8c03\u7528\u7c7b\u7684\u7c7b\u540d\u89c6\u4f5c\u5f53\u524d\u7c7b\uff1b\u8fd9\u7c7b\u4f3c\u4e8e global \u8bed\u53e5\u7684\u6548\u679c\uff0c\u56e0\u6b64\u8fd9\u79cd\u6548\u679c\u4ec5\u9650\u4e8e\u540c\u65f6\u7ecf\u8fc7\u5b57\u8282\u7801\u7f16\u8bd1\u7684\u4ee3\u7801\u3002 \u540c\u6837\u7684\u9650\u5236\u4e5f\u9002\u7528\u4e8e getattr() , setattr() \u548c delattr() \uff0c\u4ee5\u53ca\u5bf9\u4e8e __dict__ \u7684\u76f4\u63a5\u5f15\u7528\u3002 \u8fed\u4ee3\u5668 Iterators \u5728Python\u4e2d\uff0c\u5927\u591a\u6570\u5bb9\u5668\u5bf9\u8c61\uff08container object\uff09\u90fd\u53ef\u4ee5\u4f7f\u7528 for \u8bed\u53e5: for element in [1, 2, 3]: print(element) for element in (1, 2, 3): print(element) for key in {'one': 1, 'two': 2}: print(key) for char in \"123\": print(char) for line in open(\"myfile.txt\"): print(line, end='') for \u8bed\u53e5\u4f1a\u5728\u5bb9\u5668\u5bf9\u8c61\u4e0a\u8c03\u7528 iter()\u3002 \u8be5\u51fd\u6570\u8fd4\u56de\u4e00\u4e2a\u5b9a\u4e49\u4e86 __next__() \u65b9\u6cd5\u7684\u8fed\u4ee3\u5668\u5bf9\u8c61\uff0c\u6b64\u65b9\u6cd5\u5c06\u9010\u4e00\u8bbf\u95ee\u5bb9\u5668\u4e2d\u7684\u5143\u7d20\u3002 \u5f53\u5143\u7d20\u7528\u5c3d\u65f6\uff0c __next__() \u5c06\u5f15\u53d1 StopIteration \u5f02\u5e38\u6765\u901a\u77e5\u7ec8\u6b62 for \u5faa\u73af\u3002 \u53ef\u4ee5\u4f7f\u7528 next() \u5185\u7f6e\u51fd\u6570\u6765\u8c03\u7528 __next__() \u65b9\u6cd5\uff1b\u4e0b\u9762\u8fd9\u4e2a\u4f8b\u5b50\u5c55\u793a\u4e86\u521a\u521a\u63cf\u8ff0\u7684\u5177\u4f53\u8fd0\u884c\u65b9\u5f0f: >>> s = 'abc' >>> it = iter(s) >>> it <str_iterator object at 0x10c90e650> >>> next(it) 'a' >>> next(it) 'b' >>> next(it) 'c' >>> next(it) Traceback (most recent call last): File \"<stdin>\", line 1, in <module> next(it) StopIteration \u5728\u4e86\u89e3\u4e86\u8fed\u4ee3\u5668\u534f\u8bae\uff08iterator protocol\uff09\u7684\u673a\u5236\u540e\uff0c\u7ed9\u7c7b\u6dfb\u52a0\u8fed\u4ee3\u5668\u5c31\u5f88\u5bb9\u6613\u4e86\u3002 \u5b9a\u4e49\u4e00\u4e2a __iter__() \u65b9\u6cd5\u6765\u8fd4\u56de\u4e00\u4e2a\u5e26\u6709 __next__() \u65b9\u6cd5\u7684\u5bf9\u8c61\u3002 \u5982\u679c\u7c7b\u5df2\u5b9a\u4e49\u4e86 __next__() \uff0c\u5219 __iter__() \u53ef\u4ee5\u7b80\u5355\u5730\u8fd4\u56de self : class Reverse: \"\"\"Iterator for looping over a sequence backwards.\"\"\" def __init__(self, data): self.data = data self.index = len(data) def __iter__(self): return self def __next__(self): if self.index == 0: raise StopIteration self.index = self.index - 1 return self.data[self.index] rev = Reverse('spam') print(iter(rev)) for char in rev: print(char) # m # a # p # s \u751f\u6210\u5668 Generators \u751f\u6210\u5668\uff08Generators\uff09 \u662f\u4e00\u4e2a\u7528\u4e8e\u521b\u5efa\u8fed\u4ee3\u5668\u7684\u7b80\u5355\u800c\u5f3a\u5927\u7684\u5de5\u5177\u3002 \u5b83\u4eec\u7684\u5199\u6cd5\u7c7b\u4f3c\u4e8e\u6807\u51c6\u7684\u51fd\u6570\uff0c\u4f46\u5f53\u5b83\u4eec\u8981\u8fd4\u56de\u6570\u636e\u65f6\u4f1a\u4f7f\u7528 yield \u8bed\u53e5\u3002 \u6bcf\u6b21\u5728\u751f\u6210\u5668\u4e0a\u8c03\u7528 next() \u65f6\uff0c\u5b83\u4f1a\u4ece\u4e0a\u6b21\u79bb\u5f00\u7684\u4f4d\u7f6e\u6062\u590d\u6267\u884c\uff08\u5b83\u4f1a\u8bb0\u4f4f\u4e0a\u6b21\u6267\u884c\u8bed\u53e5\u65f6\u7684\u6240\u6709\u6570\u636e\u503c\uff09\u3002 \u4e00\u4e2a\u521b\u5efa\u751f\u6210\u5668\u7684\u793a\u4f8b\u5982\u4e0b\uff08\u6539\u5199\u4e0a\u9762\u8fed\u4ee3\u5668\u4e2d\u6240\u4e3e\u7684\u4f8b\u5b50\uff09: def reverse(data): for index in range(len(data) - 1, -1, -1): yield data[index] for char in reverse('golf'): print(char) # f # l # o # g \u53ef\u4ee5\u7528\u751f\u6210\u5668\u6765\u5b8c\u6210\u7684\u64cd\u4f5c\u540c\u6837\u53ef\u4ee5\u7528\u524d\u9762\u6240\u63cf\u8ff0\u7684\u57fa\u4e8e\u7c7b\u7684\u8fed\u4ee3\u5668\u6765\u5b8c\u6210\u3002\u4f46\u751f\u6210\u5668\u7684\u5199\u6cd5\u66f4\u4e3a\u7d27\u51d1\uff0c\u56e0\u4e3a\u5b83\u4f1a\u81ea\u52a8\u521b\u5efa __iter__() \u548c __next__() \u65b9\u6cd5\u3002 \u53e6\u4e00\u4e2a\u5173\u952e\u7279\u6027\u5728\u4e8e\u5c40\u90e8\u53d8\u91cf\u548c\u6267\u884c\u72b6\u6001\u4f1a\u5728\u6bcf\u6b21\u8c03\u7528\u4e4b\u95f4\u81ea\u52a8\u4fdd\u5b58\u3002 \u8fd9\u4f7f\u5f97\u8be5\u51fd\u6570\u76f8\u6bd4\u4f7f\u7528 self.index \u548c self.data \u8fd9\u79cd\u5b9e\u4f8b\u53d8\u91cf\u7684\u65b9\u5f0f\u66f4\u6613\u7f16\u5199\u4e14\u66f4\u4e3a\u6e05\u6670\u3002 \u9664\u4e86\u4f1a\u81ea\u52a8\u521b\u5efa\u65b9\u6cd5\u548c\u4fdd\u5b58\u7a0b\u5e8f\u72b6\u6001\uff0c\u5f53\u751f\u6210\u5668\u7ec8\u7ed3\u65f6\uff0c\u5b83\u4eec\u8fd8\u4f1a\u81ea\u52a8\u5f15\u53d1 StopIteration \u3002 \u751f\u6210\u5668\u8868\u8fbe\u5f0f Generator Expressions \u67d0\u4e9b\u7b80\u5355\u7684\u751f\u6210\u5668\u53ef\u4ee5\u5199\u6210\u7b80\u6d01\u7684\u8868\u8fbe\u5f0f\u4ee3\u7801\uff0c\u6240\u7528\u8bed\u6cd5\u7c7b\u4f3c\u5217\u8868\u63a8\u5bfc\u5f0f\uff0c\u4f46\u5916\u5c42\u4e3a\u5706\u62ec\u53f7\u800c\u975e\u65b9\u62ec\u53f7\u3002 \u8fd9\u79cd\u8868\u8fbe\u5f0f\u88ab\u8bbe\u8ba1\u7528\u4e8e\u751f\u6210\u5668\u5c06\u7acb\u5373\u88ab\u5916\u5c42\u51fd\u6570\u6240\u4f7f\u7528\u7684\u60c5\u51b5\u3002 \u751f\u6210\u5668\u8868\u8fbe\u5f0f\u76f8\u6bd4\u5b8c\u6574\u7684\u751f\u6210\u5668\u66f4\u7d27\u51d1\u4f46\u8f83\u4e0d\u7075\u6d3b\uff0c\u76f8\u6bd4\u7b49\u6548\u7684\u5217\u8868\u63a8\u5bfc\u5f0f\u5219\u66f4\u4e3a\u8282\u7701\u5185\u5b58\u3002 \u793a\u4f8b: >>> sum(i * i for i in range(10)) # sum of squares 285 >>> xvec = [10, 20, 30] >>> yvec = [7, 5, 3] >>> sum(x * y for x, y in zip(xvec, yvec)) # dot product 260 >>> unique_words = set(word for line in page for word in line.split()) >>> valedictorian = max((student.gpa, student.name) for student in graduates) >>> data = 'golf' >>> list(data[i] for i in range(len(data)-1, -1, -1)) ['f', 'l', 'o', 'g'] \u591a\u6001 Polymorphism \u591a\u6001\u610f\u5473\u7740\u76f8\u540c\u7684\u51fd\u6570\u540d\u7528\u4e8e\u4e0d\u540c\u7684\u60c5\u5f62\u3002 \u5982\u4e0b\u4f8b\uff0c len() \u88ab\u7528\u4e8e\u4e0d\u540c\u7684\u60c5\u5f62\u3002 # len() being used for a string print(len(\"geeks\")) # 5 # len() being used for a list print(len([10, 20, 30])) # 3 \u7c7b\u65b9\u6cd5\u7684\u591a\u6001\u6027 \u4e0b\u9762\u7684\u4ee3\u7801\u5c55\u793a\u4e86 Python \u5982\u4f55\u4ee5\u76f8\u540c\u7684\u65b9\u5f0f\u4f7f\u7528\u4e24\u79cd\u4e0d\u540c\u7684\u7c7b\u7c7b\u578b\u3002 \u6211\u4eec\u521b\u5efa\u4e86\u4e00\u4e2a\u904d\u5386\u5bf9\u8c61\u5143\u7ec4\u7684 for \u5faa\u73af\u3002 \u7136\u540e\u8c03\u7528\u65b9\u6cd5\u800c\u4e0d\u7528\u5173\u5fc3\u6bcf\u4e2a\u5bf9\u8c61\u662f\u54ea\u4e2a\u7c7b\u7c7b\u578b\u3002 \u6211\u4eec\u5047\u8bbe\u8fd9\u4e9b\u65b9\u6cd5\u5b9e\u9645\u4e0a\u5b58\u5728\u4e8e\u6bcf\u4e2a\u7c7b\u4e2d\u3002 class India(): def capital(self): print(\"New Delhi is the capital of India.\") def language(self): print(\"Hindi is the most widely spoken language of India.\") def type(self): print(\"India is a developing country.\") class USA(): def capital(self): print(\"Washington, D.C. is the capital of USA.\") def language(self): print(\"English is the primary language of USA.\") def type(self): print(\"USA is a developed country.\") obj_ind = India() obj_usa = USA() for country in (obj_ind, obj_usa): country.capital() country.language() country.type() # New Delhi is the capital of India. # Hindi is the most widely spoken language of India. # India is a developing country. # Washington, D.C. is the capital of USA. # English is the primary language of USA. # USA is a developed country. \u7ee7\u627f\u7684\u591a\u6001\u6027 \u5728 Python \u4e2d\uff0c\u591a\u6001\u5141\u8bb8\u6211\u4eec\u5728\u5b50\u7c7b\u4e2d\u5b9a\u4e49\u4e0e\u7236\u7c7b\u4e2d\u7684\u65b9\u6cd5\u540c\u540d\u7684\u65b9\u6cd5\u3002 \u5728\u7ee7\u627f\u4e2d\uff0c\u5b50\u7c7b\u7ee7\u627f\u7236\u7c7b\u7684\u65b9\u6cd5\u3002 \u4f46\u662f\uff0c\u53ef\u4ee5\u4fee\u6539\u4ece\u7236\u7c7b\u7ee7\u627f\u7684\u5b50\u7c7b\u4e2d\u7684\u65b9\u6cd5\u3002 \u8fd9\u5728\u4ece\u7236\u7c7b\u7ee7\u627f\u7684\u65b9\u6cd5\u4e0d\u592a\u9002\u5408\u5b50\u7c7b\u7684\u60c5\u51b5\u4e0b\u7279\u522b\u6709\u7528\u3002 \u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u5728\u5b50\u7c7b\u4e2d\u91cd\u65b0\u5b9e\u73b0\u8be5\u65b9\u6cd5\u3002 \u8fd9\u79cd\u5728\u5b50\u7c7b\u4e2d\u91cd\u65b0\u5b9e\u73b0\u65b9\u6cd5\u7684\u8fc7\u7a0b\u79f0\u4e3a \u65b9\u6cd5\u8986\u76d6\uff08Method Overriding\uff09 \u3002 class Bird: def intro(self): print(\"There are many types of birds.\") def flight(self): print(\"Most of the birds can fly but some cannot.\") class sparrow(Bird): def flight(self): print(\"Sparrows can fly.\") class ostrich(Bird): def flight(self): print(\"Ostriches cannot fly.\") obj_bird = Bird() obj_spr = sparrow() obj_ost = ostrich() obj_bird.intro() # There are many types of birds. obj_bird.flight() # Most of the birds can fly but some cannot. obj_spr.intro() # There are many types of birds. obj_spr.flight() # Sparrows can fly. obj_ost.intro() # There are many types of birds. obj_ost.flight() # Ostriches cannot fly. \u51fd\u6570\u548c\u5bf9\u8c61\u7684\u591a\u6001\u6027 \u6211\u4eec\u4e5f\u53ef\u4ee5\u521b\u5efa\u4e00\u4e2a\u53ef\u4ee5\u63a5\u53d7\u4efb\u4f55\u5bf9\u8c61\u7684\u51fd\u6570\uff0c\u5141\u8bb8\u591a\u6001\u6027\u3002 \u5728\u4e0b\u9762\u4f8b\u5b50\u4e2d\uff0c\u6211\u4eec\u521b\u5efa\u4e00\u4e2a\u540d\u4e3a func() \u7684\u51fd\u6570\uff0c\u4f20\u5165\u53c2\u6570\u662f obj \u7684\u5bf9\u8c61\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u8c03\u7528\u4e09\u4e2a\u65b9\u6cd5\uff0c\u5373 capital() \u3001 language() \u548c type() \uff0c\u6bcf\u4e2a\u65b9\u6cd5\u90fd\u5b9a\u4e49\u5728 India \u548c USA \u4e24\u4e2a\u7c7b\u4e2d\u3002 \u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u76f8\u540c\u7684 func() \u51fd\u6570\u8c03\u7528\u5b83\u4eec\u7684\u52a8\u4f5c\uff1a class India(): def capital(self): print(\"New Delhi is the capital of India.\") def language(self): print(\"Hindi is the most widely spoken language of India.\") def type(self): print(\"India is a developing country.\") class USA(): def capital(self): print(\"Washington, D.C. is the capital of USA.\") def language(self): print(\"English is the primary language of USA.\") def type(self): print(\"USA is a developed country.\") def func(obj): obj.capital() obj.language() obj.type() obj_ind = India() obj_usa = USA() func(obj_ind) # New Delhi is the capital of India. # Hindi is the most widely spoken language of India. # India is a developing country. func(obj_usa) # Washington, D.C. is the capital of USA. # English is the primary language of USA. # USA is a developed country. \u9e2d\u5b50\u7c7b\u578b(Ducking Typing) \u9e2d\u5b50\u7c7b\u578b\u662f\u591a\u6001\u4e00\u79cd\u5f62\u5f0f\u3002\u6211\u4eec\u53ef\u4ee5\u9a8c\u8bc1\uff0c\u4e00\u4e2a\u5bf9\u8c61\u5982\u679c\u5b9e\u73b0\u4e86\u8fed\u4ee3\u5668\u534f\u8bae\uff0c\u90a3\u5b83\u4e00\u5b9a\u662f\u53ef\u4ee5\u8fed\u4ee3\u7684\u3002 def isiterable(obj): try: iter(obj) return True except TypeError: return False \u53ea\u80fd\u8f93\u5165\u4e00\u4e2aobject, \u63a5\u53d7\u591a\u79cd\u7c7b\u578b\u8f93\u5165\u3002 print(isiterable('a string')) # True print(isiterable([1, 2, 3])) # True print(isiterable(5)) # False","title":"Python\u7684\u7c7b(Class)"},{"location":"python/Foundation/ch04/#pythonclass","text":"\u7c7b(class)\u628a\u6570\u636e\u4e0e\u529f\u80fd\u7ed1\u5b9a\u5728\u4e00\u8d77\u3002\u521b\u5efa\u65b0\u7c7b\u5c31\u662f\u521b\u5efa\u65b0\u7684\u5bf9\u8c61\u7c7b\u578b\uff08type of object\uff09\uff0c\u4ece\u800c\u521b\u5efa\u8be5\u7c7b\u578b\u7684\u65b0\u5b9e\u4f8b\uff08instances\uff09\u3002 \u7c7b\u5b9e\u4f8b\u5177\u6709\u591a\u79cd\u4fdd\u6301\u81ea\u8eab\u72b6\u6001\u7684\u5c5e\u6027\uff08attributes\uff09\u3002 \u7c7b\u5b9e\u4f8b\u8fd8\u652f\u6301\uff08\u7531\u7c7b\u5b9a\u4e49\u7684\uff09\u4fee\u6539\u81ea\u8eab\u72b6\u6001\u7684\u65b9\u6cd5\uff08methods\uff09\u3002 Python\u7684\u7c7b\u652f\u6301\u6240\u6709\u9762\u5411\u5bf9\u8c61\u7f16\u7a0b\uff08OOP\uff09\u7684\u6807\u51c6\u7279\u6027\uff1a \u7c7b\u7ee7\u627f\uff08class inheritance\uff09\u673a\u5236\u652f\u6301\u591a\u4e2a\u57fa\u7c7b\uff08base classes\uff09\uff1b \u6d3e\u751f\u7c7b\uff08derived class\uff09\u53ef\u4ee5\u8986\u76d6\u57fa\u7c7b\u7684\u4efb\u4f55\u65b9\u6cd5\uff08methods\uff09\uff1b \u7c7b\u7684\u65b9\u6cd5\u53ef\u4ee5\u8c03\u7528\u57fa\u7c7b\u4e2d\u76f8\u540c\u540d\u79f0\u7684\u65b9\u6cd5 \u5bf9\u8c61\u53ef\u4ee5\u5305\u542b\u4efb\u610f\u6570\u91cf\u548c\u7c7b\u578b\u7684\u6570\u636e\u3002 \u7c7b\uff08class\uff09\u548c\u6a21\u5757\uff08module\uff09\u90fd\u62e5\u6709\u52a8\u6001\u7279\u6027\uff08dynamic nature\uff09\uff1a\u5728\u8fd0\u884c\u65f6\u521b\u5efa\uff0c\u521b\u5efa\u540e\u4e5f\u53ef\u4ee5\u4fee\u6539\u3002","title":"Python\u7684\u7c7b(Class)"},{"location":"python/Foundation/ch04/#namesobjects","text":"\u5bf9\u8c61\u4e4b\u95f4\u76f8\u4e92\u72ec\u7acb\uff0c\u591a\u4e2a\u540d\u79f0\uff08names\uff09\uff08\u5728\u591a\u4e2a\u4f5c\u7528\u57df\u5185\uff09\u53ef\u4ee5\u7ed1\u5b9a\u5230\u540c\u4e00\u4e2a\u5bf9\u8c61\u3002 \u5176\u4ed6\u8bed\u8a00\u79f0\u4e4b\u4e3a\u522b\u540d\uff08alias\uff09\u3002 \u522b\u540d\u5728\u67d0\u4e9b\u65b9\u9762\u5c31\u50cf\u6307\u9488\u3002\u4f8b\u5982\uff0c\u4f20\u9012\u5bf9\u8c61\u7684\u4ee3\u4ef7\u5f88\u5c0f\uff0c\u56e0\u4e3a\u5b9e\u73b0\u53ea\u4f20\u9012\u4e00\u4e2a\u6307\u9488\uff1b\u5982\u679c\u51fd\u6570\u4fee\u6539\u4e86\u4f5c\u4e3a\u53c2\u6570\u4f20\u9012\u7684\u5bf9\u8c61\uff0c\u8c03\u7528\u8005\u5c31\u53ef\u4ee5\u770b\u5230\u66f4\u6539\u3002","title":"\u540d\u79f0Names\u548c\u5bf9\u8c61Objects"},{"location":"python/Foundation/ch04/#scopesnamespaces","text":"\u547d\u540d\u7a7a\u95f4\uff08namespace\uff09 \u662f\u4e00\u4e2a\u4ece\u540d\u5b57\u5230\u5bf9\u8c61\u7684\u6620\u5c04\u3002 \u5f53\u524d\u5927\u90e8\u5206\u547d\u540d\u7a7a\u95f4\u90fd\u7531 Python \u5b57\u5178\u5b9e\u73b0\u3002 \u4e0b\u9762\u662f\u51e0\u4e2a\u547d\u540d\u7a7a\u95f4\u7684\u4f8b\u5b50\uff1a \u5b58\u653e\u5185\u7f6e\u51fd\u6570\u7684\u96c6\u5408\uff08\u5305\u542b abs() \u8fd9\u6837\u7684\u51fd\u6570\uff0c\u548c\u5185\u5efa\u7684\u5f02\u5e38\u7b49\uff09\uff1b \u6a21\u5757\u4e2d\u7684\u5168\u5c40\u540d\u79f0\uff1b \u51fd\u6570\u8c03\u7528\u4e2d\u7684\u5c40\u90e8\u540d\u79f0\uff1b \u4ece\u67d0\u79cd\u610f\u4e49\u4e0a\u8bf4\uff0c\u5bf9\u8c61\u7684\u5c5e\u6027\u96c6\u5408\uff08the set of attributes of an object\uff09\u4e5f\u662f\u4e00\u79cd\u547d\u540d\u7a7a\u95f4\u7684\u5f62\u5f0f\u3002 \u5173\u4e8e\u547d\u540d\u7a7a\u95f4\u7684\u91cd\u8981\u4e00\u70b9\u662f\uff0c\u4e0d\u540c\u547d\u540d\u7a7a\u95f4\u4e2d\u7684\u540d\u79f0\u4e4b\u95f4\u7edd\u5bf9\u6ca1\u6709\u5173\u7cfb\uff1b \u4f8b\u5982\uff0c\u5728\u4e24\u4e2a\u4e0d\u540c\u7684\u6a21\u5757\u4e2d\u90fd\u53ef\u4ee5\u5b9a\u4e49\u4e00\u4e2a maximize \u51fd\u6570\u800c\u4e0d\u4f1a\u4ea7\u751f\u6df7\u6dc6\uff0c\u4f46\u5728\u8c03\u7528 maximize \u51fd\u6570\u65f6\u5fc5\u987b\u5fc5\u987b\u5728\u5176\u524d\u9762\u52a0\u4e0a\u6a21\u5757\u540d\u79f0\u3002 \u4efb\u4f55\u8ddf\u5728\u4e00\u4e2a\u70b9\u53f7\u4e4b\u540e\u7684\u540d\u79f0\u90fd\u79f0\u4e3a \u5c5e\u6027\uff08attribute\uff09 \u3002\u4f8b\u5982\uff0c\u5728\u8868\u8fbe\u5f0f z.real \u4e2d\uff0c real \u662f\u5bf9\u8c61 z \u7684\u4e00\u4e2a\u5c5e\u6027\u3002 \u6309\u4e25\u683c\u7684\u8bf4\u6cd5\uff0c \u5bf9\u6a21\u5757\uff08module\uff09\u4e2d\u7684\u540d\u79f0\u7684\u5f15\u7528\uff08reference\uff09\u90fd\u5c5e\u4e8e\u5c5e\u6027\u5f15\u7528\uff08attribute reference\uff09 \uff1a \u5728\u8868\u8fbe\u5f0f modname.funcname \u4e2d\uff0c modname \u662f\u4e00\u4e2a\u6a21\u5757\u5bf9\u8c61\uff08module object\uff09\u800c funcname \u662f\u5b83\u7684\u4e00\u4e2a\u5c5e\u6027\u3002 \u5728\u6b64\u60c5\u51b5\u4e0b\u5728\u6a21\u5757\u7684\u5c5e\u6027\uff08module\u2019s attribute\uff09\u548c\u6a21\u5757\u4e2d\u5b9a\u4e49\u7684\u5168\u5c40\u540d\u79f0\u4e4b\u95f4\u6b63\u597d\u5b58\u5728\u4e00\u4e2a\u76f4\u89c2\u7684\u6620\u5c04\uff1a\u5b83\u4eec\u5171\u4eab\u76f8\u540c\u7684\u547d\u540d\u7a7a\u95f4\u3002 \u4f46\u5b58\u5728\u4e00\u4e2a\u4f8b\u5916\u3002 \u6a21\u5757\u5bf9\u8c61\u6709\u4e00\u4e2a\u53ea\u8bfb\u5c5e\u6027 __dict__ \uff0c\u5b83\u8fd4\u56de\u7528\u4e8e\u5b9e\u73b0\u6a21\u5757\u547d\u540d\u7a7a\u95f4\u7684\u5b57\u5178\uff1b __dict__ \u662f\u5c5e\u6027\u4f46\u4e0d\u662f\u5168\u5c40\u540d\u79f0\u3002 \u4f7f\u7528\u8fd9\u4e2a\u5c06\u8fdd\u53cd\u547d\u540d\u7a7a\u95f4\u5b9e\u73b0\u7684\u62bd\u8c61\uff0c\u5e94\u5f53\u4ec5\u88ab\u7528\u4e8e\u4e8b\u540e\u8c03\u8bd5\u5668\u4e4b\u7c7b\u7684\u573a\u5408\u3002 \u5c5e\u6027\uff08attribute\uff09 \u53ef\u4ee5\u662f\u53ea\u8bfb\u6216\u8005\u53ef\u5199\u7684\uff0c\u6240\u4ee5\u53ef\u4ee5\u5bf9\u5c5e\u6027\u8fdb\u884c\u8d4b\u503c\uff0c\u4f8b\u5982 modname.the_answer = 42 \u3002 \u5220\u9664\u5c5e\u6027\u53ef\u4ee5\u7528del\u8bed\u53e5\uff0c\u4f8b\u5982\uff0c del modname.the_answer \u5c06\u4f1a\u4ece\u540d\u4e3a modname \u7684\u5bf9\u8c61\u4e2d\u79fb\u9664 the_answer \u5c5e\u6027\u3002 \u547d\u540d\u7a7a\u95f4\u5728\u4e0d\u540c\u65f6\u523b\u88ab\u521b\u5efa\uff0c\u62e5\u6709\u4e0d\u540c\u7684\u751f\u5b58\u671f\uff08lifetimes\uff09\u3002\u5305\u542b\u5185\u7f6e\u540d\u79f0\uff08built-in names\uff09\u7684\u547d\u540d\u7a7a\u95f4\u662f\u5728Python\u89e3\u91ca\u5668\u542f\u52a8\u65f6\u521b\u5efa\u7684\uff0c\u6c38\u8fdc\u4e0d\u4f1a\u88ab\u5220\u9664\u3002 \u6a21\u5757\u7684\u5168\u5c40\u547d\u540d\u7a7a\u95f4\uff08global namespace\uff09\u5728\u6a21\u5757\u5b9a\u4e49\u88ab\u8bfb\u5165\u65f6\u521b\u5efa\uff1b\u901a\u5e38\uff0c\u6a21\u5757\u547d\u540d\u7a7a\u95f4\u4e5f\u4f1a\u6301\u7eed\u5230\u89e3\u91ca\u5668\u9000\u51fa\u3002 \u88ab\u89e3\u91ca\u5668\u7684\u9876\u5c42\u8c03\u7528\uff08top-level invocation\uff09\u6267\u884c\u7684\u8bed\u53e5\uff0c\u4ece\u4e00\u4e2a\u811a\u672c\u6587\u4ef6\u8bfb\u53d6\u6216\u4ea4\u4e92\u5f0f\u5730\u8bfb\u53d6\uff0c\u88ab\u8ba4\u4e3a\u662f __main__ \u6a21\u5757\u8c03\u7528\u7684\u4e00\u90e8\u5206\uff0c\u56e0\u6b64\u5b83\u4eec\u62e5\u6709\u81ea\u5df1\u7684\u5168\u5c40\u547d\u540d\u7a7a\u95f4\u3002 \u5185\u7f6e\u540d\u79f0\uff08built-in names\uff09\u5b9e\u9645\u4e0a\u4e5f\u5b58\u5728\u4e8e\u4e00\u4e2a\u6a21\u5757\u4e2d\uff0c\u8fd9\u4e2a\u6a21\u5757\u88ab\u79f0\u4f5c builtins \u3002 \u4e00\u4e2a\u51fd\u6570\u7684\u672c\u5730\u547d\u540d\u7a7a\u95f4\uff08local namespace\uff09\u5728\u8fd9\u4e2a\u51fd\u6570\u88ab\u8c03\u7528\u65f6\u521b\u5efa\uff0c\u5e76\u5728\u51fd\u6570\u8fd4\u56de\u6216\u629b\u51fa\u4e00\u4e2a\u65e0\u6cd5\u5728\u8be5\u51fd\u6570\u5185\u90e8\u5904\u7406\u7684\u9519\u8bef\u65f6\u88ab\u5220\u9664\u3002 \u6bcf\u6b21\u9012\u5f52\u8c03\u7528\uff08recursive invocations\uff09\u90fd\u4f1a\u6709\u5b83\u81ea\u5df1\u7684\u672c\u5730\u547d\u540d\u7a7a\u95f4\u3002 \u4e00\u4e2a \u4f5c\u7528\u57df\uff08scope\uff09 \u662f\u4e00\u4e2a\u547d\u540d\u7a7a\u95f4\u53ef\u76f4\u63a5\u8bbf\u95ee\uff08directly accessible\uff09\u7684Python\u7a0b\u5e8f\u7684\u4ee3\u7801\u533a\u57df\u3002 \u8fd9\u91cc\u7684 \u201c\u53ef\u76f4\u63a5\u8bbf\u95ee\u201d \u610f\u5473\u7740\u4e0d\u52a0\u4efb\u4f55\u9650\u5b9a\u7684\u540d\u79f0\u5f15\u7528\u4f1a\u5728\u547d\u540d\u7a7a\u95f4\u4e2d\u8fdb\u884c\u67e5\u627e\u3002 \u867d\u7136\u4f5c\u7528\u57df\u662f\u9759\u6001\u5730\u786e\u5b9a\u7684\uff0c\u4f46\u5b83\u4eec\u4f1a\u88ab\u52a8\u6001\u5730\u4f7f\u7528\u3002 \u5728\u4ee3\u7801\u6267\u884c\u671f\u95f4\u7684\u4efb\u4f55\u65f6\u523b\uff0c\u4f1a\u67093\u62164\u4e2a\u7684\u5d4c\u5957\u4f5c\u7528\u57df\u4f9b\u547d\u540d\u7a7a\u95f4\u76f4\u63a5\u8bbf\u95ee: \u6700\u5148\u641c\u7d22\u7684\u6700\u5185\u90e8\u4f5c\u7528\u57df\u5305\u542b\u5c40\u90e8\u540d\u79f0 \u4ece\u6700\u8fd1\u7684\u5c01\u95ed\u4f5c\u7528\u57df\u5f00\u59cb\u641c\u7d22\u7684\u4efb\u4f55\u5c01\u95ed\u51fd\u6570\u7684\u4f5c\u7528\u57df\u5305\u542b\u975e\u5c40\u90e8\u540d\u79f0\uff0c\u4e5f\u5305\u62ec\u975e\u5168\u5c40\u540d\u79f0 \u5012\u6570\u7b2c\u4e8c\u4e2a\u4f5c\u7528\u57df\u5305\u542b\u5f53\u524d\u6a21\u5757\u7684\u5168\u5c40\u540d\u79f0 \u6700\u5916\u9762\u7684\u4f5c\u7528\u57df\uff08\u6700\u540e\u641c\u7d22\uff09\u662f\u5305\u542b\u5185\u7f6e\u540d\u79f0\u7684\u547d\u540d\u7a7a\u95f4 \u5982\u679c\u4e00\u4e2a\u540d\u79f0\u88ab\u58f0\u660e\u4e3a\u5168\u5c40\u53d8\u91cf\uff0c\u5219\u6240\u6709\u5f15\u7528\u548c\u8d4b\u503c\u5c06\u76f4\u63a5\u6307\u5411\u8be5\u6a21\u5757\u5168\u5c40\u540d\u79f0\u6240\u5728\u7684\u4e2d\u95f4\u4f5c\u7528\u57df\u3002 \u5982\u679c\u8981\u91cd\u65b0\u7ed1\u5b9a\u5728\u6700\u5185\u5c42\u4f5c\u7528\u57df\u4ee5\u5916\u7684\u53d8\u91cf\uff0c\u53ef\u4ee5\u4f7f\u7528 nonlocal \u8bed\u53e5\u58f0\u660e\u4e3a\u975e\u672c\u5730\u53d8\u91cf\u3002 \u5982\u679c\u6ca1\u6709\u88ab\u58f0\u660e\u4e3a\u975e\u672c\u5730\u53d8\u91cf\uff0c\u8fd9\u4e9b\u53d8\u91cf\u5c06\u662f\u53ea\u8bfb\u7684\u3002\u7ed9\u8fd9\u6837\u7684\u53d8\u91cf\u8d4b\u65b0\u503c\u53ea\u4f1a\u5728\u6700\u5185\u5c42\u4f5c\u7528\u57df\u4e2d\u521b\u5efa\u4e00\u4e2a \u65b0\u7684 \u5c40\u90e8\u53d8\u91cf\uff0c\u800c\u540c\u540d\u7684\u5916\u90e8\u5168\u5c40\u53d8\u91cf\u5c06\u4fdd\u6301\u4e0d\u53d8\u3002 \u901a\u5e38\uff0c\u5f53\u524d\u5c40\u90e8\u4f5c\u7528\u57df\uff08local scope\uff09\u5c06\u5f15\u7528\u5f53\u524d\u51fd\u6570\u4f5c\u7528\u57df\u7684\u540d\u79f0\uff08local name\uff09\u3002 \u5728\u51fd\u6570\u4f5c\u7528\u57df\u4ee5\u5916\uff0c\u5f53\u524d\u5c40\u90e8\u4f5c\u7528\u57df\u5c06\u5f15\u7528\u4e0e\u5168\u5c40\u4f5c\u7528\u57df\u76f8\u4e00\u81f4\u7684\u547d\u540d\u7a7a\u95f4\uff1a\u6a21\u5757\u7684\u547d\u540d\u7a7a\u95f4\uff08the module\u2019s namespace\uff09\u3002 \u5b9a\u4e49\u4e00\u4e2a\u7c7b\uff0c\u662f\u5728\u672c\u5730\u5c40\u90e8\u547d\u540d\u7a7a\u95f4\u5185\u5efa\u4e00\u4e2a\u65b0\u7684\u547d\u540d\u7a7a\u95f4\u3002 \u5728\u4e00\u4e2a\u6a21\u5757\uff08module \uff09\u5185\u5b9a\u4e49\u7684\u51fd\u6570\u7684\u4f5c\u7528\u57df\u5c31\u662f\u8be5\u6a21\u5757\u7684\u547d\u540d\u7a7a\u95f4\uff0c\u65e0\u8bba\u8be5\u51fd\u6570\u4ece\u4ec0\u4e48\u5730\u65b9\u6216\u4ee5\u4ec0\u4e48\u522b\u540d\u88ab\u8c03\u7528\u3002 \u53e6\u4e00\u65b9\u9762\uff0c\u5b9e\u9645\u7684\u540d\u79f0\u641c\u7d22\u662f\u5728\u8fd0\u884c\u65f6\u52a8\u6001\u5b8c\u6210\u7684\u3002 \u4f46\u662f\uff0cPython\u6b63\u5728\u671d\u7740\u201c\u7f16\u8bd1\u65f6\u9759\u6001\u540d\u79f0\u89e3\u6790\u201d\u7684\u65b9\u5411\u53d1\u5c55\uff0c\u56e0\u6b64\u4e0d\u8981\u8fc7\u4e8e\u4f9d\u8d56\u52a8\u6001\u540d\u79f0\u89e3\u6790\uff01\u4e8b\u5b9e\u4e0a\uff0c\u5c40\u90e8\u53d8\u91cf\u5df2\u7ecf\u662f\u88ab\u9759\u6001\u786e\u5b9a\u4e86\u3002 \u5982\u679c\u4e0d\u5b58\u5728\u751f\u6548\u7684 global \u6216 nonlocal \u8bed\u53e5\uff0c\u5219\u5bf9\u540d\u79f0\u7684\u8d4b\u503c\u603b\u662f\u4f1a\u8fdb\u5165\u6700\u5185\u5c42\u4f5c\u7528\u57df\u3002\u8d4b\u503c\u4e0d\u4f1a\u590d\u5236\u6570\u636e\uff0c\u662f\u5c06\u540d\u79f0\u7ed1\u5b9a\u5230\u5bf9\u8c61\u3002 \u5220\u9664\u4e5f\u662f\u5982\u6b64\uff1a\u8bed\u53e5 del x \u4f1a\u4ece\u5c40\u90e8\u4f5c\u7528\u57df\u6240\u5f15\u7528\u7684\u547d\u540d\u7a7a\u95f4\u4e2d\u79fb\u9664\u5bf9 x \u7684\u7ed1\u5b9a\u3002\u4e8b\u5b9e\u4e0a\uff0c\u6240\u6709\u5f15\u5165\u65b0\u540d\u79f0\u7684\u64cd\u4f5c\u90fd\u662f\u4f7f\u7528\u5c40\u90e8\u4f5c\u7528\u57df\u3002\u7279\u522b\u5730\uff0c import \u8bed\u53e5\u548c\u51fd\u6570\u5b9a\u4e49\u4f1a\u5728\u5c40\u90e8\u4f5c\u7528\u57df\u4e2d\u7ed1\u5b9a\u6a21\u5757\u6216\u51fd\u6570\u540d\u79f0\u3002 global \u8bed\u53e5\u53ef\u88ab\u7528\u6765\u8868\u660e\u7279\u5b9a\u53d8\u91cf\u5b58\u5728\u4e8e\u5168\u5c40\u4f5c\u7528\u57df\uff0c\u5e76\u4e14\u5e94\u5f53\u5728\u5168\u5c40\u4f5c\u7528\u57df\u4e2d\u88ab \u91cd\u65b0 \u7ed1\u5b9a\uff1b nonlocal \u8bed\u53e5\u8868\u660e\u7279\u5b9a\u53d8\u91cf\u751f\u5b58\u4e8e\u5916\u5c42\u4f5c\u7528\u57df\u4e2d\uff0c\u5e76\u4e14\u5e94\u5f53\u5728\u5176\u6240\u5904\u7684\u5916\u5c42\u4f5c\u7528\u57df\u4e2d\u88ab \u91cd\u65b0 \u7ed1\u5b9a\u3002 \u770b\u4e0b\u9762\u7684\u4f8b\u5b50\uff1a \u5c40\u90e8\u8d4b\u503c\uff08local assignment\uff0c\u8fd9\u662f\u9ed8\u8ba4\u72b6\u6001\uff09\u4e0d\u4f1a\u6539\u53d8 scope_test \u5bf9 spam \u7684\u7ed1\u5b9a\u3002 nonlocal \u8d4b\u503c\u4f1a\u6539\u53d8 scope_test \u5bf9 spam \u7684\u7ed1\u5b9a\u3002 global \u8d4b\u503c\u4f1a\u6539\u53d8\u6a21\u5757\u5c42\u7ea7\u7684\u7ed1\u5b9a\uff0c\u5373\uff0c global spam \u91cd\u65b0\u7ed1\u5b9a\u4e86spam\u7684\u5168\u5c40\u5b9a\u4e49\uff0c\u4ece spam = \"spam out of func\" \u53d8\u6210\u4e86 spam = \"global spam\" \u3002\u5982\u679c\u6ce8\u91ca\u6389def do_global()\u8fd9\u4e00\u6bb5\u4ee3\u7801\uff0c\u5219 spam = \"spam out of func\" \u8d77\u4f5c\u7528\u3002 spam = \"spam out of func\" def scope_test(): def do_local(): spam = \"local spam\" def do_nonlocal(): nonlocal spam spam = \"nonlocal spam\" def do_global(): global spam spam = \"global spam\" spam = \"test spam\" do_local() print(\"After local assignment:\", spam) do_nonlocal() print(\"After nonlocal assignment:\", spam) do_global() print(\"After global assignment:\", spam) scope_test() print(\"In global scope:\", spam) # \u8fd0\u884c\u7ed3\u679c # scope_test() After local assignment: test spam After nonlocal assignment: nonlocal spam After global assignment: nonlocal spam # print(\"In global scope:\", spam) In global scope: global spam","title":"\u4f5c\u7528\u57dfScopes\u548c\u547d\u540d\u7a7a\u95f4Namespaces"},{"location":"python/Foundation/ch04/#class","text":"","title":"\u7c7bClass"},{"location":"python/Foundation/ch04/#class-definition","text":"\u7c7b\u5b9a\u4e49\u4e0e\u51fd\u6570\u5b9a\u4e49 (def \u8bed\u53e5) \u4e00\u6837\u5fc5\u987b\u88ab\u6267\u884c\u624d\u4f1a\u8d77\u4f5c\u7528\u3002 class ClassName: <statement-1> ... <statement-N> \u5728\u5b9e\u8df5\u4e2d\uff0c\u7c7b\u5b9a\u4e49\u5185\u7684\u8bed\u53e5\u901a\u5e38\u90fd\u662f\u51fd\u6570\u5b9a\u4e49\uff0c\u4f46\u4e5f\u5141\u8bb8\u6709\u5176\u4ed6\u8bed\u53e5\u3002\u5728\u7c7b\u5185\u90e8\u7684\u51fd\u6570\u5b9a\u4e49\u901a\u5e38\u5177\u6709\u4e00\u79cd\u7279\u6709\u5f62\u5f0f\u7684\u53c2\u6570\u5217\u8868\uff0c\u8fd9\u662f\u7ea6\u5b9a\u7684\u65b9\u6cd5\u89c4\u8303\uff08conventions for methods\uff09\u3002 \u7f16\u8bd1\u8fc7\u7a0b\u4e2d\uff0c\u8fdb\u5165\u4e00\u4e2a\u7c7b\u7684\u5185\u90e8\uff0c\u5c06\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u547d\u540d\u7a7a\u95f4\uff0c\u4e00\u4e2a\u5c40\u90e8\u4f5c\u7528\u57df\u3002\u56e0\u6b64\uff0c\u6240\u6709\u5bf9\u7c7b\u5185\u90e8\u5c40\u90e8\u53d8\u91cf\u7684\u8d4b\u503c\u90fd\u662f\u5728\u8fd9\u4e2a\u65b0\u7684\u547d\u540d\u7a7a\u95f4\u4e4b\u5185\uff0c\u5305\u62ec\u65b0\u5b9a\u4e49\u7684\u51fd\u6570\u540d\u79f0\u3002 \u5f53\u6b63\u5e38\u79bb\u5f00\u4e00\u4e2a\u7c7b\u65f6\uff0c\u7f16\u8bd1\u8fc7\u7a0b\u5c06\u521b\u5efa\u4e00\u4e2a\u7c7b\u5bf9\u8c61\uff08class object\uff09\uff0c\u5c01\u88c5\u4e86\u7c7b\u5b9a\u4e49\u6240\u521b\u5efa\u7684\u547d\u540d\u7a7a\u95f4\u91cc\u7684\u5185\u5bb9\u3002 \u6700\u521d\u7684\uff08\u5728\u8fdb\u5165\u7c7b\u5b9a\u4e49\u4e4b\u524d\u8d77\u4f5c\u7528\u7684\uff09\u5c40\u90e8\u4f5c\u7528\u57df\u5c06\u91cd\u65b0\u751f\u6548\uff0c\u7c7b\u5bf9\u8c61\uff08class object\uff09\u5c06\u5728\u8fd9\u91cc\u88ab\u7ed1\u5b9a\u5230\u7c7b\u5b9a\u4e49\u5934\u90e8\u6240\u58f0\u660e\u7684\u7c7b\u540d\u79f0 (\u5728\u4e0a\u9762\u7684\u793a\u4f8b\u4e2d\u662f ClassName )\u3002","title":"\u7c7b\u5b9a\u4e49 Class Definition"},{"location":"python/Foundation/ch04/#class-objects","text":"\u7c7b\u5bf9\u8c61\u652f\u6301\u4e24\u79cd\u64cd\u4f5c\uff1a\u5c5e\u6027\u5f15\u7528\uff08attribute references\uff09\u548c\u5b9e\u4f8b\u5316\uff08instantiation\uff09\u3002 \u5c5e\u6027\u5f15\u7528\uff08attribute references\uff09 \u4f7f\u7528Python\u4e2d\u5c5e\u6027\u5f15\u7528\u7684\u6807\u51c6\u8bed\u6cd5: obj.name \u3002 \u5b58\u5728\u4e8e\u7c7b\u547d\u540d\u7a7a\u95f4\u4e2d\u7684\u6240\u6709\u540d\u79f0\uff0c\u7c7b\u5bf9\u8c61\u88ab\u521b\u5efa\u65f6\u540c\u65f6\u88ab\u521b\u5efa\u4e86\uff0c\u8fd9\u4e9b\u5c31\u662f\u6709\u6548\u7684\u5c5e\u6027\u540d\u79f0\u3002\u56e0\u6b64\uff0c\u5982\u679c\u7c7b\u5b9a\u4e49\u662f\u5982\u4e0b\u6240\u793a\uff0c\u90a3\u4e48 MyClass.i \u548c MyClass.f \u5c31\u662f\u6709\u6548\u7684\u5c5e\u6027\u5f15\u7528\uff0c\u5c06\u5206\u522b\u8fd4\u56de\u4e00\u4e2a\u6574\u6570\u548c\u4e00\u4e2a\u51fd\u6570\u5bf9\u8c61\u3002 \u7c7b\u5c5e\u6027\u4e5f\u53ef\u4ee5\u88ab\u8d4b\u503c\uff0c\u56e0\u6b64\u53ef\u4ee5\u901a\u8fc7\u8d4b\u503c\u6765\u66f4\u6539 MyClass.i \u7684\u503c\u3002 __doc__ \u4e5f\u662f\u4e00\u4e2a\u6709\u6548\u7684\u5c5e\u6027\uff0c\u5c06\u8fd4\u56de\u6240\u5c5e\u7c7b\u7684\u6587\u6863\u5b57\u7b26\u4e32: \"A simple example class\"\u3002 class MyClass: \"\"\"A simple example class\"\"\" i = 12345 def f(self): return 'hello world' print(MyClass.i) # 12345 print(MyClass.__doc__) # A simple example class MyClass.i = 10 print(MyClass.i) # 10 \u7c7b\u7684 \u5b9e\u4f8b\u5316\uff08instantiation\uff09 \u4f7f\u7528\u51fd\u6570\u8868\u793a\u6cd5\u3002 \u53ef\u4ee5\u628a\u7c7b\u5bf9\u8c61\uff08class object\uff09\u770b\u4f5c\u662f\u4e00\u4e2a\u4e0d\u5e26\u53c2\u6570\u7684\u51fd\u6570\uff0c\u8fd9\u4e2a\u51fd\u6570\u8fd4\u56de\u4e86\u8be5\u7c7b\u7684\u4e00\u4e2a\u65b0\u5b9e\u4f8b\u3002 \u5728\u4e0b\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c x = MyClass() \u521b\u5efa\u4e86 MyClass() \u8fd9\u4e2a\u7c7b\u7684\u4e00\u4e2a\u5b9e\u4f8b\uff0c\u5e76\u8d4b\u503c\u7ed9\u5c40\u90e8\u53d8\u91cf x \u3002 \u5b9e\u4f8b\u5316\u64cd\u4f5c\uff08\u8c03\u7528\u7c7b\u5bf9\u8c61\uff09\u4f1a\u521b\u5efa\u4e00\u4e2a\u7a7a\u5bf9\u8c61\u3002\u8bb8\u591a\u7c7b\u4f1a\u521b\u5efa\u5e26\u6709\u7279\u5b9a\u521d\u59cb\u72b6\u6001\u7684\u81ea\u5b9a\u4e49\u5b9e\u4f8b\u3002\u4e3a\u6b64\u7c7b\u5b9a\u4e49\u4e2d\u9700\u8981\u5305\u542b\u4e00\u4e2a\u540d\u4e3a __init__() \u7684\u7279\u6b8a\u65b9\u6cd5\u3002 \u5f53\u4e00\u4e2a\u7c7b\u5b9a\u4e49\u4e86 __init__() \u65b9\u6cd5\u65f6\uff0c\u7c7b\u7684\u5b9e\u4f8b\u5316\u64cd\u4f5c\u4f1a\u81ea\u52a8\u4e3a\u65b0\u521b\u5efa\u7684\u7c7b\u5b9e\u4f8b\u8c03\u7528 __init__() \u3002 \u66f4\u65b0\u4e0a\u9762\u7684\u4f8b\u5b50\uff0c\u6ce8\u610f __dict__ \u4e24\u6b21\u8fd4\u56de\u7684\u4e0d\u540c\u7684\u5b57\u5178\u3002\u590d\u4e60\u4e00\u4e0b\uff0c\u5728\u547d\u540d\u7a7a\u95f4\u4e2d\u63d0\u5230\uff0c __dict__ \u662f\u5c5e\u6027\u4f46\u4e0d\u662f\u5168\u5c40\u540d\u79f0\uff0c\u8fd4\u56de\u7528\u4e8e\u5b9e\u73b0\u6a21\u5757\u547d\u540d\u7a7a\u95f4\u7684\u5b57\u5178\u3002 class MyClass: \"\"\"A simple example class\"\"\" i = 12345 def f(self): return 'hello world' def __init__(self): self.data = [] x = MyClass() print(x.__dict__) # {'data': []} x.i = 10 print(x.__dict__) # {'data': [], 'i': 10} __init__() \u65b9\u6cd5\u53ef\u4ee5\u6709\u989d\u5916\u7684\u53c2\u6570\u8f93\u5165\uff0c\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u7c7b\u5b9e\u4f8b\u5316\u7684\u53c2\u6570\u5c06\u88ab\u4f20\u9012\u7ed9 __init__() \u3002 \u5982\u4e0b\u4f8b: class Complex: def __init__(self, realpart, imagpart): self.r = realpart self.i = imagpart x = Complex(3.0, -4.5) print(x.r, x.i) # 3.0 -4.5","title":"\u7c7b\u5bf9\u8c61 Class Objects"},{"location":"python/Foundation/ch04/#instance-objects","text":"\u5bf9\u5b9e\u4f8b\u5bf9\u8c61\u552f\u4e00\u7684\u64cd\u4f5c\u662f\u5c5e\u6027\u5f15\u7528\u3002\u6709\u4e24\u79cd\u6709\u6548\u7684\u5c5e\u6027\u540d\u79f0\uff1a\u6570\u636e\u5c5e\u6027\uff08data attributes\uff09\u548c\u65b9\u6cd5\uff08methods\uff09\u3002 \u6570\u636e\u5c5e\u6027\uff08data attributes\uff09 \u7c7b\u4f3c\u4e8e\u5b9e\u4f8b\u53d8\u91cf\uff0c\u6570\u636e\u5c5e\u6027\u4e0d\u9700\u8981\u58f0\u660e\u3002\u50cf\u5c40\u90e8\u53d8\u91cf\u4e00\u6837\uff0c\u6570\u636e\u5c5e\u6027\u5c06\u5728\u7b2c\u4e00\u6b21\u88ab\u8d4b\u503c\u65f6\u4ea7\u751f\u3002 \u4f8b\u5982\uff0c\u5982\u679c x \u662f\u4e0a\u9762\u521b\u5efa\u7684 MyClass \u7684\u5b9e\u4f8b\uff0c\u5219\u4ee5\u4e0b\u4ee3\u7801\u6bb5\u5c06\u6253\u5370\u6570\u503c 16 \uff0c\u4e14\u6ca1\u6709\u7559\u4e0b\u5173\u4e8e x.counter \u7684\u75d5\u8ff9\u3002 class MyClass: \"\"\"A simple example class\"\"\" i = 12345 def f(self): return 'hello world' def __init__(self): self.data = [] x = MyClass() x.counter = 1 while x.counter < 10: x.counter = x.counter * 2 print(x.counter) # 16 print(x.__dict__) # {'data': [], 'counter': 16} del x.counter print(x.__dict__) # {'data': []} \u53e6\u4e00\u7c7b\u5b9e\u4f8b\u5c5e\u6027\u5f15\u7528\u79f0\u4e3a \u65b9\u6cd5\uff08methods\uff09 \u3002 \u65b9\u6cd5\u662f\u96b6\u5c5e\u4e8e\u5bf9\u8c61\u7684 \u51fd\u6570 \u3002 \u5728Python\u4e2d\uff0c\u65b9\u6cd5\u8fd9\u4e2a\u672f\u8bed\u5e76\u4e0d\u662f\u7c7b\u5b9e\u4f8b\u6240\u7279\u6709\u7684\uff0c\u5176\u4ed6\u5bf9\u8c61\u4e5f\u53ef\u4ee5\u6709\u65b9\u6cd5\u3002 \u4f8b\u5982\uff0c\u5217\u8868\u5bf9\u8c61\uff08list objects\uff09\u5177\u6709append, insert, remove, sort\u7b49\u65b9\u6cd5\u3002 \u5728\u4ee5\u4e0b\u8ba8\u8bba\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528\u65b9\u6cd5\u4e00\u8bcd\u5c06\u4e13\u6307\u7c7b\u5b9e\u4f8b\u5bf9\u8c61\u7684\u65b9\u6cd5\uff0c\u9664\u975e\u53e6\u5916\u660e\u786e\u8bf4\u660e\u3002 \u5b9e\u4f8b\u5bf9\u8c61\u7684\u6709\u6548\u65b9\u6cd5\u540d\u79f0\u4f9d\u8d56\u4e8e\u5176\u6240\u5c5e\u7684\u7c7b\u3002 \u6839\u636e\u5b9a\u4e49\uff0c\u4e00\u4e2a\u7c7b\u5b9a\u4e49\u4e2d\u6240\u5305\u542b\u7684\u6240\u6709\u51fd\u6570\u5bf9\u8c61\uff08function objects\uff09\u90fd\u79f0\u4e3a\u5c5e\u6027\u3002 \u56e0\u6b64\u5728\u4e0a\u9762\u7684\u793a\u4f8b\u4e2d\uff0c x.f \u662f\u6709\u6548\u7684\u65b9\u6cd5\u5f15\u7528\uff0c\u56e0\u4e3a MyClass.f \u662f\u4e00\u4e2a\u51fd\u6570\uff0c\u800c x.i \u4e0d\u662f\u65b9\u6cd5\uff0c\u56e0\u4e3a MyClass.i \u4e0d\u662f\u51fd\u6570\u3002\u4f46\u662f x.f \u4e0e MyClass.f \u5e76\u4e0d\u662f\u4e00\u56de\u4e8b\uff0c x.f \u662f\u4e00\u4e2a \u65b9\u6cd5\u5bf9\u8c61 \uff0c\u800c MyClass.f \u662f\u4e00\u4e2a \u51fd\u6570\u5bf9\u8c61 \u3002\u5dee\u522b\u5728\u4e8e f() \u662f\u5426\u4e0e\u5b9e\u4f8b\u7ed1\u5b9a\uff0c\u672a\u7ed1\u5b9a\uff0c\u5c31\u662f\u51fd\u6570\uff0c\u7ed1\u5b9a\uff0c\u5c31\u662f\u65b9\u6cd5\u3002 class MyClass: \"\"\"A simple example class\"\"\" i = 12345 def f(self): return 'hello world' def __init__(self): self.data = [] x = MyClass() print(MyClass.f(0)) # hello world print(x.f()) # hello world print(MyClass.f) # <function MyClass.f at 0x7ff9368b3488> print(x.f) # <bound method MyClass.f of <__main__.MyClass object at 0x7ff9368acbe0>> print(type(MyClass.f)) # <class 'function'> print(type(x.f)) # <class 'method'> \u8fd9\u91cc\u505a\u4e2a\u5c0f\u7ed3\uff1a \u51fd\u6570(function)\u662fPython\u4e2d\u4e00\u4e2a\u53ef\u8c03\u7528\u5bf9\u8c61(callable), \u65b9\u6cd5(method)\u662f\u4e00\u79cd\u7279\u6b8a\u7684\u51fd\u6570\u3002 \u4e00\u4e2a\u53ef\u8c03\u7528\u5bf9\u8c61\u662f\u65b9\u6cd5\u548c\u51fd\u6570\uff0c\u548c\u8fd9\u4e2a\u5bf9\u8c61\u65e0\u5173\uff0c\u4ec5\u548c\u8fd9\u4e2a\u5bf9\u8c61\u662f\u5426\u4e0e\u7c7b\u6216\u5b9e\u4f8b\u7ed1\u5b9a\u6709\u5173\uff08bound method\uff09\u3002 \u9759\u6001\u65b9\u6cd5\u6ca1\u6709\u548c\u4efb\u4f55\u7c7b\u6216\u5b9e\u4f8b\u7ed1\u5b9a\uff0c\u6240\u4ee5 \u9759\u6001\u65b9\u6cd5\u662f\u4e2a\u51fd\u6570 \u3002","title":"\u5b9e\u4f8b\u5bf9\u8c61 Instance Objects"},{"location":"python/Foundation/ch04/#method-objects","text":"\u5728 MyClass \u793a\u4f8b\u4e2d\uff0c x.f() \u662f\u4e00\u4e2a\u65b9\u6cd5\u5bf9\u8c61\uff0c\u88ab\u8c03\u7528\u540e\uff0c\u5c06\u8fd4\u56de\u5b57\u7b26\u4e32 'hello world' \u3002\u53ef\u4ee5\u7acb\u5373\u8c03\u7528\uff0c\u4e5f\u53ef\u4ee5\u4fdd\u5b58\u8d77\u6765\u4ee5\u540e\u518d\u8c03\u7528 xf = x.f \u3002 \u867d\u7136 f() \u7684\u51fd\u6570\u5b9a\u4e49\u6307\u5b9a\u4e86\u4e00\u4e2a\u53c2\u6570\uff0c\u4f46\u4e0a\u9762\u4f8b\u5b50\u4e2d\u8c03\u7528 x.f() \u65f6\u5e76\u6ca1\u6709\u5e26\u53c2\u6570\uff0c\u4e5f\u6ca1\u6709\u5f15\u53d1\u5f02\u5e38\u62a5\u9519\u3002\u539f\u56e0\u5728\u4e8e\uff0c \u65b9\u6cd5(method)\u7684\u7279\u6b8a\u4e4b\u5904\u5c31\u5728\u4e8e\u5b9e\u4f8b\u5bf9\u8c61\u4f1a\u4f5c\u4e3a\u51fd\u6570\u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\u88ab\u4f20\u5165\u3002 \u8c03\u7528 x.f() \u5176\u5b9e\u5c31\u76f8\u5f53\u4e8e MyClass.f(x) \u3002 \u603b\u4e4b\uff0c\u8c03\u7528\u4e00\u4e2a\u5177\u6709 n \u4e2a\u53c2\u6570\u7684\u65b9\u6cd5(method)\u5c31\u76f8\u5f53\u4e8e\u8c03\u7528\u518d\u591a\u4e00\u4e2a\u53c2\u6570\u7684\u5bf9\u5e94\u51fd\u6570\uff0c\u8fd9\u4e2a\u53c2\u6570\u503c\u4e3a\u65b9\u6cd5\u6240\u5c5e\u5b9e\u4f8b\u5bf9\u8c61\uff0c \u4f4d\u7f6e\u5728\u5176\u4ed6\u53c2\u6570\u4e4b\u524d \u3002 \u5f53\u4e00\u4e2a\u5b9e\u4f8b\u7684\u975e\u6570\u636e\u5c5e\u6027\u88ab\u5f15\u7528\u65f6\uff0c\u5c06\u641c\u7d22\u5b9e\u4f8b\u6240\u5c5e\u7684\u7c7b\u3002 \u5982\u679c\u88ab\u5f15\u7528\u7684\u5c5e\u6027\u540d\u79f0\u662f\u7c7b\u4e2d\u4e00\u4e2a\u6709\u6548\u7684\u51fd\u6570\u5bf9\u8c61\uff0c\u5219\u4f1a\u521b\u5efa\u4e00\u4e2a\u62bd\u8c61\u7684\u5bf9\u8c61\uff0c\u901a\u8fc7\u6253\u5305\uff08parking\uff0c\u5373\u6307\u5411\uff09\u5339\u914d\u5230\u7684\u5b9e\u4f8b\u5bf9\u8c61\u548c\u51fd\u6570\u5bf9\u8c61\uff0c\u8fd9\u4e2a\u62bd\u8c61\u5bf9\u8c61\u5c31\u662f\u65b9\u6cd5\u5bf9\u8c61\u3002 \u5f53\u5e26\u53c2\u6570\u8c03\u7528\u65b9\u6cd5\u5bf9\u8c61\u65f6\uff0c\u5c06\u57fa\u4e8e\u5b9e\u4f8b\u5bf9\u8c61\u548c\u53c2\u6570\u5217\u8868\u6784\u5efa\u4e00\u4e2a\u65b0\u7684\u53c2\u6570\u5217\u8868\uff0c\u5e76\u4f7f\u7528\u8fd9\u4e2a\u65b0\u53c2\u6570\u5217\u8868\u8c03\u7528\u76f8\u5e94\u7684\u51fd\u6570\u5bf9\u8c61\u3002","title":"\u65b9\u6cd5\u5bf9\u8c61 Method Objects"},{"location":"python/Foundation/ch04/#class-and-instance-variables","text":"\u4e00\u822c\u6765\u8bf4\uff0c \u5b9e\u4f8b\u53d8\u91cf \u7528\u4e8e\u6bcf\u4e2a\u5b9e\u4f8b\u7684\u552f\u4e00\u6570\u636e\uff0c\u800c \u7c7b\u53d8\u91cf \u7528\u4e8e\u7c7b\u7684\u6240\u6709\u5b9e\u4f8b\u5171\u4eab\u7684\u5c5e\u6027\u548c\u65b9\u6cd5: class Dog: kind = 'canine' # class variable shared by all instances def __init__(self, name): self.name = name # instance variable unique to each instance d = Dog('Fido') e = Dog('Buddy') print(d.kind) # shared by all dogs # 'canine' print(e.kind) # shared by all dogs # 'canine' print(d.name) # unique to d instance # 'Fido' print(e.name) # unique to e instance # 'Buddy' \u4e0b\u4ee3\u7801\u4e2d\u7684 tricks \u5217\u8868\u4e0d\u5e94\u8be5\u88ab\u7528\u4f5c\u7c7b\u53d8\u91cf\uff0c\u56e0\u4e3a\u6240\u6709\u7684 Dog \u5b9e\u4f8b\u5c06\u53ea\u5171\u4eab\u4e00\u4e2a\u5355\u72ec\u7684\u5217\u8868: class Dog: kind = 'canine' # class variable shared by all instances tricks = [] # mistaken use of a class variable def __init__(self, name): self.name = name # instance variable unique to each instance def add_trick(self, trick): self.tricks.append(trick) d = Dog('Fido') e = Dog('Buddy') d.add_trick('roll over') e.add_trick('play dead') print(d.tricks) # ['roll over', 'play dead'] \u6b63\u786e\u7684\u7c7b\u8bbe\u8ba1\u5e94\u8be5\u4f7f\u7528\u5b9e\u4f8b\u53d8\u91cf: class Dog: kind = 'canine' # class variable shared by all instances def __init__(self, name): self.name = name # instance variable unique to each instance self.tricks = [] # creates a new empty list for each dog def add_trick(self, trick): self.tricks.append(trick) d = Dog('Fido') e = Dog('Buddy') d.add_trick('roll over') e.add_trick('play dead') print(d.tricks) # ['roll over'] print(e.tricks) # ['play dead'] \u5982\u679c\u540c\u6837\u7684\u5c5e\u6027\u540d\u79f0\u540c\u65f6\u51fa\u73b0\u5728\u5b9e\u4f8b\u548c\u7c7b\u4e2d\uff0c\u5219\u5c5e\u6027\u67e5\u627e\u4f1a \u4f18\u5148\u9009\u62e9\u5b9e\u4f8b : class Warehouse: purpose = 'storage' region = 'west' w1 = Warehouse() print(w1.purpose, w1.region) # storage west w2 = Warehouse() w2.region = 'east' # Instance W2 has higher priority than class print(w2.purpose, w2.region) # storage east \u6570\u636e\u5c5e\u6027\uff08Data attributes\uff09\u53ef\u4ee5\u88ab\u65b9\u6cd5\uff08method\uff09\u4ee5\u53ca\u4e00\u4e2a\u5bf9\u8c61\u7684\u666e\u901a\u7528\u6237\uff08ordinary users\uff09\uff08\u201c\u5ba2\u6237\u7aefClient\u201d\uff09\u6240\u5f15\u7528\u3002 \u6362\u53e5\u8bdd\u8bf4\uff0c\u7c7b\u4e0d\u80fd\u7528\u4e8e\u5b9e\u73b0\u7eaf\u62bd\u8c61\u6570\u636e\u7c7b\u578b\u3002 \u65b9\u6cd5\u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\u5e38\u5e38\u88ab\u547d\u540d\u4e3a self \uff0c\u8fd9\u53ea\u662f\u4e00\u4e2a\u7ea6\u5b9a: self \u8fd9\u4e00\u540d\u79f0\u5728Python\u4e2d\u6ca1\u6709\u7279\u6b8a\u542b\u4e49\u3002 \u4f46\u662f\u9075\u5faa\u6b64\u7ea6\u5b9a\u4f1a\u4f7f\u5f97\u4ee3\u7801\u5177\u6709\u5f88\u597d\u7684\u53ef\u8bfb\u6027\u3002 \u4efb\u4f55\u4e00\u4e2a\u4f5c\u4e3a\u7c7b\u5c5e\u6027\uff08class attribute\uff09\u7684\u51fd\u6570\u5bf9\u8c61\uff08function object\uff09\u90fd\u4e3a\u8be5\u7c7b\u7684\u5b9e\u4f8b\u5b9a\u4e49\u4e86\u4e00\u4e2a\u76f8\u5e94\u65b9\u6cd5\u3002 \u51fd\u6570\u5b9a\u4e49\u7684\u6587\u672c\u5e76\u975e\u5fc5\u987b\u5305\u542b\u4e8e\u7c7b\u5b9a\u4e49\u4e4b\u5185\uff1a\u5c06\u4e00\u4e2a\u51fd\u6570\u5bf9\u8c61\u8d4b\u503c\u7ed9\u4e00\u4e2a\u5c40\u90e8\u53d8\u91cf\u4e5f\u662f\u53ef\u4ee5\u7684\u3002\u5982\u4e0b\u4f8b\u3002\u73b0\u5728 f , g \u548c h \u90fd\u662f\u7c7b C \u7684\u5f15\u7528\u51fd\u6570\u5bf9\u8c61\u7684\u5c5e\u6027\uff0c\u56e0\u800c\u5b83\u4eec\u5c31\u90fd\u662f\u7c7b C \u7684\u5b9e\u4f8b\u7684\u65b9\u6cd5\uff0c\u5176\u4e2d h \u5b8c\u5168\u7b49\u540c\u4e8e g \u3002\u4f46\u8bf7\u6ce8\u610f\uff0c\u4e0b\u9762\u8fd9\u4e2a\u4f8b\u5b50\u7684\u53ef\u8bfb\u6027\u975e\u5e38\u4e0d\u597d\u3002 # Function defined outside the class def f1(self, x, y): return min(x, x + y) class C: f = f1 # Assign a function object to a local variable in the class def g(self): return 'hello world' h = g \u65b9\u6cd5\uff08methods\uff09\u53ef\u4ee5\u901a\u8fc7\u4f7f\u7528 self \u53c2\u6570\u7684\u65b9\u6cd5\u5c5e\u6027\uff08method attributes\uff09\u8c03\u7528\u5176\u4ed6\u65b9\u6cd5\uff08method\uff09: class Bag: def __init__(self): self.data = [] def add(self, x): self.data.append(x) def addtwice(self, x): self.add(x) self.add(x) \u65b9\u6cd5\u53ef\u4ee5\u901a\u8fc7\u4e0e\u666e\u901a\u51fd\u6570\u76f8\u540c\u7684\u65b9\u5f0f\u5f15\u7528\u5168\u5c40\u540d\u79f0\u3002 \u4e0e\u65b9\u6cd5\u76f8\u5173\u8054\u7684\u5168\u5c40\u4f5c\u7528\u57df\u5c31\u662f\u5305\u542b\u5176\u5b9a\u4e49\u7684\u6a21\u5757\u3002 \uff08\u7c7b\u6c38\u8fdc\u4e0d\u4f1a\u88ab\u4f5c\u4e3a\u5168\u5c40\u4f5c\u7528\u57df\u3002\uff09 \u867d\u7136\u6211\u4eec\u5f88\u5c11\u4f1a\u6709\u5145\u5206\u7684\u7406\u7531\u5728\u65b9\u6cd5\u4e2d\u4f7f\u7528\u5168\u5c40\u4f5c\u7528\u57df\uff0c\u4f46\u5168\u5c40\u4f5c\u7528\u57df\u5b58\u5728\u8bb8\u591a\u5408\u7406\u7684\u4f7f\u7528\u573a\u666f\uff1a\u4e3e\u4e2a\u4f8b\u5b50\uff0c\u5bfc\u5165\u5230\u5168\u5c40\u4f5c\u7528\u57df\u7684\u51fd\u6570\u548c\u6a21\u5757\u53ef\u4ee5\u88ab\u65b9\u6cd5\u6240\u4f7f\u7528\uff0c\u5728\u5176\u4e2d\u5b9a\u4e49\u7684\u51fd\u6570\u548c\u7c7b\u4e5f\u4e00\u6837\u3002 \u901a\u5e38\uff0c\u5305\u542b\u8be5\u65b9\u6cd5\u7684\u7c7b\u672c\u8eab\u662f\u5728\u5168\u5c40\u4f5c\u7528\u57df\u4e2d\u5b9a\u4e49\u7684\u3002","title":"\u7c7b\u548c\u5b9e\u4f8b\u53d8\u91cf Class and Instance Variables"},{"location":"python/Foundation/ch04/#inheritance","text":"\u5982\u679c\u4e0d\u652f\u6301\u7ee7\u627f\uff0c\u5c31\u7b97\u4e0d\u4e0a\u771f\u6b63\u7684\u201c\u7c7b\u201d\u3002\u6d3e\u751f\u7c7b\uff08derived class\uff09\u5b9a\u4e49\u7684\u8bed\u6cd5\u5982\u4e0b\u6240\u793a: class DerivedClassName(BaseClassName): <statement-1> . . . <statement-N> \u540d\u79f0 BaseClassName \u5fc5\u987b\u5b9a\u4e49\u4e8e\u5305\u542b\u6d3e\u751f\u7c7b\u5b9a\u4e49\u7684\u4f5c\u7528\u57df\u4e2d\u3002 \u4e5f\u5141\u8bb8\u7528\u5176\u4ed6\u4efb\u610f\u8868\u8fbe\u5f0f\u4ee3\u66ff\u57fa\u7c7b\u540d\u79f0\u6240\u5728\u7684\u4f4d\u7f6e\uff0c\u4f8b\u5982\uff0c\u5f53\u57fa\u7c7b\u5b9a\u4e49\u5728\u53e6\u4e00\u4e2a\u6a21\u5757\u4e2d\u7684\u65f6\u5019: class DerivedClassName(modname.BaseClassName): \u6d3e\u751f\u7c7b\u5b9a\u4e49\u7684\u6267\u884c\u8fc7\u7a0b\u4e0e\u57fa\u7c7b\u76f8\u540c\u3002 \u5f53\u6784\u9020\u7c7b\u5bf9\u8c61\u65f6\uff0c\u57fa\u7c7b\u4f1a\u88ab\u8bb0\u4f4f\u3002 \u6b64\u4fe1\u606f\u5c06\u88ab\u7528\u6765\u89e3\u6790\u5c5e\u6027\u5f15\u7528\uff1a\u5982\u679c\u8bf7\u6c42\u7684\u5c5e\u6027\u5728\u7c7b\u4e2d\u627e\u4e0d\u5230\uff0c\u641c\u7d22\u5c06\u8f6c\u5f80\u57fa\u7c7b\u4e2d\u8fdb\u884c\u67e5\u627e\u3002 \u5982\u679c\u57fa\u7c7b\u672c\u8eab\u4e5f\u6d3e\u751f\u81ea\u5176\u4ed6\u67d0\u4e2a\u7c7b\uff0c\u5219\u6b64\u89c4\u5219\u5c06\u88ab\u9012\u5f52\u5730\uff08recursively\uff09\u5e94\u7528\u3002 \u6d3e\u751f\u7c7b\u7684\u5b9e\u4f8b\u5316\u6ca1\u6709\u4efb\u4f55\u7279\u6b8a\u4e4b\u5904: DerivedClassName() \u4f1a\u521b\u5efa\u8be5\u7c7b\u7684\u4e00\u4e2a \u65b0\u5b9e\u4f8b \u3002 \u65b9\u6cd5\u5f15\u7528\u5c06\u6309\u4ee5\u4e0b\u65b9\u5f0f\u89e3\u6790\uff1a\u641c\u7d22\u76f8\u5e94\u7684\u7c7b\u5c5e\u6027\uff0c\u5982\u6709\u5fc5\u8981\u5c06\u6309\u57fa\u7c7b\u7ee7\u627f\u94fe\u9010\u6b65\u5411\u4e0b\u67e5\u627e\uff0c\u5982\u679c\u4ea7\u751f\u4e86\u4e00\u4e2a\u51fd\u6570\u5bf9\u8c61\u5219\u65b9\u6cd5\u5f15\u7528\u5c31\u751f\u6548\u3002 \u6d3e\u751f\u7c7b\u53ef\u80fd\u4f1a\u91cd\u5199\uff08override\uff09\u5176\u57fa\u7c7b\u7684\u65b9\u6cd5\u3002 \u56e0\u4e3a\u65b9\u6cd5\u5728\u8c03\u7528\u540c\u4e00\u5bf9\u8c61\u7684\u5176\u4ed6\u65b9\u6cd5\u65f6\u6ca1\u6709\u7279\u6b8a\u6743\u9650\uff0c\u6240\u4ee5\u8c03\u7528\u540c\u4e00\u57fa\u7c7b\u4e2d\u5b9a\u4e49\u7684\u53e6\u4e00\u65b9\u6cd5\u7684\u57fa\u7c7b\u65b9\u6cd5\u6700\u7ec8\u53ef\u80fd\u4f1a\u8c03\u7528\u8986\u76d6\u5b83\u7684\u6d3e\u751f\u7c7b\u7684\u65b9\u6cd5\u3002 \u5728\u6d3e\u751f\u7c7b\u4e2d\u7684\u91cd\u8f7d\u65b9\u6cd5\uff08overriding method\uff09\u5b9e\u9645\u4e0a\u53ef\u80fd\u60f3\u8981\u6269\u5c55\u800c\u975e\u7b80\u5355\u5730\u66ff\u6362\u540c\u540d\u7684\u57fa\u7c7b\u65b9\u6cd5\u3002 \u6709\u4e00\u79cd\u65b9\u5f0f\u53ef\u4ee5\u7b80\u5355\u5730\u76f4\u63a5\u8c03\u7528\u57fa\u7c7b\u65b9\u6cd5\uff1a\u5373\u8c03\u7528 BaseClassName.methodname(self, arguments) \u3002\u8bf7\u6ce8\u610f\uff0c\u4ec5\u5f53\u6b64\u57fa\u7c7b\u53ef\u5728\u5168\u5c40\u4f5c\u7528\u57df\u4e2d\u4ee5 BaseClassName \u7684\u540d\u79f0\u88ab\u8bbf\u95ee\u65f6\u65b9\u53ef\u4f7f\u7528\u6b64\u65b9\u5f0f\u3002 Python\u6709\u4e24\u4e2a\u5185\u7f6e\u51fd\u6570\u53ef\u88ab\u7528\u4e8e\u7ee7\u627f\u673a\u5236\uff1a \u4f7f\u7528 isinstance() \u6765\u68c0\u67e5\u4e00\u4e2a\u5b9e\u4f8b\u7684\u7c7b\u578b: isinstance(obj, int) \u4ec5\u4f1a\u5728 obj.__class__ \u4e3a int \u6216\u67d0\u4e2a\u6d3e\u751f\u81ea int \u7684\u7c7b\u65f6\u4e3a True \u3002 \u4f7f\u7528 issubclass() \u6765\u68c0\u67e5\u7c7b\u7684\u7ee7\u627f\u5173\u7cfb: issubclass(bool, int) \u4e3a True \uff0c\u56e0\u4e3a bool \u662f int \u7684\u5b50\u7c7b\u3002 \u4f46\u662f\uff0c issubclass(float, int) \u4e3a False \uff0c\u56e0\u4e3a float \u4e0d\u662f int \u7684\u5b50\u7c7b\u3002","title":"\u7ee7\u627f Inheritance"},{"location":"python/Foundation/ch04/#multiple-inheritance","text":"Python \u4e5f\u652f\u6301\u4e00\u79cd\u591a\u91cd\u7ee7\u627f\u3002 \u5e26\u6709\u591a\u4e2a\u57fa\u7c7b\u7684\u7c7b\u5b9a\u4e49\u8bed\u53e5\u5982\u4e0b\u6240\u793a: class DerivedClassName(Base1, Base2, Base3): <statement-1> . . . <statement-N> \u5728\u6700\u7b80\u5355\u7684\u60c5\u51b5\u4e0b\uff0c\u641c\u7d22\u4ece\u7236\u7c7b\u6240\u7ee7\u627f\u5c5e\u6027\u7684\u64cd\u4f5c\u662f\u6df1\u5ea6\u4f18\u5148\uff08depth-first\uff09\u3001\u4ece\u5de6\u81f3\u53f3\uff08left-to-right\uff09\u7684\uff0c\u5f53\u5c42\u6b21\u7ed3\u6784\u4e2d\u5b58\u5728\u91cd\u53e0\u65f6\u4e0d\u4f1a\u5728\u540c\u4e00\u4e2a\u7c7b\u4e2d\u641c\u7d22\u4e24\u6b21\u3002 \u56e0\u6b64\uff0c\u5982\u679c\u67d0\u4e00\u5c5e\u6027\u5728 DerivedClassName \u4e2d\u672a\u627e\u5230\uff0c\u5219\u4f1a\u5230 Base1 \u4e2d\u641c\u7d22\u5b83\uff0c\u7136\u540e\uff08\u9012\u5f52\u5730\uff09\u5230 Base1 \u7684\u57fa\u7c7b\u4e2d\u641c\u7d22\uff0c\u5982\u679c\u5728\u90a3\u91cc\u672a\u627e\u5230\uff0c\u518d\u5230 Base2 \u4e2d\u641c\u7d22\uff0c\u4f9d\u6b64\u7c7b\u63a8\u3002 \u771f\u5b9e\u60c5\u51b5\u66f4\u590d\u6742\uff1b\u65b9\u6cd5\u89e3\u6790\u987a\u5e8f\u4f1a\u52a8\u6001\u6539\u53d8\u4ee5\u652f\u6301\u5bf9 super() \u7684\u534f\u540c\u8c03\u7528\u3002 \u8fd9\u79cd\u65b9\u5f0f\u5728\u67d0\u4e9b\u5176\u4ed6\u591a\u91cd\u7ee7\u627f\u578b\u8bed\u8a00\u4e2d\u88ab\u79f0\u4e3a \u540e\u7eed\u65b9\u6cd5\u8c03\u7528\uff08call-next-method\uff09 \uff0c\u5b83\u6bd4\u5355\u7ee7\u627f\u578b\uff08single-inheritance\uff09\u8bed\u8a00\u4e2d\u7684 uper \u8c03\u7528\u66f4\u5f3a\u5927\u3002 \u52a8\u6001\u6539\u53d8\u987a\u5e8f\u662f\u6709\u5fc5\u8981\u7684\uff0c\u56e0\u4e3a\u6240\u6709\u591a\u91cd\u7ee7\u627f\u7684\u60c5\u51b5\u90fd\u4f1a\u663e\u793a\u51fa\u4e00\u4e2a\u6216\u66f4\u591a\u7684\u83f1\u5f62\u5173\u8054\uff08diamond relationships\uff09\uff08\u5373\u81f3\u5c11\u6709\u4e00\u4e2a\u7236\u7c7b\u53ef\u901a\u8fc7\u591a\u6761\u8def\u5f84\u88ab\u6700\u5e95\u5c42\u7c7b\u6240\u8bbf\u95ee\uff09\u3002 \u4f8b\u5982\uff0c\u6240\u6709\u7c7b\u90fd\u662f\u7ee7\u627f\u81ea object \uff0c\u56e0\u6b64\u4efb\u4f55\u591a\u91cd\u7ee7\u627f\u7684\u60c5\u51b5\u90fd\u63d0\u4f9b\u4e86\u4e00\u6761\u4ee5\u4e0a\u7684\u8def\u5f84\u53ef\u4ee5\u901a\u5411 object \u3002 \u4e3a\u4e86\u786e\u4fdd\u57fa\u7c7b\u4e0d\u4f1a\u88ab\u8bbf\u95ee\u4e00\u6b21\u4ee5\u4e0a\uff0c\u52a8\u6001\u7b97\u6cd5\u4f1a\u7528\u4e00\u79cd\u7279\u6b8a\u65b9\u5f0f\u5c06\u641c\u7d22\u987a\u5e8f\u7ebf\u6027\u5316\uff0c \u4fdd\u7559\u6bcf\u4e2a\u7c7b\u6240\u6307\u5b9a\u7684\u4ece\u5de6\u81f3\u53f3\u7684\u987a\u5e8f\uff0c\u53ea\u8c03\u7528\u6bcf\u4e2a\u7236\u7c7b\u4e00\u6b21\uff0c\u5e76\u4e14\u4fdd\u6301\u5355\u8c03\uff08monotonic\uff09\uff08\u5373\u4e00\u4e2a\u7c7b\u53ef\u4ee5\u88ab\u5b50\u7c7b\u5316\u800c\u4e0d\u5f71\u54cd\u5176\u7236\u7c7b\u7684\u4f18\u5148\u987a\u5e8f\uff09\u3002 \u603b\u800c\u8a00\u4e4b\uff0c\u8fd9\u4e9b\u7279\u6027\u4f7f\u5f97\u8bbe\u8ba1\u5177\u6709\u591a\u91cd\u7ee7\u627f\u7684\u53ef\u9760\u4e14\u53ef\u6269\u5c55\u7684\u7c7b\u6210\u4e3a\u53ef\u80fd\u3002","title":"\u591a\u91cd\u7ee7\u627f Multiple Inheritance"},{"location":"python/Foundation/ch04/#private-variables","text":"\u90a3\u79cd\u4ec5\u9650\u4ece\u4e00\u4e2a\u5bf9\u8c61\u5185\u90e8\u8bbf\u95ee\u7684\u201c\u79c1\u6709\u201d\u5b9e\u4f8b\u53d8\u91cf\uff08\u201cPrivate\u201d instance variables\uff09\u5728 Python \u4e2d\u5e76\u4e0d\u5b58\u5728\u3002 \u4f46\u662f\uff0c\u5927\u591a\u6570 Python \u4ee3\u7801\u90fd\u9075\u5faa\u8fd9\u6837\u4e00\u4e2a\u7ea6\u5b9a\uff1a\u5e26\u6709 \u4e00\u4e2a\u524d\u7f00\u4e0b\u5212\u7ebf \u7684\u540d\u79f0 (\u4f8b\u5982 _spam ) \u5e94\u8be5\u88ab\u5f53\u4f5c\u662f API \u7684\u975e\u516c\u6709\uff08non-public\uff09\u90e8\u5206 (\u65e0\u8bba\u5b83\u662f\u51fd\u6570\u3001\u65b9\u6cd5\u6216\u662f\u6570\u636e\u6210\u5458)\u3002 \u8fd9\u5e94\u5f53\u88ab\u89c6\u4e3a\u4e00\u4e2a\u5b9e\u73b0\u7ec6\u8282\uff0c\u53ef\u80fd\u4e0d\u7ecf\u901a\u77e5\u5373\u52a0\u4ee5\u6539\u53d8\u3002 \u7531\u4e8e\u5b58\u5728\u5bf9\u4e8e\u7c7b\u79c1\u6709\u6210\u5458\uff08class-private members\uff09\u7684\u6709\u6548\u4f7f\u7528\u573a\u666f\uff08\u4f8b\u5982\u907f\u514d\u540d\u79f0\u4e0e\u5b50\u7c7b\u6240\u5b9a\u4e49\u7684\u540d\u79f0\u76f8\u51b2\u7a81\uff09\uff0c\u56e0\u6b64\u5b58\u5728\u5bf9\u6b64\u79cd\u673a\u5236\u7684\u6709\u9650\u652f\u6301\uff0c\u79f0\u4e3a \u540d\u79f0\u6539\u5199\uff08name mangling\uff09 \u3002 \u4efb\u4f55\u5f62\u5f0f\u4e3a __spam \u7684\u6807\u8bc6\u7b26\uff08\u81f3\u5c11\u5e26\u6709 \u4e24\u4e2a\u524d\u7f00\u4e0b\u5212\u7ebf \uff0c\u81f3\u591a\u4e00\u4e2a\u540e\u7f00\u4e0b\u5212\u7ebf\uff09\u7684\u6587\u672c\u5c06\u88ab\u66ff\u6362\u4e3a _classname__spam \uff0c\u5176\u4e2d classname \u4e3a\u53bb\u9664\u4e86\u524d\u7f00\u4e0b\u5212\u7ebf\u7684\u5f53\u524d\u7c7b\u540d\u79f0\u3002 \u8fd9\u79cd\u6539\u5199\u4e0d\u8003\u8651\u6807\u8bc6\u7b26\u7684\u53e5\u6cd5\u4f4d\u7f6e\uff0c\u53ea\u8981\u5b83\u51fa\u73b0\u5728\u7c7b\u5b9a\u4e49\u5185\u90e8\u5c31\u4f1a\u8fdb\u884c\u3002 \u540d\u79f0\u6539\u5199\uff08Name mangling\uff09\u6709\u52a9\u4e8e\u8ba9\u5b50\u7c7b\u91cd\u8f7d\u65b9\u6cd5\uff08\uff09override methods\u800c\u4e0d\u7834\u574f\u7c7b\u5185\u65b9\u6cd5\uff08intraclass method\uff09\u8c03\u7528\u3002\u4f8b\u5982: class Mapping: def __init__(self, iterable): self.items_list = [] self.__update(iterable) def update(self, iterable): for item in iterable: self.items_list.append(item) __update = update # private copy of original update() method class MappingSubclass(Mapping): def update(self, keys, values): # provides new signature for update() # but does not break __init__() for item in zip(keys, values): self.items_list.append(item) \u4e0a\u9762\u7684\u793a\u4f8b\u5373\u4f7f\u5728 MappingSubclass \u5f15\u5165\u4e86\u4e00\u4e2a __update \u6807\u8bc6\u7b26\u7684\u60c5\u51b5\u4e0b\u4e5f\u4e0d\u4f1a\u51fa\u9519\uff0c\u56e0\u4e3a\u5b83\u4f1a\u5728 Mapping \u7c7b\u4e2d\u88ab\u66ff\u6362\u4e3a _Mapping__update \u800c\u5728 MappingSubclass \u7c7b\u4e2d\u88ab\u66ff\u6362\u4e3a _MappingSubclass__update \u3002 \u8bf7\u6ce8\u610f\uff0c\u6539\u5199\u89c4\u5219\uff08mangling rules\uff09\u7684\u8bbe\u8ba1\u4e3b\u8981\u662f\u4e3a\u4e86\u907f\u514d\u610f\u5916\u51b2\u7a81\uff1b\u8bbf\u95ee\u6216\u4fee\u6539\u79c1\u6709\u53d8\u91cf\u4ecd\u7136\u662f\u53ef\u80fd\u7684\u3002\u8fd9\u5728\u7279\u6b8a\u60c5\u51b5\u4e0b\u751a\u81f3\u4f1a\u5f88\u6709\u7528\uff0c\u4f8b\u5982\u5728\u8c03\u8bd5\u5668\uff08debugger\uff09\u4e2d\u3002 \u8bf7\u6ce8\u610f\u4f20\u9012\u7ed9 exec() \u6216 eval() \u7684\u4ee3\u7801\u4e0d\u4f1a\u628a\u53d1\u8d77\u8c03\u7528\u7c7b\u7684\u7c7b\u540d\u89c6\u4f5c\u5f53\u524d\u7c7b\uff1b\u8fd9\u7c7b\u4f3c\u4e8e global \u8bed\u53e5\u7684\u6548\u679c\uff0c\u56e0\u6b64\u8fd9\u79cd\u6548\u679c\u4ec5\u9650\u4e8e\u540c\u65f6\u7ecf\u8fc7\u5b57\u8282\u7801\u7f16\u8bd1\u7684\u4ee3\u7801\u3002 \u540c\u6837\u7684\u9650\u5236\u4e5f\u9002\u7528\u4e8e getattr() , setattr() \u548c delattr() \uff0c\u4ee5\u53ca\u5bf9\u4e8e __dict__ \u7684\u76f4\u63a5\u5f15\u7528\u3002","title":"\u79c1\u6709\u53d8\u91cf Private Variables"},{"location":"python/Foundation/ch04/#iterators","text":"\u5728Python\u4e2d\uff0c\u5927\u591a\u6570\u5bb9\u5668\u5bf9\u8c61\uff08container object\uff09\u90fd\u53ef\u4ee5\u4f7f\u7528 for \u8bed\u53e5: for element in [1, 2, 3]: print(element) for element in (1, 2, 3): print(element) for key in {'one': 1, 'two': 2}: print(key) for char in \"123\": print(char) for line in open(\"myfile.txt\"): print(line, end='') for \u8bed\u53e5\u4f1a\u5728\u5bb9\u5668\u5bf9\u8c61\u4e0a\u8c03\u7528 iter()\u3002 \u8be5\u51fd\u6570\u8fd4\u56de\u4e00\u4e2a\u5b9a\u4e49\u4e86 __next__() \u65b9\u6cd5\u7684\u8fed\u4ee3\u5668\u5bf9\u8c61\uff0c\u6b64\u65b9\u6cd5\u5c06\u9010\u4e00\u8bbf\u95ee\u5bb9\u5668\u4e2d\u7684\u5143\u7d20\u3002 \u5f53\u5143\u7d20\u7528\u5c3d\u65f6\uff0c __next__() \u5c06\u5f15\u53d1 StopIteration \u5f02\u5e38\u6765\u901a\u77e5\u7ec8\u6b62 for \u5faa\u73af\u3002 \u53ef\u4ee5\u4f7f\u7528 next() \u5185\u7f6e\u51fd\u6570\u6765\u8c03\u7528 __next__() \u65b9\u6cd5\uff1b\u4e0b\u9762\u8fd9\u4e2a\u4f8b\u5b50\u5c55\u793a\u4e86\u521a\u521a\u63cf\u8ff0\u7684\u5177\u4f53\u8fd0\u884c\u65b9\u5f0f: >>> s = 'abc' >>> it = iter(s) >>> it <str_iterator object at 0x10c90e650> >>> next(it) 'a' >>> next(it) 'b' >>> next(it) 'c' >>> next(it) Traceback (most recent call last): File \"<stdin>\", line 1, in <module> next(it) StopIteration \u5728\u4e86\u89e3\u4e86\u8fed\u4ee3\u5668\u534f\u8bae\uff08iterator protocol\uff09\u7684\u673a\u5236\u540e\uff0c\u7ed9\u7c7b\u6dfb\u52a0\u8fed\u4ee3\u5668\u5c31\u5f88\u5bb9\u6613\u4e86\u3002 \u5b9a\u4e49\u4e00\u4e2a __iter__() \u65b9\u6cd5\u6765\u8fd4\u56de\u4e00\u4e2a\u5e26\u6709 __next__() \u65b9\u6cd5\u7684\u5bf9\u8c61\u3002 \u5982\u679c\u7c7b\u5df2\u5b9a\u4e49\u4e86 __next__() \uff0c\u5219 __iter__() \u53ef\u4ee5\u7b80\u5355\u5730\u8fd4\u56de self : class Reverse: \"\"\"Iterator for looping over a sequence backwards.\"\"\" def __init__(self, data): self.data = data self.index = len(data) def __iter__(self): return self def __next__(self): if self.index == 0: raise StopIteration self.index = self.index - 1 return self.data[self.index] rev = Reverse('spam') print(iter(rev)) for char in rev: print(char) # m # a # p # s","title":"\u8fed\u4ee3\u5668 Iterators"},{"location":"python/Foundation/ch04/#generators","text":"\u751f\u6210\u5668\uff08Generators\uff09 \u662f\u4e00\u4e2a\u7528\u4e8e\u521b\u5efa\u8fed\u4ee3\u5668\u7684\u7b80\u5355\u800c\u5f3a\u5927\u7684\u5de5\u5177\u3002 \u5b83\u4eec\u7684\u5199\u6cd5\u7c7b\u4f3c\u4e8e\u6807\u51c6\u7684\u51fd\u6570\uff0c\u4f46\u5f53\u5b83\u4eec\u8981\u8fd4\u56de\u6570\u636e\u65f6\u4f1a\u4f7f\u7528 yield \u8bed\u53e5\u3002 \u6bcf\u6b21\u5728\u751f\u6210\u5668\u4e0a\u8c03\u7528 next() \u65f6\uff0c\u5b83\u4f1a\u4ece\u4e0a\u6b21\u79bb\u5f00\u7684\u4f4d\u7f6e\u6062\u590d\u6267\u884c\uff08\u5b83\u4f1a\u8bb0\u4f4f\u4e0a\u6b21\u6267\u884c\u8bed\u53e5\u65f6\u7684\u6240\u6709\u6570\u636e\u503c\uff09\u3002 \u4e00\u4e2a\u521b\u5efa\u751f\u6210\u5668\u7684\u793a\u4f8b\u5982\u4e0b\uff08\u6539\u5199\u4e0a\u9762\u8fed\u4ee3\u5668\u4e2d\u6240\u4e3e\u7684\u4f8b\u5b50\uff09: def reverse(data): for index in range(len(data) - 1, -1, -1): yield data[index] for char in reverse('golf'): print(char) # f # l # o # g \u53ef\u4ee5\u7528\u751f\u6210\u5668\u6765\u5b8c\u6210\u7684\u64cd\u4f5c\u540c\u6837\u53ef\u4ee5\u7528\u524d\u9762\u6240\u63cf\u8ff0\u7684\u57fa\u4e8e\u7c7b\u7684\u8fed\u4ee3\u5668\u6765\u5b8c\u6210\u3002\u4f46\u751f\u6210\u5668\u7684\u5199\u6cd5\u66f4\u4e3a\u7d27\u51d1\uff0c\u56e0\u4e3a\u5b83\u4f1a\u81ea\u52a8\u521b\u5efa __iter__() \u548c __next__() \u65b9\u6cd5\u3002 \u53e6\u4e00\u4e2a\u5173\u952e\u7279\u6027\u5728\u4e8e\u5c40\u90e8\u53d8\u91cf\u548c\u6267\u884c\u72b6\u6001\u4f1a\u5728\u6bcf\u6b21\u8c03\u7528\u4e4b\u95f4\u81ea\u52a8\u4fdd\u5b58\u3002 \u8fd9\u4f7f\u5f97\u8be5\u51fd\u6570\u76f8\u6bd4\u4f7f\u7528 self.index \u548c self.data \u8fd9\u79cd\u5b9e\u4f8b\u53d8\u91cf\u7684\u65b9\u5f0f\u66f4\u6613\u7f16\u5199\u4e14\u66f4\u4e3a\u6e05\u6670\u3002 \u9664\u4e86\u4f1a\u81ea\u52a8\u521b\u5efa\u65b9\u6cd5\u548c\u4fdd\u5b58\u7a0b\u5e8f\u72b6\u6001\uff0c\u5f53\u751f\u6210\u5668\u7ec8\u7ed3\u65f6\uff0c\u5b83\u4eec\u8fd8\u4f1a\u81ea\u52a8\u5f15\u53d1 StopIteration \u3002","title":"\u751f\u6210\u5668 Generators"},{"location":"python/Foundation/ch04/#generator-expressions","text":"\u67d0\u4e9b\u7b80\u5355\u7684\u751f\u6210\u5668\u53ef\u4ee5\u5199\u6210\u7b80\u6d01\u7684\u8868\u8fbe\u5f0f\u4ee3\u7801\uff0c\u6240\u7528\u8bed\u6cd5\u7c7b\u4f3c\u5217\u8868\u63a8\u5bfc\u5f0f\uff0c\u4f46\u5916\u5c42\u4e3a\u5706\u62ec\u53f7\u800c\u975e\u65b9\u62ec\u53f7\u3002 \u8fd9\u79cd\u8868\u8fbe\u5f0f\u88ab\u8bbe\u8ba1\u7528\u4e8e\u751f\u6210\u5668\u5c06\u7acb\u5373\u88ab\u5916\u5c42\u51fd\u6570\u6240\u4f7f\u7528\u7684\u60c5\u51b5\u3002 \u751f\u6210\u5668\u8868\u8fbe\u5f0f\u76f8\u6bd4\u5b8c\u6574\u7684\u751f\u6210\u5668\u66f4\u7d27\u51d1\u4f46\u8f83\u4e0d\u7075\u6d3b\uff0c\u76f8\u6bd4\u7b49\u6548\u7684\u5217\u8868\u63a8\u5bfc\u5f0f\u5219\u66f4\u4e3a\u8282\u7701\u5185\u5b58\u3002 \u793a\u4f8b: >>> sum(i * i for i in range(10)) # sum of squares 285 >>> xvec = [10, 20, 30] >>> yvec = [7, 5, 3] >>> sum(x * y for x, y in zip(xvec, yvec)) # dot product 260 >>> unique_words = set(word for line in page for word in line.split()) >>> valedictorian = max((student.gpa, student.name) for student in graduates) >>> data = 'golf' >>> list(data[i] for i in range(len(data)-1, -1, -1)) ['f', 'l', 'o', 'g']","title":"\u751f\u6210\u5668\u8868\u8fbe\u5f0f Generator Expressions"},{"location":"python/Foundation/ch04/#polymorphism","text":"\u591a\u6001\u610f\u5473\u7740\u76f8\u540c\u7684\u51fd\u6570\u540d\u7528\u4e8e\u4e0d\u540c\u7684\u60c5\u5f62\u3002 \u5982\u4e0b\u4f8b\uff0c len() \u88ab\u7528\u4e8e\u4e0d\u540c\u7684\u60c5\u5f62\u3002 # len() being used for a string print(len(\"geeks\")) # 5 # len() being used for a list print(len([10, 20, 30])) # 3","title":"\u591a\u6001 Polymorphism"},{"location":"python/Foundation/ch04/#_1","text":"\u4e0b\u9762\u7684\u4ee3\u7801\u5c55\u793a\u4e86 Python \u5982\u4f55\u4ee5\u76f8\u540c\u7684\u65b9\u5f0f\u4f7f\u7528\u4e24\u79cd\u4e0d\u540c\u7684\u7c7b\u7c7b\u578b\u3002 \u6211\u4eec\u521b\u5efa\u4e86\u4e00\u4e2a\u904d\u5386\u5bf9\u8c61\u5143\u7ec4\u7684 for \u5faa\u73af\u3002 \u7136\u540e\u8c03\u7528\u65b9\u6cd5\u800c\u4e0d\u7528\u5173\u5fc3\u6bcf\u4e2a\u5bf9\u8c61\u662f\u54ea\u4e2a\u7c7b\u7c7b\u578b\u3002 \u6211\u4eec\u5047\u8bbe\u8fd9\u4e9b\u65b9\u6cd5\u5b9e\u9645\u4e0a\u5b58\u5728\u4e8e\u6bcf\u4e2a\u7c7b\u4e2d\u3002 class India(): def capital(self): print(\"New Delhi is the capital of India.\") def language(self): print(\"Hindi is the most widely spoken language of India.\") def type(self): print(\"India is a developing country.\") class USA(): def capital(self): print(\"Washington, D.C. is the capital of USA.\") def language(self): print(\"English is the primary language of USA.\") def type(self): print(\"USA is a developed country.\") obj_ind = India() obj_usa = USA() for country in (obj_ind, obj_usa): country.capital() country.language() country.type() # New Delhi is the capital of India. # Hindi is the most widely spoken language of India. # India is a developing country. # Washington, D.C. is the capital of USA. # English is the primary language of USA. # USA is a developed country.","title":"\u7c7b\u65b9\u6cd5\u7684\u591a\u6001\u6027"},{"location":"python/Foundation/ch04/#_2","text":"\u5728 Python \u4e2d\uff0c\u591a\u6001\u5141\u8bb8\u6211\u4eec\u5728\u5b50\u7c7b\u4e2d\u5b9a\u4e49\u4e0e\u7236\u7c7b\u4e2d\u7684\u65b9\u6cd5\u540c\u540d\u7684\u65b9\u6cd5\u3002 \u5728\u7ee7\u627f\u4e2d\uff0c\u5b50\u7c7b\u7ee7\u627f\u7236\u7c7b\u7684\u65b9\u6cd5\u3002 \u4f46\u662f\uff0c\u53ef\u4ee5\u4fee\u6539\u4ece\u7236\u7c7b\u7ee7\u627f\u7684\u5b50\u7c7b\u4e2d\u7684\u65b9\u6cd5\u3002 \u8fd9\u5728\u4ece\u7236\u7c7b\u7ee7\u627f\u7684\u65b9\u6cd5\u4e0d\u592a\u9002\u5408\u5b50\u7c7b\u7684\u60c5\u51b5\u4e0b\u7279\u522b\u6709\u7528\u3002 \u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u5728\u5b50\u7c7b\u4e2d\u91cd\u65b0\u5b9e\u73b0\u8be5\u65b9\u6cd5\u3002 \u8fd9\u79cd\u5728\u5b50\u7c7b\u4e2d\u91cd\u65b0\u5b9e\u73b0\u65b9\u6cd5\u7684\u8fc7\u7a0b\u79f0\u4e3a \u65b9\u6cd5\u8986\u76d6\uff08Method Overriding\uff09 \u3002 class Bird: def intro(self): print(\"There are many types of birds.\") def flight(self): print(\"Most of the birds can fly but some cannot.\") class sparrow(Bird): def flight(self): print(\"Sparrows can fly.\") class ostrich(Bird): def flight(self): print(\"Ostriches cannot fly.\") obj_bird = Bird() obj_spr = sparrow() obj_ost = ostrich() obj_bird.intro() # There are many types of birds. obj_bird.flight() # Most of the birds can fly but some cannot. obj_spr.intro() # There are many types of birds. obj_spr.flight() # Sparrows can fly. obj_ost.intro() # There are many types of birds. obj_ost.flight() # Ostriches cannot fly.","title":"\u7ee7\u627f\u7684\u591a\u6001\u6027"},{"location":"python/Foundation/ch04/#_3","text":"\u6211\u4eec\u4e5f\u53ef\u4ee5\u521b\u5efa\u4e00\u4e2a\u53ef\u4ee5\u63a5\u53d7\u4efb\u4f55\u5bf9\u8c61\u7684\u51fd\u6570\uff0c\u5141\u8bb8\u591a\u6001\u6027\u3002 \u5728\u4e0b\u9762\u4f8b\u5b50\u4e2d\uff0c\u6211\u4eec\u521b\u5efa\u4e00\u4e2a\u540d\u4e3a func() \u7684\u51fd\u6570\uff0c\u4f20\u5165\u53c2\u6570\u662f obj \u7684\u5bf9\u8c61\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u8c03\u7528\u4e09\u4e2a\u65b9\u6cd5\uff0c\u5373 capital() \u3001 language() \u548c type() \uff0c\u6bcf\u4e2a\u65b9\u6cd5\u90fd\u5b9a\u4e49\u5728 India \u548c USA \u4e24\u4e2a\u7c7b\u4e2d\u3002 \u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u76f8\u540c\u7684 func() \u51fd\u6570\u8c03\u7528\u5b83\u4eec\u7684\u52a8\u4f5c\uff1a class India(): def capital(self): print(\"New Delhi is the capital of India.\") def language(self): print(\"Hindi is the most widely spoken language of India.\") def type(self): print(\"India is a developing country.\") class USA(): def capital(self): print(\"Washington, D.C. is the capital of USA.\") def language(self): print(\"English is the primary language of USA.\") def type(self): print(\"USA is a developed country.\") def func(obj): obj.capital() obj.language() obj.type() obj_ind = India() obj_usa = USA() func(obj_ind) # New Delhi is the capital of India. # Hindi is the most widely spoken language of India. # India is a developing country. func(obj_usa) # Washington, D.C. is the capital of USA. # English is the primary language of USA. # USA is a developed country.","title":"\u51fd\u6570\u548c\u5bf9\u8c61\u7684\u591a\u6001\u6027"},{"location":"python/Foundation/ch04/#ducking-typing","text":"\u9e2d\u5b50\u7c7b\u578b\u662f\u591a\u6001\u4e00\u79cd\u5f62\u5f0f\u3002\u6211\u4eec\u53ef\u4ee5\u9a8c\u8bc1\uff0c\u4e00\u4e2a\u5bf9\u8c61\u5982\u679c\u5b9e\u73b0\u4e86\u8fed\u4ee3\u5668\u534f\u8bae\uff0c\u90a3\u5b83\u4e00\u5b9a\u662f\u53ef\u4ee5\u8fed\u4ee3\u7684\u3002 def isiterable(obj): try: iter(obj) return True except TypeError: return False \u53ea\u80fd\u8f93\u5165\u4e00\u4e2aobject, \u63a5\u53d7\u591a\u79cd\u7c7b\u578b\u8f93\u5165\u3002 print(isiterable('a string')) # True print(isiterable([1, 2, 3])) # True print(isiterable(5)) # False","title":"\u9e2d\u5b50\u7c7b\u578b(Ducking Typing)"},{"location":"python/Foundation/ch05/","text":"","title":"Ch05"},{"location":"python/Foundation/python_foundation_index/","text":"Python\u5b89\u88c5 Python\u8bed\u8a00\u57fa\u7840 Python\u6570\u636e\u7c7b\u578b\uff086\u4e2a\uff09 \u6570\u503c\u578b\uff08number\uff09 \u5b57\u7b26\u578b\uff08string\uff09 \u5217\u8868\uff08list\uff09 \u5b57\u5178\uff08dictionary\uff09 \u96c6\u5408\uff08set\uff09 \u5143\u7ec4\uff08tuple\uff09 \u52a8\u6001\u5f15\u7528\u3001\u5f3a\u7c7b\u578b \u4e8c\u5143\u8fd0\u7b97\u7b26\u548c\u6bd4\u8f83\u8fd0\u7b97 \u6807\u91cf\u7c7b\u578b \u4e09\u5143\u8868\u8fbe\u5f0f Python\u4e2d\u7684\u6253\u5305Packing\u548c\u62c6\u5305Unpacking \u89e3\u5305Unpacking \u6253\u5305Packing \u4f7f\u7528 * \u548c ** \u8fd0\u7b97\u7b26 \u901a\u8fc7 For-Loops \u89e3\u5305 \u7528 * \u548c ** \u5b9a\u4e49\u51fd\u6570 \u4f7f\u7528 * \u548c ** \u8c03\u7528\u51fd\u6570 \u51fd\u6570\u53ca\u6587\u4ef6 \u533f\u540d\uff08Lambda\uff09\u51fd\u6570 \u5185\u7f6e\u5e8f\u5217\u51fd\u6570enumerate \u5217\u8868\u3001\u96c6\u5408\u548c\u5b57\u5178\u7684\u63a8\u5bfc\u5f0f \u51fd\u6570\u58f0\u660e \u547d\u540d\u7a7a\u95f4\u3001\u4f5c\u7528\u57df\u548c\u672c\u5730\u51fd\u6570 \u67ef\u91cc\u5316\uff1a\u90e8\u5206\u53c2\u6570\u5e94\u7528 \u8fed\u4ee3\u5668\u4e0e\u751f\u6210\u5668 \u9519\u8bef\u548c\u5f02\u5e38\u5904\u7406 \u6587\u4ef6\u4e0e\u64cd\u4f5c\u7cfb\u7edf Python\u7684\u7c7b(Class) \u540d\u79f0Names\u548c\u5bf9\u8c61Objects \u4f5c\u7528\u57dfScopes\u548c\u547d\u540d\u7a7a\u95f4Namespace \u7c7bClass \u7c7b\u5b9a\u4e49 Class Definition \u7c7b\u5bf9\u8c61 Class Objects \u5b9e\u4f8b\u5bf9\u8c61 Instance Objects \u65b9\u6cd5\u5bf9\u8c61 Method Objects \u7c7b\u548c\u5b9e\u4f8b\u53d8\u91cf Class and Instance Variables \u7ee7\u627f Inheritance \u591a\u91cd\u7ee7\u627f Multiple Inheritance \u79c1\u6709\u53d8\u91cf Private Variables \u8fed\u4ee3\u5668 Iterators \u751f\u6210\u5668 Generators \u751f\u6210\u5668\u8868\u8fbe\u5f0f Generator Expressions \u591a\u6001 Polymorphism \u7c7b\u65b9\u6cd5\u7684\u591a\u6001\u6027 \u7ee7\u627f\u7684\u591a\u6001\u6027 \u51fd\u6570\u548c\u5bf9\u8c61\u7684\u591a\u6001\u6027 \u9e2d\u5b50\u7c7b\u578b(Ducking Typing)","title":"[Python\u5b89\u88c5](ch00.md)"},{"location":"python/Foundation/python_foundation_index/#python","text":"","title":"Python\u5b89\u88c5"},{"location":"python/Foundation/python_foundation_index/#python_1","text":"Python\u6570\u636e\u7c7b\u578b\uff086\u4e2a\uff09 \u6570\u503c\u578b\uff08number\uff09 \u5b57\u7b26\u578b\uff08string\uff09 \u5217\u8868\uff08list\uff09 \u5b57\u5178\uff08dictionary\uff09 \u96c6\u5408\uff08set\uff09 \u5143\u7ec4\uff08tuple\uff09 \u52a8\u6001\u5f15\u7528\u3001\u5f3a\u7c7b\u578b \u4e8c\u5143\u8fd0\u7b97\u7b26\u548c\u6bd4\u8f83\u8fd0\u7b97 \u6807\u91cf\u7c7b\u578b \u4e09\u5143\u8868\u8fbe\u5f0f","title":"Python\u8bed\u8a00\u57fa\u7840"},{"location":"python/Foundation/python_foundation_index/#pythonpackingunpacking","text":"\u89e3\u5305Unpacking \u6253\u5305Packing \u4f7f\u7528 * \u548c ** \u8fd0\u7b97\u7b26 \u901a\u8fc7 For-Loops \u89e3\u5305 \u7528 * \u548c ** \u5b9a\u4e49\u51fd\u6570 \u4f7f\u7528 * \u548c ** \u8c03\u7528\u51fd\u6570","title":"Python\u4e2d\u7684\u6253\u5305Packing\u548c\u62c6\u5305Unpacking"},{"location":"python/Foundation/python_foundation_index/#_1","text":"\u533f\u540d\uff08Lambda\uff09\u51fd\u6570 \u5185\u7f6e\u5e8f\u5217\u51fd\u6570enumerate \u5217\u8868\u3001\u96c6\u5408\u548c\u5b57\u5178\u7684\u63a8\u5bfc\u5f0f \u51fd\u6570\u58f0\u660e \u547d\u540d\u7a7a\u95f4\u3001\u4f5c\u7528\u57df\u548c\u672c\u5730\u51fd\u6570 \u67ef\u91cc\u5316\uff1a\u90e8\u5206\u53c2\u6570\u5e94\u7528 \u8fed\u4ee3\u5668\u4e0e\u751f\u6210\u5668 \u9519\u8bef\u548c\u5f02\u5e38\u5904\u7406 \u6587\u4ef6\u4e0e\u64cd\u4f5c\u7cfb\u7edf","title":"\u51fd\u6570\u53ca\u6587\u4ef6"},{"location":"python/Foundation/python_foundation_index/#pythonclass","text":"\u540d\u79f0Names\u548c\u5bf9\u8c61Objects \u4f5c\u7528\u57dfScopes\u548c\u547d\u540d\u7a7a\u95f4Namespace \u7c7bClass \u7c7b\u5b9a\u4e49 Class Definition \u7c7b\u5bf9\u8c61 Class Objects \u5b9e\u4f8b\u5bf9\u8c61 Instance Objects \u65b9\u6cd5\u5bf9\u8c61 Method Objects \u7c7b\u548c\u5b9e\u4f8b\u53d8\u91cf Class and Instance Variables \u7ee7\u627f Inheritance \u591a\u91cd\u7ee7\u627f Multiple Inheritance \u79c1\u6709\u53d8\u91cf Private Variables \u8fed\u4ee3\u5668 Iterators \u751f\u6210\u5668 Generators \u751f\u6210\u5668\u8868\u8fbe\u5f0f Generator Expressions \u591a\u6001 Polymorphism \u7c7b\u65b9\u6cd5\u7684\u591a\u6001\u6027 \u7ee7\u627f\u7684\u591a\u6001\u6027 \u51fd\u6570\u548c\u5bf9\u8c61\u7684\u591a\u6001\u6027 \u9e2d\u5b50\u7c7b\u578b(Ducking Typing)","title":"Python\u7684\u7c7b(Class)"},{"location":"python/PythonDemo/PythonDataAnalysis/","text":"","title":"PythonDataAnalysis"},{"location":"python/PythonDemo/pythonDB%2BUI/","text":"Create the database # sqlite3 sqlite.db sqlite> .database main: /opt/projects/myPython/pythonDB+UI/sqlite.db sqlite> create table employee ( id integer primary key autoincrement, code varchar(100), name varchar(200) ); sqlite> .tables employee sqlite> select * from employee; 23|E01|Ying 24|E02|Wang 25|E03|Zhang sqlite> Model folder File config.ini is to set up configuration of Sqlite database [DB_SECTION] user=root password= database=/opt/projects/myPython/pythonDB+UI/sqlite.db File employee.py is to define class Employee class Employee(object): def __init__(self, code, name, *, salary=0.0, **kwargs): self.code = code self.name = name self.salary = salary self.details = kwargs print(kwargs) File databaseSqlite.py is to define database connection and CRUD. File application.py is the entry of the web application. Run below command to start the service at http://127.0.0.1:9000/ python3 application.py Home foder File controller.py is to about logic of each pages based on templates # Initialize home page @get('/') def index(): return { '__template__': 'employee_list.html' } # Show the list in home page @get('/services/employees') # Row29 in employee_list.html def get_employees(): employees = Database.query() return dict(employees=employees) # Define the new page ADD after clicking button ADD @get('/ui/employees/add') def ui_add_employee(): return { '__template__': 'add_edit_employee.html', 'id': '', 'action': '/service/employees' } # Define the logic of SAVE button in the ADD page @post('/service/employees') def add_employee(*, code, name): employee = Employee(code, name) Database.save(employee) # Define the new page EDIT after clicking EDIT button in the homepage @get('/ui/employees/edit') def ui_edit_employee(*, id): return { '__template__': 'add_edit_employee.html', 'id': id, 'action': '/services/employees/%s' % id } # Define what will be shown in the EDIT page @get('/services/employees/{id}') def edit_employee(*, id): employee = Database.query_by_id(id) print(employee) return dict(id=employee[0], code=employee[1], name=employee[2]) # Define function of SAVE button in the EDIT page @post('/services/employees/{id}') def save_change(*, id, code, name): employee = Employee(code, name) employee.id = id Database.update(employee) # Define the function of DELETE button in the homepage @post('/services/employees/{id}/delete') # Row18 in employee_list.html def delete_employee(*, id): Database.delete(id) Template folder Define templates","title":"pythonDB+UI"},{"location":"python/PythonDemo/pythonDB%2BUI/#create-the-database","text":"# sqlite3 sqlite.db sqlite> .database main: /opt/projects/myPython/pythonDB+UI/sqlite.db sqlite> create table employee ( id integer primary key autoincrement, code varchar(100), name varchar(200) ); sqlite> .tables employee sqlite> select * from employee; 23|E01|Ying 24|E02|Wang 25|E03|Zhang sqlite>","title":"Create the database"},{"location":"python/PythonDemo/pythonDB%2BUI/#model-folder","text":"File config.ini is to set up configuration of Sqlite database [DB_SECTION] user=root password= database=/opt/projects/myPython/pythonDB+UI/sqlite.db File employee.py is to define class Employee class Employee(object): def __init__(self, code, name, *, salary=0.0, **kwargs): self.code = code self.name = name self.salary = salary self.details = kwargs print(kwargs) File databaseSqlite.py is to define database connection and CRUD. File application.py is the entry of the web application. Run below command to start the service at http://127.0.0.1:9000/ python3 application.py","title":"Model folder"},{"location":"python/PythonDemo/pythonDB%2BUI/#home-foder","text":"File controller.py is to about logic of each pages based on templates # Initialize home page @get('/') def index(): return { '__template__': 'employee_list.html' } # Show the list in home page @get('/services/employees') # Row29 in employee_list.html def get_employees(): employees = Database.query() return dict(employees=employees) # Define the new page ADD after clicking button ADD @get('/ui/employees/add') def ui_add_employee(): return { '__template__': 'add_edit_employee.html', 'id': '', 'action': '/service/employees' } # Define the logic of SAVE button in the ADD page @post('/service/employees') def add_employee(*, code, name): employee = Employee(code, name) Database.save(employee) # Define the new page EDIT after clicking EDIT button in the homepage @get('/ui/employees/edit') def ui_edit_employee(*, id): return { '__template__': 'add_edit_employee.html', 'id': id, 'action': '/services/employees/%s' % id } # Define what will be shown in the EDIT page @get('/services/employees/{id}') def edit_employee(*, id): employee = Database.query_by_id(id) print(employee) return dict(id=employee[0], code=employee[1], name=employee[2]) # Define function of SAVE button in the EDIT page @post('/services/employees/{id}') def save_change(*, id, code, name): employee = Employee(code, name) employee.id = id Database.update(employee) # Define the function of DELETE button in the homepage @post('/services/employees/{id}/delete') # Row18 in employee_list.html def delete_employee(*, id): Database.delete(id)","title":"Home foder"},{"location":"python/PythonDemo/pythonDB%2BUI/#template-folder","text":"Define templates","title":"Template folder"},{"location":"python/PythonDemo/pythonDjango/","text":"Initialize the project and get manage.py file as starting point # cd /opt/projects/myPython # django-admin startproject pythonDjango Initialize employee model # python3 manage.py startapp employee Register your model by add admin.py in folder employee from django.contrib import admin from employee.models import Employee # Register your models here. class EmployeeAdmin(admin.ModelAdmin): list_display = ['id', 'code', 'name', 'salary'] # \u5bf9\u4e8emodel\u91cc\u9762\u7684\u5b9a\u4e49 search_fields = ['code', 'name'] list_filter = ['id'] admin.site.register(Employee, EmployeeAdmin) Configure the app from django.apps import AppConfig class EmployeeConfig(AppConfig): name = 'employee' Deploy the change and start the server # python3 manage.py makemigrations # python3 manage.py migrate # python3 manage.py runserver Validate the service is up (no content here!) http://127.0.0.1:8000/ Create super user # python3 manage.py createsuperuser Username (leave blank to use 'i310913'): root Email address: aa@bb.cn Password: root Password (again): root The password is too similar to the username. This password is too short. It must contain at least 8 characters. This password is too common. Bypass password validation and create user anyway? [y/N]: y Superuser created successfully. Validate the admin service. Add records in Employee, also available for delete and update http://127.0.0.1:8000/admin Validate 3 records added via admin page in Sqlite database # /opt/projects/myPython/pythonDjango/sqlite-utils tables db.sqlite3 [{\"table\": \"django_migrations\"}, {\"table\": \"sqlite_sequence\"}, {\"table\": \"auth_group_permissions\"}, {\"table\": \"auth_user_groups\"}, {\"table\": \"auth_user_user_permissions\"}, {\"table\": \"django_admin_log\"}, {\"table\": \"django_content_type\"}, {\"table\": \"auth_permission\"}, {\"table\": \"auth_group\"}, {\"table\": \"auth_user\"}, {\"table\": \"django_session\"}, {\"table\": \"employee_employee\"}] Query table employee, and see 3 records below. ``` sqlite-utils db.sqlite3 \"select * from employee_employee\" [{\"id\": 1, \"code\": \"E01\", \"name\": \"James\", \"salary\": 0}, {\"id\": 2, \"code\": \"E02\", \"name\": \"Jim\", \"salary\": 0}, {\"id\": 3, \"code\": \"E03\", \"name\": \"Jason\", \"salary\": 120.5}] ```","title":"pythonDjango"},{"location":"python/PythonDemo/pythonDjango/#initialize-the-project-and-get-managepy-file-as-starting-point","text":"# cd /opt/projects/myPython # django-admin startproject pythonDjango","title":"Initialize the project and get manage.py file as starting point"},{"location":"python/PythonDemo/pythonDjango/#initialize-employee-model","text":"# python3 manage.py startapp employee","title":"Initialize employee model"},{"location":"python/PythonDemo/pythonDjango/#register-your-model-by-add-adminpy-in-folder-employee","text":"from django.contrib import admin from employee.models import Employee # Register your models here. class EmployeeAdmin(admin.ModelAdmin): list_display = ['id', 'code', 'name', 'salary'] # \u5bf9\u4e8emodel\u91cc\u9762\u7684\u5b9a\u4e49 search_fields = ['code', 'name'] list_filter = ['id'] admin.site.register(Employee, EmployeeAdmin)","title":"Register your model by add admin.py in folder employee"},{"location":"python/PythonDemo/pythonDjango/#configure-the-app","text":"from django.apps import AppConfig class EmployeeConfig(AppConfig): name = 'employee'","title":"Configure the app"},{"location":"python/PythonDemo/pythonDjango/#deploy-the-change-and-start-the-server","text":"# python3 manage.py makemigrations # python3 manage.py migrate # python3 manage.py runserver","title":"Deploy the change and start the server"},{"location":"python/PythonDemo/pythonDjango/#validate-the-service-is-up-no-content-here","text":"http://127.0.0.1:8000/","title":"Validate the service is up (no content here!)"},{"location":"python/PythonDemo/pythonDjango/#create-super-user","text":"# python3 manage.py createsuperuser Username (leave blank to use 'i310913'): root Email address: aa@bb.cn Password: root Password (again): root The password is too similar to the username. This password is too short. It must contain at least 8 characters. This password is too common. Bypass password validation and create user anyway? [y/N]: y Superuser created successfully.","title":"Create super user"},{"location":"python/PythonDemo/pythonDjango/#validate-the-admin-service-add-records-in-employee-also-available-for-delete-and-update","text":"http://127.0.0.1:8000/admin Validate 3 records added via admin page in Sqlite database # /opt/projects/myPython/pythonDjango/sqlite-utils tables db.sqlite3 [{\"table\": \"django_migrations\"}, {\"table\": \"sqlite_sequence\"}, {\"table\": \"auth_group_permissions\"}, {\"table\": \"auth_user_groups\"}, {\"table\": \"auth_user_user_permissions\"}, {\"table\": \"django_admin_log\"}, {\"table\": \"django_content_type\"}, {\"table\": \"auth_permission\"}, {\"table\": \"auth_group\"}, {\"table\": \"auth_user\"}, {\"table\": \"django_session\"}, {\"table\": \"employee_employee\"}] Query table employee, and see 3 records below. ```","title":"Validate the admin service. Add records in Employee, also available for delete and update"},{"location":"python/PythonDemo/pythonDjango/#sqlite-utils-dbsqlite3-select-from-employee_employee","text":"[{\"id\": 1, \"code\": \"E01\", \"name\": \"James\", \"salary\": 0}, {\"id\": 2, \"code\": \"E02\", \"name\": \"Jim\", \"salary\": 0}, {\"id\": 3, \"code\": \"E03\", \"name\": \"Jason\", \"salary\": 120.5}] ```","title":"sqlite-utils db.sqlite3 \"select * from employee_employee\""},{"location":"python/PythonDemo/pythonScrapy/","text":"Initialize the project and scrapy.cfg will be created automatically # /opt/projects/myPython/scrapy startproject pythonScrapy File scrapy.cfg : [settings] default = pythonScrapy.settings [deploy] #url = http://localhost:6800/ project = pythonScrapy Define pipeline via fie pipeline.py class JsonPipeline(object) class MongoPipeline(object) Configure settings.py by adding two pipelines defined above two classes # Configure item pipelines # See https://docs.scrapy.org/en/latest/topics/item-pipeline.html ITEM_PIPELINES = { # 'pythonScrapy.pipelines.PythonscrapyPipeline': 300, 'pythonScrapy.pipelines.JsonPipeline': 1, 'pythonScrapy.pipelines.MongoPipeline': 2, } # Configure Mongo DB MONGO_URI = '127.0.0.1' MONGO_DATABASE = 'mydb' File items.py is to define which labels will be captured class TedItem(scrapy.Item): talk = scrapy.Field() link = scrapy.Field() Start MongoDB Server # mongod --config \"/opt/mongodb/mongod.cfg\" --fork Run the application # /opt/projects/myPython/pythonScrapy/scrapy crawl ted File ted.json was generated and all records were inserted into MongoDB > use mydb switched to db mydb > show collections Employee ted > db.ted.find().pretty()","title":"pythonScrapy"},{"location":"python/PythonDemo/pythonScrapy/#initialize-the-project-and-scrapycfg-will-be-created-automatically","text":"# /opt/projects/myPython/scrapy startproject pythonScrapy File scrapy.cfg : [settings] default = pythonScrapy.settings [deploy] #url = http://localhost:6800/ project = pythonScrapy","title":"Initialize the project and scrapy.cfg will be created automatically"},{"location":"python/PythonDemo/pythonScrapy/#define-pipeline-via-fie-pipelinepy","text":"class JsonPipeline(object) class MongoPipeline(object)","title":"Define pipeline via fie pipeline.py"},{"location":"python/PythonDemo/pythonScrapy/#configure-settingspy-by-adding-two-pipelines-defined-above-two-classes","text":"# Configure item pipelines # See https://docs.scrapy.org/en/latest/topics/item-pipeline.html ITEM_PIPELINES = { # 'pythonScrapy.pipelines.PythonscrapyPipeline': 300, 'pythonScrapy.pipelines.JsonPipeline': 1, 'pythonScrapy.pipelines.MongoPipeline': 2, } # Configure Mongo DB MONGO_URI = '127.0.0.1' MONGO_DATABASE = 'mydb'","title":"Configure settings.py by adding two pipelines defined above two classes"},{"location":"python/PythonDemo/pythonScrapy/#file-itemspy-is-to-define-which-labels-will-be-captured","text":"class TedItem(scrapy.Item): talk = scrapy.Field() link = scrapy.Field()","title":"File items.py is to define which labels will be captured"},{"location":"python/PythonDemo/pythonScrapy/#start-mongodb-server","text":"# mongod --config \"/opt/mongodb/mongod.cfg\" --fork","title":"Start MongoDB Server"},{"location":"python/PythonDemo/pythonScrapy/#run-the-application","text":"# /opt/projects/myPython/pythonScrapy/scrapy crawl ted File ted.json was generated and all records were inserted into MongoDB > use mydb switched to db mydb > show collections Employee ted > db.ted.find().pretty()","title":"Run the application"},{"location":"python/PythonDemo/pythonSelenium/","text":"","title":"pythonSelenium"},{"location":"python/PythonDemo/pythonSocket/","text":"File server.py import socket import threading server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM) server_socket.bind(('127.0.0.1', 9001)) server_socket.listen(1) # 1\u4ee3\u8868\u76d1\u542c\u7ebf\u7a0b\u7684\u6570\u91cf print('waiting for connection...') # function to receive message def receive_message(sock, addr): while True: message = sock.recv(1024) print(message.decode('UTF-8')) # accept request while True: sock, addr = server_socket.accept() # accept()\u7684\u6e90\u7801\u4e2dreturn sock, addr print(sock, addr) # receive_message(sock, addr) # receive message only from one client thread = threading.Thread(target=receive_message, args=(sock, addr)) # receive message from multi-clients thread.start() client.py import socket client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM) client_socket.connect(('127.0.0.1', 9001)) while True: message = input(\"Please input message: \") client_socket.send(message.encode('UTF-8')) Demo Start server # python3 server.py Start multi-clients and send messages via each client # python3 client.py","title":"pythonSocket"},{"location":"python/PythonDemo/pythonSocket/#file-serverpy","text":"import socket import threading server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM) server_socket.bind(('127.0.0.1', 9001)) server_socket.listen(1) # 1\u4ee3\u8868\u76d1\u542c\u7ebf\u7a0b\u7684\u6570\u91cf print('waiting for connection...') # function to receive message def receive_message(sock, addr): while True: message = sock.recv(1024) print(message.decode('UTF-8')) # accept request while True: sock, addr = server_socket.accept() # accept()\u7684\u6e90\u7801\u4e2dreturn sock, addr print(sock, addr) # receive_message(sock, addr) # receive message only from one client thread = threading.Thread(target=receive_message, args=(sock, addr)) # receive message from multi-clients thread.start()","title":"File server.py"},{"location":"python/PythonDemo/pythonSocket/#clientpy","text":"import socket client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM) client_socket.connect(('127.0.0.1', 9001)) while True: message = input(\"Please input message: \") client_socket.send(message.encode('UTF-8'))","title":"client.py"},{"location":"python/PythonDemo/pythonSocket/#demo","text":"Start server # python3 server.py Start multi-clients and send messages via each client # python3 client.py","title":"Demo"},{"location":"python/PythonDemo/pythonSpider/","text":"File demo.py Get video names and links and export to talks.txt and links.txt Using m3u8 to find out videos. Using merge.bat to merge video segments into one video file File image_link.py Get image names and links File SpiderVideo.py to download video segments and consolidate into one video file The file SpiderVideo.py reads from index.m3u8 as input to download video segments. The file index.m3u8 is maintained manually from target webpage. Destination folder: /opt/projects/myPython/pythonSpider/video_download Consolidation: merge.bat Key is to get links of videos below: def get_talks_links(self): response = requests.get(self.url) html_text = response.text bs = BeautifulSoup(html_text, 'html.parser') results_div = bs.find('div', id='browse-results') results_div_h4 = results_div.find_all('h4', class_='f-w:700 h9 m5') # print(results_div_h4) for items in results_div_h4: self.talks.append(items.find('a').string) self.links.append(items.find('a').get('href') + '\\n') File SpiderImage.py to download images Destination folder: /opt/projects/myPython/pythonSpider/images_download Key is to get links below def get_image_link(self): response = requests.get(self.url) html_text = response.text bs = BeautifulSoup(html_text, 'html.parser') results_div = bs.find('div', id='browse-results') # \u65b9\u6cd51 \uff08\u4e8c\u9009\u4e00\u5373\u53ef\uff09 # results_div_span = results_div.find_all('span', class_='thumb__tugger') # for items in results_div_span: # self.image_links.append(items.find('img').get('src') + '\\n') # \u65b9\u6cd52 \uff08\u4e8c\u9009\u4e00\u5373\u53ef\uff09 results_div_img = results_div.find_all('img') for items1 in results_div_img: self.image_links.append(items1.get('src') + '\\n')","title":"pythonSpider"},{"location":"python/PythonDemo/pythonSpider/#file-demopy","text":"Get video names and links and export to talks.txt and links.txt Using m3u8 to find out videos. Using merge.bat to merge video segments into one video file","title":"File demo.py"},{"location":"python/PythonDemo/pythonSpider/#file-image_linkpy","text":"Get image names and links","title":"File image_link.py"},{"location":"python/PythonDemo/pythonSpider/#file-spidervideopy-to-download-video-segments-and-consolidate-into-one-video-file","text":"The file SpiderVideo.py reads from index.m3u8 as input to download video segments. The file index.m3u8 is maintained manually from target webpage. Destination folder: /opt/projects/myPython/pythonSpider/video_download Consolidation: merge.bat Key is to get links of videos below: def get_talks_links(self): response = requests.get(self.url) html_text = response.text bs = BeautifulSoup(html_text, 'html.parser') results_div = bs.find('div', id='browse-results') results_div_h4 = results_div.find_all('h4', class_='f-w:700 h9 m5') # print(results_div_h4) for items in results_div_h4: self.talks.append(items.find('a').string) self.links.append(items.find('a').get('href') + '\\n')","title":"File SpiderVideo.py to download video segments and consolidate into one video file"},{"location":"python/PythonDemo/pythonSpider/#file-spiderimagepy-to-download-images","text":"Destination folder: /opt/projects/myPython/pythonSpider/images_download Key is to get links below def get_image_link(self): response = requests.get(self.url) html_text = response.text bs = BeautifulSoup(html_text, 'html.parser') results_div = bs.find('div', id='browse-results') # \u65b9\u6cd51 \uff08\u4e8c\u9009\u4e00\u5373\u53ef\uff09 # results_div_span = results_div.find_all('span', class_='thumb__tugger') # for items in results_div_span: # self.image_links.append(items.find('img').get('src') + '\\n') # \u65b9\u6cd52 \uff08\u4e8c\u9009\u4e00\u5373\u53ef\uff09 results_div_img = results_div.find_all('img') for items1 in results_div_img: self.image_links.append(items1.get('src') + '\\n')","title":"File SpiderImage.py to download images"},{"location":"python/Pythonic90Rules/Rule01/","text":"\u7b2c1\u6761\u3000\u67e5\u8be2\u81ea\u5df1\u4f7f\u7528\u7684Python\u7248\u672c >>> import sys >>> print(sys.version) 3.9.6 (default, Aug 5 2021, 17:13:26) [GCC 7.5.0] >>> print(sys.path) ['', '/usr/local/lib/python39.zip', '/usr/local/lib/python3.9', '/usr/local/lib/python3.9/lib-dynload', '/home/james/.local/lib/python3.9/site-packages', '/usr/local/lib/python3.9/site-packages'] >>> print(sys.version_info) sys.version_info(major=3, minor=9, micro=6, releaselevel='final', serial=0)","title":"\u7b2c1\u6761\u3000\u67e5\u8be2\u81ea\u5df1\u4f7f\u7528\u7684Python\u7248\u672c"},{"location":"python/Pythonic90Rules/Rule01/#1-python","text":">>> import sys >>> print(sys.version) 3.9.6 (default, Aug 5 2021, 17:13:26) [GCC 7.5.0] >>> print(sys.path) ['', '/usr/local/lib/python39.zip', '/usr/local/lib/python3.9', '/usr/local/lib/python3.9/lib-dynload', '/home/james/.local/lib/python3.9/site-packages', '/usr/local/lib/python3.9/site-packages'] >>> print(sys.version_info) sys.version_info(major=3, minor=9, micro=6, releaselevel='final', serial=0)","title":"\u7b2c1\u6761\u3000\u67e5\u8be2\u81ea\u5df1\u4f7f\u7528\u7684Python\u7248\u672c"},{"location":"python/Pythonic90Rules/Rule02/","text":"\u7b2c2\u6761\u3000\u9075\u5faaPEP 8\u98ce\u683c\u6307\u5357 Python Enhancement Proposal #8\u53eb\u4f5cPEP 8\uff0c\u5b83\u662f\u4e00\u4efd\u9488\u5bf9Python\u4ee3\u7801\u683c\u5f0f\u800c\u7f16\u8ba2\u7684\u98ce\u683c\u6307\u5357\u3002 \u5b8c\u6574\u6307\u5357\uff1ahttps://www.python.org/dev/peps/pep-0008 \u4e0e\u7a7a\u767d\u6709\u5173\u7684\u5efa\u8bae \u5728Python\u4e2d\uff0c\u7a7a\u767d\uff08whitespace\uff09\u7684\u4f7f\u7528\u9075\u5faa\u4ee5\u4e0b\u51e0\u6761\u5efa\u8bae\u3002 \u7528\u7a7a\u683c\uff08space\uff09\u8868\u793a\u7f29\u8fdb\uff0c\u800c\u4e0d\u8981\u7528\u5236\u8868\u7b26\uff08tab\uff09\u3002 \u548c\u8bed\u6cd5\u76f8\u5173\u7684\u6bcf\u4e00\u5c42\u7f29\u8fdb\u90fd\u75284\u4e2a\u7a7a\u683c\u8868\u793a\u3002 \u6bcf\u884c\u4e0d\u8d85\u8fc779\u4e2a\u5b57\u7b26\u3002 \u5bf9\u4e8e\u5360\u636e\u591a\u884c\u7684\u957f\u8868\u8fbe\u5f0f\u6765\u8bf4\uff0c\u9664\u4e86\u9996\u884c\u4e4b\u5916\u7684\u5176\u4f59\u5404\u884c\u90fd\u5e94\u8be5\u5728\u901a\u5e38\u7684\u7f29\u8fdb\u7ea7\u522b\u4e4b\u4e0a\u518d\u52a04\u4e2a\u7a7a\u683c\u3002 \u5728\u540c\u4e00\u4efd\u6587\u4ef6\u4e2d\uff0c\u51fd\u6570\u4e0e\u7c7b\u4e4b\u95f4\u7528\u4e24\u4e2a\u7a7a\u884c\u9694\u5f00\u3002 \u5728\u540c\u4e00\u4e2a\u7c7b\u4e2d\uff0c\u65b9\u6cd5\u4e0e\u65b9\u6cd5\u4e4b\u95f4\u7528\u4e00\u4e2a\u7a7a\u884c\u9694\u5f00\u3002 \u4f7f\u7528\u5b57\u5178\u65f6\uff0c\u952e\u4e0e\u5192\u53f7\u4e4b\u95f4\u4e0d\u52a0\u7a7a\u683c\uff0c\u5199\u5728\u540c\u4e00\u884c\u7684\u5192\u53f7\u548c\u503c\u4e4b\u95f4\u5e94\u8be5\u52a0\u4e00\u4e2a\u7a7a\u683c\u3002 \u7ed9\u53d8\u91cf\u8d4b\u503c\u65f6\uff0c\u8d4b\u503c\u7b26\u53f7\u7684\u5de6\u8fb9\u548c\u53f3\u8fb9\u5404\u52a0\u4e00\u4e2a\u7a7a\u683c\uff0c\u5e76\u4e14\u53ea\u52a0\u4e00\u4e2a\u7a7a\u683c\u5c31\u597d\u3002 \u7ed9\u53d8\u91cf\u7684\u7c7b\u578b\u505a\u6ce8\u89e3\uff08annotation\uff09\u65f6\uff0c\u4e0d\u8981\u628a\u53d8\u91cf\u540d\u548c\u5192\u53f7\u9694\u5f00\uff0c\u4f46\u5728\u7c7b\u578b\u4fe1\u606f\u524d\u5e94\u8be5\u6709\u4e00\u4e2a\u7a7a\u683c\u3002 \u4e0e\u547d\u540d\u6709\u5173\u7684\u5efa\u8bae PEP 8\u5efa\u8bae\u91c7\u7528\u4e0d\u540c\u7684\u65b9\u5f0f\u6765\u7ed9Python\u4ee3\u7801\u4e2d\u7684\u5404\u4e2a\u90e8\u5206\u547d\u540d\uff0c\u9075\u5faa\u4ee5\u4e0b\u4e0e\u547d\u540d\u76f8\u5173\u7684\u5efa\u8bae\u3002 \u51fd\u6570\u3001\u53d8\u91cf\u53ca\u5c5e\u6027\u7528\u5c0f\u5199\u5b57\u6bcd\u6765\u62fc\u5199\uff0c\u5404\u5355\u8bcd\u4e4b\u95f4\u7528\u4e0b\u5212\u7ebf\u76f8\u8fde\uff0c\u4f8b\u5982\uff1alowercase_underscore\u3002 \u53d7\u4fdd\u62a4\u7684\u5b9e\u4f8b\u5c5e\u6027\uff0c\u7528\u4e00\u4e2a\u4e0b\u5212\u7ebf\u5f00\u5934\uff0c\u4f8b\u5982\uff1a_leading_underscore\u3002 \u79c1\u6709\u7684\u5b9e\u4f8b\u5c5e\u6027\uff0c\u7528\u4e24\u4e2a\u4e0b\u5212\u7ebf\u5f00\u5934\uff0c\u4f8b\u5982\uff1a__double_leading_underscore\u3002 \u7c7b\uff08\u5305\u62ec\u5f02\u5e38\uff09\u547d\u540d\u65f6\uff0c\u6bcf\u4e2a\u5355\u8bcd\u7684\u9996\u5b57\u6bcd\u5747\u5927\u5199\uff0c\u4f8b\u5982\uff1aCapitalizedWord\u3002 \u6a21\u5757\u7ea7\u522b\u7684\u5e38\u91cf\uff0c\u6240\u6709\u5b57\u6bcd\u90fd\u5927\u5199\uff0c\u5404\u5355\u8bcd\u4e4b\u95f4\u7528\u4e0b\u5212\u7ebf\u76f8\u8fde\uff0c\u4f8b\u5982\uff1aALL_CAPS\u3002 \u7c7b\u4e2d\u7684\u5b9e\u4f8b\u65b9\u6cd5\uff0c\u5e94\u8be5\u628a\u7b2c\u4e00\u4e2a\u53c2\u6570\u547d\u540d\u4e3aself\uff0c\u7528\u6765\u8868\u793a\u8be5\u5bf9\u8c61\u672c\u8eab\u3002 \u7c7b\u65b9\u6cd5\u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\uff0c\u5e94\u8be5\u547d\u540d\u4e3acls\uff0c\u7528\u6765\u8868\u793a\u8fd9\u4e2a\u7c7b\u672c\u8eab\u3002 \u4e0e\u8868\u8fbe\u5f0f\u548c\u8bed\u53e5\u6709\u5173\u7684\u5efa\u8bae The Zen of Python\u4e2d\u63d0\u5230\uff1a\u201c\u6bcf\u4ef6\u4e8b\u90fd\u5e94\u8be5\u6709\u7b80\u5355\u7684\u505a\u6cd5\uff0c\u800c\u4e14\u6700\u597d\u53ea\u6709\u4e00\u79cd\u3002\u201dPEP 8\u5c31\u8bd5\u7740\u8fd0\u7528\u8fd9\u4e2a\u7406\u5ff5\uff0c\u6765\u89c4\u8303\u8868\u8fbe\u5f0f\u548c\u8bed\u53e5\u7684\u5199\u6cd5\u3002 \u91c7\u7528\u884c\u5185\u5426\u5b9a\uff0c\u5373\u628a\u5426\u5b9a\u8bcd\u76f4\u63a5\u5199\u5728\u8981\u5426\u5b9a\u7684\u5185\u5bb9\u524d\u9762\uff0c\u800c\u4e0d\u8981\u653e\u5728\u6574\u4e2a\u8868\u8fbe\u5f0f\u7684\u524d\u9762\uff0c\u4f8b\u5982\u5e94\u8be5\u5199if a is not b\uff0c\u800c\u4e0d\u662fif not a is b\u3002 \u4e0d\u8981\u901a\u8fc7\u957f\u5ea6\u5224\u65ad\u5bb9\u5668\u6216\u5e8f\u5217\u662f\u4e0d\u662f\u7a7a\u7684\uff0c\u4f8b\u5982\u4e0d\u8981\u901a\u8fc7if len(somelist) == 0\u5224\u65adsomelist\u662f\u5426\u4e3a[]\u6216''\u7b49\u7a7a\u503c\uff0c\u800c\u662f\u5e94\u8be5\u91c7\u7528if not somelist\u8fd9\u6837\u7684\u5199\u6cd5\u6765\u5224\u65ad\uff0c\u56e0\u4e3aPython\u4f1a\u628a\u7a7a\u503c\u81ea\u52a8\u8bc4\u4f30\u4e3aFalse\u3002 \u5982\u679c\u8981\u5224\u65ad\u5bb9\u5668\u6216\u5e8f\u5217\u91cc\u9762\u6709\u6ca1\u6709\u5185\u5bb9\uff08\u6bd4\u5982\u8981\u5224\u65ad somelist \u662f\u5426\u4e3a[1]\u6216'hi'\u8fd9\u6837\u975e\u7a7a\u7684\u503c\uff09\uff0c\u4e5f\u4e0d\u5e94\u8be5\u901a\u8fc7\u957f\u5ea6\u6765\u5224\u65ad\uff0c\u800c\u662f\u5e94\u8be5\u91c7\u7528if somelist \u8bed\u53e5\uff0c\u56e0\u4e3aPython\u4f1a\u628a\u975e\u7a7a\u7684\u503c\u81ea\u52a8\u5224\u5b9a\u4e3aTrue\u3002 \u4e0d\u8981\u628aif\u8bed\u53e5\u3001for\u5faa\u73af\u3001while\u5faa\u73af\u53caexcept\u590d\u5408\u8bed\u53e5\u6324\u5728\u4e00\u884c\u3002\u5e94\u8be5\u628a\u8fd9\u4e9b\u8bed\u53e5\u5206\u6210\u591a\u884c\u6765\u5199\uff0c\u8fd9\u6837\u66f4\u52a0\u6e05\u6670\u3002 \u5982\u679c\u8868\u8fbe\u5f0f\u4e00\u884c\u5199\u4e0d\u4e0b\uff0c\u53ef\u4ee5\u7528\u62ec\u53f7\u5c06\u5176\u62ec\u8d77\u6765\uff0c\u800c\u4e14\u8981\u9002\u5f53\u5730\u6dfb\u52a0\u6362\u884c\u4e0e\u7f29\u8fdb\u4ee5\u4fbf\u4e8e\u9605\u8bfb\u3002\u591a\u884c\u7684\u8868\u8fbe\u5f0f\uff0c\u5e94\u8be5\u7528\u62ec\u53f7\u62ec\u8d77\u6765\uff0c\u800c\u4e0d\u8981\u7528 \u4e0e\u5f15\u5165\u6709\u5173\u7684\u5efa\u8bae PEP 8\u5bf9\u4e8e\u600e\u6837\u5728\u4ee3\u7801\u4e2d\u5f15\u5165\u5e76\u4f7f\u7528\u6a21\u5757\uff0c\u7ed9\u51fa\u4e86\u4e0b\u9762\u51e0\u6761\u5efa\u8bae\u3002 import\u8bed\u53e5\uff08\u542bfrom x import y\uff09\u603b\u662f\u5e94\u8be5\u653e\u5728\u6587\u4ef6\u5f00\u5934\u3002 \u5f15\u5165\u6a21\u5757\u65f6\uff0c\u603b\u662f\u5e94\u8be5\u4f7f\u7528\u7edd\u5bf9\u540d\u79f0\uff0c\u800c\u4e0d\u5e94\u8be5\u6839\u636e\u5f53\u524d\u6a21\u5757\u8def\u5f84\u6765\u4f7f\u7528\u76f8\u5bf9\u540d\u79f0\u3002\u4f8b\u5982\uff0c\u8981\u5f15\u5165bar\u5305\u4e2d\u7684foo\u6a21\u5757\uff0c\u5e94\u8be5\u5b8c\u6574\u5730\u5199\u51fafrom bar import foo\uff0c\u5373\u4fbf\u5f53\u524d\u8def\u5f84\u4e3abar\u5305\u91cc\uff0c\u4e5f\u4e0d\u5e94\u8be5\u7b80\u5199\u4e3aimport foo\u3002 \u5982\u679c\u4e00\u5b9a\u8981\u7528\u76f8\u5bf9\u540d\u79f0\u6765\u7f16\u5199import\u8bed\u53e5\uff0c\u90a3\u5c31\u5e94\u8be5\u660e\u786e\u5730\u5199\u6210\uff1afrom . import foo\u3002 \u6587\u4ef6\u4e2d\u7684import\u8bed\u53e5\u5e94\u8be5\u6309\u987a\u5e8f\u5212\u5206\u6210\u4e09\u4e2a\u90e8\u5206\uff1a\u9996\u5148\u5f15\u5165\u6807\u51c6\u5e93\u91cc\u7684\u6a21\u5757\uff0c\u7136\u540e\u5f15\u5165\u7b2c\u4e09\u65b9\u6a21\u5757\uff0c\u6700\u540e\u5f15\u5165\u81ea\u5df1\u7684\u6a21\u5757\u3002\u5c5e\u4e8e\u540c\u4e00\u4e2a\u90e8\u5206\u7684import\u8bed\u53e5\u6309\u5b57\u6bcd\u987a\u5e8f\u6392\u5217\u3002 \u63d0\u793a Pylint\uff08https://www.pylint.org/\uff09\u662f\u4e00\u6b3e\u6d41\u884c\u7684Python\u6e90\u7801\u9759\u6001\u5206\u6790\u5de5\u5177\u3002","title":"\u7b2c2\u6761\u3000\u9075\u5faaPEP 8\u98ce\u683c\u6307\u5357"},{"location":"python/Pythonic90Rules/Rule02/#2-pep-8","text":"Python Enhancement Proposal #8\u53eb\u4f5cPEP 8\uff0c\u5b83\u662f\u4e00\u4efd\u9488\u5bf9Python\u4ee3\u7801\u683c\u5f0f\u800c\u7f16\u8ba2\u7684\u98ce\u683c\u6307\u5357\u3002 \u5b8c\u6574\u6307\u5357\uff1ahttps://www.python.org/dev/peps/pep-0008","title":"\u7b2c2\u6761\u3000\u9075\u5faaPEP 8\u98ce\u683c\u6307\u5357"},{"location":"python/Pythonic90Rules/Rule02/#_1","text":"\u5728Python\u4e2d\uff0c\u7a7a\u767d\uff08whitespace\uff09\u7684\u4f7f\u7528\u9075\u5faa\u4ee5\u4e0b\u51e0\u6761\u5efa\u8bae\u3002 \u7528\u7a7a\u683c\uff08space\uff09\u8868\u793a\u7f29\u8fdb\uff0c\u800c\u4e0d\u8981\u7528\u5236\u8868\u7b26\uff08tab\uff09\u3002 \u548c\u8bed\u6cd5\u76f8\u5173\u7684\u6bcf\u4e00\u5c42\u7f29\u8fdb\u90fd\u75284\u4e2a\u7a7a\u683c\u8868\u793a\u3002 \u6bcf\u884c\u4e0d\u8d85\u8fc779\u4e2a\u5b57\u7b26\u3002 \u5bf9\u4e8e\u5360\u636e\u591a\u884c\u7684\u957f\u8868\u8fbe\u5f0f\u6765\u8bf4\uff0c\u9664\u4e86\u9996\u884c\u4e4b\u5916\u7684\u5176\u4f59\u5404\u884c\u90fd\u5e94\u8be5\u5728\u901a\u5e38\u7684\u7f29\u8fdb\u7ea7\u522b\u4e4b\u4e0a\u518d\u52a04\u4e2a\u7a7a\u683c\u3002 \u5728\u540c\u4e00\u4efd\u6587\u4ef6\u4e2d\uff0c\u51fd\u6570\u4e0e\u7c7b\u4e4b\u95f4\u7528\u4e24\u4e2a\u7a7a\u884c\u9694\u5f00\u3002 \u5728\u540c\u4e00\u4e2a\u7c7b\u4e2d\uff0c\u65b9\u6cd5\u4e0e\u65b9\u6cd5\u4e4b\u95f4\u7528\u4e00\u4e2a\u7a7a\u884c\u9694\u5f00\u3002 \u4f7f\u7528\u5b57\u5178\u65f6\uff0c\u952e\u4e0e\u5192\u53f7\u4e4b\u95f4\u4e0d\u52a0\u7a7a\u683c\uff0c\u5199\u5728\u540c\u4e00\u884c\u7684\u5192\u53f7\u548c\u503c\u4e4b\u95f4\u5e94\u8be5\u52a0\u4e00\u4e2a\u7a7a\u683c\u3002 \u7ed9\u53d8\u91cf\u8d4b\u503c\u65f6\uff0c\u8d4b\u503c\u7b26\u53f7\u7684\u5de6\u8fb9\u548c\u53f3\u8fb9\u5404\u52a0\u4e00\u4e2a\u7a7a\u683c\uff0c\u5e76\u4e14\u53ea\u52a0\u4e00\u4e2a\u7a7a\u683c\u5c31\u597d\u3002 \u7ed9\u53d8\u91cf\u7684\u7c7b\u578b\u505a\u6ce8\u89e3\uff08annotation\uff09\u65f6\uff0c\u4e0d\u8981\u628a\u53d8\u91cf\u540d\u548c\u5192\u53f7\u9694\u5f00\uff0c\u4f46\u5728\u7c7b\u578b\u4fe1\u606f\u524d\u5e94\u8be5\u6709\u4e00\u4e2a\u7a7a\u683c\u3002","title":"\u4e0e\u7a7a\u767d\u6709\u5173\u7684\u5efa\u8bae"},{"location":"python/Pythonic90Rules/Rule02/#_2","text":"PEP 8\u5efa\u8bae\u91c7\u7528\u4e0d\u540c\u7684\u65b9\u5f0f\u6765\u7ed9Python\u4ee3\u7801\u4e2d\u7684\u5404\u4e2a\u90e8\u5206\u547d\u540d\uff0c\u9075\u5faa\u4ee5\u4e0b\u4e0e\u547d\u540d\u76f8\u5173\u7684\u5efa\u8bae\u3002 \u51fd\u6570\u3001\u53d8\u91cf\u53ca\u5c5e\u6027\u7528\u5c0f\u5199\u5b57\u6bcd\u6765\u62fc\u5199\uff0c\u5404\u5355\u8bcd\u4e4b\u95f4\u7528\u4e0b\u5212\u7ebf\u76f8\u8fde\uff0c\u4f8b\u5982\uff1alowercase_underscore\u3002 \u53d7\u4fdd\u62a4\u7684\u5b9e\u4f8b\u5c5e\u6027\uff0c\u7528\u4e00\u4e2a\u4e0b\u5212\u7ebf\u5f00\u5934\uff0c\u4f8b\u5982\uff1a_leading_underscore\u3002 \u79c1\u6709\u7684\u5b9e\u4f8b\u5c5e\u6027\uff0c\u7528\u4e24\u4e2a\u4e0b\u5212\u7ebf\u5f00\u5934\uff0c\u4f8b\u5982\uff1a__double_leading_underscore\u3002 \u7c7b\uff08\u5305\u62ec\u5f02\u5e38\uff09\u547d\u540d\u65f6\uff0c\u6bcf\u4e2a\u5355\u8bcd\u7684\u9996\u5b57\u6bcd\u5747\u5927\u5199\uff0c\u4f8b\u5982\uff1aCapitalizedWord\u3002 \u6a21\u5757\u7ea7\u522b\u7684\u5e38\u91cf\uff0c\u6240\u6709\u5b57\u6bcd\u90fd\u5927\u5199\uff0c\u5404\u5355\u8bcd\u4e4b\u95f4\u7528\u4e0b\u5212\u7ebf\u76f8\u8fde\uff0c\u4f8b\u5982\uff1aALL_CAPS\u3002 \u7c7b\u4e2d\u7684\u5b9e\u4f8b\u65b9\u6cd5\uff0c\u5e94\u8be5\u628a\u7b2c\u4e00\u4e2a\u53c2\u6570\u547d\u540d\u4e3aself\uff0c\u7528\u6765\u8868\u793a\u8be5\u5bf9\u8c61\u672c\u8eab\u3002 \u7c7b\u65b9\u6cd5\u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\uff0c\u5e94\u8be5\u547d\u540d\u4e3acls\uff0c\u7528\u6765\u8868\u793a\u8fd9\u4e2a\u7c7b\u672c\u8eab\u3002","title":"\u4e0e\u547d\u540d\u6709\u5173\u7684\u5efa\u8bae"},{"location":"python/Pythonic90Rules/Rule02/#_3","text":"The Zen of Python\u4e2d\u63d0\u5230\uff1a\u201c\u6bcf\u4ef6\u4e8b\u90fd\u5e94\u8be5\u6709\u7b80\u5355\u7684\u505a\u6cd5\uff0c\u800c\u4e14\u6700\u597d\u53ea\u6709\u4e00\u79cd\u3002\u201dPEP 8\u5c31\u8bd5\u7740\u8fd0\u7528\u8fd9\u4e2a\u7406\u5ff5\uff0c\u6765\u89c4\u8303\u8868\u8fbe\u5f0f\u548c\u8bed\u53e5\u7684\u5199\u6cd5\u3002 \u91c7\u7528\u884c\u5185\u5426\u5b9a\uff0c\u5373\u628a\u5426\u5b9a\u8bcd\u76f4\u63a5\u5199\u5728\u8981\u5426\u5b9a\u7684\u5185\u5bb9\u524d\u9762\uff0c\u800c\u4e0d\u8981\u653e\u5728\u6574\u4e2a\u8868\u8fbe\u5f0f\u7684\u524d\u9762\uff0c\u4f8b\u5982\u5e94\u8be5\u5199if a is not b\uff0c\u800c\u4e0d\u662fif not a is b\u3002 \u4e0d\u8981\u901a\u8fc7\u957f\u5ea6\u5224\u65ad\u5bb9\u5668\u6216\u5e8f\u5217\u662f\u4e0d\u662f\u7a7a\u7684\uff0c\u4f8b\u5982\u4e0d\u8981\u901a\u8fc7if len(somelist) == 0\u5224\u65adsomelist\u662f\u5426\u4e3a[]\u6216''\u7b49\u7a7a\u503c\uff0c\u800c\u662f\u5e94\u8be5\u91c7\u7528if not somelist\u8fd9\u6837\u7684\u5199\u6cd5\u6765\u5224\u65ad\uff0c\u56e0\u4e3aPython\u4f1a\u628a\u7a7a\u503c\u81ea\u52a8\u8bc4\u4f30\u4e3aFalse\u3002 \u5982\u679c\u8981\u5224\u65ad\u5bb9\u5668\u6216\u5e8f\u5217\u91cc\u9762\u6709\u6ca1\u6709\u5185\u5bb9\uff08\u6bd4\u5982\u8981\u5224\u65ad somelist \u662f\u5426\u4e3a[1]\u6216'hi'\u8fd9\u6837\u975e\u7a7a\u7684\u503c\uff09\uff0c\u4e5f\u4e0d\u5e94\u8be5\u901a\u8fc7\u957f\u5ea6\u6765\u5224\u65ad\uff0c\u800c\u662f\u5e94\u8be5\u91c7\u7528if somelist \u8bed\u53e5\uff0c\u56e0\u4e3aPython\u4f1a\u628a\u975e\u7a7a\u7684\u503c\u81ea\u52a8\u5224\u5b9a\u4e3aTrue\u3002 \u4e0d\u8981\u628aif\u8bed\u53e5\u3001for\u5faa\u73af\u3001while\u5faa\u73af\u53caexcept\u590d\u5408\u8bed\u53e5\u6324\u5728\u4e00\u884c\u3002\u5e94\u8be5\u628a\u8fd9\u4e9b\u8bed\u53e5\u5206\u6210\u591a\u884c\u6765\u5199\uff0c\u8fd9\u6837\u66f4\u52a0\u6e05\u6670\u3002 \u5982\u679c\u8868\u8fbe\u5f0f\u4e00\u884c\u5199\u4e0d\u4e0b\uff0c\u53ef\u4ee5\u7528\u62ec\u53f7\u5c06\u5176\u62ec\u8d77\u6765\uff0c\u800c\u4e14\u8981\u9002\u5f53\u5730\u6dfb\u52a0\u6362\u884c\u4e0e\u7f29\u8fdb\u4ee5\u4fbf\u4e8e\u9605\u8bfb\u3002\u591a\u884c\u7684\u8868\u8fbe\u5f0f\uff0c\u5e94\u8be5\u7528\u62ec\u53f7\u62ec\u8d77\u6765\uff0c\u800c\u4e0d\u8981\u7528","title":"\u4e0e\u8868\u8fbe\u5f0f\u548c\u8bed\u53e5\u6709\u5173\u7684\u5efa\u8bae"},{"location":"python/Pythonic90Rules/Rule02/#_4","text":"PEP 8\u5bf9\u4e8e\u600e\u6837\u5728\u4ee3\u7801\u4e2d\u5f15\u5165\u5e76\u4f7f\u7528\u6a21\u5757\uff0c\u7ed9\u51fa\u4e86\u4e0b\u9762\u51e0\u6761\u5efa\u8bae\u3002 import\u8bed\u53e5\uff08\u542bfrom x import y\uff09\u603b\u662f\u5e94\u8be5\u653e\u5728\u6587\u4ef6\u5f00\u5934\u3002 \u5f15\u5165\u6a21\u5757\u65f6\uff0c\u603b\u662f\u5e94\u8be5\u4f7f\u7528\u7edd\u5bf9\u540d\u79f0\uff0c\u800c\u4e0d\u5e94\u8be5\u6839\u636e\u5f53\u524d\u6a21\u5757\u8def\u5f84\u6765\u4f7f\u7528\u76f8\u5bf9\u540d\u79f0\u3002\u4f8b\u5982\uff0c\u8981\u5f15\u5165bar\u5305\u4e2d\u7684foo\u6a21\u5757\uff0c\u5e94\u8be5\u5b8c\u6574\u5730\u5199\u51fafrom bar import foo\uff0c\u5373\u4fbf\u5f53\u524d\u8def\u5f84\u4e3abar\u5305\u91cc\uff0c\u4e5f\u4e0d\u5e94\u8be5\u7b80\u5199\u4e3aimport foo\u3002 \u5982\u679c\u4e00\u5b9a\u8981\u7528\u76f8\u5bf9\u540d\u79f0\u6765\u7f16\u5199import\u8bed\u53e5\uff0c\u90a3\u5c31\u5e94\u8be5\u660e\u786e\u5730\u5199\u6210\uff1afrom . import foo\u3002 \u6587\u4ef6\u4e2d\u7684import\u8bed\u53e5\u5e94\u8be5\u6309\u987a\u5e8f\u5212\u5206\u6210\u4e09\u4e2a\u90e8\u5206\uff1a\u9996\u5148\u5f15\u5165\u6807\u51c6\u5e93\u91cc\u7684\u6a21\u5757\uff0c\u7136\u540e\u5f15\u5165\u7b2c\u4e09\u65b9\u6a21\u5757\uff0c\u6700\u540e\u5f15\u5165\u81ea\u5df1\u7684\u6a21\u5757\u3002\u5c5e\u4e8e\u540c\u4e00\u4e2a\u90e8\u5206\u7684import\u8bed\u53e5\u6309\u5b57\u6bcd\u987a\u5e8f\u6392\u5217\u3002","title":"\u4e0e\u5f15\u5165\u6709\u5173\u7684\u5efa\u8bae"},{"location":"python/Pythonic90Rules/Rule02/#_5","text":"Pylint\uff08https://www.pylint.org/\uff09\u662f\u4e00\u6b3e\u6d41\u884c\u7684Python\u6e90\u7801\u9759\u6001\u5206\u6790\u5de5\u5177\u3002","title":"\u63d0\u793a"},{"location":"python/Pythonic90Rules/Rule03/","text":"\u7b2c3\u6761\u3000\u4e86\u89e3bytes\u4e0estr\u7684\u533a\u522b UNICODE\u7f16\u7801\u7b80\u4ecb ASCII\u7f16\u7801\u89c4\u5b9a1\u4e2a\u5b57\u8282\u7b49\u4e8e8\u4e2a\u6bd4\u7279\u4f4d\uff0c\u4ee3\u88681\u4e2a\u5b57\u7b26\u7684\u7f16\u7801\uff0c\u9664\u4e86\u7b2c\u4e00\u4f4d\u662f0\uff0c \u5176\u4ed67\u4f4d\u90fd\u53ef\u4ee5\u67090 \u6216\u8005 1 \u4e24\u4e2a\u9009\u62e9\uff0c\u6240\u4ee5ASCII \u4e00\u5171\u53ef\u4ee5\u8868\u793a 2^7 \uff0c\u4e5f\u5c31\u662f128\u4e2a\u5b57\u7b26\u3002\u5305\u62eca-z \u5927\u5c0f\u5199\uff0c0-9 \u6570\u5b57 \u548c\u4e00\u4e9b\u6807\u70b9\u7b26\u53f7\u7b49\u3002\u5176\u4e2d\u771f\u6b63\u53ef\u8bfb\u7684\u53ea\u670995 \u4e2a\u5b57\u7b26\uff0c\u5176\u4ed6\u7684\u90fd\u662f\u4e00\u4e9b\u63a7\u5236\u7b26\uff0c\u6bd4\u5982NUL\uff0c\u4ee3\u8868NULL\u3002 \u591a\u5b57\u8282\u7f16\u7801\uff0c\u6bd4\u5982\u53cc\u5b57\u8282\u7f16\u7801\u65b9\u5f0f\uff0cBIG-5\u548cGB18030\u5305\u542b\u4e86\u5927\u591a\u6570\u4e2d\u6587\u7b80\u4f53\u548c\u7e41\u4f53\u3002\u8fd9\u4e2a\u7f16\u7801\u4e0d\u517c\u5bb9ASCII\uff0c\u540c\u65f6\u8fd8\u5360\u7528\u8f83\u591a\u7684\u7a7a\u95f4\u548c\u5185\u5b58\u3002 UNICODE\u4e0d\u662f\u4e00\u79cd\u7f16\u7801\uff0c \u800c\u662f\u5b9a\u4e49\u4e86\u4e00\u4e2a\u8868\uff0c \u8868\u4e2d\u4e3a\u4e16\u754c\u4e0a\u6bcf\u79cd\u8bed\u8a00\u4e2d\u7684\u6bcf\u4e2a\u5b57\u7b26\u8bbe\u5b9a\u4e86\u7edf\u4e00\u5e76\u4e14\u552f\u4e00\u7684\u7801\u4f4d \uff08code point\uff09\uff0c\u4ee5\u6ee1\u8db3\u8de8\u8bed\u8a00\u3001\u8de8\u5e73\u53f0\u8fdb\u884c\u6587\u672c\u8f6c\u6362\u7684\u8981\u6c42\u3002 UTF-8\u7f16\u7801\u89c4\u5b9a\u82f1\u6587\u5b57\u6bcd\u7cfb\u5217\u75281\u4e2a\u5b57\u8282\u8868\u793a\uff0c\u6c49\u5b57\u75283\u4e2a\u5b57\u8282\u8868\u793a\u7b49\u7b49\u3002UTF-8\u7684\u7279\u70b9\u662f\u5bf9\u4e0d\u540c\u8303\u56f4\u7684\u5b57\u7b26\u4f7f\u7528\u4e0d\u540c\u957f\u5ea6\u7684\u7f16\u7801\u3002 \u4e0b\u8868\u8868\u793a\u5982\u4f55\u4ece\u4e00\u4e2a\u4eceUnicode \u8f6c\u5316\u5230UTF-8 , \u5bf9\u4e8e\u524d0x7F\u7684\u5b57\u7b26\uff0cUTF-8\u7f16\u7801\u548cASCII\u7801\u662f\u4e00\u4e00\u5bf9\u5e94\u7684\u3002 \u5982\u679c\u4e00\u4e2a\u5b57\u7b26\u5728000800-00FFFF \u4e4b\u95f4\uff0c\u90a3\u8f6c\u5316\u5230UTF-8 \u9700\u8981\u7528\u4e09\u5b57\u8282\u6a21\u677f\uff0c\u4f7f\u752816\u4e2a\u7801\u4f4d\uff0c\u6bcf\u4e2ax\u5c31\u662f\u4e00\u4e2a\u7801\u4f4d\u3002 Unicode\u7f16\u7801\uff08\u5341\u516d\u8fdb\u5236\uff09 UTF-8\u5b57\u8282\u6d41\uff08\u4e8c\u8fdb\u5236\uff09 000000 - 00007F 0xxxxxxx 000080 - 0007FF 110xxxx 10xxxxxx 000800 - 00FFFF 1110xxxx 10xxxxxx 10xxxxxx 010000 - 10FFFF 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx Python\u6709\u4e24\u79cd\u7c7b\u578b\u53ef\u4ee5\u8868\u793a\u5b57\u7b26\u5e8f\u5217(sequence)\uff1a\u4e00\u79cd\u662fbytes\uff0c\u53e6\u4e00\u79cd\u662fstr\u3002 bytes\u5b9e\u4f8b\u5305\u542b\u7684\u662f\u539f\u59cb\u6570\u636e\uff0c\u53738\u4f4d\u7684\u65e0\u7b26\u53f7\u503c\uff08\u901a\u5e38\u6309\u7167ASCII\u7f16\u7801\u6807\u51c6\u6765\u663e\u793a\uff09\u3002 str\u5b9e\u4f8b\u5305\u542b\u7684\u662fUnicode\u7801\u70b9\uff08code point\uff0c\u4e5f\u53eb\u4f5c\u4ee3\u7801\u70b9\uff09\uff0c\u8fd9\u4e9b\u7801\u70b9\u4e0e\u4eba\u7c7b\u8bed\u8a00\u4e4b\u4e2d\u7684\u6587\u672c\u5b57\u7b26\u76f8\u5bf9\u5e94\u3002 >>> a = b'h\\x65llo' >>> a b'hello' >>> list(a) [104, 101, 108, 108, 111] >>> b = 'a\\u0300 hello' >>> b 'a\u0300 hello' >>> list(b) ['a', '\u0300', ' ', 'h', 'e', 'l', 'l', 'o'] \u5185\u5b58\u662funicode\u7f16\u7801\u683c\u5f0f\uff0c\u786c\u76d8\u662futf-8\u3002 \u5728\u505a\u7f16\u7801\u8f6c\u6362\u65f6\u5019\uff0c\u901a\u5e38\u7528unicode\u4f5c\u4e3a\u4e2d\u95f4\u7f16\u7801\u3002 \u5148\u5c06\u5176\u4ed6\u7f16\u7801\u7684\u5b57\u7b26\u4e32\u89e3\u7801(decode)\u6210unicode,\u518d\u4eceunicode\u7f16\u7801(encode)\u6210\u53e6\u4e00\u79cd\u7f16\u7801\u683c\u5f0f\u3002 decode\u7684\u4f5c\u7528\u662f\u5c06\u4e8c\u8fdb\u5236\u6570\u636e\u89e3\u7801\u6210unicode\u7f16\u7801\u3002 encode\u7684\u4f5c\u7528\u662f\u5c06unicode\u7f16\u7801\u7684\u5b57\u7b26\u4e32\u7f16\u7801\u6210\u4e8c\u8fdb\u5236\u6570\u636e\u3002 \u8981\u628aUnicode\u6570\u636e\u8f6c\u6362\u6210\u4e8c\u8fdb\u5236\u6570\u636e\uff0c\u5fc5\u987b\u8c03\u7528str\u7684encode\u65b9\u6cd5\u3002 \u8981\u628a\u4e8c\u8fdb\u5236\u6570\u636e\u8f6c\u6362\u6210Unicode\u6570\u636e\uff0c\u5fc5\u987b\u8c03\u7528bytes\u7684decode\u65b9\u6cd5\u3002 \u8c03\u7528\u8fd9\u4e9b\u65b9\u6cd5\u7684\u65f6\u5019\uff0c\u53ef\u4ee5\u660e\u786e\u6307\u51fa\u81ea\u5df1\u8981\u4f7f\u7528\u7684\u7f16\u7801\u65b9\u6848\uff0c\u4e5f\u53ef\u4ee5\u91c7\u7528\u7cfb\u7edf\u9ed8\u8ba4\u7684\u65b9\u6848\uff0c\u901a\u5e38\u662f\u6307UTF-8\u3002 \u5728bytes\u548cstr\u7684\u4e92\u76f8\u8f6c\u6362\u8fc7\u7a0b\u4e2d\uff0c\u5b9e\u9645\u5c31\u662f\u7f16\u7801\u89e3\u7801\u7684\u8fc7\u7a0b\uff0c\u5fc5\u987b\u663e\u5f0f\u5730\u6307\u5b9a\u7f16\u7801\u683c\u5f0f\u3002 >>> s = '\u4e2d\u6587' >>> s '\u4e2d\u6587' >>> type(s) <class 'str'> >>> b = bytes(s, encoding='utf-8') >>> b b'\\xe4\\xb8\\xad\\xe6\\x96\\x87' >>> type(b) <class 'bytes'> >>> s.encode('utf-8') b'\\xe4\\xb8\\xad\\xe6\\x96\\x87' >>> b.decode('utf-8') '\u4e2d\u6587' >>> >>> str(b, encoding='utf-8') '\u4e2d\u6587' \u7f16\u5199Python\u7a0b\u5e8f\u7684\u65f6\u5019\uff0c\u4e00\u5b9a\u8981\u628a\u89e3\u7801\u548c\u7f16\u7801\u64cd\u4f5c\u653e\u5728\u754c\u9762\u6700\u5916\u5c42\u6765\u505a\uff0c\u8ba9\u7a0b\u5e8f\u7684\u6838\u5fc3\u90e8\u5206\u53ef\u4ee5\u4f7f\u7528Unicode\u6570\u636e\u6765\u8fd0\u4f5c\uff0c\u8fd9\u79cd\u529e\u6cd5\u901a\u5e38\u53eb\u4f5cUnicode\u4e09\u660e\u6cbb\uff08Unicode sandwich\uff09\u3002 \u6211\u4eec\u53ef\u4ee5\u7f16\u5199\u8f85\u52a9\u51fd\u6570\u6765\u786e\u4fdd\u7a0b\u5e8f\u6536\u5230\u7684\u5b57\u7b26\u5e8f\u5217\u786e\u5b9e\u662f\u671f\u671b\u8981\u64cd\u4f5c\u7684\u7c7b\u578b\uff08\u8981\u77e5\u9053\u81ea\u5df1\u60f3\u64cd\u4f5c\u7684\u5230\u5e95\u662fUnicode\u7801\u70b9\uff0c\u8fd8\u662f\u539f\u59cb\u76848\u4f4d\u503c\u3002\u7528UTF-8\u6807\u51c6\u7ed9\u5b57\u7b26\u4e32\u7f16\u7801\uff0c\u5f97\u5230\u7684\u5c31\u662f\u8fd9\u6837\u7684\u4e00\u7cfb\u52178\u4f4d\u503c\uff09\u3002 \u8f85\u52a9\u51fd\u6570to_str\u63a5\u53d7bytes\u6216str\u5b9e\u4f8b\uff0c\u5e76\u8fd4\u56destr\uff1a >>> def to_str(bytes_or_str): ... if isinstance(bytes_or_str, bytes): ... value = bytes_or_str.decode('utf-8') ... else: ... value = bytes_or_str ... return value ... >>> repr(to_str(b'foo')) \"'foo'\" >>> repr(to_str('foo')) \"'foo'\" >>> to_str('foo') 'foo' >>> to_str(b'foo') 'foo' \u8f85\u52a9\u51fd\u6570to_bytes\u63a5\u53d7bytes\u6216str\u5b9e\u4f8b\uff0c\u5e76\u8fd4\u56debytes\uff1a >>> def to_bytes(bytes_or_str): ... if isinstance(bytes_or_str, str): ... value = bytes_or_str.encode('utf-8') ... else: ... value = bytes_or_str ... return value ... >>> repr(to_bytes(b'foo')) \"b'foo'\" >>> repr(to_bytes('foo')) \"b'foo'\" >>> to_bytes(b'foo') b'foo' >>> to_bytes('foo') bytes\u4e0estr\u8fd9\u4e24\u79cd\u5b9e\u4f8b\u4e0d\u80fd\u5728\u67d0\u4e9b\u64cd\u4f5c\u7b26\uff08\u4f8b\u5982>\u3001==\u3001+\u3001%\u64cd\u4f5c\u7b26\uff09\u4e0a\u9762\u6df7\u7528\u3002 >>> b'one' + b'two' b'onetwo' >>> 'one'+'two' 'onetwo' \u4e0d\u80fd\u5c06str\u5b9e\u4f8b\u6dfb\u52a0\u5230bytes\u5b9e\u4f8b\uff1a >>> b'one' + 'two' Traceback (most recent call last): File \"<stdin>\", line 1, in <module> TypeError: can't concat str to bytes \u4e0d\u80fd\u5c06byte\u5b9e\u4f8b\u6dfb\u52a0\u5230str\u5b9e\u4f8b\uff1a > > > 'one' + b'two' Traceback (most recent call last): File \"<stdin>\", line 1, in <module> TypeError: can only concatenate str (not \"bytes\") to str str\u5b9e\u4f8b\u4e0d\u80fd\u4e0ebytes\u5b9e\u4f8b\u6bd4\u8f83\uff0c\u5373\u4fbf\u8fd9\u4e24\u4e2a\u5b9e\u4f8b\u8868\u793a\u7684\u5b57\u7b26\u5b8c\u5168\u76f8\u540c\uff0c\u5b83\u4eec\u4e5f\u4e0d\u76f8\u7b49\uff1a >>> assert 'red' >= b'red' Traceback (most recent call last): File \"<stdin>\", line 1, in <module> TypeError: '>=' not supported between instances of 'str' and 'bytes' >>> assert b'red' >= 'red' Traceback (most recent call last): File \"<stdin>\", line 1, in <module> TypeError: '>=' not supported between instances of 'bytes' and 'str' \u4e24\u79cd\u7c7b\u578b\u7684\u5b9e\u4f8b\u90fd\u53ef\u4ee5\u51fa\u73b0\u5728%\u64cd\u4f5c\u7b26\u7684\u53f3\u4fa7\uff0c\u7528\u6765\u66ff\u6362\u5de6\u4fa7\u90a3\u4e2a\u683c\u5f0f\u5b57\u7b26\u4e32\uff08format string\uff09\u91cc\u9762\u7684%s\u3002 >>> print(b'red %s' % b'blue') b'red blue' >>> print('red %s' % 'blue') red blue \u5982\u679c\u683c\u5f0f\u5b57\u7b26\u4e32\u662fbytes\u7c7b\u578b\uff0c\u90a3\u4e48\u4e0d\u80fd\u7528str\u5b9e\u4f8b\u6765\u66ff\u6362\u5176\u4e2d\u7684%s\u3002 \u5982\u679c\u683c\u5f0f\u5b57\u7b26\u4e32\u662fstr\u7c7b\u578b\uff0c\u5219\u53ef\u4ee5\u7528bytes\u5b9e\u4f8b\u6765\u66ff\u6362\u5176\u4e2d\u7684%s\u3002(\u7cfb\u7edf\u5728bytes\u5b9e\u4f8b\u4e0a\u9762\u8c03\u7528__repr__ \u65b9\u6cd5\uff08Rule75\uff09\uff0c\u7136\u540e\u7528\u8fd9\u6b21\u8c03\u7528\u6240\u5f97\u5230\u7684\u7ed3\u679c\u66ff\u6362\u683c\u5f0f\u5b57\u7b26\u4e32\u91cc\u7684%s\uff0c\u56e0\u6b64\u7a0b\u5e8f\u4f1a\u76f4\u63a5\u8f93\u51fab'blue'\uff0c\u800c\u4e0d\u662f\u8f93\u51fablue\u672c\u8eab\u3002) >>> print(b'red %s' % 'blue') Traceback (most recent call last): File \"<stdin>\", line 1, in <module> TypeError: %b requires a bytes-like object, or an object that implements __bytes__, not 'str' >>> print('red %s' % b'blue') red b'blue' \u5728\u64cd\u4f5c\u6587\u4ef6\u53e5\u67c4\u7684\u65f6\u5019\uff0c\u8fd9\u91cc\u7684\u53e5\u67c4\u6307\u7531\u5185\u7f6e\u7684open\u51fd\u6570\u8fd4\u56de\u7684\u53e5\u67c4\u3002\u8fd9\u6837\u7684\u53e5\u67c4\u9ed8\u8ba4\u9700\u8981\u4f7f\u7528Unicode\u5b57\u7b26\u4e32\u64cd\u4f5c\uff0c\u800c\u4e0d\u80fd\u91c7\u7528\u539f\u59cb\u7684bytes\u3002 \u4ece\u6587\u4ef6\u4e2d\u8bfb\u53d6\u4e8c\u8fdb\u5236\u6570\u636e\uff08\u6216\u8005\u628a\u4e8c\u8fdb\u5236\u6570\u636e\u5199\u5165\u6587\u4ef6\uff09\u65f6\uff0c\u5e94\u8be5\u7528'rb'\uff08'wb'\uff09\u8fd9\u6837\u7684\u4e8c\u8fdb\u5236\u6a21\u5f0f\u6253\u5f00\u6587\u4ef6\u3002 >>> with open('./temp/data.bin', 'w') as f: ... f.write(b'\\xf1\\xf2\\xf3\\xf4\\xf5') ... Traceback (most recent call last): File \"<stdin>\", line 2, in <module> TypeError: write() argument must be str, not bytes >>> >>> with open('./temp/data.bin', 'wb') as f: ... f.write(b'\\xf1\\xf2\\xf3\\xf4\\xf5') ... 5 >>> >>> with open('./temp/data.bin', 'r') as f: ... data = f.read() ... Traceback (most recent call last): File \"<stdin>\", line 2, in <module> File \"/usr/local/lib/python3.9/codecs.py\", line 322, in decode (result, consumed) = self._buffer_decode(data, self.errors, final) UnicodeDecodeError: 'utf-8' codec can't decode byte 0xf1 in position 0: invalid continuation byte >>> >>> >>> with open('./temp/data.bin', 'rb') as f: ... data = f.read() ... >>> assert data == b'\\xf1\\xf2\\xf3\\xf4\\xf5' >>> \u5982\u679c\u8981\u4ece\u6587\u4ef6\u4e2d\u8bfb\u53d6\uff08\u6216\u8005\u8981\u5199\u5165\u6587\u4ef6\u4e4b\u4e2d\uff09\u7684\u662fUnicode\u6570\u636e\uff0c\u90a3\u4e48\u5fc5\u987b\u6ce8\u610f\u7cfb\u7edf\u9ed8\u8ba4\u7684\u6587\u672c\u7f16\u7801\u65b9\u6848\u3002\u82e5\u65e0\u6cd5\u80af\u5b9a\uff0c\u53ef\u901a\u8fc7encoding\u53c2\u6570\u660e\u786e\u6307\u5b9a\u3002 >>> with open('./temp/data.bin', 'r', encoding='cp1252') as f: ... data = f.read() ... >>> assert data == b'\\xf1\\xf2\\xf3\\xf4\\xf5' Traceback (most recent call last): File \"<stdin>\", line 1, in <module> AssertionError \u67e5\u770b\u5f53\u524d\u64cd\u4f5c\u7cfb\u7edf\u9ed8\u8ba4\u7684\u7f16\u7801\u6807\u51c6 >>> import locale >>> locale.getpreferredencoding() 'UTF-8' >>>","title":"\u7b2c3\u6761\u3000\u4e86\u89e3bytes\u4e0estr\u7684\u533a\u522b"},{"location":"python/Pythonic90Rules/Rule03/#3-bytesstr","text":"","title":"\u7b2c3\u6761\u3000\u4e86\u89e3bytes\u4e0estr\u7684\u533a\u522b"},{"location":"python/Pythonic90Rules/Rule03/#unicode","text":"ASCII\u7f16\u7801\u89c4\u5b9a1\u4e2a\u5b57\u8282\u7b49\u4e8e8\u4e2a\u6bd4\u7279\u4f4d\uff0c\u4ee3\u88681\u4e2a\u5b57\u7b26\u7684\u7f16\u7801\uff0c\u9664\u4e86\u7b2c\u4e00\u4f4d\u662f0\uff0c \u5176\u4ed67\u4f4d\u90fd\u53ef\u4ee5\u67090 \u6216\u8005 1 \u4e24\u4e2a\u9009\u62e9\uff0c\u6240\u4ee5ASCII \u4e00\u5171\u53ef\u4ee5\u8868\u793a 2^7 \uff0c\u4e5f\u5c31\u662f128\u4e2a\u5b57\u7b26\u3002\u5305\u62eca-z \u5927\u5c0f\u5199\uff0c0-9 \u6570\u5b57 \u548c\u4e00\u4e9b\u6807\u70b9\u7b26\u53f7\u7b49\u3002\u5176\u4e2d\u771f\u6b63\u53ef\u8bfb\u7684\u53ea\u670995 \u4e2a\u5b57\u7b26\uff0c\u5176\u4ed6\u7684\u90fd\u662f\u4e00\u4e9b\u63a7\u5236\u7b26\uff0c\u6bd4\u5982NUL\uff0c\u4ee3\u8868NULL\u3002 \u591a\u5b57\u8282\u7f16\u7801\uff0c\u6bd4\u5982\u53cc\u5b57\u8282\u7f16\u7801\u65b9\u5f0f\uff0cBIG-5\u548cGB18030\u5305\u542b\u4e86\u5927\u591a\u6570\u4e2d\u6587\u7b80\u4f53\u548c\u7e41\u4f53\u3002\u8fd9\u4e2a\u7f16\u7801\u4e0d\u517c\u5bb9ASCII\uff0c\u540c\u65f6\u8fd8\u5360\u7528\u8f83\u591a\u7684\u7a7a\u95f4\u548c\u5185\u5b58\u3002 UNICODE\u4e0d\u662f\u4e00\u79cd\u7f16\u7801\uff0c \u800c\u662f\u5b9a\u4e49\u4e86\u4e00\u4e2a\u8868\uff0c \u8868\u4e2d\u4e3a\u4e16\u754c\u4e0a\u6bcf\u79cd\u8bed\u8a00\u4e2d\u7684\u6bcf\u4e2a\u5b57\u7b26\u8bbe\u5b9a\u4e86\u7edf\u4e00\u5e76\u4e14\u552f\u4e00\u7684\u7801\u4f4d \uff08code point\uff09\uff0c\u4ee5\u6ee1\u8db3\u8de8\u8bed\u8a00\u3001\u8de8\u5e73\u53f0\u8fdb\u884c\u6587\u672c\u8f6c\u6362\u7684\u8981\u6c42\u3002 UTF-8\u7f16\u7801\u89c4\u5b9a\u82f1\u6587\u5b57\u6bcd\u7cfb\u5217\u75281\u4e2a\u5b57\u8282\u8868\u793a\uff0c\u6c49\u5b57\u75283\u4e2a\u5b57\u8282\u8868\u793a\u7b49\u7b49\u3002UTF-8\u7684\u7279\u70b9\u662f\u5bf9\u4e0d\u540c\u8303\u56f4\u7684\u5b57\u7b26\u4f7f\u7528\u4e0d\u540c\u957f\u5ea6\u7684\u7f16\u7801\u3002 \u4e0b\u8868\u8868\u793a\u5982\u4f55\u4ece\u4e00\u4e2a\u4eceUnicode \u8f6c\u5316\u5230UTF-8 , \u5bf9\u4e8e\u524d0x7F\u7684\u5b57\u7b26\uff0cUTF-8\u7f16\u7801\u548cASCII\u7801\u662f\u4e00\u4e00\u5bf9\u5e94\u7684\u3002 \u5982\u679c\u4e00\u4e2a\u5b57\u7b26\u5728000800-00FFFF \u4e4b\u95f4\uff0c\u90a3\u8f6c\u5316\u5230UTF-8 \u9700\u8981\u7528\u4e09\u5b57\u8282\u6a21\u677f\uff0c\u4f7f\u752816\u4e2a\u7801\u4f4d\uff0c\u6bcf\u4e2ax\u5c31\u662f\u4e00\u4e2a\u7801\u4f4d\u3002 Unicode\u7f16\u7801\uff08\u5341\u516d\u8fdb\u5236\uff09 UTF-8\u5b57\u8282\u6d41\uff08\u4e8c\u8fdb\u5236\uff09 000000 - 00007F 0xxxxxxx 000080 - 0007FF 110xxxx 10xxxxxx 000800 - 00FFFF 1110xxxx 10xxxxxx 10xxxxxx 010000 - 10FFFF 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx Python\u6709\u4e24\u79cd\u7c7b\u578b\u53ef\u4ee5\u8868\u793a\u5b57\u7b26\u5e8f\u5217(sequence)\uff1a\u4e00\u79cd\u662fbytes\uff0c\u53e6\u4e00\u79cd\u662fstr\u3002 bytes\u5b9e\u4f8b\u5305\u542b\u7684\u662f\u539f\u59cb\u6570\u636e\uff0c\u53738\u4f4d\u7684\u65e0\u7b26\u53f7\u503c\uff08\u901a\u5e38\u6309\u7167ASCII\u7f16\u7801\u6807\u51c6\u6765\u663e\u793a\uff09\u3002 str\u5b9e\u4f8b\u5305\u542b\u7684\u662fUnicode\u7801\u70b9\uff08code point\uff0c\u4e5f\u53eb\u4f5c\u4ee3\u7801\u70b9\uff09\uff0c\u8fd9\u4e9b\u7801\u70b9\u4e0e\u4eba\u7c7b\u8bed\u8a00\u4e4b\u4e2d\u7684\u6587\u672c\u5b57\u7b26\u76f8\u5bf9\u5e94\u3002 >>> a = b'h\\x65llo' >>> a b'hello' >>> list(a) [104, 101, 108, 108, 111] >>> b = 'a\\u0300 hello' >>> b 'a\u0300 hello' >>> list(b) ['a', '\u0300', ' ', 'h', 'e', 'l', 'l', 'o'] \u5185\u5b58\u662funicode\u7f16\u7801\u683c\u5f0f\uff0c\u786c\u76d8\u662futf-8\u3002 \u5728\u505a\u7f16\u7801\u8f6c\u6362\u65f6\u5019\uff0c\u901a\u5e38\u7528unicode\u4f5c\u4e3a\u4e2d\u95f4\u7f16\u7801\u3002 \u5148\u5c06\u5176\u4ed6\u7f16\u7801\u7684\u5b57\u7b26\u4e32\u89e3\u7801(decode)\u6210unicode,\u518d\u4eceunicode\u7f16\u7801(encode)\u6210\u53e6\u4e00\u79cd\u7f16\u7801\u683c\u5f0f\u3002 decode\u7684\u4f5c\u7528\u662f\u5c06\u4e8c\u8fdb\u5236\u6570\u636e\u89e3\u7801\u6210unicode\u7f16\u7801\u3002 encode\u7684\u4f5c\u7528\u662f\u5c06unicode\u7f16\u7801\u7684\u5b57\u7b26\u4e32\u7f16\u7801\u6210\u4e8c\u8fdb\u5236\u6570\u636e\u3002 \u8981\u628aUnicode\u6570\u636e\u8f6c\u6362\u6210\u4e8c\u8fdb\u5236\u6570\u636e\uff0c\u5fc5\u987b\u8c03\u7528str\u7684encode\u65b9\u6cd5\u3002 \u8981\u628a\u4e8c\u8fdb\u5236\u6570\u636e\u8f6c\u6362\u6210Unicode\u6570\u636e\uff0c\u5fc5\u987b\u8c03\u7528bytes\u7684decode\u65b9\u6cd5\u3002 \u8c03\u7528\u8fd9\u4e9b\u65b9\u6cd5\u7684\u65f6\u5019\uff0c\u53ef\u4ee5\u660e\u786e\u6307\u51fa\u81ea\u5df1\u8981\u4f7f\u7528\u7684\u7f16\u7801\u65b9\u6848\uff0c\u4e5f\u53ef\u4ee5\u91c7\u7528\u7cfb\u7edf\u9ed8\u8ba4\u7684\u65b9\u6848\uff0c\u901a\u5e38\u662f\u6307UTF-8\u3002 \u5728bytes\u548cstr\u7684\u4e92\u76f8\u8f6c\u6362\u8fc7\u7a0b\u4e2d\uff0c\u5b9e\u9645\u5c31\u662f\u7f16\u7801\u89e3\u7801\u7684\u8fc7\u7a0b\uff0c\u5fc5\u987b\u663e\u5f0f\u5730\u6307\u5b9a\u7f16\u7801\u683c\u5f0f\u3002 >>> s = '\u4e2d\u6587' >>> s '\u4e2d\u6587' >>> type(s) <class 'str'> >>> b = bytes(s, encoding='utf-8') >>> b b'\\xe4\\xb8\\xad\\xe6\\x96\\x87' >>> type(b) <class 'bytes'> >>> s.encode('utf-8') b'\\xe4\\xb8\\xad\\xe6\\x96\\x87' >>> b.decode('utf-8') '\u4e2d\u6587' >>> >>> str(b, encoding='utf-8') '\u4e2d\u6587' \u7f16\u5199Python\u7a0b\u5e8f\u7684\u65f6\u5019\uff0c\u4e00\u5b9a\u8981\u628a\u89e3\u7801\u548c\u7f16\u7801\u64cd\u4f5c\u653e\u5728\u754c\u9762\u6700\u5916\u5c42\u6765\u505a\uff0c\u8ba9\u7a0b\u5e8f\u7684\u6838\u5fc3\u90e8\u5206\u53ef\u4ee5\u4f7f\u7528Unicode\u6570\u636e\u6765\u8fd0\u4f5c\uff0c\u8fd9\u79cd\u529e\u6cd5\u901a\u5e38\u53eb\u4f5cUnicode\u4e09\u660e\u6cbb\uff08Unicode sandwich\uff09\u3002 \u6211\u4eec\u53ef\u4ee5\u7f16\u5199\u8f85\u52a9\u51fd\u6570\u6765\u786e\u4fdd\u7a0b\u5e8f\u6536\u5230\u7684\u5b57\u7b26\u5e8f\u5217\u786e\u5b9e\u662f\u671f\u671b\u8981\u64cd\u4f5c\u7684\u7c7b\u578b\uff08\u8981\u77e5\u9053\u81ea\u5df1\u60f3\u64cd\u4f5c\u7684\u5230\u5e95\u662fUnicode\u7801\u70b9\uff0c\u8fd8\u662f\u539f\u59cb\u76848\u4f4d\u503c\u3002\u7528UTF-8\u6807\u51c6\u7ed9\u5b57\u7b26\u4e32\u7f16\u7801\uff0c\u5f97\u5230\u7684\u5c31\u662f\u8fd9\u6837\u7684\u4e00\u7cfb\u52178\u4f4d\u503c\uff09\u3002 \u8f85\u52a9\u51fd\u6570to_str\u63a5\u53d7bytes\u6216str\u5b9e\u4f8b\uff0c\u5e76\u8fd4\u56destr\uff1a >>> def to_str(bytes_or_str): ... if isinstance(bytes_or_str, bytes): ... value = bytes_or_str.decode('utf-8') ... else: ... value = bytes_or_str ... return value ... >>> repr(to_str(b'foo')) \"'foo'\" >>> repr(to_str('foo')) \"'foo'\" >>> to_str('foo') 'foo' >>> to_str(b'foo') 'foo' \u8f85\u52a9\u51fd\u6570to_bytes\u63a5\u53d7bytes\u6216str\u5b9e\u4f8b\uff0c\u5e76\u8fd4\u56debytes\uff1a >>> def to_bytes(bytes_or_str): ... if isinstance(bytes_or_str, str): ... value = bytes_or_str.encode('utf-8') ... else: ... value = bytes_or_str ... return value ... >>> repr(to_bytes(b'foo')) \"b'foo'\" >>> repr(to_bytes('foo')) \"b'foo'\" >>> to_bytes(b'foo') b'foo' >>> to_bytes('foo') bytes\u4e0estr\u8fd9\u4e24\u79cd\u5b9e\u4f8b\u4e0d\u80fd\u5728\u67d0\u4e9b\u64cd\u4f5c\u7b26\uff08\u4f8b\u5982>\u3001==\u3001+\u3001%\u64cd\u4f5c\u7b26\uff09\u4e0a\u9762\u6df7\u7528\u3002 >>> b'one' + b'two' b'onetwo' >>> 'one'+'two' 'onetwo' \u4e0d\u80fd\u5c06str\u5b9e\u4f8b\u6dfb\u52a0\u5230bytes\u5b9e\u4f8b\uff1a >>> b'one' + 'two' Traceback (most recent call last): File \"<stdin>\", line 1, in <module> TypeError: can't concat str to bytes \u4e0d\u80fd\u5c06byte\u5b9e\u4f8b\u6dfb\u52a0\u5230str\u5b9e\u4f8b\uff1a > > > 'one' + b'two' Traceback (most recent call last): File \"<stdin>\", line 1, in <module> TypeError: can only concatenate str (not \"bytes\") to str str\u5b9e\u4f8b\u4e0d\u80fd\u4e0ebytes\u5b9e\u4f8b\u6bd4\u8f83\uff0c\u5373\u4fbf\u8fd9\u4e24\u4e2a\u5b9e\u4f8b\u8868\u793a\u7684\u5b57\u7b26\u5b8c\u5168\u76f8\u540c\uff0c\u5b83\u4eec\u4e5f\u4e0d\u76f8\u7b49\uff1a >>> assert 'red' >= b'red' Traceback (most recent call last): File \"<stdin>\", line 1, in <module> TypeError: '>=' not supported between instances of 'str' and 'bytes' >>> assert b'red' >= 'red' Traceback (most recent call last): File \"<stdin>\", line 1, in <module> TypeError: '>=' not supported between instances of 'bytes' and 'str' \u4e24\u79cd\u7c7b\u578b\u7684\u5b9e\u4f8b\u90fd\u53ef\u4ee5\u51fa\u73b0\u5728%\u64cd\u4f5c\u7b26\u7684\u53f3\u4fa7\uff0c\u7528\u6765\u66ff\u6362\u5de6\u4fa7\u90a3\u4e2a\u683c\u5f0f\u5b57\u7b26\u4e32\uff08format string\uff09\u91cc\u9762\u7684%s\u3002 >>> print(b'red %s' % b'blue') b'red blue' >>> print('red %s' % 'blue') red blue \u5982\u679c\u683c\u5f0f\u5b57\u7b26\u4e32\u662fbytes\u7c7b\u578b\uff0c\u90a3\u4e48\u4e0d\u80fd\u7528str\u5b9e\u4f8b\u6765\u66ff\u6362\u5176\u4e2d\u7684%s\u3002 \u5982\u679c\u683c\u5f0f\u5b57\u7b26\u4e32\u662fstr\u7c7b\u578b\uff0c\u5219\u53ef\u4ee5\u7528bytes\u5b9e\u4f8b\u6765\u66ff\u6362\u5176\u4e2d\u7684%s\u3002(\u7cfb\u7edf\u5728bytes\u5b9e\u4f8b\u4e0a\u9762\u8c03\u7528__repr__ \u65b9\u6cd5\uff08Rule75\uff09\uff0c\u7136\u540e\u7528\u8fd9\u6b21\u8c03\u7528\u6240\u5f97\u5230\u7684\u7ed3\u679c\u66ff\u6362\u683c\u5f0f\u5b57\u7b26\u4e32\u91cc\u7684%s\uff0c\u56e0\u6b64\u7a0b\u5e8f\u4f1a\u76f4\u63a5\u8f93\u51fab'blue'\uff0c\u800c\u4e0d\u662f\u8f93\u51fablue\u672c\u8eab\u3002) >>> print(b'red %s' % 'blue') Traceback (most recent call last): File \"<stdin>\", line 1, in <module> TypeError: %b requires a bytes-like object, or an object that implements __bytes__, not 'str' >>> print('red %s' % b'blue') red b'blue' \u5728\u64cd\u4f5c\u6587\u4ef6\u53e5\u67c4\u7684\u65f6\u5019\uff0c\u8fd9\u91cc\u7684\u53e5\u67c4\u6307\u7531\u5185\u7f6e\u7684open\u51fd\u6570\u8fd4\u56de\u7684\u53e5\u67c4\u3002\u8fd9\u6837\u7684\u53e5\u67c4\u9ed8\u8ba4\u9700\u8981\u4f7f\u7528Unicode\u5b57\u7b26\u4e32\u64cd\u4f5c\uff0c\u800c\u4e0d\u80fd\u91c7\u7528\u539f\u59cb\u7684bytes\u3002 \u4ece\u6587\u4ef6\u4e2d\u8bfb\u53d6\u4e8c\u8fdb\u5236\u6570\u636e\uff08\u6216\u8005\u628a\u4e8c\u8fdb\u5236\u6570\u636e\u5199\u5165\u6587\u4ef6\uff09\u65f6\uff0c\u5e94\u8be5\u7528'rb'\uff08'wb'\uff09\u8fd9\u6837\u7684\u4e8c\u8fdb\u5236\u6a21\u5f0f\u6253\u5f00\u6587\u4ef6\u3002 >>> with open('./temp/data.bin', 'w') as f: ... f.write(b'\\xf1\\xf2\\xf3\\xf4\\xf5') ... Traceback (most recent call last): File \"<stdin>\", line 2, in <module> TypeError: write() argument must be str, not bytes >>> >>> with open('./temp/data.bin', 'wb') as f: ... f.write(b'\\xf1\\xf2\\xf3\\xf4\\xf5') ... 5 >>> >>> with open('./temp/data.bin', 'r') as f: ... data = f.read() ... Traceback (most recent call last): File \"<stdin>\", line 2, in <module> File \"/usr/local/lib/python3.9/codecs.py\", line 322, in decode (result, consumed) = self._buffer_decode(data, self.errors, final) UnicodeDecodeError: 'utf-8' codec can't decode byte 0xf1 in position 0: invalid continuation byte >>> >>> >>> with open('./temp/data.bin', 'rb') as f: ... data = f.read() ... >>> assert data == b'\\xf1\\xf2\\xf3\\xf4\\xf5' >>> \u5982\u679c\u8981\u4ece\u6587\u4ef6\u4e2d\u8bfb\u53d6\uff08\u6216\u8005\u8981\u5199\u5165\u6587\u4ef6\u4e4b\u4e2d\uff09\u7684\u662fUnicode\u6570\u636e\uff0c\u90a3\u4e48\u5fc5\u987b\u6ce8\u610f\u7cfb\u7edf\u9ed8\u8ba4\u7684\u6587\u672c\u7f16\u7801\u65b9\u6848\u3002\u82e5\u65e0\u6cd5\u80af\u5b9a\uff0c\u53ef\u901a\u8fc7encoding\u53c2\u6570\u660e\u786e\u6307\u5b9a\u3002 >>> with open('./temp/data.bin', 'r', encoding='cp1252') as f: ... data = f.read() ... >>> assert data == b'\\xf1\\xf2\\xf3\\xf4\\xf5' Traceback (most recent call last): File \"<stdin>\", line 1, in <module> AssertionError \u67e5\u770b\u5f53\u524d\u64cd\u4f5c\u7cfb\u7edf\u9ed8\u8ba4\u7684\u7f16\u7801\u6807\u51c6 >>> import locale >>> locale.getpreferredencoding() 'UTF-8' >>>","title":"UNICODE\u7f16\u7801\u7b80\u4ecb"},{"location":"python/Pythonic90Rules/Rule04/","text":"\u7b2c4\u6761\u3000\u7528\u652f\u6301\u63d2\u503c\u7684f-string\u53d6\u4ee3C\u98ce\u683c\u7684\u683c\u5f0f\u5b57\u7b26\u4e32\u4e0estr.format\u65b9\u6cd5 \u683c\u5f0f\u5316\uff08formatting\uff09\u662f\u6307\u628a\u6570\u636e\u586b\u5199\u5230\u9884\u5148\u5b9a\u4e49\u7684\u6587\u672c\u6a21\u677f\u91cc\u9762\uff0c\u5f62\u6210\u4e00\u6761\u7528\u6237\u53ef\u8bfb\u7684\u6d88\u606f\uff0c\u5e76\u628a\u8fd9\u6761\u6d88\u606f\u4fdd\u5b58\u6210\u5b57\u7b26\u4e32\u7684\u8fc7\u7a0b\u3002 \u7528Python\u5bf9\u5b57\u7b26\u4e32\u505a\u683c\u5f0f\u5316\u5904\u7406\u6709\u56db\u79cd\u529e\u6cd5\u53ef\u4ee5\u8003\u8651\uff0c\u8fd9\u4e9b\u529e\u6cd5\u90fd\u5185\u7f6e\u5728\u8bed\u8a00\u548c\u6807\u51c6\u5e93\u91cc\u9762\u3002 \u4f46\u5176\u4e2d\u4e09\u79cd\u529e\u6cd5\u6709\u4e25\u91cd\u7684\u7f3a\u9677\uff0c\u73b0\u5728\u5148\u89e3\u91ca\u4e3a\u4ec0\u4e48\u4e0d\u8981\u4f7f\u7528\u8fd9\u4e09\u79cd\u529e\u6cd5\uff0c\u6700\u540e\u518d\u7ed9\u51fa\u5269\u4e0b\u7684\u90a3\u4e00\u79cd\u3002 Python\u91cc\u9762\u6700\u5e38\u7528\u7684\u5b57\u7b26\u4e32\u683c\u5f0f\u5316\u65b9\u5f0f\u662f\u91c7\u7528%\u683c\u5f0f\u5316\u64cd\u4f5c\u7b26(C\u98ce\u683c\u7684\u683c\u5f0f\u5b57\u7b26\u4e32)\u3002 \u8fd9\u4e2a\u64cd\u4f5c\u7b26\u5de6\u8fb9\u7684\u6587\u672c\u6a21\u677f\u53eb\u4f5c\u683c\u5f0f\u5b57\u7b26\u4e32\uff08format string\uff09\uff0c\u6211\u4eec\u53ef\u4ee5\u5728\u64cd\u4f5c\u7b26\u53f3\u8fb9\u5199\u4e0a\u67d0\u4e2a\u503c\u6216\u8005\u7531\u591a\u4e2a\u503c\u6240\u6784\u6210\u7684\u5143\u7ec4\uff08tuple\uff09\uff0c\u7528\u6765\u66ff\u6362\u683c\u5f0f\u5b57\u7b26\u4e32\u91cc\u7684\u76f8\u5173\u7b26\u53f7\u3002 python\u5b57\u7b26\u4e32\u683c\u5f0f\u5316\u7b26\u53f7\uff1a %c\uff1a\u5b57\u7b26\u53ca\u5176ASCII\u7801 %s\uff1a\u5b57\u7b26\u4e32 %d\uff1a\u6574\u6570 %u\uff1a\u65e0\u7b26\u53f7\u6574\u578b %o\uff1a\u65e0\u7b26\u53f7\u516b\u8fdb\u5236\u6570 %x\uff1a\u65e0\u7b26\u53f7\u5341\u516d\u8fdb\u5236\u6570 %X\uff1a\u65e0\u7b26\u53f7\u5341\u516d\u8fdb\u5236\u6570\uff08\u5927\u5199\uff09 %f\uff1a\u6d6e\u70b9\u6570\u5b57\uff0c\u53ef\u6307\u5b9a\u5c0f\u6570\u70b9\u540e\u7684\u7cbe\u5ea6 %e\uff1a\u7528\u79d1\u5b66\u8ba1\u6570\u6cd5\u683c\u5f0f\u5316\u6d6e\u70b9\u6570 %E\uff1a\u4f5c\u7528\u540c%e\uff0c\u7528\u79d1\u5b66\u8ba1\u6570\u6cd5\u683c\u5f0f\u5316\u6d6e\u70b9\u6570 %g\uff1a%f\u548c%e\u7684\u7b80\u5199 %G\uff1a%f \u548c %E \u7684\u7b80\u5199 %p\uff1a\u7528\u5341\u516d\u8fdb\u5236\u6570\u683c\u5f0f\u5316\u53d8\u91cf\u7684\u5730\u5740 a = 128 b = 3.1415926 print('Binary is %d, Hex is %X, Oct is %o, Float is %e' % (a, a, a, b)) >>> Binary is 128, Hex is 80, Oct is 200, Float is 3.141593e+00 C\u98ce\u683c\u7684\u683c\u5f0f\u5b57\u7b26\u4e32\uff0c\u5728Python\u91cc\u6709\u56db\u4e2a\u7f3a\u70b9\u3002 \u7b2c\u4e00\u4e2a\u7f3a\u70b9\u662f\uff0c\u5982\u679c%\u53f3\u4fa7\u90a3\u4e2a\u5143\u7ec4\u91cc\u9762\u7684\u503c\u5728\u7c7b\u578b\u6216\u987a\u5e8f\u4e0a\u6709\u53d8\u5316\uff0c\u90a3\u4e48\u7a0b\u5e8f\u53ef\u80fd\u4f1a\u56e0\u4e3a\u8f6c\u6362\u7c7b\u578b\u65f6\u53d1\u751f\u4e0d\u517c\u5bb9\u95ee\u9898\u800c\u51fa\u73b0\u9519\u8bef\u3002 >>> key = 'my_var' >>> value = 1.234 >>> formatted = '%-10s = %.2f' % (key, value) # %-10s\u4ee3\u8868=\u5de6\u8fb9\u5b57\u4e32\u603b\u957f\u5ea610,\u4e0d\u8db3\u90e8\u5206\u5728\u5c3e\u90e8\u6dfb\u52a0\u7a7a\u683c >>> formatted 'my_var = 1.23' >>> \u5982\u679c\u628akey\u8ddfvalue\u4e92\u6362\u4f4d\u7f6e\uff0c\u6216\u8005\u5de6\u4fa7\u90a3\u4e2a\u683c\u5f0f\u5b57\u7b26\u4e32\u91cc\u9762\u7684\u4e24\u4e2a\u8bf4\u660e\u7b26\u5bf9\u8c03\u4e86\u987a\u5e8f\uff0c\u90a3\u4e48\u7a0b\u5e8f\u5c31\u4f1a\u5728\u8fd0\u884c\u65f6\u51fa\u73b0\u5f02\u5e38\u3002 >>> key = 'my_var' >>> value = 1.234 >>> formatted = '%-10s = %.2f' % (value, key) Traceback (most recent call last): File \"<stdin>\", line 1, in <module> TypeError: must be real number, not str >>> key = 'my_var' >>> value = 1.234 >>> formatted = '%.2f = %-10s' % (key, value) Traceback (most recent call last): File \"<stdin>\", line 1, in <module> TypeError: must be real number, not str \u7b2c\u4e8c\u4e2a\u7f3a\u70b9\u662f\uff0c\u5728\u586b\u5145\u6a21\u677f\u4e4b\u524d\uff0c\u7ecf\u5e38\u8981\u5148\u5bf9\u51c6\u5907\u586b\u5199\u8fdb\u53bb\u7684\u8fd9\u4e2a\u503c\u7a0d\u5fae\u505a\u4e00\u4e9b\u5904\u7406\uff0c\u4f46\u8fd9\u6837\u4e00\u6765\uff0c\u6574\u4e2a\u8868\u8fbe\u5f0f\u53ef\u80fd\u5c31\u4f1a\u5199\u5f97\u5f88\u957f\uff0c\u5f71\u54cd\u7a0b\u5e8f\u7684\u53ef\u8bfb\u6027\u3002 >>> pantry = [ ... ('avocados', 1.25), ... ('bananas', 2.5), ... ('cherries', 15) ... ] >>> for i, (item, count) in enumerate(pantry): ... print( ... '#%d: %-10s = %.2f' % ( ... i + 1, ... item.title(), ... round(count) ... ) ... ) ... #1: Avocados = 1.00 #2: Bananas = 2.00 #3: Cherries = 15.00 \u7b2c\u4e09\u4e2a\u7f3a\u70b9\u662f\uff0c\u5982\u679c\u60f3\u7528\u540c\u4e00\u4e2a\u503c\u6765\u586b\u5145\u683c\u5f0f\u5b57\u7b26\u4e32\u91cc\u7684\u591a\u4e2a\u4f4d\u7f6e\uff0c\u90a3\u4e48\u5fc5\u987b\u5728%\u64cd\u4f5c\u7b26\u53f3\u4fa7\u7684\u5143\u7ec4\u4e2d\u76f8\u5e94\u5730\u591a\u6b21\u91cd\u590d\u8be5\u503c\u3002 >>> template = '%s loves food. See %s cook.' >>> name = 'Max' >>> formatted = template % (name, name) >>> formatted 'Max loves food. See Max cook.' \u4e3a\u4e86\u89e3\u51b3\u4e0a\u9762\u63d0\u5230\u7684\u4e00\u4e9b\u95ee\u9898\uff0cPython\u7684%\u64cd\u4f5c\u7b26\u5141\u8bb8\u6211\u4eec\u7528dict\u53d6\u4ee3tuple\uff0c\u89e3\u51b3\u4e86%\u64cd\u4f5c\u7b26\u4e24\u4fa7\u7684\u987a\u5e8f\u4e0d\u5339\u914d\u95ee\u9898\u3002 >>> key = 'my_var' >>> value = 1.234 >>> old_way = '%-10s = %.2f' % (key, value) >>> new_way = '%(key)-10s = %(value).2f' % {'key': key, 'value': value} # \u5bf9\u5e94 >>> reordered = '%(key)-10s = %(value).2f' % {'value': value, 'key': key} # \u4e92\u6362 >>> assert old_way == new_way == reordered >>> old_way 'my_var = 1.23' >>> new_way 'my_var = 1.23' >>> reordered 'my_var = 1.23' \u7528dict\u53d6\u4ee3tuple\uff0c\u4e5f\u89e3\u51b3\u7528\u540c\u4e00\u4e2a\u503c\u66ff\u6362\u591a\u4e2a\u683c\u5f0f\u8bf4\u660e\u7b26\u7684\u95ee\u9898\uff0c\u6211\u4eec\u5c31\u4e0d\u7528\u5728%\u64cd\u4f5c\u7b26\u53f3\u4fa7\u91cd\u590d\u8fd9\u4e2a\u503c\u4e86\u3002 >>> name = 'Max' >>> template = '%s loves food. See %s cook.' >>> before = template % (name, name) >>> template = '%(name)s loves food. See %(name)s cook.' >>> after = template % {'name': name} >>> assert before == after >>> before 'Max loves food. See Max cook.' >>> after 'Max loves food. See Max cook.' \u4f46\u662f\uff0c\u8fd9\u79cd\u5199\u6cd5\u4f1a\u8ba9\u7b2c\u4e8c\u4e2a\u7f3a\u70b9\u53d8\u5f97\u66f4\u52a0\u4e25\u91cd\uff0c\u683c\u5f0f\u5316\u8868\u8fbe\u5f0f\u53d8\u5f97\u66f4\u52a0\u5197\u957f\uff0c\u770b\u8d77\u6765\u4e5f\u66f4\u52a0\u6df7\u4e71\u3002\u5982\u4e0b\u4f8b\uff1a >>> pantry = [ ... ('avocados', 1.25), ... ('bananas', 2.5), ... ('cherries', 15) ... ] >>> for i, (item, count) in enumerate(pantry): ... before = '#%d: %-10s = %.2f' % ( ... i + 1, ... item.title(), ... round(count) ... ) ... after = '#%(loop)d: %(item)-10s = %(count).2f' % { ... 'loop': i + 1, ... 'item': item.title(), ... 'count': round(count) ... } ... assert before == after ... print(before) ... print(after) ... #1: Avocados = 1.00 #1: Avocados = 1.00 #2: Bananas = 2.00 #2: Bananas = 2.00 #3: Cherries = 15.00 #3: Cherries = 15.00 \u6240\u4ee5\uff0c\u7b2c\u56db\u4e2a\u7f3a\u70b9\u662f\uff0c\u628adict\u5199\u5230\u683c\u5f0f\u5316\u8868\u8fbe\u5f0f\u91cc\u9762\u4f1a\u8ba9\u4ee3\u7801\u53d8\u591a\uff0c\u6bcf\u4e2a\u952e\u90fd\u81f3\u5c11\u8981\u5199\u4e24\u6b21\u3002\u4e3a\u4e86\u67e5\u770b\u683c\u5f0f\u5b57\u7b26\u4e32\u4e2d\u7684\u8bf4\u660e\u7b26\u7a76\u7adf\u5bf9\u5e94\u4e8e\u5b57\u5178\u91cc\u7684\u54ea\u4e2a\u952e\uff0c\u5fc5\u987b\u5728\u8fd9\u4e24\u6bb5\u4ee3\u7801\u4e4b\u95f4\u6765\u56de\u8df3\u8dc3\u3002\u5982\u679c\u8981\u5bf9\u952e\u540d\u7a0d\u505a\u4fee\u6539\uff0c\u90a3\u4e48\u5fc5\u987b\u540c\u6b65\u4fee\u6539\u683c\u5f0f\u5b57\u7b26\u4e32\u91cc\u7684\u8bf4\u660e\u7b26\uff0c\u8fd9\u66f4\u8ba9\u4ee3\u7801\u53d8\u5f97\u76f8\u5f53\u70e6\u7410\uff0c\u53ef\u8bfb\u6027\u66f4\u5dee\u3002 \u5185\u7f6e\u7684format\u51fd\u6570\u4e0estr\u7c7b\u7684format\u65b9\u6cd5 Python 3\u6dfb\u52a0\u4e86\u9ad8\u7ea7\u5b57\u7b26\u4e32\u683c\u5f0f\u5316\uff08advanced stringformatting\uff09\u673a\u5236\uff0c\u5b83\u7684\u8868\u8fbe\u80fd\u529b\u6bd4\u8001\u5f0fC\u98ce\u683c\u7684\u683c\u5f0f\u5b57\u7b26\u4e32\u8981\u5f3a\uff0c\u4e14\u4e0d\u518d\u4f7f\u7528%\u64cd\u4f5c\u7b26\u3002 \u4e0b\u9762\u8fd9\u6bb5\u4ee3\u7801\uff0c\u6f14\u793a\u4e86\u8fd9\u79cd\u65b0\u7684\u683c\u5f0f\u5316\u65b9\u5f0f\u3002\u5728\u4f20\u7ed9format\u51fd\u6570\u7684\u683c\u5f0f\u91cc\u9762\uff0c\u9017\u53f7\u8868\u793a\u663e\u793a\u5343\u4f4d\u5206\u9694\u7b26\uff0c^\u8868\u793a\u5c45\u4e2d\u5bf9\u9f50\u3002 >>> a = 1234.5678 >>> formatted = format(a, ',.2f') >>> formatted '1,234.57' >>> b = 'my string' >>> formatted = format(b, '^20s') >>> formatted ' my string ' \u5982\u679cstr\u7c7b\u578b\u7684\u5b57\u7b26\u4e32\u91cc\u9762\u6709\u8bb8\u591a\u503c\u90fd\u9700\u8981\u8c03\u6574\u683c\u5f0f\uff0c\u5219\u53ef\u4ee5\u628a\u683c\u5f0f\u6709\u5f85\u8c03\u6574\u7684\u90a3\u4e9b\u4f4d\u7f6e\u5728\u5b57\u7b26\u4e32\u91cc\u9762\u5148\u7528{}\u4ee3\u66ff\uff0c\u7136\u540e\u6309\u4ece\u5de6\u5230\u53f3\u7684\u987a\u5e8f\uff0c\u628a\u9700\u8981\u586b\u5199\u5230\u90a3\u4e9b\u4f4d\u7f6e\u7684\u503c\u4f20\u7ed9format\u65b9\u6cd5\uff0c\u4f7f\u8fd9\u4e9b\u503c\u4f9d\u6b21\u51fa\u73b0\u5728\u5b57\u7b26\u4e32\u4e2d\u7684\u76f8\u5e94\u4f4d\u7f6e\u3002 >>> key = 'my_var' >>> value = 1.234 >>> formatted = '{} = {}'.format(key, value) >>> formatted 'my_var = 1.234' >>> formatted = '{} = {}'.format(value, key) >>> formatted '1.234 = my_var' \u901a\u8fc7\u5728{}\u91cc\u5199\u4e2a\u5192\u53f7\uff0c\u7136\u540e\u628a\u683c\u5f0f\u8bf4\u660e\u7b26\u5199\u5728\u5192\u53f7\u7684\u53f3\u8fb9\uff0c\u6765\u6dfb\u52a0\u683c\u5f0f\u3002\uff08\u6dfb\u52a0\u683c\u5f0f\u540e\uff0c\u4e92\u6362\u4f1a\u62a5\u9519\uff09 >>> formatted = '{:<10} = {:.2f}'.format(key, value) >>> formatted 'my_var = 1.23' >>> formatted = '{:<10} = {:.2f}'.format(value, key) Traceback (most recent call last): File \"<stdin>\", line 1, in <module> ValueError: Unknown format code 'f' for object of type 'str' \u4e5f\u53ef\u4ee5\u7ed9str\u7684{}\u91cc\u9762\u5199\u4e0a\u6570\u5b57\uff0c\u7528\u6765\u6307\u4ee3format\u65b9\u6cd5\u5728\u8fd9\u4e2a\u4f4d\u7f6e\u6240\u63a5\u6536\u5230\u7684\u53c2\u6570\u503c\u4f4d\u7f6e\u7d22\u5f15\u3002 \u4ee5\u540e\u5373\u4f7f\u8fd9\u4e9b{}\u5728\u683c\u5f0f\u5b57\u7b26\u4e32\u4e2d\u7684\u6b21\u5e8f\u6709\u6240\u53d8\u52a8\uff0c\u4e5f\u4e0d\u7528\u8c03\u6362\u4f20\u7ed9format\u65b9\u6cd5\u7684\u90a3\u4e9b\u53c2\u6570\u3002\u4e8e\u662f\uff0c\u8fd9\u5c31\u907f\u514d\u4e86\u524d\u9762\u8bb2\u7684\u7b2c\u4e00\u4e2a\u7f3a\u70b9\u6240\u63d0\u5230\u7684\u90a3\u4e2a\u987a\u5e8f\u95ee\u9898\u3002 >>> key = 'my_var' >>> value = 1.234 >>> formatted = '{} = {}'.format(key, value) >>> formatted 'my_var = 1.234' >>> formatted = '{1} = {0}'.format(key, value) >>> formatted '1.234 = my_var' >>> formatted = '{2} = {1}'.format(key, value) Traceback (most recent call last): File \"<stdin>\", line 1, in <module> IndexError: Replacement index 2 out of range for positional args tuple \u540c\u4e00\u4e2a\u4f4d\u7f6e\u7d22\u5f15\u53ef\u4ee5\u51fa\u73b0\u5728str\u7684\u591a\u4e2a{}\u91cc\u9762\uff0c\u8fd9\u5c31\u4e0d\u9700\u8981\u628a\u8fd9\u4e2a\u503c\u91cd\u590d\u5730\u4f20\u7ed9format\u65b9\u6cd5\uff0c\u4e8e\u662f\u5c31\u89e3\u51b3\u4e86\u524d\u9762\u63d0\u5230\u7684\u7b2c\u4e09\u4e2a\u7f3a\u70b9\u3002 >>> name = 'Max' >>> formatted = '%s loves food. See %s cook.' % (name, name) >>> formatted 'Max loves food. See Max cook.' >>> formatted = '%(name)s loves food. See %(name)s cook.' % {'name': name} >>> formatted 'Max loves food. See Max cook.' >>> formatted = '{0} loves food. See {0} cook.'.format(name) >>> formatted 'Max loves food. See Max cook.' \u4e0a\u8ff0\u529f\u80fd\u5206\u6790\uff1a \u7cfb\u7edf\u5148\u628astr.format\u65b9\u6cd5\u63a5\u6536\u5230\u7684\u6bcf\u4e2a\u503c\u4f20\u7ed9\u5185\u7f6e\u7684format\u51fd\u6570\uff0c\u5e76\u627e\u5230\u8fd9\u4e2a\u503c\u5728\u5b57\u7b26\u4e32\u91cc\u5bf9\u5e94\u7684{}\uff0c\u540c\u65f6\u5c06{}\u91cc\u9762\u5199\u7684\u683c\u5f0f\u4e5f\u4f20\u7ed9format\u51fd\u6570\uff0c\u4f8b\u5982\u7cfb\u7edf\u5728\u5904\u7406value\u7684\u65f6\u5019\uff0c\u4f20\u7684\u5c31\u662fformat(value,'.2f')\u3002 \u7136\u540e\uff0c\u7cfb\u7edf\u4f1a\u628aformat\u51fd\u6570\u6240\u8fd4\u56de\u7684\u7ed3\u679c\u5199\u5728\u6574\u4e2a\u683c\u5f0f\u5316\u5b57\u7b26\u4e32{}\u6240\u5728\u7684\u4f4d\u7f6e\u3002 \u53e6\u5916\uff0c\u6bcf\u4e2a\u7c7b\u90fd\u53ef\u4ee5\u901a\u8fc7__format__\u8fd9\u4e2a\u7279\u6b8a\u7684\u65b9\u6cd5\u5b9a\u5236\u76f8\u5e94\u7684\u903b\u8f91\uff0c\u8fd9\u6837\u7684\u8bdd\uff0cformat\u51fd\u6570\u5728\u628a\u8be5\u7c7b\u5b9e\u4f8b\u8f6c\u6362\u6210\u5b57\u7b26\u4e32\u65f6\uff0c\u5c31\u4f1a\u6309\u7167\u8fd9\u79cd\u903b\u8f91\u6765\u8f6c\u6362\u3002 \u8f6c\u4e49\u5904\u7406\uff1a >>> formatted = '%.2f%%' % 12.5 >>> formatted '12.50%' >>> formatted = '{} replace {{}}'.format(1.23) >>> formatted '1.23 replace {}' \u7136\u800c\uff0cstr.format\u65b9\u6cd5\u5e76\u6ca1\u6709\u89e3\u51b3\u4e0a\u9762\u8bb2\u7684\u7b2c\u4e8c\u4e2a\u7f3a\u70b9\u3002\u5982\u679c\u5728\u5bf9\u503c\u505a\u586b\u5145\u4e4b\u524d\u8981\u5148\u5bf9\u8fd9\u4e2a\u503c\u505a\u51fa\u8c03\u6574\uff0c\u90a3\u4e48\u7528\u8fd9\u79cd\u65b9\u6cd5\u5199\u51fa\u6765\u7684\u4ee3\u7801\u8fd8\u662f\u8ddf\u539f\u6765\u4e00\u6837\u4e71\uff0c\u9605\u8bfb\u6027\u5dee\u3002\u5bf9\u6bd4\u4e00\u4e0b\uff1a >>> pantry = [ ... ('avocados', 1.25), ... ('bananas', 2.5), ... ('cherries', 15) ... ] >>> for i, (item, count) in enumerate(pantry): ... before = '#%d: %-10s = %.2f' % ( ... i + 1, ... item.title(), ... round(count) ... ) ... after = '#%(loop)d: %(item)-10s = %(count).2f' % { ... 'loop': i + 1, ... 'item': item.title(), ... 'count': round(count) ... } ... new_style = '#{}: {:<10s} = {:.2f}'.format( ... i + 1, ... item.title(), ... round(count) ... ) ... assert before == after == new_style ... print(before) ... print(after) ... print(new_style) ... #1: Avocados = 1.00 #1: Avocados = 1.00 #1: Avocados = 1.00 #2: Bananas = 2.00 #2: Bananas = 2.00 #2: Bananas = 2.00 #3: Cherries = 15.00 #3: Cherries = 15.00 #3: Cherries = 15.00 \u63d2\u503c\u683c\u5f0f\u5b57\u7b26\u4e32f-string Python 3.6\u6dfb\u52a0\u4e86\u4e00\u79cd\u65b0\u7684\u7279\u6027\uff0c\u53eb\u4f5c\u63d2\u503c\u683c\u5f0f\u5b57\u7b26\u4e32\uff08interpolated format string\uff0c\u7b80\u79f0f-string\uff09\uff0c\u53ef\u4ee5\u89e3\u51b3\u4e0a\u9762\u63d0\u5230\u7684\u6240\u6709\u95ee\u9898\u3002 \u4e0b\u9762\u6309\u7167\u4ece\u77ed\u5230\u957f\u7684\u987a\u5e8f\u628a\u8fd9\u51e0\u79cd\u5199\u6cd5\u6240\u5360\u7684\u7bc7\u5e45\u5bf9\u6bd4\u4e00\u4e0b\uff0c\u8fd9\u6837\u5f88\u5bb9\u6613\u770b\u51fa\u7b26\u53f7\u53f3\u8fb9\u7684\u4ee3\u7801\u5230\u5e95\u6709\u591a\u5c11\u3002C\u98ce\u683c\u7684\u5199\u6cd5\u4e0e\u91c7\u7528str.format\u65b9\u6cd5\u7684\u5199\u6cd5\u53ef\u80fd\u4f1a\u8ba9\u8868\u8fbe\u5f0f\u53d8\u5f97\u5f88\u957f\uff0c\u4f46\u5982\u679c\u6539\u7528f-string\uff0c\u6216\u8bb8\u4e00\u884c\u5c31\u80fd\u5199\u5b8c\u3002 >>> key = 'my_var' >>> value = 1.234 >>> f_string = f'{key:<10} = {value:.2f}' >>> c_tuple = '%-10s = %.2f' % (key, value) >>> str_args = '{:<10} = {:.2f}'.format(key, value) >>> str_kw = '{key:<10} = {value:.2f}'.format(key=key, value=value) >>> c_dict = '%(key)-10s = %(value).2f' % {'key': key, 'value': value} >>> assert c_tuple == c_dict == f_string >>> assert str_args == str_kw == f_string >>> f_string 'my_var = 1.23' >>> c_tuple 'my_var = 1.23' >>> str_args 'my_var = 1.23' >>> str_kw 'my_var = 1.23' >>> c_dict 'my_var = 1.23' \u5bf9\u6bd4\u4e0b\u9762\uff0c\u628astr.format\u65b9\u6cd5\u7684\u5199\u6cd5\u6539\u7528f-string\uff0c\u4e00\u884c\u5c31\u80fd\u5199\u5b8c\u3002 >>> pantry = [ ... ('avocados', 1.25), ... ('bananas', 2.5), ... ('cherries', 15) ... ] >>> for i, (item, count) in enumerate(pantry): ... before = '#%d: %-10s = %.2f' % ( ... i + 1, ... item.title(), ... round(count) ... ) ... after = '#%(loop)d: %(item)-10s = %(count).2f' % { ... 'loop': i + 1, ... 'item': item.title(), ... 'count': round(count) ... } ... new_style = '#{}: {:<10s} = {:.2f}'.format( ... i + 1, ... item.title(), ... round(count) ... ) ... f_string = f'#{i+1}: {item.title():<10s} = {round(count):.2f}' ... assert before == after == new_style == f_string ... print(before) ... print(after) ... print(new_style) ... print(f_string) ... #1: Avocados = 1.00 #1: Avocados = 1.00 #1: Avocados = 1.00 #1: Avocados = 1.00 #2: Bananas = 2.00 #2: Bananas = 2.00 #2: Bananas = 2.00 #2: Bananas = 2.00 #3: Cherries = 15.00 #3: Cherries = 15.00 #3: Cherries = 15.00 #3: Cherries = 15.00 \u8981\u70b9\u603b\u7ed3\uff1a \u91c7\u7528%\u64cd\u4f5c\u7b26\u628a\u503c\u586b\u5145\u5230C\u98ce\u683c\u7684\u683c\u5f0f\u5b57\u7b26\u4e32\u65f6\u4f1a\u9047\u5230\u8bb8\u591a\u95ee\u9898\uff0c\u800c\u4e14\u8fd9\u79cd\u5199\u6cd5\u6bd4\u8f83\u70e6\u7410\u3002 str.format\u65b9\u6cd5\u4e13\u95e8\u7528\u4e00\u5957\u8ff7\u4f60\u8bed\u8a00\u6765\u5b9a\u4e49\u5b83\u7684\u683c\u5f0f\u8bf4\u660e\u7b26\uff0c\u8fd9\u5957\u8bed\u8a00\u7ed9\u6211\u4eec\u63d0\u4f9b\u4e86\u4e00\u4e9b\u6709\u7528\u7684\u6982\u5ff5\uff0c\u4f46\u662f\u5728\u5176\u4ed6\u65b9\u9762\uff0c\u8fd9\u4e2a\u65b9\u6cd5\u8fd8\u662f\u5b58\u5728\u4e0eC\u98ce\u683c\u7684\u683c\u5f0f\u5b57\u7b26\u4e32\u4e00\u6837\u7684\u591a\u79cd\u7f3a\u70b9\uff0c\u6240\u4ee5\u6211\u4eec\u4e5f\u5e94\u8be5\u907f\u514d\u4f7f\u7528\u5b83\u3002 f-string\u91c7\u7528\u65b0\u7684\u5199\u6cd5\uff0c\u5c06\u503c\u586b\u5145\u5230\u5b57\u7b26\u4e32\u4e4b\u4e2d\uff0c\u89e3\u51b3\u4e86C\u98ce\u683c\u7684\u683c\u5f0f\u5b57\u7b26\u4e32\u6240\u5e26\u6765\u7684\u6700\u5927\u95ee\u9898\u3002 f-string\u662f\u4e2a\u7b80\u6d01\u800c\u5f3a\u5927\u7684\u673a\u5236\uff0c\u53ef\u4ee5\u76f4\u63a5\u5728\u683c\u5f0f\u8bf4\u660e\u7b26\u91cc\u5d4c\u5165\u4efb\u610fPython\u8868\u8fbe\u5f0f\u3002","title":"\u7b2c4\u6761\u3000\u7528\u652f\u6301\u63d2\u503c\u7684f-string\u53d6\u4ee3C\u98ce\u683c\u7684\u683c\u5f0f\u5b57\u7b26\u4e32\u4e0estr.format\u65b9\u6cd5"},{"location":"python/Pythonic90Rules/Rule04/#4-f-stringcstrformat","text":"\u683c\u5f0f\u5316\uff08formatting\uff09\u662f\u6307\u628a\u6570\u636e\u586b\u5199\u5230\u9884\u5148\u5b9a\u4e49\u7684\u6587\u672c\u6a21\u677f\u91cc\u9762\uff0c\u5f62\u6210\u4e00\u6761\u7528\u6237\u53ef\u8bfb\u7684\u6d88\u606f\uff0c\u5e76\u628a\u8fd9\u6761\u6d88\u606f\u4fdd\u5b58\u6210\u5b57\u7b26\u4e32\u7684\u8fc7\u7a0b\u3002 \u7528Python\u5bf9\u5b57\u7b26\u4e32\u505a\u683c\u5f0f\u5316\u5904\u7406\u6709\u56db\u79cd\u529e\u6cd5\u53ef\u4ee5\u8003\u8651\uff0c\u8fd9\u4e9b\u529e\u6cd5\u90fd\u5185\u7f6e\u5728\u8bed\u8a00\u548c\u6807\u51c6\u5e93\u91cc\u9762\u3002 \u4f46\u5176\u4e2d\u4e09\u79cd\u529e\u6cd5\u6709\u4e25\u91cd\u7684\u7f3a\u9677\uff0c\u73b0\u5728\u5148\u89e3\u91ca\u4e3a\u4ec0\u4e48\u4e0d\u8981\u4f7f\u7528\u8fd9\u4e09\u79cd\u529e\u6cd5\uff0c\u6700\u540e\u518d\u7ed9\u51fa\u5269\u4e0b\u7684\u90a3\u4e00\u79cd\u3002 Python\u91cc\u9762\u6700\u5e38\u7528\u7684\u5b57\u7b26\u4e32\u683c\u5f0f\u5316\u65b9\u5f0f\u662f\u91c7\u7528%\u683c\u5f0f\u5316\u64cd\u4f5c\u7b26(C\u98ce\u683c\u7684\u683c\u5f0f\u5b57\u7b26\u4e32)\u3002 \u8fd9\u4e2a\u64cd\u4f5c\u7b26\u5de6\u8fb9\u7684\u6587\u672c\u6a21\u677f\u53eb\u4f5c\u683c\u5f0f\u5b57\u7b26\u4e32\uff08format string\uff09\uff0c\u6211\u4eec\u53ef\u4ee5\u5728\u64cd\u4f5c\u7b26\u53f3\u8fb9\u5199\u4e0a\u67d0\u4e2a\u503c\u6216\u8005\u7531\u591a\u4e2a\u503c\u6240\u6784\u6210\u7684\u5143\u7ec4\uff08tuple\uff09\uff0c\u7528\u6765\u66ff\u6362\u683c\u5f0f\u5b57\u7b26\u4e32\u91cc\u7684\u76f8\u5173\u7b26\u53f7\u3002 python\u5b57\u7b26\u4e32\u683c\u5f0f\u5316\u7b26\u53f7\uff1a %c\uff1a\u5b57\u7b26\u53ca\u5176ASCII\u7801 %s\uff1a\u5b57\u7b26\u4e32 %d\uff1a\u6574\u6570 %u\uff1a\u65e0\u7b26\u53f7\u6574\u578b %o\uff1a\u65e0\u7b26\u53f7\u516b\u8fdb\u5236\u6570 %x\uff1a\u65e0\u7b26\u53f7\u5341\u516d\u8fdb\u5236\u6570 %X\uff1a\u65e0\u7b26\u53f7\u5341\u516d\u8fdb\u5236\u6570\uff08\u5927\u5199\uff09 %f\uff1a\u6d6e\u70b9\u6570\u5b57\uff0c\u53ef\u6307\u5b9a\u5c0f\u6570\u70b9\u540e\u7684\u7cbe\u5ea6 %e\uff1a\u7528\u79d1\u5b66\u8ba1\u6570\u6cd5\u683c\u5f0f\u5316\u6d6e\u70b9\u6570 %E\uff1a\u4f5c\u7528\u540c%e\uff0c\u7528\u79d1\u5b66\u8ba1\u6570\u6cd5\u683c\u5f0f\u5316\u6d6e\u70b9\u6570 %g\uff1a%f\u548c%e\u7684\u7b80\u5199 %G\uff1a%f \u548c %E \u7684\u7b80\u5199 %p\uff1a\u7528\u5341\u516d\u8fdb\u5236\u6570\u683c\u5f0f\u5316\u53d8\u91cf\u7684\u5730\u5740 a = 128 b = 3.1415926 print('Binary is %d, Hex is %X, Oct is %o, Float is %e' % (a, a, a, b)) >>> Binary is 128, Hex is 80, Oct is 200, Float is 3.141593e+00 C\u98ce\u683c\u7684\u683c\u5f0f\u5b57\u7b26\u4e32\uff0c\u5728Python\u91cc\u6709\u56db\u4e2a\u7f3a\u70b9\u3002 \u7b2c\u4e00\u4e2a\u7f3a\u70b9\u662f\uff0c\u5982\u679c%\u53f3\u4fa7\u90a3\u4e2a\u5143\u7ec4\u91cc\u9762\u7684\u503c\u5728\u7c7b\u578b\u6216\u987a\u5e8f\u4e0a\u6709\u53d8\u5316\uff0c\u90a3\u4e48\u7a0b\u5e8f\u53ef\u80fd\u4f1a\u56e0\u4e3a\u8f6c\u6362\u7c7b\u578b\u65f6\u53d1\u751f\u4e0d\u517c\u5bb9\u95ee\u9898\u800c\u51fa\u73b0\u9519\u8bef\u3002 >>> key = 'my_var' >>> value = 1.234 >>> formatted = '%-10s = %.2f' % (key, value) # %-10s\u4ee3\u8868=\u5de6\u8fb9\u5b57\u4e32\u603b\u957f\u5ea610,\u4e0d\u8db3\u90e8\u5206\u5728\u5c3e\u90e8\u6dfb\u52a0\u7a7a\u683c >>> formatted 'my_var = 1.23' >>> \u5982\u679c\u628akey\u8ddfvalue\u4e92\u6362\u4f4d\u7f6e\uff0c\u6216\u8005\u5de6\u4fa7\u90a3\u4e2a\u683c\u5f0f\u5b57\u7b26\u4e32\u91cc\u9762\u7684\u4e24\u4e2a\u8bf4\u660e\u7b26\u5bf9\u8c03\u4e86\u987a\u5e8f\uff0c\u90a3\u4e48\u7a0b\u5e8f\u5c31\u4f1a\u5728\u8fd0\u884c\u65f6\u51fa\u73b0\u5f02\u5e38\u3002 >>> key = 'my_var' >>> value = 1.234 >>> formatted = '%-10s = %.2f' % (value, key) Traceback (most recent call last): File \"<stdin>\", line 1, in <module> TypeError: must be real number, not str >>> key = 'my_var' >>> value = 1.234 >>> formatted = '%.2f = %-10s' % (key, value) Traceback (most recent call last): File \"<stdin>\", line 1, in <module> TypeError: must be real number, not str \u7b2c\u4e8c\u4e2a\u7f3a\u70b9\u662f\uff0c\u5728\u586b\u5145\u6a21\u677f\u4e4b\u524d\uff0c\u7ecf\u5e38\u8981\u5148\u5bf9\u51c6\u5907\u586b\u5199\u8fdb\u53bb\u7684\u8fd9\u4e2a\u503c\u7a0d\u5fae\u505a\u4e00\u4e9b\u5904\u7406\uff0c\u4f46\u8fd9\u6837\u4e00\u6765\uff0c\u6574\u4e2a\u8868\u8fbe\u5f0f\u53ef\u80fd\u5c31\u4f1a\u5199\u5f97\u5f88\u957f\uff0c\u5f71\u54cd\u7a0b\u5e8f\u7684\u53ef\u8bfb\u6027\u3002 >>> pantry = [ ... ('avocados', 1.25), ... ('bananas', 2.5), ... ('cherries', 15) ... ] >>> for i, (item, count) in enumerate(pantry): ... print( ... '#%d: %-10s = %.2f' % ( ... i + 1, ... item.title(), ... round(count) ... ) ... ) ... #1: Avocados = 1.00 #2: Bananas = 2.00 #3: Cherries = 15.00 \u7b2c\u4e09\u4e2a\u7f3a\u70b9\u662f\uff0c\u5982\u679c\u60f3\u7528\u540c\u4e00\u4e2a\u503c\u6765\u586b\u5145\u683c\u5f0f\u5b57\u7b26\u4e32\u91cc\u7684\u591a\u4e2a\u4f4d\u7f6e\uff0c\u90a3\u4e48\u5fc5\u987b\u5728%\u64cd\u4f5c\u7b26\u53f3\u4fa7\u7684\u5143\u7ec4\u4e2d\u76f8\u5e94\u5730\u591a\u6b21\u91cd\u590d\u8be5\u503c\u3002 >>> template = '%s loves food. See %s cook.' >>> name = 'Max' >>> formatted = template % (name, name) >>> formatted 'Max loves food. See Max cook.' \u4e3a\u4e86\u89e3\u51b3\u4e0a\u9762\u63d0\u5230\u7684\u4e00\u4e9b\u95ee\u9898\uff0cPython\u7684%\u64cd\u4f5c\u7b26\u5141\u8bb8\u6211\u4eec\u7528dict\u53d6\u4ee3tuple\uff0c\u89e3\u51b3\u4e86%\u64cd\u4f5c\u7b26\u4e24\u4fa7\u7684\u987a\u5e8f\u4e0d\u5339\u914d\u95ee\u9898\u3002 >>> key = 'my_var' >>> value = 1.234 >>> old_way = '%-10s = %.2f' % (key, value) >>> new_way = '%(key)-10s = %(value).2f' % {'key': key, 'value': value} # \u5bf9\u5e94 >>> reordered = '%(key)-10s = %(value).2f' % {'value': value, 'key': key} # \u4e92\u6362 >>> assert old_way == new_way == reordered >>> old_way 'my_var = 1.23' >>> new_way 'my_var = 1.23' >>> reordered 'my_var = 1.23' \u7528dict\u53d6\u4ee3tuple\uff0c\u4e5f\u89e3\u51b3\u7528\u540c\u4e00\u4e2a\u503c\u66ff\u6362\u591a\u4e2a\u683c\u5f0f\u8bf4\u660e\u7b26\u7684\u95ee\u9898\uff0c\u6211\u4eec\u5c31\u4e0d\u7528\u5728%\u64cd\u4f5c\u7b26\u53f3\u4fa7\u91cd\u590d\u8fd9\u4e2a\u503c\u4e86\u3002 >>> name = 'Max' >>> template = '%s loves food. See %s cook.' >>> before = template % (name, name) >>> template = '%(name)s loves food. See %(name)s cook.' >>> after = template % {'name': name} >>> assert before == after >>> before 'Max loves food. See Max cook.' >>> after 'Max loves food. See Max cook.' \u4f46\u662f\uff0c\u8fd9\u79cd\u5199\u6cd5\u4f1a\u8ba9\u7b2c\u4e8c\u4e2a\u7f3a\u70b9\u53d8\u5f97\u66f4\u52a0\u4e25\u91cd\uff0c\u683c\u5f0f\u5316\u8868\u8fbe\u5f0f\u53d8\u5f97\u66f4\u52a0\u5197\u957f\uff0c\u770b\u8d77\u6765\u4e5f\u66f4\u52a0\u6df7\u4e71\u3002\u5982\u4e0b\u4f8b\uff1a >>> pantry = [ ... ('avocados', 1.25), ... ('bananas', 2.5), ... ('cherries', 15) ... ] >>> for i, (item, count) in enumerate(pantry): ... before = '#%d: %-10s = %.2f' % ( ... i + 1, ... item.title(), ... round(count) ... ) ... after = '#%(loop)d: %(item)-10s = %(count).2f' % { ... 'loop': i + 1, ... 'item': item.title(), ... 'count': round(count) ... } ... assert before == after ... print(before) ... print(after) ... #1: Avocados = 1.00 #1: Avocados = 1.00 #2: Bananas = 2.00 #2: Bananas = 2.00 #3: Cherries = 15.00 #3: Cherries = 15.00 \u6240\u4ee5\uff0c\u7b2c\u56db\u4e2a\u7f3a\u70b9\u662f\uff0c\u628adict\u5199\u5230\u683c\u5f0f\u5316\u8868\u8fbe\u5f0f\u91cc\u9762\u4f1a\u8ba9\u4ee3\u7801\u53d8\u591a\uff0c\u6bcf\u4e2a\u952e\u90fd\u81f3\u5c11\u8981\u5199\u4e24\u6b21\u3002\u4e3a\u4e86\u67e5\u770b\u683c\u5f0f\u5b57\u7b26\u4e32\u4e2d\u7684\u8bf4\u660e\u7b26\u7a76\u7adf\u5bf9\u5e94\u4e8e\u5b57\u5178\u91cc\u7684\u54ea\u4e2a\u952e\uff0c\u5fc5\u987b\u5728\u8fd9\u4e24\u6bb5\u4ee3\u7801\u4e4b\u95f4\u6765\u56de\u8df3\u8dc3\u3002\u5982\u679c\u8981\u5bf9\u952e\u540d\u7a0d\u505a\u4fee\u6539\uff0c\u90a3\u4e48\u5fc5\u987b\u540c\u6b65\u4fee\u6539\u683c\u5f0f\u5b57\u7b26\u4e32\u91cc\u7684\u8bf4\u660e\u7b26\uff0c\u8fd9\u66f4\u8ba9\u4ee3\u7801\u53d8\u5f97\u76f8\u5f53\u70e6\u7410\uff0c\u53ef\u8bfb\u6027\u66f4\u5dee\u3002","title":"\u7b2c4\u6761\u3000\u7528\u652f\u6301\u63d2\u503c\u7684f-string\u53d6\u4ee3C\u98ce\u683c\u7684\u683c\u5f0f\u5b57\u7b26\u4e32\u4e0estr.format\u65b9\u6cd5"},{"location":"python/Pythonic90Rules/Rule04/#formatstrformat","text":"Python 3\u6dfb\u52a0\u4e86\u9ad8\u7ea7\u5b57\u7b26\u4e32\u683c\u5f0f\u5316\uff08advanced stringformatting\uff09\u673a\u5236\uff0c\u5b83\u7684\u8868\u8fbe\u80fd\u529b\u6bd4\u8001\u5f0fC\u98ce\u683c\u7684\u683c\u5f0f\u5b57\u7b26\u4e32\u8981\u5f3a\uff0c\u4e14\u4e0d\u518d\u4f7f\u7528%\u64cd\u4f5c\u7b26\u3002 \u4e0b\u9762\u8fd9\u6bb5\u4ee3\u7801\uff0c\u6f14\u793a\u4e86\u8fd9\u79cd\u65b0\u7684\u683c\u5f0f\u5316\u65b9\u5f0f\u3002\u5728\u4f20\u7ed9format\u51fd\u6570\u7684\u683c\u5f0f\u91cc\u9762\uff0c\u9017\u53f7\u8868\u793a\u663e\u793a\u5343\u4f4d\u5206\u9694\u7b26\uff0c^\u8868\u793a\u5c45\u4e2d\u5bf9\u9f50\u3002 >>> a = 1234.5678 >>> formatted = format(a, ',.2f') >>> formatted '1,234.57' >>> b = 'my string' >>> formatted = format(b, '^20s') >>> formatted ' my string ' \u5982\u679cstr\u7c7b\u578b\u7684\u5b57\u7b26\u4e32\u91cc\u9762\u6709\u8bb8\u591a\u503c\u90fd\u9700\u8981\u8c03\u6574\u683c\u5f0f\uff0c\u5219\u53ef\u4ee5\u628a\u683c\u5f0f\u6709\u5f85\u8c03\u6574\u7684\u90a3\u4e9b\u4f4d\u7f6e\u5728\u5b57\u7b26\u4e32\u91cc\u9762\u5148\u7528{}\u4ee3\u66ff\uff0c\u7136\u540e\u6309\u4ece\u5de6\u5230\u53f3\u7684\u987a\u5e8f\uff0c\u628a\u9700\u8981\u586b\u5199\u5230\u90a3\u4e9b\u4f4d\u7f6e\u7684\u503c\u4f20\u7ed9format\u65b9\u6cd5\uff0c\u4f7f\u8fd9\u4e9b\u503c\u4f9d\u6b21\u51fa\u73b0\u5728\u5b57\u7b26\u4e32\u4e2d\u7684\u76f8\u5e94\u4f4d\u7f6e\u3002 >>> key = 'my_var' >>> value = 1.234 >>> formatted = '{} = {}'.format(key, value) >>> formatted 'my_var = 1.234' >>> formatted = '{} = {}'.format(value, key) >>> formatted '1.234 = my_var' \u901a\u8fc7\u5728{}\u91cc\u5199\u4e2a\u5192\u53f7\uff0c\u7136\u540e\u628a\u683c\u5f0f\u8bf4\u660e\u7b26\u5199\u5728\u5192\u53f7\u7684\u53f3\u8fb9\uff0c\u6765\u6dfb\u52a0\u683c\u5f0f\u3002\uff08\u6dfb\u52a0\u683c\u5f0f\u540e\uff0c\u4e92\u6362\u4f1a\u62a5\u9519\uff09 >>> formatted = '{:<10} = {:.2f}'.format(key, value) >>> formatted 'my_var = 1.23' >>> formatted = '{:<10} = {:.2f}'.format(value, key) Traceback (most recent call last): File \"<stdin>\", line 1, in <module> ValueError: Unknown format code 'f' for object of type 'str' \u4e5f\u53ef\u4ee5\u7ed9str\u7684{}\u91cc\u9762\u5199\u4e0a\u6570\u5b57\uff0c\u7528\u6765\u6307\u4ee3format\u65b9\u6cd5\u5728\u8fd9\u4e2a\u4f4d\u7f6e\u6240\u63a5\u6536\u5230\u7684\u53c2\u6570\u503c\u4f4d\u7f6e\u7d22\u5f15\u3002 \u4ee5\u540e\u5373\u4f7f\u8fd9\u4e9b{}\u5728\u683c\u5f0f\u5b57\u7b26\u4e32\u4e2d\u7684\u6b21\u5e8f\u6709\u6240\u53d8\u52a8\uff0c\u4e5f\u4e0d\u7528\u8c03\u6362\u4f20\u7ed9format\u65b9\u6cd5\u7684\u90a3\u4e9b\u53c2\u6570\u3002\u4e8e\u662f\uff0c\u8fd9\u5c31\u907f\u514d\u4e86\u524d\u9762\u8bb2\u7684\u7b2c\u4e00\u4e2a\u7f3a\u70b9\u6240\u63d0\u5230\u7684\u90a3\u4e2a\u987a\u5e8f\u95ee\u9898\u3002 >>> key = 'my_var' >>> value = 1.234 >>> formatted = '{} = {}'.format(key, value) >>> formatted 'my_var = 1.234' >>> formatted = '{1} = {0}'.format(key, value) >>> formatted '1.234 = my_var' >>> formatted = '{2} = {1}'.format(key, value) Traceback (most recent call last): File \"<stdin>\", line 1, in <module> IndexError: Replacement index 2 out of range for positional args tuple \u540c\u4e00\u4e2a\u4f4d\u7f6e\u7d22\u5f15\u53ef\u4ee5\u51fa\u73b0\u5728str\u7684\u591a\u4e2a{}\u91cc\u9762\uff0c\u8fd9\u5c31\u4e0d\u9700\u8981\u628a\u8fd9\u4e2a\u503c\u91cd\u590d\u5730\u4f20\u7ed9format\u65b9\u6cd5\uff0c\u4e8e\u662f\u5c31\u89e3\u51b3\u4e86\u524d\u9762\u63d0\u5230\u7684\u7b2c\u4e09\u4e2a\u7f3a\u70b9\u3002 >>> name = 'Max' >>> formatted = '%s loves food. See %s cook.' % (name, name) >>> formatted 'Max loves food. See Max cook.' >>> formatted = '%(name)s loves food. See %(name)s cook.' % {'name': name} >>> formatted 'Max loves food. See Max cook.' >>> formatted = '{0} loves food. See {0} cook.'.format(name) >>> formatted 'Max loves food. See Max cook.' \u4e0a\u8ff0\u529f\u80fd\u5206\u6790\uff1a \u7cfb\u7edf\u5148\u628astr.format\u65b9\u6cd5\u63a5\u6536\u5230\u7684\u6bcf\u4e2a\u503c\u4f20\u7ed9\u5185\u7f6e\u7684format\u51fd\u6570\uff0c\u5e76\u627e\u5230\u8fd9\u4e2a\u503c\u5728\u5b57\u7b26\u4e32\u91cc\u5bf9\u5e94\u7684{}\uff0c\u540c\u65f6\u5c06{}\u91cc\u9762\u5199\u7684\u683c\u5f0f\u4e5f\u4f20\u7ed9format\u51fd\u6570\uff0c\u4f8b\u5982\u7cfb\u7edf\u5728\u5904\u7406value\u7684\u65f6\u5019\uff0c\u4f20\u7684\u5c31\u662fformat(value,'.2f')\u3002 \u7136\u540e\uff0c\u7cfb\u7edf\u4f1a\u628aformat\u51fd\u6570\u6240\u8fd4\u56de\u7684\u7ed3\u679c\u5199\u5728\u6574\u4e2a\u683c\u5f0f\u5316\u5b57\u7b26\u4e32{}\u6240\u5728\u7684\u4f4d\u7f6e\u3002 \u53e6\u5916\uff0c\u6bcf\u4e2a\u7c7b\u90fd\u53ef\u4ee5\u901a\u8fc7__format__\u8fd9\u4e2a\u7279\u6b8a\u7684\u65b9\u6cd5\u5b9a\u5236\u76f8\u5e94\u7684\u903b\u8f91\uff0c\u8fd9\u6837\u7684\u8bdd\uff0cformat\u51fd\u6570\u5728\u628a\u8be5\u7c7b\u5b9e\u4f8b\u8f6c\u6362\u6210\u5b57\u7b26\u4e32\u65f6\uff0c\u5c31\u4f1a\u6309\u7167\u8fd9\u79cd\u903b\u8f91\u6765\u8f6c\u6362\u3002 \u8f6c\u4e49\u5904\u7406\uff1a >>> formatted = '%.2f%%' % 12.5 >>> formatted '12.50%' >>> formatted = '{} replace {{}}'.format(1.23) >>> formatted '1.23 replace {}' \u7136\u800c\uff0cstr.format\u65b9\u6cd5\u5e76\u6ca1\u6709\u89e3\u51b3\u4e0a\u9762\u8bb2\u7684\u7b2c\u4e8c\u4e2a\u7f3a\u70b9\u3002\u5982\u679c\u5728\u5bf9\u503c\u505a\u586b\u5145\u4e4b\u524d\u8981\u5148\u5bf9\u8fd9\u4e2a\u503c\u505a\u51fa\u8c03\u6574\uff0c\u90a3\u4e48\u7528\u8fd9\u79cd\u65b9\u6cd5\u5199\u51fa\u6765\u7684\u4ee3\u7801\u8fd8\u662f\u8ddf\u539f\u6765\u4e00\u6837\u4e71\uff0c\u9605\u8bfb\u6027\u5dee\u3002\u5bf9\u6bd4\u4e00\u4e0b\uff1a >>> pantry = [ ... ('avocados', 1.25), ... ('bananas', 2.5), ... ('cherries', 15) ... ] >>> for i, (item, count) in enumerate(pantry): ... before = '#%d: %-10s = %.2f' % ( ... i + 1, ... item.title(), ... round(count) ... ) ... after = '#%(loop)d: %(item)-10s = %(count).2f' % { ... 'loop': i + 1, ... 'item': item.title(), ... 'count': round(count) ... } ... new_style = '#{}: {:<10s} = {:.2f}'.format( ... i + 1, ... item.title(), ... round(count) ... ) ... assert before == after == new_style ... print(before) ... print(after) ... print(new_style) ... #1: Avocados = 1.00 #1: Avocados = 1.00 #1: Avocados = 1.00 #2: Bananas = 2.00 #2: Bananas = 2.00 #2: Bananas = 2.00 #3: Cherries = 15.00 #3: Cherries = 15.00 #3: Cherries = 15.00","title":"\u5185\u7f6e\u7684format\u51fd\u6570\u4e0estr\u7c7b\u7684format\u65b9\u6cd5"},{"location":"python/Pythonic90Rules/Rule04/#f-string","text":"Python 3.6\u6dfb\u52a0\u4e86\u4e00\u79cd\u65b0\u7684\u7279\u6027\uff0c\u53eb\u4f5c\u63d2\u503c\u683c\u5f0f\u5b57\u7b26\u4e32\uff08interpolated format string\uff0c\u7b80\u79f0f-string\uff09\uff0c\u53ef\u4ee5\u89e3\u51b3\u4e0a\u9762\u63d0\u5230\u7684\u6240\u6709\u95ee\u9898\u3002 \u4e0b\u9762\u6309\u7167\u4ece\u77ed\u5230\u957f\u7684\u987a\u5e8f\u628a\u8fd9\u51e0\u79cd\u5199\u6cd5\u6240\u5360\u7684\u7bc7\u5e45\u5bf9\u6bd4\u4e00\u4e0b\uff0c\u8fd9\u6837\u5f88\u5bb9\u6613\u770b\u51fa\u7b26\u53f7\u53f3\u8fb9\u7684\u4ee3\u7801\u5230\u5e95\u6709\u591a\u5c11\u3002C\u98ce\u683c\u7684\u5199\u6cd5\u4e0e\u91c7\u7528str.format\u65b9\u6cd5\u7684\u5199\u6cd5\u53ef\u80fd\u4f1a\u8ba9\u8868\u8fbe\u5f0f\u53d8\u5f97\u5f88\u957f\uff0c\u4f46\u5982\u679c\u6539\u7528f-string\uff0c\u6216\u8bb8\u4e00\u884c\u5c31\u80fd\u5199\u5b8c\u3002 >>> key = 'my_var' >>> value = 1.234 >>> f_string = f'{key:<10} = {value:.2f}' >>> c_tuple = '%-10s = %.2f' % (key, value) >>> str_args = '{:<10} = {:.2f}'.format(key, value) >>> str_kw = '{key:<10} = {value:.2f}'.format(key=key, value=value) >>> c_dict = '%(key)-10s = %(value).2f' % {'key': key, 'value': value} >>> assert c_tuple == c_dict == f_string >>> assert str_args == str_kw == f_string >>> f_string 'my_var = 1.23' >>> c_tuple 'my_var = 1.23' >>> str_args 'my_var = 1.23' >>> str_kw 'my_var = 1.23' >>> c_dict 'my_var = 1.23' \u5bf9\u6bd4\u4e0b\u9762\uff0c\u628astr.format\u65b9\u6cd5\u7684\u5199\u6cd5\u6539\u7528f-string\uff0c\u4e00\u884c\u5c31\u80fd\u5199\u5b8c\u3002 >>> pantry = [ ... ('avocados', 1.25), ... ('bananas', 2.5), ... ('cherries', 15) ... ] >>> for i, (item, count) in enumerate(pantry): ... before = '#%d: %-10s = %.2f' % ( ... i + 1, ... item.title(), ... round(count) ... ) ... after = '#%(loop)d: %(item)-10s = %(count).2f' % { ... 'loop': i + 1, ... 'item': item.title(), ... 'count': round(count) ... } ... new_style = '#{}: {:<10s} = {:.2f}'.format( ... i + 1, ... item.title(), ... round(count) ... ) ... f_string = f'#{i+1}: {item.title():<10s} = {round(count):.2f}' ... assert before == after == new_style == f_string ... print(before) ... print(after) ... print(new_style) ... print(f_string) ... #1: Avocados = 1.00 #1: Avocados = 1.00 #1: Avocados = 1.00 #1: Avocados = 1.00 #2: Bananas = 2.00 #2: Bananas = 2.00 #2: Bananas = 2.00 #2: Bananas = 2.00 #3: Cherries = 15.00 #3: Cherries = 15.00 #3: Cherries = 15.00 #3: Cherries = 15.00 \u8981\u70b9\u603b\u7ed3\uff1a \u91c7\u7528%\u64cd\u4f5c\u7b26\u628a\u503c\u586b\u5145\u5230C\u98ce\u683c\u7684\u683c\u5f0f\u5b57\u7b26\u4e32\u65f6\u4f1a\u9047\u5230\u8bb8\u591a\u95ee\u9898\uff0c\u800c\u4e14\u8fd9\u79cd\u5199\u6cd5\u6bd4\u8f83\u70e6\u7410\u3002 str.format\u65b9\u6cd5\u4e13\u95e8\u7528\u4e00\u5957\u8ff7\u4f60\u8bed\u8a00\u6765\u5b9a\u4e49\u5b83\u7684\u683c\u5f0f\u8bf4\u660e\u7b26\uff0c\u8fd9\u5957\u8bed\u8a00\u7ed9\u6211\u4eec\u63d0\u4f9b\u4e86\u4e00\u4e9b\u6709\u7528\u7684\u6982\u5ff5\uff0c\u4f46\u662f\u5728\u5176\u4ed6\u65b9\u9762\uff0c\u8fd9\u4e2a\u65b9\u6cd5\u8fd8\u662f\u5b58\u5728\u4e0eC\u98ce\u683c\u7684\u683c\u5f0f\u5b57\u7b26\u4e32\u4e00\u6837\u7684\u591a\u79cd\u7f3a\u70b9\uff0c\u6240\u4ee5\u6211\u4eec\u4e5f\u5e94\u8be5\u907f\u514d\u4f7f\u7528\u5b83\u3002 f-string\u91c7\u7528\u65b0\u7684\u5199\u6cd5\uff0c\u5c06\u503c\u586b\u5145\u5230\u5b57\u7b26\u4e32\u4e4b\u4e2d\uff0c\u89e3\u51b3\u4e86C\u98ce\u683c\u7684\u683c\u5f0f\u5b57\u7b26\u4e32\u6240\u5e26\u6765\u7684\u6700\u5927\u95ee\u9898\u3002 f-string\u662f\u4e2a\u7b80\u6d01\u800c\u5f3a\u5927\u7684\u673a\u5236\uff0c\u53ef\u4ee5\u76f4\u63a5\u5728\u683c\u5f0f\u8bf4\u660e\u7b26\u91cc\u5d4c\u5165\u4efb\u610fPython\u8868\u8fbe\u5f0f\u3002","title":"\u63d2\u503c\u683c\u5f0f\u5b57\u7b26\u4e32f-string"},{"location":"python/Pythonic90Rules/Rule05/","text":"\u7b2c5\u6761\u3000\u7528\u8f85\u52a9\u51fd\u6570\u53d6\u4ee3\u590d\u6742\u7684\u8868\u8fbe\u5f0f Python\u7684\u8bed\u6cd5\u76f8\u5f53\u7b80\u660e\uff0c\u6240\u4ee5\u6709\u65f6\u53ea\u7528\u4e00\u6761\u8868\u8fbe\u5f0f\u5c31\u80fd\u5b9e\u73b0\u8bb8\u591a\u903b\u8f91\u3002 \u4f8b\u5982\uff0c\u8981\u628aURL\u4e4b\u4e2d\u7684\u67e5\u8be2\u5b57\u7b26\u4e32\u62c6\u5206\u6210\u952e\u503c\u5bf9\uff0c\u90a3\u4e48\u53ea\u9700\u8981\u4f7f\u7528parse_qs\u51fd\u6570\u5c31\u53ef\u4ee5\u4e86\u3002 >>> from urllib.parse import parse_qs >>> my_value = parse_qs('red=5&blue=0&green=', keep_blank_values=True) >>> my_value {'red': ['5'], 'blue': ['0'], 'green': ['']} \u5728\u89e3\u6790\u67e5\u8be2\u5b57\u7b26\u4e32\u65f6\uff0c\u53ef\u4ee5\u53d1\u73b0\uff0c\u6709\u7684\u53c2\u6570\u53ef\u80fd\u5e26\u6709\u591a\u4e2a\u503c\uff0c\u6709\u7684\u53c2\u6570\u53ef\u80fd\u53ea\u6709\u4e00\u4e2a\u503c\uff0c\u8fd8\u6709\u7684\u53c2\u6570\u53ef\u80fd\u662f\u7a7a\u767d\u503c\uff0c\u53e6\u5916\u4e5f\u4f1a\u9047\u5230\u6839\u672c\u6ca1\u63d0\u4f9b\u8fd9\u4e2a\u53c2\u6570\u7684\u60c5\u51b5\u3002 \u4e0b\u9762\u8fd9\u4e09\u884c\u4ee3\u7801\u5206\u522b\u901a\u8fc7get\u65b9\u6cd5\u67e5\u8be2\u7ed3\u679c\u5b57\u5178\u91cc\u9762\u7684\u4e09\u4e2a\u53c2\u6570\uff0c\u8fd9\u521a\u597d\u5bf9\u5e94\u4e09\u79cd\u4e0d\u540c\u7684\u60c5\u51b5\uff1a >>> red = my_value.get('red') >>> green = my_value.get('green') >>> opacity = my_value.get('Opacity') >>> print('Red ', red) Red ['5'] >>> print('Green ', green) Green [''] >>> print('Opacity ', opacity) Opacity None \u901a\u8fc7Boolean\u8868\u8fbe\u5f0f\u6765\u5b9e\u73b0\u628a\u4e0a\u8ff0\u53c2\u6570\u7f3a\u5931\u4e0e\u53c2\u6570\u4e3a\u7a7a\u8fd9\u4e24\u79cd\u60c5\u51b5\u9ed8\u8ba4\u503c\u90fd\u8bbe\u62100\u3002Boolean\u8868\u8fbe\u5f0f\u4f1a\u628a\u7a7a\u767d\u5b57\u7b26\u4e32\u3001\u7a7a\u767dlist\u4ee5\u53ca0\u503c\uff0c\u5168\u90fd\u5f53\u6210False\u770b\u5f85\u3002 >>> red = my_value.get('red', [''])[0] or 0 >>> green = my_value.get('green', [''])[0] or 0 >>> opacity = my_value.get('Opacity', [''])[0] or 0 >>> print(f'Red : {red!r}') Red : '5' >>> print(f'Green : {green!r}') Green : 0 >>> print(f'Opacity : {opacity!r}') Opacity : 0 \u4e0a\u8ff0\u4ee3\u7801\u89e3\u6790\uff1a \u56e0\u4e3ared\u952e\u5b58\u5728\u4e8emy_value\u5b57\u5178\uff08dict\uff09\u91cc\u9762\uff0c\u5b83\u5bf9\u5e94\u7684\u503c\u662f\u4e2a\u53ea\u6709\u4e00\u4e2a\u5143\u7d20\u7684\u5217\u8868 ['5'] \uff0c\u8fd9\u4e2a\u5143\u7d20\u662f\u5b57\u7b26\u4e32'5'\u3002Python\u4f1a\u628a\u5b57\u7b26\u4e32'5' \u89e3\u6790\u4e3aTrue\uff0c\u6240\u4ee5\u6574\u4e2a\u8868\u8fbe\u5f0f\u7684\u503c\u5c31\u7b49\u4e8eor\u5de6\u4fa7\u90a3\u4e2a\u5b50\u8868\u8fbe\u5f0f\u7684\u503c\uff0c\u5373 my_values.get('red', [''])[0] \u3002 \u5bf9\u4e8egreen\uff0c\u8fd9\u4e2a\u952e\u503c\u4e5f\u5b58\u5728\u4e8emy_value\u5b57\u5178\uff08dict\uff09\u91cc\u9762\uff0c\u5b83\u5bf9\u5e94\u7684\u503c\u662f\u4e2a\u53ea\u6709\u4e00\u4e2a\u5143\u7d20\u7684\u5217\u8868 [''] \uff0c\u8fd9\u4e2a\u5143\u7d20\u662f\u7a7a\u767d\u5b57\u7b26\u4e32\u3002Python\u4f1a\u628a\u7a7a\u767d\u5b57\u7b26\u4e32\u89e3\u6790\u4e3aFalse\uff0c\u6240\u4ee5green\u53d8\u91cf\u7684\u503c\u5c31\u7b49\u4e8eor\u53f3\u4fa7\u90a3\u4e2a\u5b50\u8868\u8fbe\u5f0f\u7684\u503c\uff0c\u4e5f\u5c31\u662f0\u3002 \u5bf9\u4e8eopacity\uff0c\u8fd9\u4e2a\u952e\u503c\u4e0d\u5b58\u5728\u4e8emy_value\u5b57\u5178\uff08dict\uff09\u91cc\u9762\uff0cget\u65b9\u6cd5\u4f1a\u8fd4\u56de\u4f20\u9012\u7ed9\u5b83\u7684\u7b2c\u4e8c\u4e2a\u503c [''] \uff0c\u548cgreen\u7684\u60c5\u51b5\u7c7b\u4f3c\uff0c\u5143\u7d20\u662f\u7a7a\u767d\u5b57\u7b26\u4e32\u3002Python\u4f1a\u628a\u7a7a\u767d\u5b57\u7b26\u4e32\u89e3\u6790\u4e3aFalse\uff0c\u6240\u4ee5opacity\u53d8\u91cf\u7684\u503c\u5c31\u7b49\u4e8eor\u53f3\u4fa7\u90a3\u4e2a\u5b50\u8868\u8fbe\u5f0f\u7684\u503c\uff0c\u4e5f\u5c31\u662f0\u3002 \u4f46\u662f\uff0c\u4e0a\u9762\u7684\u8868\u8fbe\u5f0f\u53ef\u8bfb\u6027\u6bd4\u8f83\u5dee\uff0c\u76f8\u6bd4\u4e4b\u4e0b\uff0c\u6539\u7528if/else\u6761\u4ef6\u8868\u8fbe\u5f0f\uff0c\u4ee3\u7801\u53ef\u8bfb\u6027\u4f1a\u597d\u4e00\u4e9b\u3002 >>> green_str = my_value.get('green', ['']) >>> if green_str[0]: ... green = green_str[0] ... else: ... green =0 ... >>> green 0 \u5982\u679c\u8981\u53cd\u590d\u4f7f\u7528\u8fd9\u5957\u903b\u8f91\uff0c\u5efa\u8bae\u5199\u6210\u8f85\u52a9\u51fd\u6570\u6bd4\u8f83\u597d\uff0c\u5373\u4f7f\u50cf\u4e0a\u9762\u8fd9\u4e2a\u4f8b\u5b50\u4e00\u6837\u53ea\u7528\u4e09\u6b21\u3002 >>> def get_first_value(value, key, default=0): ... found = value.get(key, ['']) ... if found[0]: ... return found[0] ... return default ... >>> green = get_first_value(my_value, 'green') >>> green 0 \u8981\u70b9\uff1a * Python\u7684\u8bed\u6cd5\u5f88\u5bb9\u6613\u628a\u590d\u6742\u7684\u610f\u601d\u6324\u5230\u540c\u4e00\u884c\u8868\u8fbe\u5f0f\u91cc\uff0c\u8fd9\u6837\u5199\u5f88\u96be\u61c2\u3002 * \u590d\u6742\u7684\u8868\u8fbe\u5f0f\uff0c\u5c24\u5176\u662f\u90a3\u79cd\u9700\u8981\u91cd\u590d\u4f7f\u7528\u7684\u590d\u6742\u8868\u8fbe\u5f0f\uff0c\u5e94\u8be5\u5199\u5230\u8f85\u52a9\u51fd\u6570\u91cc\u9762\u3002 * \u7528if/else\u7ed3\u6784\u5199\u6210\u7684\u6761\u4ef6\u8868\u8fbe\u5f0f\uff0c\u8981\u6bd4\u7528or\u4e0eand\u5199\u6210\u7684Boolean\u8868\u8fbe\u5f0f\u66f4\u597d\u61c2\u3002 * \u9075\u5faa\u5faaDRY\u539f\u5219\uff0c\u4e0d\u8981\u91cd\u590d\u81ea\u5df1\u5199\u8fc7\u7684\u4ee3\u7801\uff08Don't Repeat Yourself\uff09\u3002","title":"\u7b2c5\u6761\u3000\u7528\u8f85\u52a9\u51fd\u6570\u53d6\u4ee3\u590d\u6742\u7684\u8868\u8fbe\u5f0f"},{"location":"python/Pythonic90Rules/Rule05/#5","text":"Python\u7684\u8bed\u6cd5\u76f8\u5f53\u7b80\u660e\uff0c\u6240\u4ee5\u6709\u65f6\u53ea\u7528\u4e00\u6761\u8868\u8fbe\u5f0f\u5c31\u80fd\u5b9e\u73b0\u8bb8\u591a\u903b\u8f91\u3002 \u4f8b\u5982\uff0c\u8981\u628aURL\u4e4b\u4e2d\u7684\u67e5\u8be2\u5b57\u7b26\u4e32\u62c6\u5206\u6210\u952e\u503c\u5bf9\uff0c\u90a3\u4e48\u53ea\u9700\u8981\u4f7f\u7528parse_qs\u51fd\u6570\u5c31\u53ef\u4ee5\u4e86\u3002 >>> from urllib.parse import parse_qs >>> my_value = parse_qs('red=5&blue=0&green=', keep_blank_values=True) >>> my_value {'red': ['5'], 'blue': ['0'], 'green': ['']} \u5728\u89e3\u6790\u67e5\u8be2\u5b57\u7b26\u4e32\u65f6\uff0c\u53ef\u4ee5\u53d1\u73b0\uff0c\u6709\u7684\u53c2\u6570\u53ef\u80fd\u5e26\u6709\u591a\u4e2a\u503c\uff0c\u6709\u7684\u53c2\u6570\u53ef\u80fd\u53ea\u6709\u4e00\u4e2a\u503c\uff0c\u8fd8\u6709\u7684\u53c2\u6570\u53ef\u80fd\u662f\u7a7a\u767d\u503c\uff0c\u53e6\u5916\u4e5f\u4f1a\u9047\u5230\u6839\u672c\u6ca1\u63d0\u4f9b\u8fd9\u4e2a\u53c2\u6570\u7684\u60c5\u51b5\u3002 \u4e0b\u9762\u8fd9\u4e09\u884c\u4ee3\u7801\u5206\u522b\u901a\u8fc7get\u65b9\u6cd5\u67e5\u8be2\u7ed3\u679c\u5b57\u5178\u91cc\u9762\u7684\u4e09\u4e2a\u53c2\u6570\uff0c\u8fd9\u521a\u597d\u5bf9\u5e94\u4e09\u79cd\u4e0d\u540c\u7684\u60c5\u51b5\uff1a >>> red = my_value.get('red') >>> green = my_value.get('green') >>> opacity = my_value.get('Opacity') >>> print('Red ', red) Red ['5'] >>> print('Green ', green) Green [''] >>> print('Opacity ', opacity) Opacity None \u901a\u8fc7Boolean\u8868\u8fbe\u5f0f\u6765\u5b9e\u73b0\u628a\u4e0a\u8ff0\u53c2\u6570\u7f3a\u5931\u4e0e\u53c2\u6570\u4e3a\u7a7a\u8fd9\u4e24\u79cd\u60c5\u51b5\u9ed8\u8ba4\u503c\u90fd\u8bbe\u62100\u3002Boolean\u8868\u8fbe\u5f0f\u4f1a\u628a\u7a7a\u767d\u5b57\u7b26\u4e32\u3001\u7a7a\u767dlist\u4ee5\u53ca0\u503c\uff0c\u5168\u90fd\u5f53\u6210False\u770b\u5f85\u3002 >>> red = my_value.get('red', [''])[0] or 0 >>> green = my_value.get('green', [''])[0] or 0 >>> opacity = my_value.get('Opacity', [''])[0] or 0 >>> print(f'Red : {red!r}') Red : '5' >>> print(f'Green : {green!r}') Green : 0 >>> print(f'Opacity : {opacity!r}') Opacity : 0 \u4e0a\u8ff0\u4ee3\u7801\u89e3\u6790\uff1a \u56e0\u4e3ared\u952e\u5b58\u5728\u4e8emy_value\u5b57\u5178\uff08dict\uff09\u91cc\u9762\uff0c\u5b83\u5bf9\u5e94\u7684\u503c\u662f\u4e2a\u53ea\u6709\u4e00\u4e2a\u5143\u7d20\u7684\u5217\u8868 ['5'] \uff0c\u8fd9\u4e2a\u5143\u7d20\u662f\u5b57\u7b26\u4e32'5'\u3002Python\u4f1a\u628a\u5b57\u7b26\u4e32'5' \u89e3\u6790\u4e3aTrue\uff0c\u6240\u4ee5\u6574\u4e2a\u8868\u8fbe\u5f0f\u7684\u503c\u5c31\u7b49\u4e8eor\u5de6\u4fa7\u90a3\u4e2a\u5b50\u8868\u8fbe\u5f0f\u7684\u503c\uff0c\u5373 my_values.get('red', [''])[0] \u3002 \u5bf9\u4e8egreen\uff0c\u8fd9\u4e2a\u952e\u503c\u4e5f\u5b58\u5728\u4e8emy_value\u5b57\u5178\uff08dict\uff09\u91cc\u9762\uff0c\u5b83\u5bf9\u5e94\u7684\u503c\u662f\u4e2a\u53ea\u6709\u4e00\u4e2a\u5143\u7d20\u7684\u5217\u8868 [''] \uff0c\u8fd9\u4e2a\u5143\u7d20\u662f\u7a7a\u767d\u5b57\u7b26\u4e32\u3002Python\u4f1a\u628a\u7a7a\u767d\u5b57\u7b26\u4e32\u89e3\u6790\u4e3aFalse\uff0c\u6240\u4ee5green\u53d8\u91cf\u7684\u503c\u5c31\u7b49\u4e8eor\u53f3\u4fa7\u90a3\u4e2a\u5b50\u8868\u8fbe\u5f0f\u7684\u503c\uff0c\u4e5f\u5c31\u662f0\u3002 \u5bf9\u4e8eopacity\uff0c\u8fd9\u4e2a\u952e\u503c\u4e0d\u5b58\u5728\u4e8emy_value\u5b57\u5178\uff08dict\uff09\u91cc\u9762\uff0cget\u65b9\u6cd5\u4f1a\u8fd4\u56de\u4f20\u9012\u7ed9\u5b83\u7684\u7b2c\u4e8c\u4e2a\u503c [''] \uff0c\u548cgreen\u7684\u60c5\u51b5\u7c7b\u4f3c\uff0c\u5143\u7d20\u662f\u7a7a\u767d\u5b57\u7b26\u4e32\u3002Python\u4f1a\u628a\u7a7a\u767d\u5b57\u7b26\u4e32\u89e3\u6790\u4e3aFalse\uff0c\u6240\u4ee5opacity\u53d8\u91cf\u7684\u503c\u5c31\u7b49\u4e8eor\u53f3\u4fa7\u90a3\u4e2a\u5b50\u8868\u8fbe\u5f0f\u7684\u503c\uff0c\u4e5f\u5c31\u662f0\u3002 \u4f46\u662f\uff0c\u4e0a\u9762\u7684\u8868\u8fbe\u5f0f\u53ef\u8bfb\u6027\u6bd4\u8f83\u5dee\uff0c\u76f8\u6bd4\u4e4b\u4e0b\uff0c\u6539\u7528if/else\u6761\u4ef6\u8868\u8fbe\u5f0f\uff0c\u4ee3\u7801\u53ef\u8bfb\u6027\u4f1a\u597d\u4e00\u4e9b\u3002 >>> green_str = my_value.get('green', ['']) >>> if green_str[0]: ... green = green_str[0] ... else: ... green =0 ... >>> green 0 \u5982\u679c\u8981\u53cd\u590d\u4f7f\u7528\u8fd9\u5957\u903b\u8f91\uff0c\u5efa\u8bae\u5199\u6210\u8f85\u52a9\u51fd\u6570\u6bd4\u8f83\u597d\uff0c\u5373\u4f7f\u50cf\u4e0a\u9762\u8fd9\u4e2a\u4f8b\u5b50\u4e00\u6837\u53ea\u7528\u4e09\u6b21\u3002 >>> def get_first_value(value, key, default=0): ... found = value.get(key, ['']) ... if found[0]: ... return found[0] ... return default ... >>> green = get_first_value(my_value, 'green') >>> green 0 \u8981\u70b9\uff1a * Python\u7684\u8bed\u6cd5\u5f88\u5bb9\u6613\u628a\u590d\u6742\u7684\u610f\u601d\u6324\u5230\u540c\u4e00\u884c\u8868\u8fbe\u5f0f\u91cc\uff0c\u8fd9\u6837\u5199\u5f88\u96be\u61c2\u3002 * \u590d\u6742\u7684\u8868\u8fbe\u5f0f\uff0c\u5c24\u5176\u662f\u90a3\u79cd\u9700\u8981\u91cd\u590d\u4f7f\u7528\u7684\u590d\u6742\u8868\u8fbe\u5f0f\uff0c\u5e94\u8be5\u5199\u5230\u8f85\u52a9\u51fd\u6570\u91cc\u9762\u3002 * \u7528if/else\u7ed3\u6784\u5199\u6210\u7684\u6761\u4ef6\u8868\u8fbe\u5f0f\uff0c\u8981\u6bd4\u7528or\u4e0eand\u5199\u6210\u7684Boolean\u8868\u8fbe\u5f0f\u66f4\u597d\u61c2\u3002 * \u9075\u5faa\u5faaDRY\u539f\u5219\uff0c\u4e0d\u8981\u91cd\u590d\u81ea\u5df1\u5199\u8fc7\u7684\u4ee3\u7801\uff08Don't Repeat Yourself\uff09\u3002","title":"\u7b2c5\u6761\u3000\u7528\u8f85\u52a9\u51fd\u6570\u53d6\u4ee3\u590d\u6742\u7684\u8868\u8fbe\u5f0f"},{"location":"python/Pythonic90Rules/Rule06/","text":"\u7b2c6\u6761\u3000\u628a\u6570\u636e\u7ed3\u6784\u76f4\u63a5\u62c6\u5206\u5230\u591a\u4e2a\u53d8\u91cf\u91cc\uff0c\u4e0d\u8981\u4e13\u95e8\u901a\u8fc7\u4e0b\u6807\u8bbf\u95ee Python\u5185\u7f6e\u7684\u5143\u7ec4\uff08tuple\uff09\u7c7b\u578b\u53ef\u4ee5\u521b\u5efa\u4e0d\u53ef\u53d8\u7684\u5e8f\u5217\uff0c\u628a\u8bb8\u591a\u5143\u7d20\u4f9d\u6b21\u4fdd\u5b58\u8d77\u6765\u3002 \u53ef\u4ee5\u7528\u6574\u6570\u4f5c\u4e0b\u6807\uff0c\u901a\u8fc7\u4e0b\u6807\u6765\u8bbf\u95ee\u5143\u7ec4\u91cc\u9762\u5bf9\u5e94\u7684\u5143\u7d20\u3002\u4f46\u4e0d\u80fd\u901a\u8fc7\u4e0b\u6807\u7ed9\u5143\u7d20\u8d4b\u65b0\u503c\u3002 >>> snack_calories = { ... 'chips': 140, ... 'popcorn': 80, ... 'nuts': 190 ... } >>> items = tuple(snack_calories.items()) >>> type(snack_calories) <class 'dict'> >>> type(items) <class 'tuple'> >>> snack_calories {'chips': 140, 'popcorn': 80, 'nuts': 190} >>> items (('chips', 140), ('popcorn', 80), ('nuts', 190)) >>> items[2] ('nuts', 190) >>> items[1] = ('apple', 200) Traceback (most recent call last): File \"<stdin>\", line 1, in <module> TypeError: 'tuple' object does not support item assignment Python\u8fd8\u6709\u4e00\u79cd\u5199\u6cd5\uff0c\u53eb\u4f5c\u62c6\u5206\uff08unpacking\uff09\u3002\u8fd9\u79cd\u5199\u6cd5\u8ba9\u6211\u4eec\u53ea\u7528\u4e00\u6761\u8bed\u53e5\uff0c\u5c31\u53ef\u4ee5\u628a\u5143\u7ec4\u91cc\u9762\u7684\u5143\u7d20\u5206\u522b\u8d4b\u7ed9\u591a\u4e2a\u53d8\u91cf\uff0c\u4e0d\u7528\u518d\u901a\u8fc7\u4e0b\u6807\u53bb\u8bbf\u95ee\u3002 \u5143\u7ec4\u7684\u5143\u7d20\u672c\u8eab\u4e0d\u80fd\u4fee\u6539\uff0c\u4f46\u662f\u90a3\u4e9b\u88ab\u8d4b\u503c\u7684\u53d8\u91cf\u662f\u53ef\u4ee5\u4fee\u6539\u7684\u3002 \u901a\u8fc7unpacking\u6765\u8d4b\u503c\u8981\u6bd4\u901a\u8fc7\u4e0b\u6807\u53bb\u8bbf\u95ee\u5143\u7ec4\u5185\u7684\u5143\u7d20\u66f4\u6e05\u6670\uff0c\u800c\u4e14\u8fd9\u79cd\u5199\u6cd5\u6240\u9700\u7684\u4ee3\u7801\u91cf\u901a\u5e38\u6bd4\u8f83\u5c11\u3002\u5f53\u7136\uff0c\u8d4b\u503c\u64cd\u4f5c\u7684\u5de6\u8fb9\u9664\u4e86\u53ef\u4ee5\u7f57\u5217\u5355\u4e2a\u53d8\u91cf\uff0c\u4e5f\u53ef\u4ee5\u5199\u6210\u5217\u8868\u3001\u5e8f\u5217\u6216\u4efb\u610f\u6df1\u5ea6\u7684\u53ef\u8fed\u4ee3\u5bf9\u8c61\uff08iterable\uff09\u3002 >>> favorite_snacks = { ... 'salty': ('pretzels', 100), ... 'sweet': ('cookies', 280), ... 'veggie': ('carrots', 20) ... } >>> ( ... (type1, (name1, cals1)), ... (type2, (name2, cals2)), ... (type3, (name3, cals3)), ... ) = favorite_snacks.items() >>> print(f'Favorite {type1} is {name1} with {cals1} calories') Favorite salty is pretzels with 100 calories >>> print(f'Favorite {type2} is {name2} with {cals2} calories') Favorite sweet is cookies with 280 calories >>> print(f'Favorite {type3} is {name3} with {cals3} calories') Favorite veggie is carrots with 20 calories \u53ef\u4ee5\u901a\u8fc7unpacking\u539f\u5730\u4ea4\u6362\u4e24\u4e2a\u53d8\u91cf\uff0c\u800c\u4e0d\u7528\u4e13\u95e8\u521b\u5efa\u4e34\u65f6\u53d8\u91cf\u3002 >>> def bubble_sort(a): ... for _ in range(len(a)): ... for i in range(1, len(a)): ... if a[i] < a[i - 1]: ... temp = a[i] ... a[i] = a[i - 1] ... a[i - 1] = temp ... >>> names = ['pretzels', 'carrots', 'arugula', 'bacon'] >>> bubble_sort(names) >>> names ['arugula', 'bacon', 'carrots', 'pretzels'] >>> def bubble_sort(a): ... for _ in range(len(a)): ... for i in range(1, len(a)): ... if a[i] < a[i - 1]: ... a[i], a[i - 1] = a[i - 1], a[i] ... >>> names = ['pretzels', 'carrots', 'arugula', 'bacon'] >>> bubble_sort(names) >>> names ['arugula', 'bacon', 'carrots', 'pretzels'] \u539f\u7406\u5206\u6790\uff1a Python\u5904\u7406\u8d4b\u503c\u64cd\u4f5c\u7684\u65f6\u5019\uff0c\u8981\u5148\u5bf9=\u53f7\u53f3\u4fa7\u6c42\u503c\uff0c\u4e8e\u662f\uff0c\u5b83\u4f1a\u65b0\u5efa\u4e00\u4e2a\u4e34\u65f6\u7684\u5143\u7ec4\uff0c\u628a a[i] \u4e0e a[i-1] \u8fd9\u4e24\u4e2a\u5143\u7d20\u653e\u5230\u8fd9\u4e2a\u5143\u7ec4\u91cc\u9762\u3002\u4f8b\u5982\uff0c\u7b2c\u4e00\u6b21\u8fdb\u5165\u5185\u90e8\u7684for\u5faa\u73af\u65f6\uff0c\u8fd9\u4e24\u4e2a\u5143\u7d20\u5206\u522b\u662f 'carrots' \u4e0e 'pretzels '\uff0c\u4e8e\u662f\uff0c\u7cfb\u7edf\u5c31\u4f1a\u521b\u5efa\u51fa ('carrots','pretzels') \u8fd9\u6837\u4e00\u4e2a\u4e34\u65f6\u7684\u5143\u7ec4\u3002 \u7136\u540e\uff0cPython\u4f1a\u5bf9\u8fd9\u4e2a\u4e34\u65f6\u7684\u5143\u7ec4\u505aunpacking\uff0c\u628a\u5b83\u91cc\u9762\u7684\u4e24\u4e2a\u5143\u7d20\u5206\u522b\u653e\u5230=\u53f7\u5de6\u4fa7\u7684\u90a3\u4e24\u4e2a\u5730\u65b9\uff0c\u4e8e\u662f\uff0c 'carrots' \u5c31\u4f1a\u628a a[i-1] \u91cc\u9762\u539f\u6709\u7684 'pretzels' \u6362\u6389\uff0c 'pretzels' \u4e5f\u4f1a\u628a a[i] \u91cc\u9762\u539f\u6709\u7684 'carrots' \u6362\u6389\u3002 \u73b0\u5728\uff0c\u51fa\u73b0\u5728 a[0] \u8fd9\u4e2a\u4f4d\u7f6e\u4e0a\u9762\u7684\u5b57\u7b26\u4e32\u5c31\u662f 'carrots' \u4e86\uff0c\u51fa\u73b0\u5728 a[1] \u8fd9\u4e2a\u4f4d\u7f6e\u4e0a\u9762\u7684\u5b57\u7b26\u4e32\u5219\u662f 'pretzels' \u3002 \u505a\u5b8cunpacking\u540e\uff0c\u7cfb\u7edf\u4f1a\u6254\u6389\u8fd9\u4e2a\u4e34\u65f6\u7684\u5143\u7ec4\u3002 unpacking\u673a\u5236\u8fd8\u6709\u4e00\u4e2a\u7279\u522b\u91cd\u8981\u7684\u7528\u6cd5\uff0c\u5c31\u662f\u53ef\u4ee5\u5728for\u5faa\u73af\u6216\u8005\u7c7b\u4f3c\u7684\u7ed3\u6784\u91cc\u9762\uff0c\u628a\u590d\u6742\u7684\u6570\u636e\u62c6\u5206\u5230\u76f8\u5173\u7684\u53d8\u91cf\u4e4b\u4e2d\u3002 >>> snacks = [('bacon', 350), ('donut', 240), ('muffin', 190)] >>> for i in range(len(snacks)): ... item = snacks[i] ... name = item[0] ... calories = item[1] ... print(f'#{i+1}: {name} has {calories} calories') ... #1: bacon has 350 calories #2: donut has 240 calories #3: muffin has 190 calories \u4e0a\u9762\u8fd9\u6bb5\u4ee3\u7801\u867d\u7136\u6ca1\u9519\uff0c\u4f46\u770b\u8d77\u6765\u5f88\u4e71\uff0c\u56e0\u4e3asnacks\u7ed3\u6784\u672c\u8eab\u5e76\u4e0d\u662f\u4e00\u4efd\u7b80\u5355\u7684\u5217\u8868\uff0c\u5b83\u7684\u6bcf\u4e2a\u5143\u7d20\u90fd\u662f\u4e00\u4e2a\u5143\u7ec4\uff0c \u6240\u4ee5\u5fc5\u987b\u9010\u5c42\u8bbf\u95ee\u624d\u80fd\u67e5\u5230\u6700\u4e3a\u5177\u4f53\u7684\u6570\u636e\uff0c\u4e5f\u5c31\u662f\u6bcf\u79cd\u96f6\u98df\u7684\u540d\u79f0\uff08name\uff09\u53ca\u5361\u8def\u91cc\uff08calories\uff09\u3002 \u4e0b\u9762\u6362\u4e00\u79cd\u5199\u6cd5\uff0c\u9996\u5148\u8c03\u7528\u5185\u7f6e\u7684enumerate\u51fd\u6570\uff08\u53c2\u89c1\u7b2c7\u6761\uff09\u83b7\u5f97\u5f53\u524d\u8981\u8fed\u4ee3\u7684\u5143\u7ec4\uff0c \u7136\u540e\u9488\u5bf9\u8fd9\u4e2a\u5143\u7ec4\u505aunpacking\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u76f4\u63a5\u5f97\u5230\u5177\u4f53\u7684name\u4e0ecalories\u503c\u4e86\u3002 \u8fd9\u624d\u662f\u7b26\u5408Python\u98ce\u683c\u7684\u5199\u6cd5\uff08Pythonic\u5f0f\u7684\u5199\u6cd5\uff09\u3002 >>> for rank, (name, calories) in enumerate(snacks, 1): ... print(f'#{rank}: {name} has {calories} calories') ... #1: bacon has 350 calories #2: donut has 240 calories #3: muffin has 190 calories Python\u7684unpacking\u673a\u5236\u53ef\u4ee5\u7528\u5728\u8bb8\u591a\u65b9\u9762\uff0c\u4f8b\u5982\u6784\u5efa\u5217\u8868\uff08Rule13\uff09\u3001\u7ed9\u51fd\u6570\u8bbe\u8ba1\u53c2\u6570\u5217\u8868\uff08Rule22\uff09\u3001\u4f20\u9012\u5173\u952e\u5b57\u53c2\u6570\uff08Rule23\uff09\u3001\u63a5\u6536\u591a\u4e2a\u8fd4\u56de\u503c\uff08Rule19\u6761\uff09\u7b49\u3002 \u8981\u70b9\uff1a unpacking\u662f\u4e00\u79cd\u7279\u6b8a\u7684Python\u8bed\u6cd5\uff0c\u53ea\u9700\u8981\u4e00\u884c\u4ee3\u7801\uff0c\u5c31\u80fd\u628a\u6570\u636e\u7ed3\u6784\u91cc\u9762\u7684\u591a\u4e2a\u503c\u5206\u522b\u8d4b\u7ed9\u76f8\u5e94\u7684\u53d8\u91cf\u3002 unpacking\u5728Python\u4e2d\u5e94\u7528\u5e7f\u6cdb\uff0c\u51e1\u662f\u53ef\u8fed\u4ee3\u7684\u5bf9\u8c61\u90fd\u80fd\u62c6\u5206\uff0c\u65e0\u8bba\u5b83\u91cc\u9762\u8fd8\u6709\u591a\u5c11\u5c42\u8fed\u4ee3\u7ed3\u6784\u3002 \u5c3d\u91cf\u901a\u8fc7unpacking\u6765\u62c6\u89e3\u5e8f\u5217\u4e4b\u4e2d\u7684\u6570\u636e\uff0c\u800c\u4e0d\u8981\u901a\u8fc7\u4e0b\u6807\u8bbf\u95ee\uff0c\u8fd9\u6837\u53ef\u4ee5\u8ba9\u4ee3\u7801\u66f4\u7b80\u6d01\u3001\u66f4\u6e05\u6670\u3002 \u62d3\u5c55\uff1aPacking and Unpacking in Python Python allows a tuple (or list) of variables to appear on the left side of an assignment operation. Each variable in the tuple can receive one value (or more, if we use the * operator) from an iterable on the right side of the assignment. Unpacking in Python refers to an operation that consists of assigning an iterable of values to a tuple (or list) of variables in a single assignment statement. In Python, we can put a tuple of variables on the left side of an assignment operator (=) and a tuple of values on the right side. The values on the right will be automatically assigned to the variables on the left according to their position in the tuple. This is commonly known as tuple unpacking in Python. Check out the following example: >>> (a, b, c) = (1, 2, 3) >>> a 1 >>> b 2 >>> c 3 >>> birthday = ('April', 5, 2001) >>> month, day, year = birthday >>> month 'April' >>> day 5 >>> year 2001 The tuple unpacking feature got so popular among Python developers that the syntax was extended to work with any iterable object. The only requirement is that the iterable yields exactly one item per variable in the receiving tuple ( or list). Check out the following examples of how iterable unpacking works in Python: >>> # Unpackage strings >>> a, b, c = '123' >>> a '1' >>> b '2' >>> c '3' >>> # Unpackaging strings >>> a, b, c = '123' >>> a '1' >>> b '2' >>> c '3' >>> # Unpacking lists >>> a, b, c = [1, 2, 3] >>> a 1 >>> b 2 >>> c 3 >>> # Unpacking generators >>> gen = (i ** 2 for i in range(3)) >>> a, b, c = gen >>> a 0 >>> b 1 >>> c 4 >>> # Upacking dictionaries (keys, values, and items) >>> my_dict = {'one': 1, 'two': 2, 'three': 3} >>> a, b, c = my_dict >>> a 'one' >>> b 'two' >>> c 'three' >>> a, b, c = my_dict.values() >>> a 1 >>> b 2 >>> c 3 >>> a, b, c = my_dict.items() >>> a ('one', 1) >>> b ('two', 2) >>> c ('three', 3) >>> # Use a tuple on the right side of assignment statement >>> [a, b, c] = 1, 2, 3 >>> a 1 >>> b 2 >>> c 3 >>> # Use range() iterator >>> x, y, z = range(3) >>> x 0 >>> y 1 >>> z 2 As a complement, the term packing can be used when we collect several values in a single variable using the iterable unpacking operator. The * operator is known, in this context, as the tuple (or iterable) unpacking operator. It extends the unpacking functionality to allow us to collect or pack multiple values in a single variable. In the following example, we pack a tuple of values into a single variable by using the * operator: >>> *a, = 1, 2 >>> a [1, 2] For this code to work, the left side of the assignment must be a tuple (or a list). That's why we use a trailing comma. This tuple can contain as many variables as we need. However, it can only contain one starred expression. >>> # Packing trailing values >>> a, *b = 1, 2, 3 >>> a 1 >>> b [2, 3] >>> *a, b, c = 1, 2, 3 >>> a [1] >>> b 2 >>> c 3 >>> *a, b, c, d, e = 1, 2, 3 Traceback (most recent call last): File \"<stdin>\", line 1, in <module> ValueError: not enough values to unpack (expected at least 4, got 3) >>> *a, b, c, d = 1, 2, 3 >>> a [] >>> b 1 >>> c 2 >>> d 3 >>> >>> seq = [1, 2, 3, 4] >>> first, *body, last = seq >>> first, body, last (1, [2, 3], 4) >>> first, body, *last = seq >>> first, body, last (1, 2, [3, 4]) >>> ran = range(10) >>> *r, = ran >>> r [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] Using Packing and Unpacking in Practice >>> employee = ['John Doe', '40', 'Software Engineer'] >>> name = employee[0] >>> age = employee[1] >>> job = employee[2] >>> name 'John Doe' >>> age '40' >>> job 'Software Engineer' >>> >>> name, age, job = ['John Doe', '40', 'Software Engineer'] >>> name 'John Doe' >>> age '40' >>> job 'Software Engineer' >>> >>> a = 100 >>> b = 200 >>> a, b = b, a >>> a 200 >>> b 100 Dropping Unneeded Values With * >>> a, b, *_ = 1, 2, 0, 0, 0, 0 >>> a 1 >>> b 2 >>> _ [0, 0, 0, 0] The rest of the information is stored in the dummy variable _, which can be ignored by our program. By default, the underscore character _ is used by the Python interpreter to store the resulting value of the statements we run in an interactive session. So, in this context, the use of this character to identify dummy variables can be ambiguous. Returning Tuples in Functions >>> def powers(num): ... return num, num ** 2, num ** 3 ... >>> # Packaging returned values in a tuple >>> result = powers(3) >>> result (3, 9, 27) >>> # Unpacking returned values to multiple variables >>> number, square, cube = powers(3) >>> number 3 >>> square 9 >>> cube 27 >>> *_, cube = powers(3) >>> cube 27 Merging Iterables With the * Operator The last two examples show that this is also a more readable and efficient way to concatenate iterables. Instead of writing list(my_set) + my_list + list(my_tuple) + list(range(1, 4)) + list(my_str) we just write [*my_set, *my_list, *my_tuple, *range(1, 4), *my_str] . >>> my_tuple = (1, 2, 3) >>> (0, *my_tuple, 4) (0, 1, 2, 3, 4) >>> my_list = [1, 2, 3] >>> [0, *my_list, 4] [0, 1, 2, 3, 4] >>> my_set = {1, 2, 3} >>> {0, *my_set, 4} {0, 1, 2, 3, 4} >>> [*my_set, *my_list, *my_tuple, *range(1, 4)] [1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3] >>> my_str = \"123\" >>> [*my_set, *my_list, *my_tuple, *range(1, 4), *my_str] [1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, '1', '2', '3'] Unpacking Dictionaries With the ** Operator >>> numbers = {'one': 1, 'two': 2, 'three': 3} >>> letters = {'a': 'A', 'b': 'B', 'c': 'C'} >>> combination = {**numbers, **letters} >>> combination {'one': 1, 'two': 2, 'three': 3, 'a': 'A', 'b': 'B', 'c': 'C'} An important point to note is that, if the dictionaries we're trying to merge have repeated or common keys, then the values of the right-most dictionary will override the values of the left-most dictionary. Here's an example: >>> letters = {'a': 'A', 'b': 'B', 'c': 'C'} >>> vowels = {'a': 'a', 'e': 'e', 'i': 'i', 'o': 'o', 'u': 'u'} >>> {**letters, **vowels} {'a': 'a', 'b': 'B', 'c': 'C', 'e': 'e', 'i': 'i', 'o': 'o', 'u': 'u'} >>> {**vowels, **letters} {'a': 'A', 'e': 'e', 'i': 'i', 'o': 'o', 'u': 'u', 'b': 'B', 'c': 'C'} Unpacking in For-Loops We can also use iterable unpacking in the context of for loops. When we run a for loop, the loop assigns one item of its iterable to the target variable in every iteration. If the item to be assigned is an iterable, then we can use a tuple of target variables. The loop will unpack the iterable at hand into the tuple of target variables. We can build a list of two-elements tuples. Each tuple will contain the name of the product, the price, and the sold units. With this information, we want to calculate the income of each product. To do this, we can use a for loop like this: >>> sales = [('Pencle', 0.22, 1500), ('Notebook', 1.30, 550), ('Eraser', 0.75, 1000)] >>> for items in sales: ... print(f\"Income for {item[0]} is: {item[1] * item[2]}\") ... Traceback (most recent call last): File \"<stdin>\", line 2, in <module> NameError: name 'item' is not defined >>> for items in sales: ... print(f\"Income for {items[0]} is: {items[1] * items[2]}\") ... Income for Pencle is: 330.0 Income for Notebook is: 715.0 Income for Eraser is: 750.0 we're using indices to get access to individual elements of each tuple. This can be difficult to read and to understand by newcomer developers. We're now using iterable unpacking in our for loop in below sample codes, which is an alternative implementation using unpacking in Python: >>> sales = [('Pencle', 0.22, 1500), ('Notebook', 1.30, 550), ('Eraser', 0.75, 1000)] >>> for product, price, sold_units in sales: ... print(f\"Income for {product} is: {price * sold_units}\") ... Income for Pencle is: 330.0 Income for Notebook is: 715.0 Income for Eraser is: 750.0 It's also possible to use the * operator in a for loop to pack several items in a single target variable. In this for loop, we're catching the first element of each sequence in first. Then the * operator catches a list of values in its target variable rest. >>> for first, *rest in [(1, 2, 3),(4, 5, 6)]: ... print('First: ', first) ... print('Rest: ', rest) ... First: 1 Rest: [2, 3] First: 4 Rest: [5, 6] >>> Finally, the structure of the target variables must agree with the structure of the iterable. Otherwise, we'll get an error. Take a look at the following example: >>> data = [((1, 2), 3), ((2, 3), 3)] >>> for (a, b), c in data: ... print(a, b, c) ... 1 2 3 2 3 3 >>> for a, b, c in data: ... print(a, b, c) ... Traceback (most recent call last): File \"<stdin>\", line 1, in <module> ValueError: not enough values to unpack (expected 3, got 2) Defining Functions With * and ** The below function requires at least one argument called required . It can accept a variable number of positional and keyword arguments as well. In this case, the * operator collects or packs extra positional arguments in a tuple called args and the ** operator collects or packs extra keyword arguments in a dictionary called kwargs . Both, args and kwargs , are optional and automatically default to () and {} respectively. Even though the names args and kwargs are widely used by the Python community, they're not a requirement for these techniques to work. The syntax just requires * or ** followed by a valid identifier. So, if you can give meaningful names to these arguments, then do it. That will certainly improve your code's readability. >>> def func(required, *args, **kwargs): ... print(required) ... print(args) ... print(kwargs) ... >>> func('Welcome to ...', 1, 2, 3, site='CloudAcademy.com') Welcome to ... (1, 2, 3) {'site': 'CloudAcademy.com'} >>> func('Welcome to ...', 1, 2, 3, 4) Welcome to ... (1, 2, 3, 4) {} >>> func('Welcome to ...', 1, 2, 3, (1, 2)) Welcome to ... (1, 2, 3, (1, 2)) {} >>> func('Welcome to ...', 1, 2, 3, [1, 2]) Welcome to ... (1, 2, 3, [1, 2]) {} >>> func('Welcome to ...', 1, 2, 3, ([2, 3], [1, 2])) Welcome to ... (1, 2, 3, ([2, 3], [1, 2])) {} Calling Functions With * and ** When calling functions, we can also benefit from the use of the * and operator to unpack collections of arguments into separate positional or keyword arguments respectively. This is the inverse of using * and in the signature of a function. In the signature, the operators mean collect or pack a variable number of arguments in one identifier. In the call, they mean unpack an iterable into several arguments. Here's a basic example of how this works. The * operator unpacks sequences like [\"Welcome\", \"to\"] into positional arguments. Similarly, the ** operator unpacks dictionaries into arguments whose names match the keys of the unpacked dictionary. >>> def func(welcome, to, site): ... print(welcome, to, site ... ... ) ... >>> def func(welcome, to, site): ... print(welcome, to, site) ... >>> func(*['Welcome', 'to'], **{'site': 'CloudAcademy.com'}) Welcome to CloudAcademy.com We can also combine this technique and the one covered in the previous section to write quite flexible functions. The use of the * and ** operators, when defining and calling Python functions, will give them extra capabilities and make them more flexible and powerful. Here's an example: >>> def func(required, *args, **kwargs): ... print(required) ... print(args) ... print(kwargs) ... >>> func('Welcome to...', *(1, 2, 3), **{'Site': 'CloudAcademy.com'}) Welcome to... (1, 2, 3) {'Site': 'CloudAcademy.com'} Conclusion Iterable unpacking turns out to be a pretty useful and popular feature in Python. This feature allows us to unpack an iterable into several variables. On the other hand, packing consists of catching several values into one variable using the unpacking operator, *. In this tutorial, we've learned how to use iterable unpacking in Python to write more readable, maintainable, and pythonic code. With this knowledge, we are now able to use iterable unpacking in Python to solve common problems like parallel assignment and swapping values between variables. We're also able to use this Python feature in other structures like for loops, function calls, and function definitions. \u62d3\u5c55\uff1aenumerate enumerate() \u51fd\u6570\u7528\u4e8e\u5c06\u4e00\u4e2a\u53ef\u904d\u5386\u7684\u6570\u636e\u5bf9\u8c61(\u5982\u5217\u8868\u3001\u5143\u7ec4\u6216\u5b57\u7b26\u4e32)\u7ec4\u5408\u4e3a\u4e00\u4e2a\u7d22\u5f15\u5e8f\u5217\uff0c\u540c\u65f6\u5217\u51fa\u6570\u636e\u548c\u6570\u636e\u4e0b\u6807\uff0c\u4e00\u822c\u7528\u5728 for \u5faa\u73af\u5f53\u4e2d\u3002 enumerate() \u65b9\u6cd5: \u8bed\u6cd5 enumerate(sequence, [start=0]) \u53c2\u6570 sequence\uff1a\u4e00\u4e2a\u5e8f\u5217\u3001\u8fed\u4ee3\u5668\u6216\u5176\u4ed6\u652f\u6301\u8fed\u4ee3\u5bf9\u8c61\u3002 start\uff1a\u4e0b\u6807\u8d77\u59cb\u4f4d\u7f6e\u3002 \u8fd4\u56de\u503c \u8fd4\u56de enumerate(\u679a\u4e3e) \u5bf9\u8c61\u3002 \u57fa\u672c\u7528\u6cd5\uff1a \u5b57\u7b26\u4e32 >>> sample = 'abcd' >>> for i, j in enumerate(sample): # \u8f93\u51fa\u7684\u662f\u5143\u7ec4\u5185\u7684\u5143\u7d20 ... print(i, j) ... 0 a 1 b 2 c 3 d >>> for i in enumerate(sample): # \u8f93\u51fa\u7684\u662f\u5143\u7ec4 ... print(i) ... (0, 'a') (1, 'b') (2, 'c') (3, 'd') >>> sample = ('abcd') >>> for i, j in enumerate(sample): ... print(i, j) ... 0 a 1 b 2 c 3 d \u5143\u7ec4 >>> sample = ('abcd', 'hijk') >>> for i, j in enumerate(sample): ... print(i, j) ... 0 abcd 1 hijk >>> sample = ('abcd', 'hijk') >>> for i, j in enumerate(sample, 2): ... print(i, j) ... 2 abcd 3 hijk \u6570\u7ec4 >>> sample = ['abcd', 'hijk'] >>> for i, j in enumerate(sample): ... print(i, j) ... 0 abcd 1 hijk \u5b57\u5178 >>> sample = {'abcd': 1, 'hijk': 2} >>> for i, j in enumerate(sample): ... print(i, j) ... 0 abcd 1 hijk","title":"\u7b2c6\u6761\u3000\u628a\u6570\u636e\u7ed3\u6784\u76f4\u63a5\u62c6\u5206\u5230\u591a\u4e2a\u53d8\u91cf\u91cc\uff0c\u4e0d\u8981\u4e13\u95e8\u901a\u8fc7\u4e0b\u6807\u8bbf\u95ee"},{"location":"python/Pythonic90Rules/Rule06/#6","text":"Python\u5185\u7f6e\u7684\u5143\u7ec4\uff08tuple\uff09\u7c7b\u578b\u53ef\u4ee5\u521b\u5efa\u4e0d\u53ef\u53d8\u7684\u5e8f\u5217\uff0c\u628a\u8bb8\u591a\u5143\u7d20\u4f9d\u6b21\u4fdd\u5b58\u8d77\u6765\u3002 \u53ef\u4ee5\u7528\u6574\u6570\u4f5c\u4e0b\u6807\uff0c\u901a\u8fc7\u4e0b\u6807\u6765\u8bbf\u95ee\u5143\u7ec4\u91cc\u9762\u5bf9\u5e94\u7684\u5143\u7d20\u3002\u4f46\u4e0d\u80fd\u901a\u8fc7\u4e0b\u6807\u7ed9\u5143\u7d20\u8d4b\u65b0\u503c\u3002 >>> snack_calories = { ... 'chips': 140, ... 'popcorn': 80, ... 'nuts': 190 ... } >>> items = tuple(snack_calories.items()) >>> type(snack_calories) <class 'dict'> >>> type(items) <class 'tuple'> >>> snack_calories {'chips': 140, 'popcorn': 80, 'nuts': 190} >>> items (('chips', 140), ('popcorn', 80), ('nuts', 190)) >>> items[2] ('nuts', 190) >>> items[1] = ('apple', 200) Traceback (most recent call last): File \"<stdin>\", line 1, in <module> TypeError: 'tuple' object does not support item assignment Python\u8fd8\u6709\u4e00\u79cd\u5199\u6cd5\uff0c\u53eb\u4f5c\u62c6\u5206\uff08unpacking\uff09\u3002\u8fd9\u79cd\u5199\u6cd5\u8ba9\u6211\u4eec\u53ea\u7528\u4e00\u6761\u8bed\u53e5\uff0c\u5c31\u53ef\u4ee5\u628a\u5143\u7ec4\u91cc\u9762\u7684\u5143\u7d20\u5206\u522b\u8d4b\u7ed9\u591a\u4e2a\u53d8\u91cf\uff0c\u4e0d\u7528\u518d\u901a\u8fc7\u4e0b\u6807\u53bb\u8bbf\u95ee\u3002 \u5143\u7ec4\u7684\u5143\u7d20\u672c\u8eab\u4e0d\u80fd\u4fee\u6539\uff0c\u4f46\u662f\u90a3\u4e9b\u88ab\u8d4b\u503c\u7684\u53d8\u91cf\u662f\u53ef\u4ee5\u4fee\u6539\u7684\u3002 \u901a\u8fc7unpacking\u6765\u8d4b\u503c\u8981\u6bd4\u901a\u8fc7\u4e0b\u6807\u53bb\u8bbf\u95ee\u5143\u7ec4\u5185\u7684\u5143\u7d20\u66f4\u6e05\u6670\uff0c\u800c\u4e14\u8fd9\u79cd\u5199\u6cd5\u6240\u9700\u7684\u4ee3\u7801\u91cf\u901a\u5e38\u6bd4\u8f83\u5c11\u3002\u5f53\u7136\uff0c\u8d4b\u503c\u64cd\u4f5c\u7684\u5de6\u8fb9\u9664\u4e86\u53ef\u4ee5\u7f57\u5217\u5355\u4e2a\u53d8\u91cf\uff0c\u4e5f\u53ef\u4ee5\u5199\u6210\u5217\u8868\u3001\u5e8f\u5217\u6216\u4efb\u610f\u6df1\u5ea6\u7684\u53ef\u8fed\u4ee3\u5bf9\u8c61\uff08iterable\uff09\u3002 >>> favorite_snacks = { ... 'salty': ('pretzels', 100), ... 'sweet': ('cookies', 280), ... 'veggie': ('carrots', 20) ... } >>> ( ... (type1, (name1, cals1)), ... (type2, (name2, cals2)), ... (type3, (name3, cals3)), ... ) = favorite_snacks.items() >>> print(f'Favorite {type1} is {name1} with {cals1} calories') Favorite salty is pretzels with 100 calories >>> print(f'Favorite {type2} is {name2} with {cals2} calories') Favorite sweet is cookies with 280 calories >>> print(f'Favorite {type3} is {name3} with {cals3} calories') Favorite veggie is carrots with 20 calories \u53ef\u4ee5\u901a\u8fc7unpacking\u539f\u5730\u4ea4\u6362\u4e24\u4e2a\u53d8\u91cf\uff0c\u800c\u4e0d\u7528\u4e13\u95e8\u521b\u5efa\u4e34\u65f6\u53d8\u91cf\u3002 >>> def bubble_sort(a): ... for _ in range(len(a)): ... for i in range(1, len(a)): ... if a[i] < a[i - 1]: ... temp = a[i] ... a[i] = a[i - 1] ... a[i - 1] = temp ... >>> names = ['pretzels', 'carrots', 'arugula', 'bacon'] >>> bubble_sort(names) >>> names ['arugula', 'bacon', 'carrots', 'pretzels'] >>> def bubble_sort(a): ... for _ in range(len(a)): ... for i in range(1, len(a)): ... if a[i] < a[i - 1]: ... a[i], a[i - 1] = a[i - 1], a[i] ... >>> names = ['pretzels', 'carrots', 'arugula', 'bacon'] >>> bubble_sort(names) >>> names ['arugula', 'bacon', 'carrots', 'pretzels'] \u539f\u7406\u5206\u6790\uff1a Python\u5904\u7406\u8d4b\u503c\u64cd\u4f5c\u7684\u65f6\u5019\uff0c\u8981\u5148\u5bf9=\u53f7\u53f3\u4fa7\u6c42\u503c\uff0c\u4e8e\u662f\uff0c\u5b83\u4f1a\u65b0\u5efa\u4e00\u4e2a\u4e34\u65f6\u7684\u5143\u7ec4\uff0c\u628a a[i] \u4e0e a[i-1] \u8fd9\u4e24\u4e2a\u5143\u7d20\u653e\u5230\u8fd9\u4e2a\u5143\u7ec4\u91cc\u9762\u3002\u4f8b\u5982\uff0c\u7b2c\u4e00\u6b21\u8fdb\u5165\u5185\u90e8\u7684for\u5faa\u73af\u65f6\uff0c\u8fd9\u4e24\u4e2a\u5143\u7d20\u5206\u522b\u662f 'carrots' \u4e0e 'pretzels '\uff0c\u4e8e\u662f\uff0c\u7cfb\u7edf\u5c31\u4f1a\u521b\u5efa\u51fa ('carrots','pretzels') \u8fd9\u6837\u4e00\u4e2a\u4e34\u65f6\u7684\u5143\u7ec4\u3002 \u7136\u540e\uff0cPython\u4f1a\u5bf9\u8fd9\u4e2a\u4e34\u65f6\u7684\u5143\u7ec4\u505aunpacking\uff0c\u628a\u5b83\u91cc\u9762\u7684\u4e24\u4e2a\u5143\u7d20\u5206\u522b\u653e\u5230=\u53f7\u5de6\u4fa7\u7684\u90a3\u4e24\u4e2a\u5730\u65b9\uff0c\u4e8e\u662f\uff0c 'carrots' \u5c31\u4f1a\u628a a[i-1] \u91cc\u9762\u539f\u6709\u7684 'pretzels' \u6362\u6389\uff0c 'pretzels' \u4e5f\u4f1a\u628a a[i] \u91cc\u9762\u539f\u6709\u7684 'carrots' \u6362\u6389\u3002 \u73b0\u5728\uff0c\u51fa\u73b0\u5728 a[0] \u8fd9\u4e2a\u4f4d\u7f6e\u4e0a\u9762\u7684\u5b57\u7b26\u4e32\u5c31\u662f 'carrots' \u4e86\uff0c\u51fa\u73b0\u5728 a[1] \u8fd9\u4e2a\u4f4d\u7f6e\u4e0a\u9762\u7684\u5b57\u7b26\u4e32\u5219\u662f 'pretzels' \u3002 \u505a\u5b8cunpacking\u540e\uff0c\u7cfb\u7edf\u4f1a\u6254\u6389\u8fd9\u4e2a\u4e34\u65f6\u7684\u5143\u7ec4\u3002 unpacking\u673a\u5236\u8fd8\u6709\u4e00\u4e2a\u7279\u522b\u91cd\u8981\u7684\u7528\u6cd5\uff0c\u5c31\u662f\u53ef\u4ee5\u5728for\u5faa\u73af\u6216\u8005\u7c7b\u4f3c\u7684\u7ed3\u6784\u91cc\u9762\uff0c\u628a\u590d\u6742\u7684\u6570\u636e\u62c6\u5206\u5230\u76f8\u5173\u7684\u53d8\u91cf\u4e4b\u4e2d\u3002 >>> snacks = [('bacon', 350), ('donut', 240), ('muffin', 190)] >>> for i in range(len(snacks)): ... item = snacks[i] ... name = item[0] ... calories = item[1] ... print(f'#{i+1}: {name} has {calories} calories') ... #1: bacon has 350 calories #2: donut has 240 calories #3: muffin has 190 calories \u4e0a\u9762\u8fd9\u6bb5\u4ee3\u7801\u867d\u7136\u6ca1\u9519\uff0c\u4f46\u770b\u8d77\u6765\u5f88\u4e71\uff0c\u56e0\u4e3asnacks\u7ed3\u6784\u672c\u8eab\u5e76\u4e0d\u662f\u4e00\u4efd\u7b80\u5355\u7684\u5217\u8868\uff0c\u5b83\u7684\u6bcf\u4e2a\u5143\u7d20\u90fd\u662f\u4e00\u4e2a\u5143\u7ec4\uff0c \u6240\u4ee5\u5fc5\u987b\u9010\u5c42\u8bbf\u95ee\u624d\u80fd\u67e5\u5230\u6700\u4e3a\u5177\u4f53\u7684\u6570\u636e\uff0c\u4e5f\u5c31\u662f\u6bcf\u79cd\u96f6\u98df\u7684\u540d\u79f0\uff08name\uff09\u53ca\u5361\u8def\u91cc\uff08calories\uff09\u3002 \u4e0b\u9762\u6362\u4e00\u79cd\u5199\u6cd5\uff0c\u9996\u5148\u8c03\u7528\u5185\u7f6e\u7684enumerate\u51fd\u6570\uff08\u53c2\u89c1\u7b2c7\u6761\uff09\u83b7\u5f97\u5f53\u524d\u8981\u8fed\u4ee3\u7684\u5143\u7ec4\uff0c \u7136\u540e\u9488\u5bf9\u8fd9\u4e2a\u5143\u7ec4\u505aunpacking\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u76f4\u63a5\u5f97\u5230\u5177\u4f53\u7684name\u4e0ecalories\u503c\u4e86\u3002 \u8fd9\u624d\u662f\u7b26\u5408Python\u98ce\u683c\u7684\u5199\u6cd5\uff08Pythonic\u5f0f\u7684\u5199\u6cd5\uff09\u3002 >>> for rank, (name, calories) in enumerate(snacks, 1): ... print(f'#{rank}: {name} has {calories} calories') ... #1: bacon has 350 calories #2: donut has 240 calories #3: muffin has 190 calories Python\u7684unpacking\u673a\u5236\u53ef\u4ee5\u7528\u5728\u8bb8\u591a\u65b9\u9762\uff0c\u4f8b\u5982\u6784\u5efa\u5217\u8868\uff08Rule13\uff09\u3001\u7ed9\u51fd\u6570\u8bbe\u8ba1\u53c2\u6570\u5217\u8868\uff08Rule22\uff09\u3001\u4f20\u9012\u5173\u952e\u5b57\u53c2\u6570\uff08Rule23\uff09\u3001\u63a5\u6536\u591a\u4e2a\u8fd4\u56de\u503c\uff08Rule19\u6761\uff09\u7b49\u3002 \u8981\u70b9\uff1a unpacking\u662f\u4e00\u79cd\u7279\u6b8a\u7684Python\u8bed\u6cd5\uff0c\u53ea\u9700\u8981\u4e00\u884c\u4ee3\u7801\uff0c\u5c31\u80fd\u628a\u6570\u636e\u7ed3\u6784\u91cc\u9762\u7684\u591a\u4e2a\u503c\u5206\u522b\u8d4b\u7ed9\u76f8\u5e94\u7684\u53d8\u91cf\u3002 unpacking\u5728Python\u4e2d\u5e94\u7528\u5e7f\u6cdb\uff0c\u51e1\u662f\u53ef\u8fed\u4ee3\u7684\u5bf9\u8c61\u90fd\u80fd\u62c6\u5206\uff0c\u65e0\u8bba\u5b83\u91cc\u9762\u8fd8\u6709\u591a\u5c11\u5c42\u8fed\u4ee3\u7ed3\u6784\u3002 \u5c3d\u91cf\u901a\u8fc7unpacking\u6765\u62c6\u89e3\u5e8f\u5217\u4e4b\u4e2d\u7684\u6570\u636e\uff0c\u800c\u4e0d\u8981\u901a\u8fc7\u4e0b\u6807\u8bbf\u95ee\uff0c\u8fd9\u6837\u53ef\u4ee5\u8ba9\u4ee3\u7801\u66f4\u7b80\u6d01\u3001\u66f4\u6e05\u6670\u3002","title":"\u7b2c6\u6761\u3000\u628a\u6570\u636e\u7ed3\u6784\u76f4\u63a5\u62c6\u5206\u5230\u591a\u4e2a\u53d8\u91cf\u91cc\uff0c\u4e0d\u8981\u4e13\u95e8\u901a\u8fc7\u4e0b\u6807\u8bbf\u95ee"},{"location":"python/Pythonic90Rules/Rule06/#packing-and-unpacking-in-python","text":"Python allows a tuple (or list) of variables to appear on the left side of an assignment operation. Each variable in the tuple can receive one value (or more, if we use the * operator) from an iterable on the right side of the assignment. Unpacking in Python refers to an operation that consists of assigning an iterable of values to a tuple (or list) of variables in a single assignment statement. In Python, we can put a tuple of variables on the left side of an assignment operator (=) and a tuple of values on the right side. The values on the right will be automatically assigned to the variables on the left according to their position in the tuple. This is commonly known as tuple unpacking in Python. Check out the following example: >>> (a, b, c) = (1, 2, 3) >>> a 1 >>> b 2 >>> c 3 >>> birthday = ('April', 5, 2001) >>> month, day, year = birthday >>> month 'April' >>> day 5 >>> year 2001 The tuple unpacking feature got so popular among Python developers that the syntax was extended to work with any iterable object. The only requirement is that the iterable yields exactly one item per variable in the receiving tuple ( or list). Check out the following examples of how iterable unpacking works in Python: >>> # Unpackage strings >>> a, b, c = '123' >>> a '1' >>> b '2' >>> c '3' >>> # Unpackaging strings >>> a, b, c = '123' >>> a '1' >>> b '2' >>> c '3' >>> # Unpacking lists >>> a, b, c = [1, 2, 3] >>> a 1 >>> b 2 >>> c 3 >>> # Unpacking generators >>> gen = (i ** 2 for i in range(3)) >>> a, b, c = gen >>> a 0 >>> b 1 >>> c 4 >>> # Upacking dictionaries (keys, values, and items) >>> my_dict = {'one': 1, 'two': 2, 'three': 3} >>> a, b, c = my_dict >>> a 'one' >>> b 'two' >>> c 'three' >>> a, b, c = my_dict.values() >>> a 1 >>> b 2 >>> c 3 >>> a, b, c = my_dict.items() >>> a ('one', 1) >>> b ('two', 2) >>> c ('three', 3) >>> # Use a tuple on the right side of assignment statement >>> [a, b, c] = 1, 2, 3 >>> a 1 >>> b 2 >>> c 3 >>> # Use range() iterator >>> x, y, z = range(3) >>> x 0 >>> y 1 >>> z 2 As a complement, the term packing can be used when we collect several values in a single variable using the iterable unpacking operator. The * operator is known, in this context, as the tuple (or iterable) unpacking operator. It extends the unpacking functionality to allow us to collect or pack multiple values in a single variable. In the following example, we pack a tuple of values into a single variable by using the * operator: >>> *a, = 1, 2 >>> a [1, 2] For this code to work, the left side of the assignment must be a tuple (or a list). That's why we use a trailing comma. This tuple can contain as many variables as we need. However, it can only contain one starred expression. >>> # Packing trailing values >>> a, *b = 1, 2, 3 >>> a 1 >>> b [2, 3] >>> *a, b, c = 1, 2, 3 >>> a [1] >>> b 2 >>> c 3 >>> *a, b, c, d, e = 1, 2, 3 Traceback (most recent call last): File \"<stdin>\", line 1, in <module> ValueError: not enough values to unpack (expected at least 4, got 3) >>> *a, b, c, d = 1, 2, 3 >>> a [] >>> b 1 >>> c 2 >>> d 3 >>> >>> seq = [1, 2, 3, 4] >>> first, *body, last = seq >>> first, body, last (1, [2, 3], 4) >>> first, body, *last = seq >>> first, body, last (1, 2, [3, 4]) >>> ran = range(10) >>> *r, = ran >>> r [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] Using Packing and Unpacking in Practice >>> employee = ['John Doe', '40', 'Software Engineer'] >>> name = employee[0] >>> age = employee[1] >>> job = employee[2] >>> name 'John Doe' >>> age '40' >>> job 'Software Engineer' >>> >>> name, age, job = ['John Doe', '40', 'Software Engineer'] >>> name 'John Doe' >>> age '40' >>> job 'Software Engineer' >>> >>> a = 100 >>> b = 200 >>> a, b = b, a >>> a 200 >>> b 100 Dropping Unneeded Values With * >>> a, b, *_ = 1, 2, 0, 0, 0, 0 >>> a 1 >>> b 2 >>> _ [0, 0, 0, 0] The rest of the information is stored in the dummy variable _, which can be ignored by our program. By default, the underscore character _ is used by the Python interpreter to store the resulting value of the statements we run in an interactive session. So, in this context, the use of this character to identify dummy variables can be ambiguous. Returning Tuples in Functions >>> def powers(num): ... return num, num ** 2, num ** 3 ... >>> # Packaging returned values in a tuple >>> result = powers(3) >>> result (3, 9, 27) >>> # Unpacking returned values to multiple variables >>> number, square, cube = powers(3) >>> number 3 >>> square 9 >>> cube 27 >>> *_, cube = powers(3) >>> cube 27 Merging Iterables With the * Operator The last two examples show that this is also a more readable and efficient way to concatenate iterables. Instead of writing list(my_set) + my_list + list(my_tuple) + list(range(1, 4)) + list(my_str) we just write [*my_set, *my_list, *my_tuple, *range(1, 4), *my_str] . >>> my_tuple = (1, 2, 3) >>> (0, *my_tuple, 4) (0, 1, 2, 3, 4) >>> my_list = [1, 2, 3] >>> [0, *my_list, 4] [0, 1, 2, 3, 4] >>> my_set = {1, 2, 3} >>> {0, *my_set, 4} {0, 1, 2, 3, 4} >>> [*my_set, *my_list, *my_tuple, *range(1, 4)] [1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3] >>> my_str = \"123\" >>> [*my_set, *my_list, *my_tuple, *range(1, 4), *my_str] [1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, '1', '2', '3'] Unpacking Dictionaries With the ** Operator >>> numbers = {'one': 1, 'two': 2, 'three': 3} >>> letters = {'a': 'A', 'b': 'B', 'c': 'C'} >>> combination = {**numbers, **letters} >>> combination {'one': 1, 'two': 2, 'three': 3, 'a': 'A', 'b': 'B', 'c': 'C'} An important point to note is that, if the dictionaries we're trying to merge have repeated or common keys, then the values of the right-most dictionary will override the values of the left-most dictionary. Here's an example: >>> letters = {'a': 'A', 'b': 'B', 'c': 'C'} >>> vowels = {'a': 'a', 'e': 'e', 'i': 'i', 'o': 'o', 'u': 'u'} >>> {**letters, **vowels} {'a': 'a', 'b': 'B', 'c': 'C', 'e': 'e', 'i': 'i', 'o': 'o', 'u': 'u'} >>> {**vowels, **letters} {'a': 'A', 'e': 'e', 'i': 'i', 'o': 'o', 'u': 'u', 'b': 'B', 'c': 'C'} Unpacking in For-Loops We can also use iterable unpacking in the context of for loops. When we run a for loop, the loop assigns one item of its iterable to the target variable in every iteration. If the item to be assigned is an iterable, then we can use a tuple of target variables. The loop will unpack the iterable at hand into the tuple of target variables. We can build a list of two-elements tuples. Each tuple will contain the name of the product, the price, and the sold units. With this information, we want to calculate the income of each product. To do this, we can use a for loop like this: >>> sales = [('Pencle', 0.22, 1500), ('Notebook', 1.30, 550), ('Eraser', 0.75, 1000)] >>> for items in sales: ... print(f\"Income for {item[0]} is: {item[1] * item[2]}\") ... Traceback (most recent call last): File \"<stdin>\", line 2, in <module> NameError: name 'item' is not defined >>> for items in sales: ... print(f\"Income for {items[0]} is: {items[1] * items[2]}\") ... Income for Pencle is: 330.0 Income for Notebook is: 715.0 Income for Eraser is: 750.0 we're using indices to get access to individual elements of each tuple. This can be difficult to read and to understand by newcomer developers. We're now using iterable unpacking in our for loop in below sample codes, which is an alternative implementation using unpacking in Python: >>> sales = [('Pencle', 0.22, 1500), ('Notebook', 1.30, 550), ('Eraser', 0.75, 1000)] >>> for product, price, sold_units in sales: ... print(f\"Income for {product} is: {price * sold_units}\") ... Income for Pencle is: 330.0 Income for Notebook is: 715.0 Income for Eraser is: 750.0 It's also possible to use the * operator in a for loop to pack several items in a single target variable. In this for loop, we're catching the first element of each sequence in first. Then the * operator catches a list of values in its target variable rest. >>> for first, *rest in [(1, 2, 3),(4, 5, 6)]: ... print('First: ', first) ... print('Rest: ', rest) ... First: 1 Rest: [2, 3] First: 4 Rest: [5, 6] >>> Finally, the structure of the target variables must agree with the structure of the iterable. Otherwise, we'll get an error. Take a look at the following example: >>> data = [((1, 2), 3), ((2, 3), 3)] >>> for (a, b), c in data: ... print(a, b, c) ... 1 2 3 2 3 3 >>> for a, b, c in data: ... print(a, b, c) ... Traceback (most recent call last): File \"<stdin>\", line 1, in <module> ValueError: not enough values to unpack (expected 3, got 2) Defining Functions With * and ** The below function requires at least one argument called required . It can accept a variable number of positional and keyword arguments as well. In this case, the * operator collects or packs extra positional arguments in a tuple called args and the ** operator collects or packs extra keyword arguments in a dictionary called kwargs . Both, args and kwargs , are optional and automatically default to () and {} respectively. Even though the names args and kwargs are widely used by the Python community, they're not a requirement for these techniques to work. The syntax just requires * or ** followed by a valid identifier. So, if you can give meaningful names to these arguments, then do it. That will certainly improve your code's readability. >>> def func(required, *args, **kwargs): ... print(required) ... print(args) ... print(kwargs) ... >>> func('Welcome to ...', 1, 2, 3, site='CloudAcademy.com') Welcome to ... (1, 2, 3) {'site': 'CloudAcademy.com'} >>> func('Welcome to ...', 1, 2, 3, 4) Welcome to ... (1, 2, 3, 4) {} >>> func('Welcome to ...', 1, 2, 3, (1, 2)) Welcome to ... (1, 2, 3, (1, 2)) {} >>> func('Welcome to ...', 1, 2, 3, [1, 2]) Welcome to ... (1, 2, 3, [1, 2]) {} >>> func('Welcome to ...', 1, 2, 3, ([2, 3], [1, 2])) Welcome to ... (1, 2, 3, ([2, 3], [1, 2])) {} Calling Functions With * and ** When calling functions, we can also benefit from the use of the * and operator to unpack collections of arguments into separate positional or keyword arguments respectively. This is the inverse of using * and in the signature of a function. In the signature, the operators mean collect or pack a variable number of arguments in one identifier. In the call, they mean unpack an iterable into several arguments. Here's a basic example of how this works. The * operator unpacks sequences like [\"Welcome\", \"to\"] into positional arguments. Similarly, the ** operator unpacks dictionaries into arguments whose names match the keys of the unpacked dictionary. >>> def func(welcome, to, site): ... print(welcome, to, site ... ... ) ... >>> def func(welcome, to, site): ... print(welcome, to, site) ... >>> func(*['Welcome', 'to'], **{'site': 'CloudAcademy.com'}) Welcome to CloudAcademy.com We can also combine this technique and the one covered in the previous section to write quite flexible functions. The use of the * and ** operators, when defining and calling Python functions, will give them extra capabilities and make them more flexible and powerful. Here's an example: >>> def func(required, *args, **kwargs): ... print(required) ... print(args) ... print(kwargs) ... >>> func('Welcome to...', *(1, 2, 3), **{'Site': 'CloudAcademy.com'}) Welcome to... (1, 2, 3) {'Site': 'CloudAcademy.com'} Conclusion Iterable unpacking turns out to be a pretty useful and popular feature in Python. This feature allows us to unpack an iterable into several variables. On the other hand, packing consists of catching several values into one variable using the unpacking operator, *. In this tutorial, we've learned how to use iterable unpacking in Python to write more readable, maintainable, and pythonic code. With this knowledge, we are now able to use iterable unpacking in Python to solve common problems like parallel assignment and swapping values between variables. We're also able to use this Python feature in other structures like for loops, function calls, and function definitions.","title":"\u62d3\u5c55\uff1aPacking and Unpacking in Python"},{"location":"python/Pythonic90Rules/Rule06/#enumerate","text":"enumerate() \u51fd\u6570\u7528\u4e8e\u5c06\u4e00\u4e2a\u53ef\u904d\u5386\u7684\u6570\u636e\u5bf9\u8c61(\u5982\u5217\u8868\u3001\u5143\u7ec4\u6216\u5b57\u7b26\u4e32)\u7ec4\u5408\u4e3a\u4e00\u4e2a\u7d22\u5f15\u5e8f\u5217\uff0c\u540c\u65f6\u5217\u51fa\u6570\u636e\u548c\u6570\u636e\u4e0b\u6807\uff0c\u4e00\u822c\u7528\u5728 for \u5faa\u73af\u5f53\u4e2d\u3002 enumerate() \u65b9\u6cd5: \u8bed\u6cd5 enumerate(sequence, [start=0]) \u53c2\u6570 sequence\uff1a\u4e00\u4e2a\u5e8f\u5217\u3001\u8fed\u4ee3\u5668\u6216\u5176\u4ed6\u652f\u6301\u8fed\u4ee3\u5bf9\u8c61\u3002 start\uff1a\u4e0b\u6807\u8d77\u59cb\u4f4d\u7f6e\u3002 \u8fd4\u56de\u503c \u8fd4\u56de enumerate(\u679a\u4e3e) \u5bf9\u8c61\u3002 \u57fa\u672c\u7528\u6cd5\uff1a \u5b57\u7b26\u4e32 >>> sample = 'abcd' >>> for i, j in enumerate(sample): # \u8f93\u51fa\u7684\u662f\u5143\u7ec4\u5185\u7684\u5143\u7d20 ... print(i, j) ... 0 a 1 b 2 c 3 d >>> for i in enumerate(sample): # \u8f93\u51fa\u7684\u662f\u5143\u7ec4 ... print(i) ... (0, 'a') (1, 'b') (2, 'c') (3, 'd') >>> sample = ('abcd') >>> for i, j in enumerate(sample): ... print(i, j) ... 0 a 1 b 2 c 3 d \u5143\u7ec4 >>> sample = ('abcd', 'hijk') >>> for i, j in enumerate(sample): ... print(i, j) ... 0 abcd 1 hijk >>> sample = ('abcd', 'hijk') >>> for i, j in enumerate(sample, 2): ... print(i, j) ... 2 abcd 3 hijk \u6570\u7ec4 >>> sample = ['abcd', 'hijk'] >>> for i, j in enumerate(sample): ... print(i, j) ... 0 abcd 1 hijk \u5b57\u5178 >>> sample = {'abcd': 1, 'hijk': 2} >>> for i, j in enumerate(sample): ... print(i, j) ... 0 abcd 1 hijk","title":"\u62d3\u5c55\uff1aenumerate"},{"location":"python/Pythonic90Rules/Rule07/","text":"\u7b2c7\u6761\u3000\u5c3d\u91cf\u7528enumerate\u53d6\u4ee3range Python\u5185\u7f6e\u7684range\u51fd\u6570\u9002\u5408\u7528\u6765\u8fed\u4ee3\u4e00\u7cfb\u5217\u6574\u6570\u3002 >>> from random import randint >>> random_bits = 0 >>> for i in range(32): ... if randint(0, 1): ... random_bits |= 1 << i # \u8fd0\u7b97\u7b26|\u662f\u4e8c\u8fdb\u5236OR\u64cd\u4f5c ... >>> print(bin(random_bits)) 0b110110000110100101001011010 \u5982\u679c\u8981\u8fed\u4ee3\u7684\u662f\u67d0\u79cd\u6570\u636e\u7ed3\u6784\uff0c\u4f8b\u5982\u5b57\u7b26\u4e32\u5217\u8868\uff0c\u90a3\u4e48\u53ef\u4ee5\u76f4\u63a5\u5728\u8fd9\u4e2a\u5e8f\u5217\u4e0a\u9762\u8fed\u4ee3\uff0c\u4e0d\u9700\u8981\u901a\u8fc7range\u3002 >>> flavor_list\u7b2c8\u6761\u3000\u7528zip\u51fd\u6570\u540c\u65f6\u904d\u5386\u4e24\u4e2a\u8fed\u4ee3\u5668 = ['vanilla', 'chocolate', 'pecan', 'strawberry'] >>> for flavor in flavor_list: ... print(f'{flavor} is delicious') ... vanilla is delicious chocolate is delicious pecan is delicious strawberry is delicious \u901a\u8fc7\u4f20\u7edf\u7684range\u65b9\u6cd5\uff0c\u7ed9\u6bcf\u79cd\u53e3\u5473\u6dfb\u52a0\u5e8f\u5217\u53f7\u3002\u4f46\u6b65\u9aa4\u6709\u4e9b\u592a\u591a\uff0c\u5148\u5f97\u77e5\u9053\u5217\u8868\u7684\u957f\u5ea6\uff0c\u7136\u540e\u8981\u6839\u636e\u5217\u8868\u957f\u5ea6\u6784\u9020\u53d6\u503c\u8303\u56f4\uff0c\u7528\u5176\u4e2d\u7684\u6bcf\u4e2a\u6574\u6570\u505a\u4e0b\u6807\uff0c\u5206\u522b\u8bbf\u95ee\u5217\u8868\u91cc\u7684\u5bf9\u5e94\u5143\u7d20\u3002 >>> for i in range(len(flavor_list)): ... flavor = flavor_list[i] ... print(f'{i + 1}: {flavor}') ... 1: vanilla 2: chocolate 3: pecan 4: strawberry Python\u7684\u5185\u7f6e\u7684\u51fd\u6570enumerate\uff0c\u80fd\u591f\u628a\u4efb\u4f55\u4e00\u79cd\u8fed\u4ee3\u5668\uff08iterator\uff09\u5c01\u88c5\u6210\u60f0\u6027\u751f\u6210\u5668\uff08lazy generator\uff0c\u53c2\u89c1Rule30\uff09\u3002 \u8fd9\u6837\u6bcf\u6b21\u5faa\u73af\u7684\u65f6\u5019\uff0c\u5b83\u53ea\u9700\u8981\u4eceiterator\u91cc\u9762\u83b7\u53d6\u4e0b\u4e00\u4e2a\u503c\u5c31\u884c\u4e86\uff0c\u540c\u65f6\u8fd8\u4f1a\u7ed9\u51fa\u672c\u8f6e\u5faa\u73af\u7684\u5e8f\u53f7\uff0c\u5373\u751f\u6210\u5668\u6bcf\u6b21\u4ea7\u751f\u7684\u4e00\u5bf9\u8f93\u51fa\u503c\u3002 \u4e0b\u9762\u901a\u8fc7\u5185\u7f6e\u7684next\u51fd\u6570\u624b\u52a8\u63a8\u8fdbenumerate\u6240\u8fd4\u56de\u7684\u8fd9\u4e2aiterator\uff0c\u6765\u6f14\u793aenumerate\u3002 >>> it = enumerate(flavor_list) >>> print(next(it)) (0, 'vanilla') >>> print(next(it)) (1, 'chocolate') >>> print(next(it)) (2, 'pecan') >>> print(next(it)) (3, 'strawberry') >>> print(next(it)) Traceback (most recent call last): File \"<stdin>\", line 1, in <module> StopIteration enumerate\u8f93\u51fa\u7684\u6bcf\u4e00\u5bf9\u6570\u636e\uff0c\u90fd\u53ef\u4ee5\u62c6\u5206\uff08unpacking\uff09\u5230for\u8bed\u53e5\u7684\u90a3\u4e24\u4e2a\u53d8\u91cf\u91cc\u9762\uff08unpacking\u673a\u5236\u53c2\u89c1Rule06\uff09\uff0c\u8fd9\u6837\u4f1a\u8ba9\u4ee3\u7801\u66f4\u52a0\u6e05\u6670\u3002 >>> for i, flavor in enumerate(flavor_list): ... print(f'{i + 1}: {flavor}') ... 1: vanilla 2: chocolate 3: pecan 4: strawberry >>> for i, flavor in enumerate(flavor_list, 1): ... print(f'{i}: {flavor}') ... 1: vanilla 2: chocolate 3: pecan 4: strawberry \u8981\u70b9\uff1a enumerate\u51fd\u6570\u53ef\u4ee5\u7528\u7b80\u6d01\u7684\u4ee3\u7801\u8fed\u4ee3iterator\uff0c\u800c\u4e14\u53ef\u4ee5\u6307\u51fa\u5f53\u524d\u8fd9\u8f6e\u5faa\u73af\u7684\u5e8f\u53f7\u3002 \u4e0d\u8981\u5148\u901a\u8fc7range\u6307\u5b9a\u4e0b\u6807\u7684\u53d6\u503c\u8303\u56f4\uff0c\u7136\u540e\u7528\u4e0b\u6807\u53bb\u8bbf\u95ee\u5e8f\u5217\uff0c\u800c\u662f\u5e94\u8be5\u76f4\u63a5\u7528enumerate\u51fd\u6570\u8fed\u4ee3\u3002 \u53ef\u4ee5\u901a\u8fc7enumerate\u7684\u7b2c\u4e8c\u4e2a\u53c2\u6570\u6307\u5b9a\u8d77\u59cb\u5e8f\u53f7\uff08\u9ed8\u8ba4\u4e3a0\uff09\u3002","title":"\u7b2c7\u6761\u3000\u5c3d\u91cf\u7528enumerate\u53d6\u4ee3range"},{"location":"python/Pythonic90Rules/Rule07/#7-enumeraterange","text":"Python\u5185\u7f6e\u7684range\u51fd\u6570\u9002\u5408\u7528\u6765\u8fed\u4ee3\u4e00\u7cfb\u5217\u6574\u6570\u3002 >>> from random import randint >>> random_bits = 0 >>> for i in range(32): ... if randint(0, 1): ... random_bits |= 1 << i # \u8fd0\u7b97\u7b26|\u662f\u4e8c\u8fdb\u5236OR\u64cd\u4f5c ... >>> print(bin(random_bits)) 0b110110000110100101001011010 \u5982\u679c\u8981\u8fed\u4ee3\u7684\u662f\u67d0\u79cd\u6570\u636e\u7ed3\u6784\uff0c\u4f8b\u5982\u5b57\u7b26\u4e32\u5217\u8868\uff0c\u90a3\u4e48\u53ef\u4ee5\u76f4\u63a5\u5728\u8fd9\u4e2a\u5e8f\u5217\u4e0a\u9762\u8fed\u4ee3\uff0c\u4e0d\u9700\u8981\u901a\u8fc7range\u3002 >>> flavor_list\u7b2c8\u6761\u3000\u7528zip\u51fd\u6570\u540c\u65f6\u904d\u5386\u4e24\u4e2a\u8fed\u4ee3\u5668 = ['vanilla', 'chocolate', 'pecan', 'strawberry'] >>> for flavor in flavor_list: ... print(f'{flavor} is delicious') ... vanilla is delicious chocolate is delicious pecan is delicious strawberry is delicious \u901a\u8fc7\u4f20\u7edf\u7684range\u65b9\u6cd5\uff0c\u7ed9\u6bcf\u79cd\u53e3\u5473\u6dfb\u52a0\u5e8f\u5217\u53f7\u3002\u4f46\u6b65\u9aa4\u6709\u4e9b\u592a\u591a\uff0c\u5148\u5f97\u77e5\u9053\u5217\u8868\u7684\u957f\u5ea6\uff0c\u7136\u540e\u8981\u6839\u636e\u5217\u8868\u957f\u5ea6\u6784\u9020\u53d6\u503c\u8303\u56f4\uff0c\u7528\u5176\u4e2d\u7684\u6bcf\u4e2a\u6574\u6570\u505a\u4e0b\u6807\uff0c\u5206\u522b\u8bbf\u95ee\u5217\u8868\u91cc\u7684\u5bf9\u5e94\u5143\u7d20\u3002 >>> for i in range(len(flavor_list)): ... flavor = flavor_list[i] ... print(f'{i + 1}: {flavor}') ... 1: vanilla 2: chocolate 3: pecan 4: strawberry Python\u7684\u5185\u7f6e\u7684\u51fd\u6570enumerate\uff0c\u80fd\u591f\u628a\u4efb\u4f55\u4e00\u79cd\u8fed\u4ee3\u5668\uff08iterator\uff09\u5c01\u88c5\u6210\u60f0\u6027\u751f\u6210\u5668\uff08lazy generator\uff0c\u53c2\u89c1Rule30\uff09\u3002 \u8fd9\u6837\u6bcf\u6b21\u5faa\u73af\u7684\u65f6\u5019\uff0c\u5b83\u53ea\u9700\u8981\u4eceiterator\u91cc\u9762\u83b7\u53d6\u4e0b\u4e00\u4e2a\u503c\u5c31\u884c\u4e86\uff0c\u540c\u65f6\u8fd8\u4f1a\u7ed9\u51fa\u672c\u8f6e\u5faa\u73af\u7684\u5e8f\u53f7\uff0c\u5373\u751f\u6210\u5668\u6bcf\u6b21\u4ea7\u751f\u7684\u4e00\u5bf9\u8f93\u51fa\u503c\u3002 \u4e0b\u9762\u901a\u8fc7\u5185\u7f6e\u7684next\u51fd\u6570\u624b\u52a8\u63a8\u8fdbenumerate\u6240\u8fd4\u56de\u7684\u8fd9\u4e2aiterator\uff0c\u6765\u6f14\u793aenumerate\u3002 >>> it = enumerate(flavor_list) >>> print(next(it)) (0, 'vanilla') >>> print(next(it)) (1, 'chocolate') >>> print(next(it)) (2, 'pecan') >>> print(next(it)) (3, 'strawberry') >>> print(next(it)) Traceback (most recent call last): File \"<stdin>\", line 1, in <module> StopIteration enumerate\u8f93\u51fa\u7684\u6bcf\u4e00\u5bf9\u6570\u636e\uff0c\u90fd\u53ef\u4ee5\u62c6\u5206\uff08unpacking\uff09\u5230for\u8bed\u53e5\u7684\u90a3\u4e24\u4e2a\u53d8\u91cf\u91cc\u9762\uff08unpacking\u673a\u5236\u53c2\u89c1Rule06\uff09\uff0c\u8fd9\u6837\u4f1a\u8ba9\u4ee3\u7801\u66f4\u52a0\u6e05\u6670\u3002 >>> for i, flavor in enumerate(flavor_list): ... print(f'{i + 1}: {flavor}') ... 1: vanilla 2: chocolate 3: pecan 4: strawberry >>> for i, flavor in enumerate(flavor_list, 1): ... print(f'{i}: {flavor}') ... 1: vanilla 2: chocolate 3: pecan 4: strawberry \u8981\u70b9\uff1a enumerate\u51fd\u6570\u53ef\u4ee5\u7528\u7b80\u6d01\u7684\u4ee3\u7801\u8fed\u4ee3iterator\uff0c\u800c\u4e14\u53ef\u4ee5\u6307\u51fa\u5f53\u524d\u8fd9\u8f6e\u5faa\u73af\u7684\u5e8f\u53f7\u3002 \u4e0d\u8981\u5148\u901a\u8fc7range\u6307\u5b9a\u4e0b\u6807\u7684\u53d6\u503c\u8303\u56f4\uff0c\u7136\u540e\u7528\u4e0b\u6807\u53bb\u8bbf\u95ee\u5e8f\u5217\uff0c\u800c\u662f\u5e94\u8be5\u76f4\u63a5\u7528enumerate\u51fd\u6570\u8fed\u4ee3\u3002 \u53ef\u4ee5\u901a\u8fc7enumerate\u7684\u7b2c\u4e8c\u4e2a\u53c2\u6570\u6307\u5b9a\u8d77\u59cb\u5e8f\u53f7\uff08\u9ed8\u8ba4\u4e3a0\uff09\u3002","title":"\u7b2c7\u6761\u3000\u5c3d\u91cf\u7528enumerate\u53d6\u4ee3range"},{"location":"python/Pythonic90Rules/Rule08/","text":"\u7b2c8\u6761\u3000\u7528zip\u51fd\u6570\u540c\u65f6\u904d\u5386\u4e24\u4e2a\u8fed\u4ee3\u5668 \u5199Python\u4ee3\u7801\u65f6\uff0c\u7ecf\u5e38\u4f1a\u6839\u636e\u67d0\u4efd\u5217\u8868\u4e2d\u7684\u5bf9\u8c61\u521b\u5efa\u8bb8\u591a\u4e0e\u8fd9\u4efd\u5217\u8868\u6709\u5173\u7684\u65b0\u5217\u8868\u3002 \u4e0b\u9762\u8fd9\u6837\u7684\u5217\u8868\u63a8\u5bfc\u673a\u5236\uff0c\u53ef\u4ee5\u628a\u8868\u8fbe\u5f0f\u8fd0\u7528\u5230\u6e90\u5217\u8868\u7684\u6bcf\u4e2a\u5143\u7d20\u4e0a\u9762\uff0c\u4ece\u800c\u751f\u6210\u4e00\u4efd\u6d3e\u751f\u5217\u8868\uff08\u53c2\u89c1Rule27\uff09\u3002 >>> names = ['Cecilia', 'Lise', 'Marie'] >>> counts = [len(n) for n in names] >>> counts [7, 4, 5] \u6d3e\u751f\u5217\u8868\u4e2d\u7684\u5143\u7d20\u4e0e\u6e90\u5217\u8868\u4e2d\u5bf9\u5e94\u4f4d\u7f6e\u4e0a\u9762\u7684\u5143\u7d20\u6709\u7740\u4e00\u5b9a\u7684\u5173\u7cfb\u3002\u5982\u679c\u60f3\u540c\u65f6\u904d\u5386\u8fd9\u4e24\u4efd\u5217\u8868\uff0c\u90a3\u53ef\u4ee5\u6839\u636e\u6e90\u5217\u8868\u7684\u957f\u5ea6\u505a\u8fed\u4ee3\u3002 >>> names = ['Cecilia', 'Lise', 'Marie'] >>> longest_name = None >>> max_count = 0 >>> counts = [len(n) for n in names] >>> for i in range(len(names)): ... count = counts[i] ... if count > max_count: ... longest_name = names[i] ... max_count = count ... >>> longest_name 'Cecilia' \u7528enumerate\u6765\u6539\u5199\u4e0a\u9762\u7684\u4ee3\u7801\uff0c\u6539\u5584\u4e0a\u9762\u4ee3\u7801\u4e2d\u590d\u6742\u7684\u5faa\u73af\u5173\u7cfb\u3002 >>> names = ['Cecilia', 'Lise', 'Marie'] >>> longest_name = None >>> max_count = 0 >>> counts = [len(n) for n in names] >>> for i, name in enumerate(names): ... count = counts[i] ... if count > max_count: ... longest_name = name ... max_count = count ... >>> longest_name 'Cecilia' \u7528zip\u6765\u6539\u5199\u4ee3\u7801\uff0c\u4f7f\u4e4b\u66f4\u7b80\u6d01\u3002 zip\u51fd\u6570\u80fd\u628a\u4e24\u4e2a\u6216\u66f4\u591a\u7684iterator\u5c01\u88c5\u6210\u60f0\u6027\u751f\u6210\u5668\uff08lazy generator\uff09\u3002 \u6bcf\u6b21\u5faa\u73af\u65f6\uff0c\u5b83\u4f1a\u5206\u522b\u4ece\u8fd9\u4e9b\u8fed\u4ee3\u5668\u91cc\u83b7\u53d6\u5404\u81ea\u7684\u4e0b\u4e00\u4e2a\u5143\u7d20\uff0c\u5e76\u628a\u8fd9\u4e9b\u503c\u653e\u5728\u4e00\u4e2a\u5143\u7ec4\u91cc\u9762\u3002 zip\u6bcf\u6b21\u53ea\u4ece\u5b83\u5c01\u88c5\u7684\u90a3\u4e9b\u8fed\u4ee3\u5668\u91cc\u9762\u5404\u81ea\u53d6\u51fa\u4e00\u4e2a\u5143\u7d20\uff0c\u6240\u4ee5\u5373\u4fbf\u6e90\u5217\u8868\u5f88\u957f\uff0c\u7a0b\u5e8f\u4e5f\u4e0d\u4f1a\u56e0\u4e3a\u5360\u7528\u5185\u5b58\u8fc7\u591a\u800c\u5d29\u6e83\u3002 \u800c\u8fd9\u4e2a\u5143\u7ec4\u53ef\u4ee5\u62c6\u5206\u5230for\u8bed\u53e5\u91cc\u7684\u90a3\u4e9b\u53d8\u91cf\u4e4b\u4e2d\uff08\u53c2\u89c1Rule06\uff09\u3002 \u8fd9\u6837\u5199\u51fa\u6765\u7684\u4ee3\u7801\uff0c\u6bd4\u901a\u8fc7\u4e0b\u6807\u8bbf\u95ee\u591a\u4e2a\u5217\u8868\u7684\u90a3\u79cd\u4ee3\u7801\u8981\u6e05\u6670\u5f97\u591a\u3002 >>> names = ['Cecilia', 'Lise', 'Marie'] >>> longest_name = None >>> max_count = 0 >>> counts = [len(n) for n in names] >>> for name, count in zip(names, counts): ... if count > max_count: ... longest_name = name ... max_count = count ... >>> longest_name 'Cecilia' \u4f46\u662f\uff0c\u5982\u679c\u8f93\u5165zip\u7684\u90a3\u4e9b\u5217\u8868\u7684\u957f\u5ea6\u4e0d\u4e00\u81f4\uff0c\u7528zip\u540c\u65f6\u904d\u5386\u90a3\u4e9b\u5217\u8868\uff0c\u4f1a\u4ea7\u751f\u5947\u602a\u7684\u7ed3\u679c\u3002 \u4f8b\u5982\uff0c\u6211\u7ed9names\u5217\u8868\u91cc\u53c8\u6dfb\u52a0\u4e86\u4e00\u4e2a\u540d\u5b57\uff0c\u4f46\u662f\u5fd8\u4e86\u628a\u5b83\u7684\u957f\u5ea6\u66f4\u65b0\u5230counts\u5217\u8868\u4e4b\u4e2d\u3002 \u65b0\u6dfb\u52a0\u7684\u90a3\u4e2a'Rosalind' \u5143\u7d20\u4e0d\u4f1a\u88ab\u6253\u5370\u51fa\u6765\uff0c\u56e0\u4e3azip\u51fd\u6570\u5728\u6267\u884c\u4e2d\uff0c\u53ea\u8981\u5176\u4e2d\u4efb\u4f55\u4e00\u4e2a\u8fed\u4ee3\u5668\u5904\u7406\u5b8c\u6bd5\uff0c\u5b83\u5c31\u4e0d\u518d\u5f80\u4e0b\u8d70\u4e86\u3002 \u4e8e\u662f\uff0c\u5faa\u73af\u7684\u6b21\u6570\u5b9e\u9645\u4e0a\u7b49\u4e8e\u6700\u77ed\u7684\u90a3\u4efd\u5217\u8868\u6240\u5177\u5907\u7684\u957f\u5ea6\u3002 \u4e00\u822c\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u90fd\u662f\u6839\u636e\u67d0\u4efd\u5217\u8868\u63a8\u5bfc\u51fa\u5176\u4ed6\u51e0\u4efd\u5217\u8868\uff0c\u7136\u540e\u628a\u8fd9\u4e9b\u5217\u8868\u4e00\u8d77\u5c01\u88c5\u5230zip\u91cc\u9762\uff0c\u5e76\u4fdd\u8bc1\u8fd9\u4e9b\u5217\u8868\u957f\u5ea6\u76f8\u540c\u3002 >>> names.append('Rosalind') >>> names ['Cecilia', 'Lise', 'Marie', 'Rosalind'] >>> for name, count in zip(names, counts): ... print(name) ... Cecilia Lise Marie \u5728\u5217\u8868\u957f\u5ea6\u4e0d\u540c\u7684\u60c5\u51b5\u4e0b\uff0c\u5982\u679c\u65e0\u6cd5\u786e\u5b9a\u8fd9\u4e9b\u5217\u8868\u7684\u957f\u5ea6\u76f8\u540c\uff0c\u90a3\u5c31\u4e0d\u8981\u628a\u5b83\u4eec\u4f20\u7ed9zip\uff0c\u800c\u662f\u5e94\u8be5\u4f20\u7ed9\u53e6\u4e00\u4e2a\u53eb\u4f5czip_longest\u7684\u51fd\u6570\uff0c\u8fd9\u4e2a\u51fd\u6570\u4f4d\u4e8e\u5185\u7f6e\u7684itertools\u6a21\u5757\u91cc\u3002 \u5982\u679c\u5176\u4e2d\u6709\u4e9b\u5217\u8868\u5df2\u7ecf\u904d\u5386\u5b8c\u4e86\uff0c\u90a3\u4e48zip_longest\u4f1a\u7528\u5f53\u521d\u4f20\u7ed9fillvalue\u53c2\u6570\u7684\u90a3\u4e2a\u503c\u6765\u586b\u8865\u7a7a\u7f3a\uff08\u672c\u4f8b\u4e2d\u7a7a\u7f3a\u7684\u4e3a\u5b57\u7b26\u4e32'Rosalind'\u7684\u957f\u5ea6\u503c\uff09\uff0c\u9ed8\u8ba4\u7684\u53c2\u6570\u503c\u662fNone\u3002 >>> import itertools >>> names = ['Cecilia', 'Lise', 'Marie'] >>> longest_name = None >>> max_count = 0 >>> counts = [len(n) for n in names] >>> names.append('Rosalind') >>> names ['Cecilia', 'Lise', 'Marie', 'Rosalind'] >>> counts [7, 4, 5] >>> for name, count in itertools.zip_longest(names, counts): ... print(f'{name}: {count}') ... Cecilia: 7 Lise: 4 Marie: 5 Rosalind: None \u8981\u70b9\uff1a \u5185\u7f6e\u7684zip\u51fd\u6570\u53ef\u4ee5\u540c\u65f6\u904d\u5386\u591a\u4e2a\u8fed\u4ee3\u5668\u3002 zip\u4f1a\u521b\u5efa\u60f0\u6027\u751f\u6210\u5668\uff0c\u8ba9\u5b83\u6bcf\u6b21\u53ea\u751f\u6210\u4e00\u4e2a\u5143\u7ec4\uff0c\u6240\u4ee5\u65e0\u8bba\u8f93\u5165\u7684\u6570\u636e\u6709\u591a\u957f\uff0c\u5b83\u90fd\u662f\u4e00\u4e2a\u4e00\u4e2a\u5904\u7406\u7684\u3002 \u5982\u679c\u63d0\u4f9b\u7684\u8fed\u4ee3\u5668\u7684\u957f\u5ea6\u4e0d\u4e00\u81f4\uff0c\u90a3\u4e48\u53ea\u8981\u5176\u4e2d\u4efb\u4f55\u4e00\u4e2a\u8fed\u4ee3\u5b8c\u6bd5\uff0czip\u5c31\u4f1a\u505c\u6b62\u3002 \u5982\u679c\u60f3\u6309\u6700\u957f\u7684\u90a3\u4e2a\u8fed\u4ee3\u5668\u6765\u904d\u5386\uff0c\u90a3\u5c31\u6539\u7528\u5185\u7f6e\u7684itertools\u6a21\u5757\u4e2d\u7684zip_longest\u51fd\u6570\u3002","title":"\u7b2c8\u6761\u3000\u7528zip\u51fd\u6570\u540c\u65f6\u904d\u5386\u4e24\u4e2a\u8fed\u4ee3\u5668"},{"location":"python/Pythonic90Rules/Rule08/#8-zip","text":"\u5199Python\u4ee3\u7801\u65f6\uff0c\u7ecf\u5e38\u4f1a\u6839\u636e\u67d0\u4efd\u5217\u8868\u4e2d\u7684\u5bf9\u8c61\u521b\u5efa\u8bb8\u591a\u4e0e\u8fd9\u4efd\u5217\u8868\u6709\u5173\u7684\u65b0\u5217\u8868\u3002 \u4e0b\u9762\u8fd9\u6837\u7684\u5217\u8868\u63a8\u5bfc\u673a\u5236\uff0c\u53ef\u4ee5\u628a\u8868\u8fbe\u5f0f\u8fd0\u7528\u5230\u6e90\u5217\u8868\u7684\u6bcf\u4e2a\u5143\u7d20\u4e0a\u9762\uff0c\u4ece\u800c\u751f\u6210\u4e00\u4efd\u6d3e\u751f\u5217\u8868\uff08\u53c2\u89c1Rule27\uff09\u3002 >>> names = ['Cecilia', 'Lise', 'Marie'] >>> counts = [len(n) for n in names] >>> counts [7, 4, 5] \u6d3e\u751f\u5217\u8868\u4e2d\u7684\u5143\u7d20\u4e0e\u6e90\u5217\u8868\u4e2d\u5bf9\u5e94\u4f4d\u7f6e\u4e0a\u9762\u7684\u5143\u7d20\u6709\u7740\u4e00\u5b9a\u7684\u5173\u7cfb\u3002\u5982\u679c\u60f3\u540c\u65f6\u904d\u5386\u8fd9\u4e24\u4efd\u5217\u8868\uff0c\u90a3\u53ef\u4ee5\u6839\u636e\u6e90\u5217\u8868\u7684\u957f\u5ea6\u505a\u8fed\u4ee3\u3002 >>> names = ['Cecilia', 'Lise', 'Marie'] >>> longest_name = None >>> max_count = 0 >>> counts = [len(n) for n in names] >>> for i in range(len(names)): ... count = counts[i] ... if count > max_count: ... longest_name = names[i] ... max_count = count ... >>> longest_name 'Cecilia' \u7528enumerate\u6765\u6539\u5199\u4e0a\u9762\u7684\u4ee3\u7801\uff0c\u6539\u5584\u4e0a\u9762\u4ee3\u7801\u4e2d\u590d\u6742\u7684\u5faa\u73af\u5173\u7cfb\u3002 >>> names = ['Cecilia', 'Lise', 'Marie'] >>> longest_name = None >>> max_count = 0 >>> counts = [len(n) for n in names] >>> for i, name in enumerate(names): ... count = counts[i] ... if count > max_count: ... longest_name = name ... max_count = count ... >>> longest_name 'Cecilia' \u7528zip\u6765\u6539\u5199\u4ee3\u7801\uff0c\u4f7f\u4e4b\u66f4\u7b80\u6d01\u3002 zip\u51fd\u6570\u80fd\u628a\u4e24\u4e2a\u6216\u66f4\u591a\u7684iterator\u5c01\u88c5\u6210\u60f0\u6027\u751f\u6210\u5668\uff08lazy generator\uff09\u3002 \u6bcf\u6b21\u5faa\u73af\u65f6\uff0c\u5b83\u4f1a\u5206\u522b\u4ece\u8fd9\u4e9b\u8fed\u4ee3\u5668\u91cc\u83b7\u53d6\u5404\u81ea\u7684\u4e0b\u4e00\u4e2a\u5143\u7d20\uff0c\u5e76\u628a\u8fd9\u4e9b\u503c\u653e\u5728\u4e00\u4e2a\u5143\u7ec4\u91cc\u9762\u3002 zip\u6bcf\u6b21\u53ea\u4ece\u5b83\u5c01\u88c5\u7684\u90a3\u4e9b\u8fed\u4ee3\u5668\u91cc\u9762\u5404\u81ea\u53d6\u51fa\u4e00\u4e2a\u5143\u7d20\uff0c\u6240\u4ee5\u5373\u4fbf\u6e90\u5217\u8868\u5f88\u957f\uff0c\u7a0b\u5e8f\u4e5f\u4e0d\u4f1a\u56e0\u4e3a\u5360\u7528\u5185\u5b58\u8fc7\u591a\u800c\u5d29\u6e83\u3002 \u800c\u8fd9\u4e2a\u5143\u7ec4\u53ef\u4ee5\u62c6\u5206\u5230for\u8bed\u53e5\u91cc\u7684\u90a3\u4e9b\u53d8\u91cf\u4e4b\u4e2d\uff08\u53c2\u89c1Rule06\uff09\u3002 \u8fd9\u6837\u5199\u51fa\u6765\u7684\u4ee3\u7801\uff0c\u6bd4\u901a\u8fc7\u4e0b\u6807\u8bbf\u95ee\u591a\u4e2a\u5217\u8868\u7684\u90a3\u79cd\u4ee3\u7801\u8981\u6e05\u6670\u5f97\u591a\u3002 >>> names = ['Cecilia', 'Lise', 'Marie'] >>> longest_name = None >>> max_count = 0 >>> counts = [len(n) for n in names] >>> for name, count in zip(names, counts): ... if count > max_count: ... longest_name = name ... max_count = count ... >>> longest_name 'Cecilia' \u4f46\u662f\uff0c\u5982\u679c\u8f93\u5165zip\u7684\u90a3\u4e9b\u5217\u8868\u7684\u957f\u5ea6\u4e0d\u4e00\u81f4\uff0c\u7528zip\u540c\u65f6\u904d\u5386\u90a3\u4e9b\u5217\u8868\uff0c\u4f1a\u4ea7\u751f\u5947\u602a\u7684\u7ed3\u679c\u3002 \u4f8b\u5982\uff0c\u6211\u7ed9names\u5217\u8868\u91cc\u53c8\u6dfb\u52a0\u4e86\u4e00\u4e2a\u540d\u5b57\uff0c\u4f46\u662f\u5fd8\u4e86\u628a\u5b83\u7684\u957f\u5ea6\u66f4\u65b0\u5230counts\u5217\u8868\u4e4b\u4e2d\u3002 \u65b0\u6dfb\u52a0\u7684\u90a3\u4e2a'Rosalind' \u5143\u7d20\u4e0d\u4f1a\u88ab\u6253\u5370\u51fa\u6765\uff0c\u56e0\u4e3azip\u51fd\u6570\u5728\u6267\u884c\u4e2d\uff0c\u53ea\u8981\u5176\u4e2d\u4efb\u4f55\u4e00\u4e2a\u8fed\u4ee3\u5668\u5904\u7406\u5b8c\u6bd5\uff0c\u5b83\u5c31\u4e0d\u518d\u5f80\u4e0b\u8d70\u4e86\u3002 \u4e8e\u662f\uff0c\u5faa\u73af\u7684\u6b21\u6570\u5b9e\u9645\u4e0a\u7b49\u4e8e\u6700\u77ed\u7684\u90a3\u4efd\u5217\u8868\u6240\u5177\u5907\u7684\u957f\u5ea6\u3002 \u4e00\u822c\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u90fd\u662f\u6839\u636e\u67d0\u4efd\u5217\u8868\u63a8\u5bfc\u51fa\u5176\u4ed6\u51e0\u4efd\u5217\u8868\uff0c\u7136\u540e\u628a\u8fd9\u4e9b\u5217\u8868\u4e00\u8d77\u5c01\u88c5\u5230zip\u91cc\u9762\uff0c\u5e76\u4fdd\u8bc1\u8fd9\u4e9b\u5217\u8868\u957f\u5ea6\u76f8\u540c\u3002 >>> names.append('Rosalind') >>> names ['Cecilia', 'Lise', 'Marie', 'Rosalind'] >>> for name, count in zip(names, counts): ... print(name) ... Cecilia Lise Marie \u5728\u5217\u8868\u957f\u5ea6\u4e0d\u540c\u7684\u60c5\u51b5\u4e0b\uff0c\u5982\u679c\u65e0\u6cd5\u786e\u5b9a\u8fd9\u4e9b\u5217\u8868\u7684\u957f\u5ea6\u76f8\u540c\uff0c\u90a3\u5c31\u4e0d\u8981\u628a\u5b83\u4eec\u4f20\u7ed9zip\uff0c\u800c\u662f\u5e94\u8be5\u4f20\u7ed9\u53e6\u4e00\u4e2a\u53eb\u4f5czip_longest\u7684\u51fd\u6570\uff0c\u8fd9\u4e2a\u51fd\u6570\u4f4d\u4e8e\u5185\u7f6e\u7684itertools\u6a21\u5757\u91cc\u3002 \u5982\u679c\u5176\u4e2d\u6709\u4e9b\u5217\u8868\u5df2\u7ecf\u904d\u5386\u5b8c\u4e86\uff0c\u90a3\u4e48zip_longest\u4f1a\u7528\u5f53\u521d\u4f20\u7ed9fillvalue\u53c2\u6570\u7684\u90a3\u4e2a\u503c\u6765\u586b\u8865\u7a7a\u7f3a\uff08\u672c\u4f8b\u4e2d\u7a7a\u7f3a\u7684\u4e3a\u5b57\u7b26\u4e32'Rosalind'\u7684\u957f\u5ea6\u503c\uff09\uff0c\u9ed8\u8ba4\u7684\u53c2\u6570\u503c\u662fNone\u3002 >>> import itertools >>> names = ['Cecilia', 'Lise', 'Marie'] >>> longest_name = None >>> max_count = 0 >>> counts = [len(n) for n in names] >>> names.append('Rosalind') >>> names ['Cecilia', 'Lise', 'Marie', 'Rosalind'] >>> counts [7, 4, 5] >>> for name, count in itertools.zip_longest(names, counts): ... print(f'{name}: {count}') ... Cecilia: 7 Lise: 4 Marie: 5 Rosalind: None \u8981\u70b9\uff1a \u5185\u7f6e\u7684zip\u51fd\u6570\u53ef\u4ee5\u540c\u65f6\u904d\u5386\u591a\u4e2a\u8fed\u4ee3\u5668\u3002 zip\u4f1a\u521b\u5efa\u60f0\u6027\u751f\u6210\u5668\uff0c\u8ba9\u5b83\u6bcf\u6b21\u53ea\u751f\u6210\u4e00\u4e2a\u5143\u7ec4\uff0c\u6240\u4ee5\u65e0\u8bba\u8f93\u5165\u7684\u6570\u636e\u6709\u591a\u957f\uff0c\u5b83\u90fd\u662f\u4e00\u4e2a\u4e00\u4e2a\u5904\u7406\u7684\u3002 \u5982\u679c\u63d0\u4f9b\u7684\u8fed\u4ee3\u5668\u7684\u957f\u5ea6\u4e0d\u4e00\u81f4\uff0c\u90a3\u4e48\u53ea\u8981\u5176\u4e2d\u4efb\u4f55\u4e00\u4e2a\u8fed\u4ee3\u5b8c\u6bd5\uff0czip\u5c31\u4f1a\u505c\u6b62\u3002 \u5982\u679c\u60f3\u6309\u6700\u957f\u7684\u90a3\u4e2a\u8fed\u4ee3\u5668\u6765\u904d\u5386\uff0c\u90a3\u5c31\u6539\u7528\u5185\u7f6e\u7684itertools\u6a21\u5757\u4e2d\u7684zip_longest\u51fd\u6570\u3002","title":"\u7b2c8\u6761\u3000\u7528zip\u51fd\u6570\u540c\u65f6\u904d\u5386\u4e24\u4e2a\u8fed\u4ee3\u5668"},{"location":"python/Pythonic90Rules/Rule09/","text":"\u7b2c9\u6761\u3000\u4e0d\u8981\u5728for\u4e0ewhile\u5faa\u73af\u540e\u9762\u5199else\u5757 Python\u7684\u5faa\u73af\u6709\u4e00\u9879\u5927\u591a\u6570\u7f16\u7a0b\u8bed\u8a00\u90fd\u4e0d\u652f\u6301\u7684\u7279\u6027\uff0c\u5373\u53ef\u4ee5\u628aelse\u5757\u7d27\u8ddf\u5728\u6574\u4e2a\u5faa\u73af\u7ed3\u6784\u7684\u540e\u9762\u3002 \u7a0b\u5e8f\u505a\u5b8c\u6574\u4e2afor\u5faa\u73af\u4e4b\u540e\uff0c\u7adf\u7136\u4f1a\u6267\u884celse\u5757\u91cc\u7684\u5185\u5bb9\u3002 >>> for i in range(3): ... print('loop', i) ... else: ... print('Else block!') ... loop 0 loop 1 loop 2 Else block! try/except/else\u7ed3\u6784\u91cc\u7684else\uff08\u53c2\u89c1Rule65\u6761\uff09\uff0c\u5b83\u7684\u610f\u601d\u662f\uff1a\u5982\u679c\u6ca1\u6709\u5f02\u5e38\u9700\u8981\u5904\u7406\uff0c\u90a3\u5c31\u6267\u884c\u8fd9\u5757\u8bed\u53e5\u3002 try/finally\u7ed3\u6784\u91cc\u7684finally\uff0c\u5b83\u7684\u610f\u601d\u662f\uff1a\u4e0d\u7ba1\u524d\u9762\u90a3\u5757\u4ee3\u7801\u6267\u884c\u5f97\u5982\u4f55\uff0c\u6700\u540e\u90fd\u8981\u6267\u884cfinally\u5757\u4ee3\u7801\u3002 for/else\u7ed3\u6784\u91cc\u9762\u7684else\uff0c\u5b83\u7684\u610f\u601d\u662f\uff1a\u5982\u679c\u5faa\u73af\u6ca1\u6709\u4ece\u5934\u5230\u5c3e\u6267\u884c\u5b8c\uff08\u4e5f\u5c31\u662f\u5faa\u73af\u63d0\u524d\u7ec8\u6b62\u4e86\uff09\uff0c\u90a3\u4e48else\u5757\u91cc\u7684\u4ee3\u7801\u662f\u4e0d\u4f1a\u6267\u884c\u7684\u3002\u5728\u5faa\u73af\u4e2d\u4f7f\u7528break\u8bed\u53e5\u5b9e\u9645\u4e0a\u4f1a\u8df3\u8fc7else\u5757\u3002 >>> for i in range(3): ... print('loop', i) ... if i == 1: ... break ... else: ... print('Else block!') ... loop 0 loop 1 \u8fd8\u6709\u4e00\u4e2a\u5947\u602a\u7684\u5730\u65b9\u662f\uff0c\u5982\u679c\u5bf9\u7a7a\u767d\u5e8f\u5217\u505afor\u5faa\u73af\uff0c\u90a3\u4e48\u7a0b\u5e8f\u7acb\u523b\u5c31\u4f1a\u6267\u884celse\u5757\u3002 >>> for x in []: ... print('Never Runs') ... else: ... print('For Else block!') ... For Else block! while\u5faa\u73af\u4e5f\u662f\u8fd9\u6837\uff0c\u5982\u679c\u9996\u6b21\u5faa\u73af\u5c31\u9047\u5230False\uff0c\u90a3\u4e48\u7a0b\u5e8f\u4e5f\u4f1a\u7acb\u523b\u8fd0\u884celse\u5757\u3002 >>> while True: ... print('Never runs') ... break ... else: ... print('While Else block!') ... Never runs >>> while False: ... print('Never runs') ... else: ... print('While Else block!') ... While Else block! Python\u628aelse\u8bbe\u8ba1\u6210\u8fd9\u6837\uff0c\u4e3b\u8981\u76ee\u7684\u662f\u5229\u7528\u5b83\u5b9e\u73b0\u641c\u7d22\u903b\u8f91\u3002 \u4f8b\u5982\u4e0b\u9762\u4ee3\u7801\uff0c\u5982\u679c\u8981\u5224\u65ad\u4e24\u4e2a\u6570\u662f\u5426\u4e92\u8d28\uff08\u4e5f\u5c31\u662f\u9664\u4e861\u4e4b\u5916\uff0c\u662f\u4e0d\u662f\u6ca1\u6709\u522b\u7684\u6570\u80fd\u591f\u540c\u65f6\u6574\u9664\u5b83\u4eec\uff09\uff0c\u5c31\u53ef\u4ee5\u7528\u8fd9\u79cd\u7ed3\u6784\u5b9e\u73b0\u3002 \u5148\u628a\u6709\u53ef\u80fd\u540c\u65f6\u6574\u9664\u5b83\u4eec\u7684\u6570\u9010\u4e2a\u8bd5\u4e00\u904d\uff0c\u5982\u679c\u5168\u90fd\u8bd5\u8fc7\u4e4b\u540e\u8fd8\u662f\u6ca1\u627e\u5230\u8fd9\u6837\u7684\u6570\uff0c \u90a3\u4e48\u5faa\u73af\u5c31\u4f1a\u4ece\u5934\u5230\u5c3e\u6267\u884c\u5b8c\uff08\u8fd9\u610f\u5473\u7740\u5faa\u73af\u6ca1\u6709\u56e0\u4e3abreak\u800c\u63d0\u524d\u8df3\u51fa\uff09\uff0c \u7136\u540e\u7a0b\u5e8f\u5c31\u4f1a\u6267\u884celse\u5757\u91cc\u7684\u4ee3\u7801\u3002 >>> for i in range(2, min(a, b) + 1): ... print('Testing', i) ... if a % i == 0 and b% i == 0: ... print('Not coprime') ... else: ... print('Coprime') ... Testing 2 Testing 3 Testing 4 Coprime \u5b9e\u9645\u5de5\u4f5c\u4e2d\uff0c\u4e0a\u8ff0\u4ee3\u7801\u4f1a\u6539\u7528\u8f85\u52a9\u51fd\u6570\u5b8c\u6210\u3002\u8fd9\u6837\u7684\u8f85\u52a9\u51fd\u6570\u6709\u4e24\u79cd\u5e38\u89c1\u7684\u5199\u6cd5\u3002 \u7b2c\u4e00\u79cd\u5199\u6cd5\u662f\uff0c\u53ea\u8981\u53d1\u73b0\u67d0\u4e2a\u6761\u4ef6\u6210\u7acb\uff0c\u5c31\u7acb\u523b\u8fd4\u56de\uff0c\u5982\u679c\u59cb\u7ec8\u90fd\u6ca1\u78b0\u5230\u8fd9\u79cd\u60c5\u51b5\uff0c\u90a3\u4e48\u5faa\u73af\u5c31\u4f1a\u5b8c\u6574\u5730\u6267\u884c\uff0c\u8ba9\u7a0b\u5e8f\u8fd4\u56de\u51fd\u6570\u672b\u5c3e\u7684\u90a3\u4e2a\u503c\u4f5c\u4e3a\u9ed8\u8ba4\u8fd4\u56de\u503c\u3002 >>> def coprime(a, b): ... for i in range(2, min(a, b) + 1): ... if a % i == 0 and b% i == 0: ... return False ... return True ... >>> assert coprime(4, 9) >>> assert not coprime(4, 9) Traceback (most recent call last): File \"<stdin>\", line 1, in <module> AssertionError >>> assert coprime(3, 6) Traceback (most recent call last): File \"<stdin>\", line 1, in <module> AssertionError >>> assert not coprime(3, 6) >>> \u7b2c\u4e8c\u79cd\u5199\u6cd5\u662f\uff0c\u7528\u53d8\u91cf\u6765\u8bb0\u5f55\u5faa\u73af\u8fc7\u7a0b\u4e2d\u6709\u6ca1\u6709\u78b0\u5230\u8fd9\u6837\u7684\u60c5\u51b5\uff0c\u5982\u679c\u6709\uff0c\u90a3\u5c31\u7528break\u63d0\u524d\u8df3\u51fa\u5faa\u73af\uff0c\u5982\u679c\u6ca1\u6709\uff0c\u5faa\u73af\u5c31\u4f1a\u5b8c\u6574\u5730\u6267\u884c\uff0c\u65e0\u8bba\u5982\u4f55\uff0c\u6700\u540e\u90fd\u8fd4\u56de\u8fd9\u4e2a\u53d8\u91cf\u7684\u503c\u3002 >>> def coprime_alternate(a, b): ... is_coprime = True ... for i in range(2, min(a, b) + 1): ... if a % i == 0 and b% i == 0: ... is_coprime = False ... break ... return is_coprime ... >>> assert coprime_alternate(4, 9) >>> assert not coprime_alternate(4, 9) Traceback (most recent call last): File \"<stdin>\", line 1, in <module> AssertionError >>> assert coprime_alternate(3, 6) Traceback (most recent call last): File \"<stdin>\", line 1, in <module> AssertionError >>> assert not coprime_alternate(3, 6) >>> \u5bf9\u4e8e\u4e0d\u719f\u6089for/else\u7ed3\u6784\u7684\u4eba\u6765\u8bf4\uff0c\u521a\u624d\u90a3\u4e24\u79cd\u5199\u6cd5\u90fd\u662f\u6bd4\u8f83\u6e05\u6670\u7684\u65b9\u6848\u3002 for/else\u6216while/else\u7ed3\u6784\u672c\u8eab\u867d\u7136\u53ef\u4ee5\u5b9e\u73b0\u67d0\u4e9b\u903b\u8f91\u8868\u8fbe\uff0c\u4f46\u5b83\u5e26\u6765\u7684\u56f0\u60d1\u5df2\u7ecf\u76d6\u8fc7\u4e86\u5b83\u7684\u597d\u5904\uff0c\u4f1a\u8ba9\u4ee3\u7801\u4ea7\u751f\u6b67\u4e49\u3002\u6240\u4ee5\uff0c\u8bf7\u4e0d\u8981\u8fd9\u4e48\u5199\u3002 \u8981\u70b9\uff1a * Python\u6709\u79cd\u7279\u6b8a\u7684\u8bed\u6cd5\uff0c\u53ef\u4ee5\u628aelse\u5757\u7d27\u8ddf\u5728\u6574\u4e2afor\u5faa\u73af\u6216while\u5faa\u73af\u7684\u540e\u9762\u3002 * \u53ea\u6709\u5728\u6574\u4e2a\u5faa\u73af\u6ca1\u6709\u56e0\u4e3abreak\u63d0\u524d\u8df3\u51fa\u7684\u60c5\u51b5\u4e0b\uff0celse\u5757\u624d\u4f1a\u6267\u884c\u3002 * \u628aelse\u5757\u7d27\u8ddf\u5728\u6574\u4e2a\u5faa\u73af\u540e\u9762\uff0c\u4f1a\u8ba9\u4eba\u4e0d\u592a\u5bb9\u6613\u770b\u51fa\u8fd9\u6bb5\u4ee3\u7801\u7684\u610f\u601d\uff0c\u6240\u4ee5\u8981\u907f\u514d\u8fd9\u6837\u5199\u3002","title":"\u7b2c9\u6761\u3000\u4e0d\u8981\u5728for\u4e0ewhile\u5faa\u73af\u540e\u9762\u5199else\u5757"},{"location":"python/Pythonic90Rules/Rule09/#9-forwhileelse","text":"Python\u7684\u5faa\u73af\u6709\u4e00\u9879\u5927\u591a\u6570\u7f16\u7a0b\u8bed\u8a00\u90fd\u4e0d\u652f\u6301\u7684\u7279\u6027\uff0c\u5373\u53ef\u4ee5\u628aelse\u5757\u7d27\u8ddf\u5728\u6574\u4e2a\u5faa\u73af\u7ed3\u6784\u7684\u540e\u9762\u3002 \u7a0b\u5e8f\u505a\u5b8c\u6574\u4e2afor\u5faa\u73af\u4e4b\u540e\uff0c\u7adf\u7136\u4f1a\u6267\u884celse\u5757\u91cc\u7684\u5185\u5bb9\u3002 >>> for i in range(3): ... print('loop', i) ... else: ... print('Else block!') ... loop 0 loop 1 loop 2 Else block! try/except/else\u7ed3\u6784\u91cc\u7684else\uff08\u53c2\u89c1Rule65\u6761\uff09\uff0c\u5b83\u7684\u610f\u601d\u662f\uff1a\u5982\u679c\u6ca1\u6709\u5f02\u5e38\u9700\u8981\u5904\u7406\uff0c\u90a3\u5c31\u6267\u884c\u8fd9\u5757\u8bed\u53e5\u3002 try/finally\u7ed3\u6784\u91cc\u7684finally\uff0c\u5b83\u7684\u610f\u601d\u662f\uff1a\u4e0d\u7ba1\u524d\u9762\u90a3\u5757\u4ee3\u7801\u6267\u884c\u5f97\u5982\u4f55\uff0c\u6700\u540e\u90fd\u8981\u6267\u884cfinally\u5757\u4ee3\u7801\u3002 for/else\u7ed3\u6784\u91cc\u9762\u7684else\uff0c\u5b83\u7684\u610f\u601d\u662f\uff1a\u5982\u679c\u5faa\u73af\u6ca1\u6709\u4ece\u5934\u5230\u5c3e\u6267\u884c\u5b8c\uff08\u4e5f\u5c31\u662f\u5faa\u73af\u63d0\u524d\u7ec8\u6b62\u4e86\uff09\uff0c\u90a3\u4e48else\u5757\u91cc\u7684\u4ee3\u7801\u662f\u4e0d\u4f1a\u6267\u884c\u7684\u3002\u5728\u5faa\u73af\u4e2d\u4f7f\u7528break\u8bed\u53e5\u5b9e\u9645\u4e0a\u4f1a\u8df3\u8fc7else\u5757\u3002 >>> for i in range(3): ... print('loop', i) ... if i == 1: ... break ... else: ... print('Else block!') ... loop 0 loop 1 \u8fd8\u6709\u4e00\u4e2a\u5947\u602a\u7684\u5730\u65b9\u662f\uff0c\u5982\u679c\u5bf9\u7a7a\u767d\u5e8f\u5217\u505afor\u5faa\u73af\uff0c\u90a3\u4e48\u7a0b\u5e8f\u7acb\u523b\u5c31\u4f1a\u6267\u884celse\u5757\u3002 >>> for x in []: ... print('Never Runs') ... else: ... print('For Else block!') ... For Else block! while\u5faa\u73af\u4e5f\u662f\u8fd9\u6837\uff0c\u5982\u679c\u9996\u6b21\u5faa\u73af\u5c31\u9047\u5230False\uff0c\u90a3\u4e48\u7a0b\u5e8f\u4e5f\u4f1a\u7acb\u523b\u8fd0\u884celse\u5757\u3002 >>> while True: ... print('Never runs') ... break ... else: ... print('While Else block!') ... Never runs >>> while False: ... print('Never runs') ... else: ... print('While Else block!') ... While Else block! Python\u628aelse\u8bbe\u8ba1\u6210\u8fd9\u6837\uff0c\u4e3b\u8981\u76ee\u7684\u662f\u5229\u7528\u5b83\u5b9e\u73b0\u641c\u7d22\u903b\u8f91\u3002 \u4f8b\u5982\u4e0b\u9762\u4ee3\u7801\uff0c\u5982\u679c\u8981\u5224\u65ad\u4e24\u4e2a\u6570\u662f\u5426\u4e92\u8d28\uff08\u4e5f\u5c31\u662f\u9664\u4e861\u4e4b\u5916\uff0c\u662f\u4e0d\u662f\u6ca1\u6709\u522b\u7684\u6570\u80fd\u591f\u540c\u65f6\u6574\u9664\u5b83\u4eec\uff09\uff0c\u5c31\u53ef\u4ee5\u7528\u8fd9\u79cd\u7ed3\u6784\u5b9e\u73b0\u3002 \u5148\u628a\u6709\u53ef\u80fd\u540c\u65f6\u6574\u9664\u5b83\u4eec\u7684\u6570\u9010\u4e2a\u8bd5\u4e00\u904d\uff0c\u5982\u679c\u5168\u90fd\u8bd5\u8fc7\u4e4b\u540e\u8fd8\u662f\u6ca1\u627e\u5230\u8fd9\u6837\u7684\u6570\uff0c \u90a3\u4e48\u5faa\u73af\u5c31\u4f1a\u4ece\u5934\u5230\u5c3e\u6267\u884c\u5b8c\uff08\u8fd9\u610f\u5473\u7740\u5faa\u73af\u6ca1\u6709\u56e0\u4e3abreak\u800c\u63d0\u524d\u8df3\u51fa\uff09\uff0c \u7136\u540e\u7a0b\u5e8f\u5c31\u4f1a\u6267\u884celse\u5757\u91cc\u7684\u4ee3\u7801\u3002 >>> for i in range(2, min(a, b) + 1): ... print('Testing', i) ... if a % i == 0 and b% i == 0: ... print('Not coprime') ... else: ... print('Coprime') ... Testing 2 Testing 3 Testing 4 Coprime \u5b9e\u9645\u5de5\u4f5c\u4e2d\uff0c\u4e0a\u8ff0\u4ee3\u7801\u4f1a\u6539\u7528\u8f85\u52a9\u51fd\u6570\u5b8c\u6210\u3002\u8fd9\u6837\u7684\u8f85\u52a9\u51fd\u6570\u6709\u4e24\u79cd\u5e38\u89c1\u7684\u5199\u6cd5\u3002 \u7b2c\u4e00\u79cd\u5199\u6cd5\u662f\uff0c\u53ea\u8981\u53d1\u73b0\u67d0\u4e2a\u6761\u4ef6\u6210\u7acb\uff0c\u5c31\u7acb\u523b\u8fd4\u56de\uff0c\u5982\u679c\u59cb\u7ec8\u90fd\u6ca1\u78b0\u5230\u8fd9\u79cd\u60c5\u51b5\uff0c\u90a3\u4e48\u5faa\u73af\u5c31\u4f1a\u5b8c\u6574\u5730\u6267\u884c\uff0c\u8ba9\u7a0b\u5e8f\u8fd4\u56de\u51fd\u6570\u672b\u5c3e\u7684\u90a3\u4e2a\u503c\u4f5c\u4e3a\u9ed8\u8ba4\u8fd4\u56de\u503c\u3002 >>> def coprime(a, b): ... for i in range(2, min(a, b) + 1): ... if a % i == 0 and b% i == 0: ... return False ... return True ... >>> assert coprime(4, 9) >>> assert not coprime(4, 9) Traceback (most recent call last): File \"<stdin>\", line 1, in <module> AssertionError >>> assert coprime(3, 6) Traceback (most recent call last): File \"<stdin>\", line 1, in <module> AssertionError >>> assert not coprime(3, 6) >>> \u7b2c\u4e8c\u79cd\u5199\u6cd5\u662f\uff0c\u7528\u53d8\u91cf\u6765\u8bb0\u5f55\u5faa\u73af\u8fc7\u7a0b\u4e2d\u6709\u6ca1\u6709\u78b0\u5230\u8fd9\u6837\u7684\u60c5\u51b5\uff0c\u5982\u679c\u6709\uff0c\u90a3\u5c31\u7528break\u63d0\u524d\u8df3\u51fa\u5faa\u73af\uff0c\u5982\u679c\u6ca1\u6709\uff0c\u5faa\u73af\u5c31\u4f1a\u5b8c\u6574\u5730\u6267\u884c\uff0c\u65e0\u8bba\u5982\u4f55\uff0c\u6700\u540e\u90fd\u8fd4\u56de\u8fd9\u4e2a\u53d8\u91cf\u7684\u503c\u3002 >>> def coprime_alternate(a, b): ... is_coprime = True ... for i in range(2, min(a, b) + 1): ... if a % i == 0 and b% i == 0: ... is_coprime = False ... break ... return is_coprime ... >>> assert coprime_alternate(4, 9) >>> assert not coprime_alternate(4, 9) Traceback (most recent call last): File \"<stdin>\", line 1, in <module> AssertionError >>> assert coprime_alternate(3, 6) Traceback (most recent call last): File \"<stdin>\", line 1, in <module> AssertionError >>> assert not coprime_alternate(3, 6) >>> \u5bf9\u4e8e\u4e0d\u719f\u6089for/else\u7ed3\u6784\u7684\u4eba\u6765\u8bf4\uff0c\u521a\u624d\u90a3\u4e24\u79cd\u5199\u6cd5\u90fd\u662f\u6bd4\u8f83\u6e05\u6670\u7684\u65b9\u6848\u3002 for/else\u6216while/else\u7ed3\u6784\u672c\u8eab\u867d\u7136\u53ef\u4ee5\u5b9e\u73b0\u67d0\u4e9b\u903b\u8f91\u8868\u8fbe\uff0c\u4f46\u5b83\u5e26\u6765\u7684\u56f0\u60d1\u5df2\u7ecf\u76d6\u8fc7\u4e86\u5b83\u7684\u597d\u5904\uff0c\u4f1a\u8ba9\u4ee3\u7801\u4ea7\u751f\u6b67\u4e49\u3002\u6240\u4ee5\uff0c\u8bf7\u4e0d\u8981\u8fd9\u4e48\u5199\u3002 \u8981\u70b9\uff1a * Python\u6709\u79cd\u7279\u6b8a\u7684\u8bed\u6cd5\uff0c\u53ef\u4ee5\u628aelse\u5757\u7d27\u8ddf\u5728\u6574\u4e2afor\u5faa\u73af\u6216while\u5faa\u73af\u7684\u540e\u9762\u3002 * \u53ea\u6709\u5728\u6574\u4e2a\u5faa\u73af\u6ca1\u6709\u56e0\u4e3abreak\u63d0\u524d\u8df3\u51fa\u7684\u60c5\u51b5\u4e0b\uff0celse\u5757\u624d\u4f1a\u6267\u884c\u3002 * \u628aelse\u5757\u7d27\u8ddf\u5728\u6574\u4e2a\u5faa\u73af\u540e\u9762\uff0c\u4f1a\u8ba9\u4eba\u4e0d\u592a\u5bb9\u6613\u770b\u51fa\u8fd9\u6bb5\u4ee3\u7801\u7684\u610f\u601d\uff0c\u6240\u4ee5\u8981\u907f\u514d\u8fd9\u6837\u5199\u3002","title":"\u7b2c9\u6761\u3000\u4e0d\u8981\u5728for\u4e0ewhile\u5faa\u73af\u540e\u9762\u5199else\u5757"},{"location":"python/Pythonic90Rules/Rule10/","text":"\u7b2c10\u6761\u3000\u7528\u8d4b\u503c\u8868\u8fbe\u5f0f\u51cf\u5c11\u91cd\u590d\u4ee3\u7801 \u8d4b\u503c\u8868\u8fbe\u5f0f\uff08assignment expression\uff09\u662fPython 3.8\u65b0\u5f15\u5165\u7684\u8bed\u6cd5\uff0c\u5b83\u4f1a\u7528\u5230\u6d77\u8c61\u64cd\u4f5c\u7b26\uff08walrusoperator\uff09\u3002 a = b\u662f\u666e\u901a\u7684\u8d4b\u503c\u8bed\u53e5\uff0c\u8bfb\u4f5ca equals b\uff0c\u800ca := b\u5219\u662f\u8d4b\u503c\u8868\u8fbe\u5f0f\uff0c\u8bfb\u4f5ca walrus b\u3002 \u8fd9\u4e2a\u7b26\u53f7\u4e3a\u4ec0\u4e48\u53ebwalrus\u5462\uff1f\u56e0\u4e3a\u628a:=\u987a\u65f6\u9488\u65cb\u8f6c90\u00ba\u4e4b\u540e\uff0c\u5192\u53f7\u5c31\u662f\u6d77\u8c61\u7684\u4e00\u53cc\u773c\u775b\uff0c\u7b49\u53f7\u5c31\u662f\u5b83\u7684\u4e00\u5bf9\u7360\u7259\u3002 \u5728Python\u91cc\u9762\u7ecf\u5e38\u8981\u5148\u83b7\u53d6\u67d0\u4e2a\u503c\uff0c\u7136\u540e\u5224\u65ad\u5b83\u662f\u5426\u975e\u96f6\uff0c\u5982\u679c\u662f\u5c31\u6267\u884c\u67d0\u6bb5\u4ee3\u7801\u3002 fresh_fruit = { 'apple': 10, 'banana': 8, 'lemon': 5 } count = fresh_fruit.get('lemon', 0) if count: print('Stock:', count) else: print('Out of Stock') Result: Stock: 5 \u4e0a\u9762\u7684\u4ee3\u7801\u6539\u7528\u6d77\u8c61\u64cd\u4f5c\u7b26\u6765\u5199\uff1a fresh_fruit = { 'apple': 10, 'banana': 8, 'lemon': 5 } if count := fresh_fruit.get('lemon', 0): print('Stock:', count) else: print('Out of Stock') Result: Stock: 5 \u65b0\u4ee3\u7801\u867d\u7136\u53ea\u7701\u4e86\u4e00\u884c\uff0c\u4f46\u8bfb\u8d77\u6765\u5374\u6e05\u6670\u5f88\u591a\uff0c\u56e0\u4e3a\u8fd9\u79cd\u5199\u6cd5\u660e\u786e\u4f53\u73b0\u51facount\u53d8\u91cf\u53ea\u4e0eif\u5757\u6709\u5173\u3002 \u8fd9\u4e2a\u8d4b\u503c\u8868\u8fbe\u5f0f\u5148\u628a:=\u53f3\u8fb9\u7684\u503c\u8d4b\u7ed9\u5de6\u8fb9\u7684count\u53d8\u91cf\uff0c\u7136\u540e\u5bf9\u81ea\u8eab\u6c42\u503c\uff0c\u4e5f\u5c31\u662f\u628a\u53d8\u91cf\u7684\u503c\u5f53\u6210\u6574\u4e2a\u8868\u8fbe\u5f0f\u7684\u503c\u3002 \u7531\u4e8e\u8868\u8fbe\u5f0f\u7d27\u8ddf\u7740if\uff0c\u7a0b\u5e8f\u4f1a\u6839\u636e\u5b83\u7684\u503c\u662f\u5426\u975e\u96f6\u6765\u51b3\u5b9a\u8be5\u4e0d\u8be5\u6267\u884cif\u5757\u3002 \u8fd9\u79cd\u5148\u8d4b\u503c\u518d\u5224\u65ad\u7684\u505a\u6cd5\uff0c\u6b63\u662f\u6d77\u8c61\u64cd\u4f5c\u7b26\u60f3\u8981\u8868\u8fbe\u7684\u610f\u601d\u3002 \u4e0b\u9762\u7684\u4f8b\u5b50\u628a\u8d4b\u503c\u8868\u8fbe\u5f0f\u653e\u5728\u4e00\u5bf9\u62ec\u53f7\u91cc\u9762\u7684\uff0c\u56e0\u4e3a\u6211\u4eec\u8981\u5728if\u8bed\u53e5\u91cc\u9762\u628a\u8fd9\u4e2a\u8868\u8fbe\u5f0f\u7684\u7ed3\u679c\u8ddf4\u8fd9\u4e2a\u503c\u76f8\u6bd4\u8f83\u3002\u800c\u4e14\uff0c\u901a\u8fc7\u4f7f\u7528\u6d77\u8c61\u64cd\u4f5c\u7b26\u628a\u5b9a\u4e49pieces\u653e\u5728if/else\u5206\u652f\u5185\uff0c\u4e5f\u80fd\u8ba9\u4ee3\u7801\u53d8\u5f97\u6e05\u6670 fresh_fruit = { 'apple': 10, 'banana': 8, 'lemon': 5 } pieces = 0 if (count := fresh_fruit.get('apple', 2)) > 4: pieces = count print('Stock:', count) else: pieces = 0 print('Out of Stock') \u4f7f\u7528\u6d77\u8c61\u64cd\u4f5c\u7b26\u7ed3\u6784\u5b9e\u73b0switch/case\u7ed3\u6784\u3002 fresh_fruit = { 'apple': 10, 'banana': 8, 'lemon': 5 } pieces = 0 if (count := fresh_fruit.get('apple', 2)) > 10: pieces = count elif (count := fresh_fruit.get('banana', 2)) > 8: pieces = count elif (count := fresh_fruit.get('lemon', 2)) > 3: pieces = count else: pieces = 0 print(pieces) Result: 5 \u8981\u70b9\uff1a * \u8d4b\u503c\u8868\u8fbe\u5f0f\u901a\u8fc7\u6d77\u8c61\u64cd\u4f5c\u7b26\uff08:=\uff09\u7ed9\u53d8\u91cf\u8d4b\u503c\uff0c\u5e76\u4e14\u8ba9\u8fd9\u4e2a\u503c\u6210\u4e3a\u8fd9\u6761\u8868\u8fbe\u5f0f\u7684\u7ed3\u679c\uff0c\u4e8e\u662f\uff0c\u6211\u4eec\u53ef\u4ee5\u5229\u7528\u8fd9\u9879\u7279\u6027\u6765\u7f29\u51cf\u4ee3\u7801\u3002 * \u5982\u679c\u8d4b\u503c\u8868\u8fbe\u5f0f\u662f\u5927\u8868\u8fbe\u5f0f\u91cc\u7684\u4e00\u90e8\u5206\uff0c\u5c31\u5f97\u7528\u4e00\u5bf9\u62ec\u53f7\u628a\u5b83\u62ec\u8d77\u6765\u3002 * \u867d\u8bf4Python\u4e0d\u652f\u6301switch/case\u4e0edo/while\u7ed3\u6784\uff0c\u4f46\u53ef\u4ee5\u5229\u7528\u8d4b\u503c\u8868\u8fbe\u5f0f\u6e05\u6670\u5730\u6a21\u62df\u51fa\u8fd9\u79cd\u903b\u8f91\u3002 \u8865\u5145\uff1aPEP572: \u6d77\u8c61\u8fd0\u7b97\u7b26 \u7528\u4e8e if-else \u6761\u4ef6\u8868\u8fbe\u5f0f \u4e00\u822c\u5199\u6cd5\uff1a a = 15 if a > 10: print('hello, it''s walrus') \u6d77\u8c61\u8fd0\u7b97\u7b26\uff1a if a := 15 > 10: print('hello, it''s walrus') \u7528\u4e8e while \u5faa\u73af \u5e38\u89c4\u5199\u6cd5\uff1a n = 5 while n: print('hello walrus: ', n) n = n - 1 Result: hello walrus: 4 hello walrus: 3 hello walrus: 2 hello walrus: 1 hello walrus: 0 \u6d77\u8c61\u5199\u6cd5\uff1a n = 5 while (n := n - 1) + 1: print('hello walrus: ', n) Result: hello walrus: 4 hello walrus: 3 hello walrus: 2 hello walrus: 1 hello walrus: 0 \u5bc6\u7801\u6821\u9a8c\u5e38\u89c4\u5199\u6cd5\uff1a while True: psw = input('input password: ') if psw == '123': break \u5bc6\u7801\u6821\u9a8c\u6d77\u8c61\u5199\u6cd5\uff1a while (psw := input('input password: ')) != '123': continue \u7528\u4e8e\u5217\u8868\u63a8\u5bfc\u5f0f \u8ba1\u7b97\u5143\u7d20\u5e73\u65b9\u6839\uff0c\u5e76\u4fdd\u7559\u5e73\u65b9\u6839\u5927\u4e8e 5 \u7684\u503c\uff1a \u5e38\u89c4\u5199\u6cd5\uff1a(\u6ce8\u610f\uff0c\u6267\u884c\u4e867\u6b21\uff0c\u6ee1\u8db3\u6761\u4ef6\u76843\u4e2a\u6570\u5b57\u6267\u884c\u4e86\u4e24\u904d\uff0c\u7b2c\u4e00\u6b21\u6267\u884cfor\u540e\u9762\u7684if f(i) > 5\uff0c\u7b2c\u4e8c\u6b21\u6267\u884cfor\u524d\u9762\u7684f(i))\u3002 nums = [16, 36, 49, 64] def f(x): print('run f(x) 1 time: ', x) return x ** 0.5 print([f(i) for i in nums if f(i) > 5]) Result: run f(x) 1 time: 16 run f(x) 1 time: 36 run f(x) 1 time: 36 run f(x) 1 time: 49 run f(x) 1 time: 49 run f(x) 1 time: 64 run f(x) 1 time: 64 [6.0, 7.0, 8.0] \u6d77\u8c61\u5199\u6cd5\uff1a\uff08\u51fd\u6570\u53ea\u6267\u884c\u4e864\u6b21\uff0c\u6027\u80fd\u4f18\u4e8e\u4f20\u7edf\u5199\u6cd5\uff09 nums = [16, 36, 49, 64] def f(x): print('run f(x) 1 time: ', x) return x ** 0.5 print([n for i in nums if(n := f(i)) > 5]) Result: run f(x) 1 time: 16 run f(x) 1 time: 36 run f(x) 1 time: 49 run f(x) 1 time: 64 [6.0, 7.0, 8.0]","title":"\u7b2c10\u6761\u3000\u7528\u8d4b\u503c\u8868\u8fbe\u5f0f\u51cf\u5c11\u91cd\u590d\u4ee3\u7801"},{"location":"python/Pythonic90Rules/Rule10/#10","text":"\u8d4b\u503c\u8868\u8fbe\u5f0f\uff08assignment expression\uff09\u662fPython 3.8\u65b0\u5f15\u5165\u7684\u8bed\u6cd5\uff0c\u5b83\u4f1a\u7528\u5230\u6d77\u8c61\u64cd\u4f5c\u7b26\uff08walrusoperator\uff09\u3002 a = b\u662f\u666e\u901a\u7684\u8d4b\u503c\u8bed\u53e5\uff0c\u8bfb\u4f5ca equals b\uff0c\u800ca := b\u5219\u662f\u8d4b\u503c\u8868\u8fbe\u5f0f\uff0c\u8bfb\u4f5ca walrus b\u3002 \u8fd9\u4e2a\u7b26\u53f7\u4e3a\u4ec0\u4e48\u53ebwalrus\u5462\uff1f\u56e0\u4e3a\u628a:=\u987a\u65f6\u9488\u65cb\u8f6c90\u00ba\u4e4b\u540e\uff0c\u5192\u53f7\u5c31\u662f\u6d77\u8c61\u7684\u4e00\u53cc\u773c\u775b\uff0c\u7b49\u53f7\u5c31\u662f\u5b83\u7684\u4e00\u5bf9\u7360\u7259\u3002 \u5728Python\u91cc\u9762\u7ecf\u5e38\u8981\u5148\u83b7\u53d6\u67d0\u4e2a\u503c\uff0c\u7136\u540e\u5224\u65ad\u5b83\u662f\u5426\u975e\u96f6\uff0c\u5982\u679c\u662f\u5c31\u6267\u884c\u67d0\u6bb5\u4ee3\u7801\u3002 fresh_fruit = { 'apple': 10, 'banana': 8, 'lemon': 5 } count = fresh_fruit.get('lemon', 0) if count: print('Stock:', count) else: print('Out of Stock') Result: Stock: 5 \u4e0a\u9762\u7684\u4ee3\u7801\u6539\u7528\u6d77\u8c61\u64cd\u4f5c\u7b26\u6765\u5199\uff1a fresh_fruit = { 'apple': 10, 'banana': 8, 'lemon': 5 } if count := fresh_fruit.get('lemon', 0): print('Stock:', count) else: print('Out of Stock') Result: Stock: 5 \u65b0\u4ee3\u7801\u867d\u7136\u53ea\u7701\u4e86\u4e00\u884c\uff0c\u4f46\u8bfb\u8d77\u6765\u5374\u6e05\u6670\u5f88\u591a\uff0c\u56e0\u4e3a\u8fd9\u79cd\u5199\u6cd5\u660e\u786e\u4f53\u73b0\u51facount\u53d8\u91cf\u53ea\u4e0eif\u5757\u6709\u5173\u3002 \u8fd9\u4e2a\u8d4b\u503c\u8868\u8fbe\u5f0f\u5148\u628a:=\u53f3\u8fb9\u7684\u503c\u8d4b\u7ed9\u5de6\u8fb9\u7684count\u53d8\u91cf\uff0c\u7136\u540e\u5bf9\u81ea\u8eab\u6c42\u503c\uff0c\u4e5f\u5c31\u662f\u628a\u53d8\u91cf\u7684\u503c\u5f53\u6210\u6574\u4e2a\u8868\u8fbe\u5f0f\u7684\u503c\u3002 \u7531\u4e8e\u8868\u8fbe\u5f0f\u7d27\u8ddf\u7740if\uff0c\u7a0b\u5e8f\u4f1a\u6839\u636e\u5b83\u7684\u503c\u662f\u5426\u975e\u96f6\u6765\u51b3\u5b9a\u8be5\u4e0d\u8be5\u6267\u884cif\u5757\u3002 \u8fd9\u79cd\u5148\u8d4b\u503c\u518d\u5224\u65ad\u7684\u505a\u6cd5\uff0c\u6b63\u662f\u6d77\u8c61\u64cd\u4f5c\u7b26\u60f3\u8981\u8868\u8fbe\u7684\u610f\u601d\u3002 \u4e0b\u9762\u7684\u4f8b\u5b50\u628a\u8d4b\u503c\u8868\u8fbe\u5f0f\u653e\u5728\u4e00\u5bf9\u62ec\u53f7\u91cc\u9762\u7684\uff0c\u56e0\u4e3a\u6211\u4eec\u8981\u5728if\u8bed\u53e5\u91cc\u9762\u628a\u8fd9\u4e2a\u8868\u8fbe\u5f0f\u7684\u7ed3\u679c\u8ddf4\u8fd9\u4e2a\u503c\u76f8\u6bd4\u8f83\u3002\u800c\u4e14\uff0c\u901a\u8fc7\u4f7f\u7528\u6d77\u8c61\u64cd\u4f5c\u7b26\u628a\u5b9a\u4e49pieces\u653e\u5728if/else\u5206\u652f\u5185\uff0c\u4e5f\u80fd\u8ba9\u4ee3\u7801\u53d8\u5f97\u6e05\u6670 fresh_fruit = { 'apple': 10, 'banana': 8, 'lemon': 5 } pieces = 0 if (count := fresh_fruit.get('apple', 2)) > 4: pieces = count print('Stock:', count) else: pieces = 0 print('Out of Stock') \u4f7f\u7528\u6d77\u8c61\u64cd\u4f5c\u7b26\u7ed3\u6784\u5b9e\u73b0switch/case\u7ed3\u6784\u3002 fresh_fruit = { 'apple': 10, 'banana': 8, 'lemon': 5 } pieces = 0 if (count := fresh_fruit.get('apple', 2)) > 10: pieces = count elif (count := fresh_fruit.get('banana', 2)) > 8: pieces = count elif (count := fresh_fruit.get('lemon', 2)) > 3: pieces = count else: pieces = 0 print(pieces) Result: 5 \u8981\u70b9\uff1a * \u8d4b\u503c\u8868\u8fbe\u5f0f\u901a\u8fc7\u6d77\u8c61\u64cd\u4f5c\u7b26\uff08:=\uff09\u7ed9\u53d8\u91cf\u8d4b\u503c\uff0c\u5e76\u4e14\u8ba9\u8fd9\u4e2a\u503c\u6210\u4e3a\u8fd9\u6761\u8868\u8fbe\u5f0f\u7684\u7ed3\u679c\uff0c\u4e8e\u662f\uff0c\u6211\u4eec\u53ef\u4ee5\u5229\u7528\u8fd9\u9879\u7279\u6027\u6765\u7f29\u51cf\u4ee3\u7801\u3002 * \u5982\u679c\u8d4b\u503c\u8868\u8fbe\u5f0f\u662f\u5927\u8868\u8fbe\u5f0f\u91cc\u7684\u4e00\u90e8\u5206\uff0c\u5c31\u5f97\u7528\u4e00\u5bf9\u62ec\u53f7\u628a\u5b83\u62ec\u8d77\u6765\u3002 * \u867d\u8bf4Python\u4e0d\u652f\u6301switch/case\u4e0edo/while\u7ed3\u6784\uff0c\u4f46\u53ef\u4ee5\u5229\u7528\u8d4b\u503c\u8868\u8fbe\u5f0f\u6e05\u6670\u5730\u6a21\u62df\u51fa\u8fd9\u79cd\u903b\u8f91\u3002","title":"\u7b2c10\u6761\u3000\u7528\u8d4b\u503c\u8868\u8fbe\u5f0f\u51cf\u5c11\u91cd\u590d\u4ee3\u7801"},{"location":"python/Pythonic90Rules/Rule10/#pep572","text":"","title":"\u8865\u5145\uff1aPEP572: \u6d77\u8c61\u8fd0\u7b97\u7b26"},{"location":"python/Pythonic90Rules/Rule10/#if-else","text":"\u4e00\u822c\u5199\u6cd5\uff1a a = 15 if a > 10: print('hello, it''s walrus') \u6d77\u8c61\u8fd0\u7b97\u7b26\uff1a if a := 15 > 10: print('hello, it''s walrus')","title":"\u7528\u4e8e if-else \u6761\u4ef6\u8868\u8fbe\u5f0f"},{"location":"python/Pythonic90Rules/Rule10/#while","text":"\u5e38\u89c4\u5199\u6cd5\uff1a n = 5 while n: print('hello walrus: ', n) n = n - 1 Result: hello walrus: 4 hello walrus: 3 hello walrus: 2 hello walrus: 1 hello walrus: 0 \u6d77\u8c61\u5199\u6cd5\uff1a n = 5 while (n := n - 1) + 1: print('hello walrus: ', n) Result: hello walrus: 4 hello walrus: 3 hello walrus: 2 hello walrus: 1 hello walrus: 0 \u5bc6\u7801\u6821\u9a8c\u5e38\u89c4\u5199\u6cd5\uff1a while True: psw = input('input password: ') if psw == '123': break \u5bc6\u7801\u6821\u9a8c\u6d77\u8c61\u5199\u6cd5\uff1a while (psw := input('input password: ')) != '123': continue","title":"\u7528\u4e8e while \u5faa\u73af"},{"location":"python/Pythonic90Rules/Rule10/#_1","text":"\u8ba1\u7b97\u5143\u7d20\u5e73\u65b9\u6839\uff0c\u5e76\u4fdd\u7559\u5e73\u65b9\u6839\u5927\u4e8e 5 \u7684\u503c\uff1a \u5e38\u89c4\u5199\u6cd5\uff1a(\u6ce8\u610f\uff0c\u6267\u884c\u4e867\u6b21\uff0c\u6ee1\u8db3\u6761\u4ef6\u76843\u4e2a\u6570\u5b57\u6267\u884c\u4e86\u4e24\u904d\uff0c\u7b2c\u4e00\u6b21\u6267\u884cfor\u540e\u9762\u7684if f(i) > 5\uff0c\u7b2c\u4e8c\u6b21\u6267\u884cfor\u524d\u9762\u7684f(i))\u3002 nums = [16, 36, 49, 64] def f(x): print('run f(x) 1 time: ', x) return x ** 0.5 print([f(i) for i in nums if f(i) > 5]) Result: run f(x) 1 time: 16 run f(x) 1 time: 36 run f(x) 1 time: 36 run f(x) 1 time: 49 run f(x) 1 time: 49 run f(x) 1 time: 64 run f(x) 1 time: 64 [6.0, 7.0, 8.0] \u6d77\u8c61\u5199\u6cd5\uff1a\uff08\u51fd\u6570\u53ea\u6267\u884c\u4e864\u6b21\uff0c\u6027\u80fd\u4f18\u4e8e\u4f20\u7edf\u5199\u6cd5\uff09 nums = [16, 36, 49, 64] def f(x): print('run f(x) 1 time: ', x) return x ** 0.5 print([n for i in nums if(n := f(i)) > 5]) Result: run f(x) 1 time: 16 run f(x) 1 time: 36 run f(x) 1 time: 49 run f(x) 1 time: 64 [6.0, 7.0, 8.0]","title":"\u7528\u4e8e\u5217\u8868\u63a8\u5bfc\u5f0f"},{"location":"python/Pythonic90Rules/Rule11/","text":"\u7b2c11\u6761\u3000\u5b66\u4f1a\u5bf9\u5e8f\u5217\u505a\u5207\u7247 Python\u5f00\u53d1\u8005\u6700\u559c\u6b22\u7528\u5217\u8868\uff08list\uff09\u7c7b\u578b\u6765\u5904\u7406\u4e00\u4e9b\u81ea\u52a8\u5904\u7406\u7684\u4efb\u52a1\uff0c\u628a\u6bcf\u9879\u4efb\u52a1\u90fd\u5f53\u6210\u5217\u8868\u4e2d\u7684\u4e00\u4e2a\u5143\u7d20\u3002 \u6709\u4e86\u5217\u8868\uff0c\u81ea\u7136\u5c31\u6709\u8ddf\u5b83\u4e92\u8865\u7684\u7ed3\u6784\uff0c\u4e5f\u5c31\u662f\u5b57\u5178\uff08dict\uff09\uff0c\u8fd9\u79cd\u7ed3\u6784\u53ef\u4ee5\u628a\u67e5\u8be2\u6240\u7528\u7684\u952e\u4e0e\u76f8\u5173\u7684\u503c\u5bf9\u5e94\u8d77\u6765\uff08\u6240\u4ee5\u4e5f\u53eb\u5173\u952e\u77e9\u9635\uff08associative array\uff09\u6216\u54c8\u5e0c\u8868\uff08hash table\uff09\uff09\u3002 \u5bf9\u4e8e\u5b57\u5178\u6765\u8bf4\uff0c\u8bbf\u95ee\u4e0e\u8d4b\u503c\u6240\u82b1\u7684\u65f6\u95f4\u5e73\u5747\u4e0b\u6765\u662f\u4e2a\u5e38\u91cf\uff0c\u6240\u4ee5\u8fd9\u79cd\u7ed3\u6784\u5f88\u9002\u5408\u4fdd\u5b58\u52a8\u6001\u7684\u4fe1\u606f\u3002","title":"\u7b2c11\u6761\u3000\u5b66\u4f1a\u5bf9\u5e8f\u5217\u505a\u5207\u7247"},{"location":"python/Pythonic90Rules/Rule11/#11","text":"Python\u5f00\u53d1\u8005\u6700\u559c\u6b22\u7528\u5217\u8868\uff08list\uff09\u7c7b\u578b\u6765\u5904\u7406\u4e00\u4e9b\u81ea\u52a8\u5904\u7406\u7684\u4efb\u52a1\uff0c\u628a\u6bcf\u9879\u4efb\u52a1\u90fd\u5f53\u6210\u5217\u8868\u4e2d\u7684\u4e00\u4e2a\u5143\u7d20\u3002 \u6709\u4e86\u5217\u8868\uff0c\u81ea\u7136\u5c31\u6709\u8ddf\u5b83\u4e92\u8865\u7684\u7ed3\u6784\uff0c\u4e5f\u5c31\u662f\u5b57\u5178\uff08dict\uff09\uff0c\u8fd9\u79cd\u7ed3\u6784\u53ef\u4ee5\u628a\u67e5\u8be2\u6240\u7528\u7684\u952e\u4e0e\u76f8\u5173\u7684\u503c\u5bf9\u5e94\u8d77\u6765\uff08\u6240\u4ee5\u4e5f\u53eb\u5173\u952e\u77e9\u9635\uff08associative array\uff09\u6216\u54c8\u5e0c\u8868\uff08hash table\uff09\uff09\u3002 \u5bf9\u4e8e\u5b57\u5178\u6765\u8bf4\uff0c\u8bbf\u95ee\u4e0e\u8d4b\u503c\u6240\u82b1\u7684\u65f6\u95f4\u5e73\u5747\u4e0b\u6765\u662f\u4e2a\u5e38\u91cf\uff0c\u6240\u4ee5\u8fd9\u79cd\u7ed3\u6784\u5f88\u9002\u5408\u4fdd\u5b58\u52a8\u6001\u7684\u4fe1\u606f\u3002","title":"\u7b2c11\u6761\u3000\u5b66\u4f1a\u5bf9\u5e8f\u5217\u505a\u5207\u7247"},{"location":"python/Pythonic90Rules/Rule12/","text":"","title":"Rule12"},{"location":"python/Pythonic90Rules/Rule13/","text":"","title":"Rule13"},{"location":"python/Pythonic90Rules/Rule14/","text":"","title":"Rule14"},{"location":"python/Pythonic90Rules/Rule15/","text":"","title":"Rule15"},{"location":"python/Pythonic90Rules/Rule16/","text":"","title":"Rule16"},{"location":"python/Pythonic90Rules/Rule17/","text":"","title":"Rule17"},{"location":"python/Pythonic90Rules/Rule18/","text":"","title":"Rule18"},{"location":"python/Pythonic90Rules/Rule19/","text":"","title":"Rule19"},{"location":"python/Pythonic90Rules/Rule20/","text":"","title":"Rule20"},{"location":"python/Pythonic90Rules/Rule21/","text":"","title":"Rule21"},{"location":"python/Pythonic90Rules/Rule22/","text":"","title":"Rule22"},{"location":"python/Pythonic90Rules/Rule23/","text":"","title":"Rule23"},{"location":"python/Pythonic90Rules/Rule24/","text":"","title":"Rule24"},{"location":"python/Pythonic90Rules/Rule25/","text":"","title":"Rule25"},{"location":"python/Pythonic90Rules/Rule26/","text":"","title":"Rule26"},{"location":"python/Pythonic90Rules/Rule27/","text":"","title":"Rule27"},{"location":"python/Pythonic90Rules/Rule28/","text":"","title":"Rule28"},{"location":"python/Pythonic90Rules/Rule29/","text":"","title":"Rule29"},{"location":"python/Pythonic90Rules/Rule30/","text":"","title":"Rule30"},{"location":"python/Pythonic90Rules/Rule31/","text":"","title":"Rule31"},{"location":"python/Pythonic90Rules/Rule32/","text":"","title":"Rule32"},{"location":"python/Pythonic90Rules/Rule33/","text":"","title":"Rule33"},{"location":"python/Pythonic90Rules/Rule34/","text":"","title":"Rule34"},{"location":"python/Pythonic90Rules/Rule35/","text":"","title":"Rule35"},{"location":"python/Pythonic90Rules/Rule36/","text":"","title":"Rule36"},{"location":"python/Pythonic90Rules/Rule37/","text":"","title":"Rule37"},{"location":"python/Pythonic90Rules/Rule38/","text":"","title":"Rule38"},{"location":"python/Pythonic90Rules/Rule39/","text":"","title":"Rule39"},{"location":"python/Pythonic90Rules/Rule40/","text":"","title":"Rule40"},{"location":"python/Pythonic90Rules/Rule41/","text":"","title":"Rule41"},{"location":"python/Pythonic90Rules/Rule42/","text":"","title":"Rule42"},{"location":"python/Pythonic90Rules/Rule43/","text":"","title":"Rule43"},{"location":"python/Pythonic90Rules/Rule44/","text":"","title":"Rule44"},{"location":"python/Pythonic90Rules/Rule45/","text":"","title":"Rule45"},{"location":"python/Pythonic90Rules/Rule46/","text":"","title":"Rule46"},{"location":"python/Pythonic90Rules/Rule47/","text":"","title":"Rule47"},{"location":"python/Pythonic90Rules/Rule48/","text":"","title":"Rule48"},{"location":"python/Pythonic90Rules/Rule49/","text":"","title":"Rule49"},{"location":"python/Pythonic90Rules/Rule50/","text":"","title":"Rule50"},{"location":"python/Pythonic90Rules/Rule51/","text":"","title":"Rule51"},{"location":"python/Pythonic90Rules/Rule52/","text":"","title":"Rule52"},{"location":"python/Pythonic90Rules/Rule53/","text":"","title":"Rule53"},{"location":"python/Pythonic90Rules/Rule54/","text":"","title":"Rule54"},{"location":"python/Pythonic90Rules/Rule55/","text":"","title":"Rule55"},{"location":"python/Pythonic90Rules/Rule56/","text":"","title":"Rule56"},{"location":"python/Pythonic90Rules/Rule57/","text":"","title":"Rule57"},{"location":"python/Pythonic90Rules/Rule58/","text":"","title":"Rule58"},{"location":"python/Pythonic90Rules/Rule59/","text":"","title":"Rule59"},{"location":"python/Pythonic90Rules/Rule60/","text":"","title":"Rule60"},{"location":"python/Pythonic90Rules/Rule61/","text":"","title":"Rule61"},{"location":"python/Pythonic90Rules/Rule62/","text":"","title":"Rule62"},{"location":"python/Pythonic90Rules/Rule63/","text":"","title":"Rule63"},{"location":"python/Pythonic90Rules/Rule64/","text":"","title":"Rule64"},{"location":"python/Pythonic90Rules/Rule65/","text":"","title":"Rule65"},{"location":"python/Pythonic90Rules/Rule66/","text":"","title":"Rule66"},{"location":"python/Pythonic90Rules/Rule67/","text":"","title":"Rule67"},{"location":"python/Pythonic90Rules/Rule68/","text":"","title":"Rule68"},{"location":"python/Pythonic90Rules/Rule69/","text":"","title":"Rule69"},{"location":"python/Pythonic90Rules/Rule70/","text":"","title":"Rule70"},{"location":"python/Pythonic90Rules/Rule71/","text":"","title":"Rule71"},{"location":"python/Pythonic90Rules/Rule72/","text":"","title":"Rule72"},{"location":"python/Pythonic90Rules/Rule73/","text":"","title":"Rule73"},{"location":"python/Pythonic90Rules/Rule74/","text":"","title":"Rule74"},{"location":"python/Pythonic90Rules/Rule75/","text":"","title":"Rule75"},{"location":"python/Pythonic90Rules/Rule76/","text":"","title":"Rule76"},{"location":"python/Pythonic90Rules/Rule77/","text":"","title":"Rule77"},{"location":"python/Pythonic90Rules/Rule78/","text":"","title":"Rule78"},{"location":"python/Pythonic90Rules/Rule79/","text":"","title":"Rule79"},{"location":"python/Pythonic90Rules/Rule80/","text":"","title":"Rule80"},{"location":"python/Pythonic90Rules/Rule81/","text":"","title":"Rule81"},{"location":"python/Pythonic90Rules/Rule82/","text":"","title":"Rule82"},{"location":"python/Pythonic90Rules/Rule83/","text":"","title":"Rule83"},{"location":"python/Pythonic90Rules/Rule84/","text":"","title":"Rule84"},{"location":"python/Pythonic90Rules/Rule85/","text":"","title":"Rule85"},{"location":"python/Pythonic90Rules/Rule86/","text":"","title":"Rule86"},{"location":"python/Pythonic90Rules/Rule87/","text":"","title":"Rule87"},{"location":"python/Pythonic90Rules/Rule88/","text":"","title":"Rule88"},{"location":"python/Pythonic90Rules/Rule89/","text":"","title":"Rule89"},{"location":"python/Pythonic90Rules/Rule90/","text":"","title":"Rule90"},{"location":"python/Pythonic90Rules/Rule91/","text":"","title":"Rule91"},{"location":"python/Pythonic90Rules/Rule92/","text":"","title":"Rule92"},{"location":"python/Pythonic90Rules/Rule93/","text":"","title":"Rule93"},{"location":"python/Pythonic90Rules/Rule94/","text":"","title":"Rule94"},{"location":"python/Pythonic90Rules/Rule95/","text":"","title":"Rule95"},{"location":"python/Pythonic90Rules/Rule96/","text":"","title":"Rule96"},{"location":"python/Pythonic90Rules/Rule97/","text":"","title":"Rule97"},{"location":"python/Pythonic90Rules/Rule98/","text":"","title":"Rule98"},{"location":"python/Pythonic90Rules/Rule99/","text":"","title":"Rule99"},{"location":"python/Pythonic90Rules/python_90rule_index/","text":"Effective Python\uff1a\u7f16\u5199\u9ad8\u8d28\u91cfPython\u4ee3\u7801\u768490\u4e2a\u6709\u6548\u65b9\u6cd5\uff08\u539f\u4e66\u7b2c2\u7248\uff09 Effective Python: 90 Specific Ways to Write Better Python, Second Edition Git: https://github.com/bslatkin/effectivepython \u7b2c1\u7ae0\uff1a\u57f9\u517bPythonic\u601d\u7ef4 \u7b2c1\u6761 \u67e5\u8be2\u81ea\u5df1\u4f7f\u7528\u7684Python\u7248\u672c \u7b2c2\u6761 \u9075\u5faaPEP 8\u98ce\u683c\u6307\u5357 \u7b2c3\u6761 \u4e86\u89e3bytes\u4e0estr\u7684\u533a\u522b \u7b2c4\u6761 \u7528\u652f\u6301\u63d2\u503c\u7684f-string\u53d6\u4ee3C\u98ce\u683c\u7684\u683c\u5f0f\u5b57\u7b26\u4e32\u4e0estr.format\u65b9\u6cd5 \u7b2c5\u6761 \u7528\u8f85\u52a9\u51fd\u6570\u53d6\u4ee3\u590d\u6742\u7684\u8868\u8fbe\u5f0f \u7b2c6\u6761 \u628a\u6570\u636e\u7ed3\u6784\u76f4\u63a5\u62c6\u5206\u5230\u591a\u4e2a\u53d8\u91cf\u91cc\uff0c\u4e0d\u8981\u4e13\u95e8\u901a\u8fc7\u4e0b\u6807\u8bbf\u95ee \u7b2c7\u6761 \u5c3d\u91cf\u7528enumerate\u53d6\u4ee3range \u7b2c8\u6761 \u7528zip\u51fd\u6570\u540c\u65f6\u904d\u5386\u4e24\u4e2a\u8fed\u4ee3\u5668 \u7b2c9\u6761 \u4e0d\u8981\u5728for\u4e0ewhile\u5faa\u73af\u540e\u9762\u5199else\u5757 \u7b2c10\u6761 \u7528\u8d4b\u503c\u8868\u8fbe\u5f0f\u51cf\u5c11\u91cd\u590d\u4ee3\u7801 \u7b2c2\u7ae0\uff1a\u5217\u8868\u4e0e\u5b57\u5178 \u7b2c11\u6761 \u5b66\u4f1a\u5bf9\u5e8f\u5217\u505a\u5207\u7247 \u7b2c3\u7ae0\uff1a\u51fd\u6570 \u7b2c4\u7ae0\uff1a\u63a8\u5bfc\u4e0e\u751f\u6210 \u7b2c5\u7ae0\uff1a\u7c7b\u4e0e\u63a5\u53e3 \u7b2c6\u7ae0\uff1a\u5143\u7c7b\u4e0e\u5c5e\u6027 \u7b2c7\u7ae0\uff1a\u5e76\u53d1\u4e0e\u5e76\u884c \u7b2c8\u7ae0\uff1a\u7a33\u5b9a\u4e0e\u6027\u80fd \u7b2c9\u7ae0\uff1a\u6d4b\u8bd5\u4e0e\u8c03\u8bd5 \u7b2c10\u7ae0\uff1a\u534f\u4f5c\u5f00\u53d1","title":"Effective Python\uff1a\u7f16\u5199\u9ad8\u8d28\u91cfPython\u4ee3\u7801\u768490\u4e2a\u6709\u6548\u65b9\u6cd5\uff08\u539f\u4e66\u7b2c2\u7248\uff09"},{"location":"python/Pythonic90Rules/python_90rule_index/#effective-pythonpython902","text":"Effective Python: 90 Specific Ways to Write Better Python, Second Edition Git: https://github.com/bslatkin/effectivepython","title":"Effective Python\uff1a\u7f16\u5199\u9ad8\u8d28\u91cfPython\u4ee3\u7801\u768490\u4e2a\u6709\u6548\u65b9\u6cd5\uff08\u539f\u4e66\u7b2c2\u7248\uff09"},{"location":"python/Pythonic90Rules/python_90rule_index/#1pythonic","text":"\u7b2c1\u6761 \u67e5\u8be2\u81ea\u5df1\u4f7f\u7528\u7684Python\u7248\u672c \u7b2c2\u6761 \u9075\u5faaPEP 8\u98ce\u683c\u6307\u5357 \u7b2c3\u6761 \u4e86\u89e3bytes\u4e0estr\u7684\u533a\u522b \u7b2c4\u6761 \u7528\u652f\u6301\u63d2\u503c\u7684f-string\u53d6\u4ee3C\u98ce\u683c\u7684\u683c\u5f0f\u5b57\u7b26\u4e32\u4e0estr.format\u65b9\u6cd5 \u7b2c5\u6761 \u7528\u8f85\u52a9\u51fd\u6570\u53d6\u4ee3\u590d\u6742\u7684\u8868\u8fbe\u5f0f \u7b2c6\u6761 \u628a\u6570\u636e\u7ed3\u6784\u76f4\u63a5\u62c6\u5206\u5230\u591a\u4e2a\u53d8\u91cf\u91cc\uff0c\u4e0d\u8981\u4e13\u95e8\u901a\u8fc7\u4e0b\u6807\u8bbf\u95ee \u7b2c7\u6761 \u5c3d\u91cf\u7528enumerate\u53d6\u4ee3range \u7b2c8\u6761 \u7528zip\u51fd\u6570\u540c\u65f6\u904d\u5386\u4e24\u4e2a\u8fed\u4ee3\u5668 \u7b2c9\u6761 \u4e0d\u8981\u5728for\u4e0ewhile\u5faa\u73af\u540e\u9762\u5199else\u5757 \u7b2c10\u6761 \u7528\u8d4b\u503c\u8868\u8fbe\u5f0f\u51cf\u5c11\u91cd\u590d\u4ee3\u7801","title":"\u7b2c1\u7ae0\uff1a\u57f9\u517bPythonic\u601d\u7ef4"},{"location":"python/Pythonic90Rules/python_90rule_index/#2","text":"\u7b2c11\u6761 \u5b66\u4f1a\u5bf9\u5e8f\u5217\u505a\u5207\u7247","title":"\u7b2c2\u7ae0\uff1a\u5217\u8868\u4e0e\u5b57\u5178"},{"location":"python/Pythonic90Rules/python_90rule_index/#3","text":"","title":"\u7b2c3\u7ae0\uff1a\u51fd\u6570"},{"location":"python/Pythonic90Rules/python_90rule_index/#4","text":"","title":"\u7b2c4\u7ae0\uff1a\u63a8\u5bfc\u4e0e\u751f\u6210"},{"location":"python/Pythonic90Rules/python_90rule_index/#5","text":"","title":"\u7b2c5\u7ae0\uff1a\u7c7b\u4e0e\u63a5\u53e3"},{"location":"python/Pythonic90Rules/python_90rule_index/#6","text":"","title":"\u7b2c6\u7ae0\uff1a\u5143\u7c7b\u4e0e\u5c5e\u6027"},{"location":"python/Pythonic90Rules/python_90rule_index/#7","text":"","title":"\u7b2c7\u7ae0\uff1a\u5e76\u53d1\u4e0e\u5e76\u884c"},{"location":"python/Pythonic90Rules/python_90rule_index/#8","text":"","title":"\u7b2c8\u7ae0\uff1a\u7a33\u5b9a\u4e0e\u6027\u80fd"},{"location":"python/Pythonic90Rules/python_90rule_index/#9","text":"","title":"\u7b2c9\u7ae0\uff1a\u6d4b\u8bd5\u4e0e\u8c03\u8bd5"},{"location":"python/Pythonic90Rules/python_90rule_index/#10","text":"","title":"\u7b2c10\u7ae0\uff1a\u534f\u4f5c\u5f00\u53d1"}]}